import * as fs from 'fs';
import * as path from 'path';

/**
 * Define an interface for objects that (like the WebDriver instance) can take screen shots
 */
interface ScreenshotTaker {
  takeScreenshot(): Promise<string>;
}

/**
 * The ScreenshotManager interface
 */
interface ScreenshotManager {
  /**
   * This function will set screenshot location based on test suite name and test name
   * @param suiteName test case's suite name
   * @param testName test case's name
   */
  beforeTest(suiteName: string, testName: string): void;

  /**
   * This function will do cleanup after test execution. It will puerge screenshot for passed test and generate final state
   * screenshot for failed test
   * @param passed boolean to check test state
   */
  afterTest(passed: boolean): void;

  /**
   * This function will take screenshot and save it on the file system
   * @param screenshotTaker an screenshotTaker instance
   * @param name screenshot image name
   * @return a promise
   * @example await screenshotManager.takeAndSaveScreenShot(driver, "before_click");
   */
  takeAndSaveScreenShot(screenshotTaker: ScreenshotTaker, name: string): Promise<void>;
}

/**
 * This implementation of ScreenshotManager Interface will not take any screenshot
 */
class NoOpScreenShotManager implements ScreenshotManager {
  beforeTest(): void {}
  afterTest(): void {}
  takeAndSaveScreenShot(): Promise<void> {
    return Promise.resolve();
  }
}

/**
 * This implementation of ScreenshotManager Interface will take screenshot
 */
class TakeScreenshotManager implements ScreenshotManager {
  private _screenshotLocation: string = '';
  private _screenshotsDir: string;

  /**
   * This function will replace all invalid characters with underscore
   * @param name string test name may having some invalid characters
   * @private
   */
  private replaceCharacters(name: string): string {
    var output = name.replace(/[^a-z0-9]/gi, '_');
    return output;
  }

  /**
   * This constructor will set screenshot root directory on the file system, like <report-root>/screenshots
   * @param screenshotRoot screenshot root directory
   */
  constructor(screenshotRoot: string) {
    var mochawesomeReportDir = screenshotRoot;
    try {
      if (!fs.existsSync(mochawesomeReportDir)) fs.mkdirSync(mochawesomeReportDir);
    } catch (err) {
      console.error(err);
    }
    this._screenshotsDir = mochawesomeReportDir + path.sep + 'screenshots';
    try {
      if (!fs.existsSync(this._screenshotsDir)) fs.mkdirSync(this._screenshotsDir);
    } catch (err) {
      console.error(err);
    }
  }

  /**
   * This function will set screenshot location based on test suite name and test name
   * @param suiteName test case's suite name
   * @param testName test case's name
   */
  beforeTest(suiteName: string, testName: string): void {
    var suiteN = this.replaceCharacters(suiteName);
    var testN = this.replaceCharacters(testName);
    var suiteF = this._screenshotsDir + path.sep + suiteN;
    var testF = suiteF + path.sep + testN;
    this._screenshotLocation = testF;

    try {
      if (!fs.existsSync(suiteF)) fs.mkdirSync(suiteF);
    } catch (err) {
      console.error(err);
    }
    try {
      if (!fs.existsSync(testF)) fs.mkdirSync(testF);
    } catch (err) {
      console.error(err);
    }
  }

  /**
   * This function will do cleanup after test execution. It will puerge screenshot for passed test and will generate final state
   * screenshot for failed test
   * @param passed boolean to check test state
   */
  afterTest(passed: boolean): void {
    if (passed) {
      try {
        var FOLDER_PATH = this._screenshotLocation;
        if (fs.existsSync(FOLDER_PATH)) {
          var files = fs.readdirSync(FOLDER_PATH);
          files.forEach((element) => {
            fs.unlinkSync(FOLDER_PATH + path.sep + element);
          });
          fs.rmdirSync(FOLDER_PATH);
        }
      } catch (err) {
        console.error(err);
      }
    }
  }

  /**
   * This function will take screenshot and save it on the file system
   * @param screenshotTaker a screenshotTaker instance
   * @param name screeshot image name
   */
  async takeAndSaveScreenShot(screenshotTaker: ScreenshotTaker, name: string): Promise<void> {
    var counter = 1;
    var FOLDER_PATH = this._screenshotLocation;
    if (fs.existsSync(FOLDER_PATH)) {
      var files = fs.readdirSync(FOLDER_PATH);
      files.forEach((element) => {
        if (element.includes(name)) counter++;
      });
    }
    try {
      const screenshotImg = await screenshotTaker.takeScreenshot();
      fs.writeFileSync(
        this._screenshotLocation + path.sep + name + counter + '.jpg',
        screenshotImg,
        'base64'
      );
    } catch (err) {
      console.error(err);
    }

    return Promise.resolve();
  }
}

//Below are the top-level methods of the ScreenshotManager module

var currentInstance: ScreenshotManager = new NoOpScreenShotManager();

/**
 * This function will create an instance ScreenshotManager
 * @param screenshotRoot screenshot root location
 */
export function create(screenshotRoot: string): ScreenshotManager {
  if (screenshotRoot) {
    return new TakeScreenshotManager(screenshotRoot);
  } else {
    return new NoOpScreenShotManager();
  }
}

/**
 * This function will get an active ScreenshotManager instance
 * @return an active ScreenshotManager instance
 */
export function get(): ScreenshotManager {
  return currentInstance;
}

/**
 * This function will set an active ScreenshotManager instance
 * @param screenshotManager an active ScreenshotManager instance
 */
export function set(screenshotManager: ScreenshotManager): void {
  currentInstance = screenshotManager;
}
