import { WebDriver, error } from 'selenium-webdriver';

/**
 * Get open busy state descriptions from the page context
 * @private
 * @param driver
 * @returns an array of strings of busy state descriptions
 */
export const getBusyStates = (driver: WebDriver): Promise<string> => {
  return driver
    .executeScript<string[]>(
      `
return require('ojs/ojcontext').getPageContext().getBusyContext().getBusyStates()
.map((state) => state.description)
`
    )
    .catch((ex) => ex.message);
};

/**
 * Returns a Promise that is resolved when the application's busy
 * state reports ready or the page is not a JET page (RequireJS
 * or ojs/ojcontext module not available).
 * @private
 * @param driver WebDriver instance
 * @return A Promise which is resolved to true when the
 * page's busy state is ready or to false when it is not a JET page.
 */
export const whenBusyContextReady = async (driver: WebDriver): Promise<boolean> => {
  const remoteScript = `
      const done = arguments[0];
      function waitOn(Context) {
        if (Context) {
          Context.getPageContext().getBusyContext()
          .whenReady().then(() => done())
          .catch(ex => done(ex.message))
        } else {
          notFound();
        }
      }
      function notFound() {
        done('ojs/ojcontext module not found')
      }
      if (typeof require === 'function') {
        let Context;
        // Try sync require first
        try {
          Context = require('ojs/ojcontext');
        } catch (ex) {
          require(['ojs/ojcontext'], waitOn, notFound);
          return;
        }
        waitOn(Context);
      } else {
        done('RequireJS not found')
      }
    `;
  const ret = await driver.executeAsyncScript(remoteScript).catch(async (ex) => {
    if (ex instanceof error.TimeoutError || ex instanceof error.ScriptTimeoutError) {
      const openStates = await getBusyStates(driver);
      throw Error(`BusyContext.whenReady() timed out: ${ex.message}\nBusy states: ${openStates}`);
    } else {
      // unexpected error which is just reported as a warning below
      return ex.message;
    }
  });
  if (ret) {
    // If error during require call, log warning
    console.warn(`Cannot wait on BusyContext: ${ret}`);
    // return false - not a JET page
    return false;
  }
  // return true - a JET page
  return true;
};
