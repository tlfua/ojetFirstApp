/*
 * Set of utilities common to input component test adapters
 */

import { By, Key } from 'selenium-webdriver';
import { OjWebElement } from '../elements';

const fieldLocator = By.css('.oj-text-field-input');

/**
 * This method should only be called by test adapter classes for input components
 * which support text input, such as oj-input-text, oj-input-date, etc.
 * Mixin a "changeValue" function to the given class to perform a value change
 * on the component.
 *
 * NOTE: The changeValue method will focus on the component's .oj-text-field-input
 * and call sendKeys to send the value through the component UI. To trigger the
 * value update and validation, this method also calls validate() on the component
 * directly.
 * We don't want to send Tab because that can cause other model updates in the
 * component is embedded within another container which is listening on blur to
 * update its values, such as oj-dynamic-form.
 * We also don't want to send Enter as that can cause containers listening on
 * key events to submit/navigate/etc when Enter is received on any of the fields,
 * such as a field in oj-dialog which closes the dialog when user presses Enter.
 *
 * @param clazz The class to be modified
 * @param inputLocator An optional Locator which identifies the input element to
 * be interacted with. This locator should be relative to the component root, and
 * should be able to receive focus in the DOM. If not specified, the root of the
 * component is assumed to be the focusable element.
 * @private
 */
export function mixinChangeValue(clazz: typeof OjWebElement) {
  Object.defineProperty(clazz.prototype, 'changeValue', {
    value: async function (value: string) {
      const driver = this.getDriver();
      // Clearing the input and sending it keystrokes must occur in one step
      // since some components may react to the clearing by restoring a default
      // value before the new value can be set.
      // Find <input> to receive keystrokes
      const input = (await this.findElement(fieldLocator)) as OjWebElement;
      const disabled = await input.getProperty<boolean>('disabled');
      const readOnly = await input.getProperty<boolean>('readOnly');
      if (disabled || readOnly) {
        return;
      }

      // Note that using clear() sends an update event because WebDriver will
      // blur the field, so send BACKSPACE keys to clear field instead.
      // Clearing the value is done in a loop in case the field's focus is stolen
      let currValue = await input.getProperty('value');
      while (currValue) {
        const backspaces = new Array(currValue.length + 1).join(Key.BACK_SPACE);
        // firstly move cursor to the end, then backspaces
        await input.sendKeys([Key.END, backspaces].join(''));
        currValue = await input.getProperty('value');
      }
      await input.sendKeys(value);

      return driver.executeAsyncScript(
        `
        let el = arguments[0];
        let done = arguments[1];
        if (typeof el.validate === 'function') {
          el.validate().then(done).catch(done);
        } else {
          done();
        }
      `,
        this
      );
    },
    writable: true
  });
}

/**
 * Apply the clear() functionality for input-based test adapters to call
 * changeValue('')
 * @param clazz The OjWebElement to receive the new clear() method
 */
export function mixinClear(clazz: typeof OjWebElement) {
  Object.defineProperty(clazz.prototype, 'clear', {
    value: function () {
      return this.changeValue('');
    }
  });
}
