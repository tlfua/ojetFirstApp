"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjTreemapBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-treemap WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTreemap.ts.
 */
class OjTreemapBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationDuration</code> property.
     * Specifies the animation duration in milliseconds. For data change animations with multiple stages, the value specifies the duration of each stage.
     * @return The value of <code>animationDuration</code> property.
     *
     */
    getAnimationDuration() {
        return this.getProperty('animationDuration');
    }
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Specifies the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Specifies the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>animationUpdateColor</code> property.
     * Specifies the color displayed during a data change animation when a node is updated.
     * @return The value of <code>animationUpdateColor</code> property.
     *
     */
    getAnimationUpdateColor() {
        return this.getProperty('animationUpdateColor');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>colorLabel</code> property.
     * Specifies the label displayed in the legend describing the color metric of the treemap.
     * @return The value of <code>colorLabel</code> property.
     *
     */
    getColorLabel() {
        return this.getProperty('colorLabel');
    }
    /**
     * Gets the value of <code>displayLevels</code> property.
     * The number of levels of nodes to display. By default all nodes are displayed.
     * @return The value of <code>displayLevels</code> property.
     *
     */
    getDisplayLevels() {
        return this.getProperty('displayLevels');
    }
    /**
     * Gets the value of <code>drilling</code> property.
     * Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire ojBeforeDrill and ojDrill events on click (double click if selection is enabled). See the Help documentation for more information.
     * @return The value of <code>drilling</code> property.
     *
     */
    getDrilling() {
        return this.getProperty('drilling');
    }
    /**
     * Gets the value of <code>groupGaps</code> property.
     * Specifies whether gaps are displayed between groups. Gaps can be useful for drawing attention to the differences between groups.
     * @return The value of <code>groupGaps</code> property.
     *
     */
    getGroupGaps() {
        return this.getProperty('groupGaps');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>highlightMatch</code> property.
     * The matching condition for the highlightedCategories property. See the Help documentation for more information.
     * @return The value of <code>highlightMatch</code> property.
     *
     */
    getHighlightMatch() {
        return this.getProperty('highlightMatch');
    }
    /**
     * Gets the value of <code>highlightMode</code> property.
     * Specifies whether the highlight-mode should be by category or descendants.
     * @return The value of <code>highlightMode</code> property.
     *
     */
    getHighlightMode() {
        return this.getProperty('highlightMode');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over the nodes.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>hoverBehaviorDelay</code> property.
     * Specifies initial hover delay in milliseconds for highlighting nodes.
     * @return The value of <code>hoverBehaviorDelay</code> property.
     *
     */
    getHoverBehaviorDelay() {
        return this.getProperty('hoverBehaviorDelay');
    }
    /**
     * Sets the value of <code>isolatedNode</code> property.
     * The id of the initially isolated node.
     * @param isolatedNode The value to set for <code>isolatedNode</code>
     *
     */
    changeIsolatedNode(isolatedNode) {
        return this.setProperty('isolatedNode', isolatedNode);
    }
    /**
     * Gets the value of <code>isolatedNode</code> property.
     * The id of the initially isolated node.
     * @return The value of <code>isolatedNode</code> property.
     *
     */
    getIsolatedNode() {
        return this.getProperty('isolatedNode');
    }
    /**
     * Gets the value of <code>layout</code> property.
     * Specifies the layout of the treemap. See the Help documentation for more information.
     * @return The value of <code>layout</code> property.
     *
     */
    getLayout() {
        return this.getProperty('layout');
    }
    /**
     * Gets the value of <code>nodeContent</code> property.
     * An object defining custom node content for the treemap. Only leaf nodes with no child nodes will have the custom content rendered.
     * @return The value of <code>nodeContent</code> property.
     *
     */
    getNodeContent() {
        return this.getProperty('nodeContent');
    }
    /**
     * Gets the value of <code>nodeDefaults</code> property.
     * An object defining default properties for the nodes. See the Help documentation for more information.
     * @return The value of <code>nodeDefaults</code> property.
     *
     */
    getNodeDefaults() {
        return this.getProperty('nodeDefaults');
    }
    /**
     * Gets the value of <code>nodeSeparators</code> property.
     * Specifies the visual effect for separating the nodes from each other. This allows for adjacent nodes of the same color to be distinguished.
     * @return The value of <code>nodeSeparators</code> property.
     *
     */
    getNodeSeparators() {
        return this.getProperty('nodeSeparators');
    }
    /**
     * Gets the value of <code>nodes</code> property.
     * An array of objects defining the data for the nodes. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>nodes</code> property.
     *
     */
    getNodes() {
        return this.getProperty('nodes');
    }
    /**
     * Gets the value of <code>rootNode</code> property.
     * The id of the root node. When specified, only the root node and children of the root will be displayed.
     * @return The value of <code>rootNode</code> property.
     *
     */
    getRootNode() {
        return this.getProperty('rootNode');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array containing the ids of the initially selected nodes.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array containing the ids of the initially selected nodes.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection behavior on the treemap. See the Help documentation for more information.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>sizeLabel</code> property.
     * Specifies the label used in the legend describing the size metric of the treemap.
     * @return The value of <code>sizeLabel</code> property.
     *
     */
    getSizeLabel() {
        return this.getProperty('sizeLabel');
    }
    /**
     * Gets the value of <code>sorting</code> property.
     * Specifies whether the nodes are sorted by size. Nodes with the same parent are sorted in order of descending size.
     * @return The value of <code>sorting</code> property.
     *
     */
    getSorting() {
        return this.getProperty('sorting');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>touchResponse</code> property.
     * Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.
     * @return The value of <code>touchResponse</code> property.
     *
     */
    getTouchResponse() {
        return this.getProperty('touchResponse');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjTreemapBase = OjTreemapBase;
//# sourceMappingURL=OjTreemapBase.js.map