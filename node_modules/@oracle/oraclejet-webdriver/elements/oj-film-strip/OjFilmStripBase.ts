import { OjWebElement } from '../';

/**
 * This is the base class for oj-film-strip WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjFilmStrip.ts.
 */
export class OjFilmStripBase extends OjWebElement {
  /**
   * Gets the value of <code>arrowPlacement</code> property.
   * Specifies the placement of the navigation arrows.
   * @return The value of <code>arrowPlacement</code> property.
   *
   */
  public getArrowPlacement(): Promise<string> {
    return this.getProperty<string>('arrowPlacement');
  }

  /**
   * Gets the value of <code>arrowVisibility</code> property.
   * Specifies the visibility of the navigation arrows.
   * @return The value of <code>arrowVisibility</code> property.
   *
   */
  public getArrowVisibility(): Promise<string> {
    return this.getProperty<string>('arrowVisibility');
  }

  /**
   * Sets the value of <code>currentItem</code> property.
   * Specifies the child item whose logical page should be displayed.
   * @param currentItem The value to set for <code>currentItem</code>
   *
   */
  public changeCurrentItem(currentItem: CurrentItem): Promise<void> {
    return this.setProperty<CurrentItem>('currentItem', currentItem);
  }

  /**
   * Gets the value of <code>currentItem</code> property.
   * Specifies the child item whose logical page should be displayed.
   * @return The value of <code>currentItem</code> property.
   *
   */
  public getCurrentItem(): Promise<CurrentItem> {
    return this.getProperty<CurrentItem>('currentItem');
  }

  /**
   * Gets the value of <code>looping</code> property.
   * Specifies the navigation looping behavior
   * @return The value of <code>looping</code> property.
   *
   */
  public getLooping(): Promise<string> {
    return this.getProperty<string>('looping');
  }

  /**
   * Gets the value of <code>maxItemsPerPage</code> property.
   * Specifies the maximum number of child items shown in a logical page.
   * @return The value of <code>maxItemsPerPage</code> property.
   *
   */
  public getMaxItemsPerPage(): Promise<number> {
    return this.getProperty<number>('maxItemsPerPage');
  }

  /**
   * Gets the value of <code>orientation</code> property.
   * Specifies the orientation of the FilmStrip.
   * @return The value of <code>orientation</code> property.
   *
   */
  public getOrientation(): Promise<string> {
    return this.getProperty<string>('orientation');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface CurrentItem {
  /**
   * string id of the item
   */
  id: string;
  /**
   * numeric 0-based index of the item
   */
  index: number;
}
export interface Translations {
  /**
   * Accessible label for the next page navigation arrow.
   */
  labelAccArrowNextPage: string;
  /**
   * Accessible label for the previous page navigation arrow.
   */
  labelAccArrowPreviousPage: string;
  /**
   * Accessible page information label for the filmstrip element.
   */
  labelAccFilmStrip: string;
  /**
   * Tooltip for the next page navigation arrow.
   */
  tipArrowNextPage: string;
  /**
   * Tooltip for the previous page navigation arrow.
   */
  tipArrowPreviousPage: string;
}
