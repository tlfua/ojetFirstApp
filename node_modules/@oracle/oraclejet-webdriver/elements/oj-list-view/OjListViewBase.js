"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjListViewBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-list-view WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjListView.ts.
 */
class OjListViewBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>as</code> property.
     * Specifies the alias for the current item when referenced inside the item template.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Sets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @param currentItem The value to set for <code>currentItem</code>
     *
     */
    changeCurrentItem(currentItem) {
        return this.setProperty('currentItem', currentItem);
    }
    /**
     * Gets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @return The value of <code>currentItem</code> property.
     *
     */
    getCurrentItem() {
        return this.getProperty('currentItem');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies how the items should be displayed.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Customizes the drag and drop functionality. See the Help documentation for more information.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>drillMode</code> property.
     * Specifies whether expand or collapse operations are allowed.
     * @return The value of <code>drillMode</code> property.
     *
     */
    getDrillMode() {
        return this.getProperty('drillMode');
    }
    /**
     * Gets the value of <code>firstSelectedItem</code> property.
     * Specifies the key and data of the first selected item. See the Help documentation for more information.
     * @return The value of <code>firstSelectedItem</code> property.
     *
     */
    getFirstSelectedItem() {
        return this.getProperty('firstSelectedItem');
    }
    /**
     * Gets the value of <code>gridlines</code> property.
     * Customizes the functionality of how gridlines are shown in various parts of the list.
     * @return The value of <code>gridlines</code> property.
     *
     */
    getGridlines() {
        return this.getProperty('gridlines');
    }
    /**
     * Gets the value of <code>groupHeaderPosition</code> property.
     * Specifies whether group header should stick to the top as user scrolls.
     * @return The value of <code>groupHeaderPosition</code> property.
     *
     */
    getGroupHeaderPosition() {
        return this.getProperty('groupHeaderPosition');
    }
    /**
     * Gets the value of <code>item</code> property.
     * Customizes the functionality of each item on the list.
     * @return The value of <code>item</code> property.
     *
     */
    getItem() {
        return this.getProperty('item');
    }
    /**
     * Gets the value of <code>scrollPolicy</code> property.
     * Specifies how data are fetched as user scrolls down the list.
     * @return The value of <code>scrollPolicy</code> property.
     *
     */
    getScrollPolicy() {
        return this.getProperty('scrollPolicy');
    }
    /**
     * Gets the value of <code>scrollPolicyOptions</code> property.
     * Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.
     * @return The value of <code>scrollPolicyOptions</code> property.
     *
     */
    getScrollPolicyOptions() {
        return this.getProperty('scrollPolicyOptions');
    }
    /**
     * Sets the value of <code>scrollPosition</code> property.
     * Specifies the current scroll position of the list. See the Help documentation for more information.
     * @param scrollPosition The value to set for <code>scrollPosition</code>
     *
     */
    changeScrollPosition(scrollPosition) {
        return this.setProperty('scrollPosition', scrollPosition);
    }
    /**
     * Gets the value of <code>scrollPosition</code> property.
     * Specifies the current scroll position of the list. See the Help documentation for more information.
     * @return The value of <code>scrollPosition</code> property.
     *
     */
    getScrollPosition() {
        return this.getProperty('scrollPosition');
    }
    /**
     * Gets the value of <code>scrollToKey</code> property.
     * Specifies the behavior when ListView needs to scroll to a position based on an item key.
     * @return The value of <code>scrollToKey</code> property.
     *
     */
    getScrollToKey() {
        return this.getProperty('scrollToKey');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the current selections in the list. See the Help documentation for more information.
     * @param selection The value to set for <code>selection</code>
     * @deprecated Since 7.0.0. Use selected attribute instead.
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the current selections in the list. See the Help documentation for more information.
     * @return The value of <code>selection</code> property.
     * @deprecated Since 7.0.0. Use selected attribute instead.
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection mode.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>selectionRequired</code> property.
     * Specifies whether selection is required on the ListView.
     * @return The value of <code>selectionRequired</code> property.
     *
     */
    getSelectionRequired() {
        return this.getProperty('selectionRequired');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjListViewBase = OjListViewBase;
//# sourceMappingURL=OjListViewBase.js.map