import { OjWebElement } from '../';

/**
 * This is the base class for oj-picto-chart WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPictoChart.ts.
 */
export class OjPictoChartBase extends OjWebElement {
  /**
   * Gets the value of <code>animationDuration</code> property.
   * The duration of the animations in milliseconds.
   * @return The value of <code>animationDuration</code> property.
   *
   */
  public getAnimationDuration(): Promise<number> {
    return this.getProperty<number>('animationDuration');
  }

  /**
   * Gets the value of <code>animationOnDataChange</code> property.
   * Specifies the animation that is applied on data changes.
   * @return The value of <code>animationOnDataChange</code> property.
   *
   */
  public getAnimationOnDataChange(): Promise<string> {
    return this.getProperty<string>('animationOnDataChange');
  }

  /**
   * Gets the value of <code>animationOnDisplay</code> property.
   * Specifies the animation shown on initial display.
   * @return The value of <code>animationOnDisplay</code> property.
   *
   */
  public getAnimationOnDisplay(): Promise<string> {
    return this.getProperty<string>('animationOnDisplay');
  }

  /**
   * Gets the value of <code>as</code> property.
   * An alias for the '$current' context variable passed to slot content for the itemTemplate slot.
   * @return The value of <code>as</code> property.
   * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
   */
  public getAs(): Promise<string> {
    return this.getProperty<string>('as');
  }

  /**
   * Gets the value of <code>columnCount</code> property.
   * The number of columns in the picto chart. If unspecified, the number of columns will be automatically computed.
   * @return The value of <code>columnCount</code> property.
   *
   */
  public getColumnCount(): Promise<number | null> {
    return this.getProperty<number | null>('columnCount');
  }

  /**
   * Gets the value of <code>columnWidth</code> property.
   * The width of a column in pixels. If unspecified, the column width will be automatically computed. See the Help documentation for more information.
   * @return The value of <code>columnWidth</code> property.
   *
   */
  public getColumnWidth(): Promise<number | null> {
    return this.getProperty<number | null>('columnWidth');
  }

  /**
   * Gets the value of <code>drilling</code> property.
   * Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.
   * @return The value of <code>drilling</code> property.
   *
   */
  public getDrilling(): Promise<string> {
    return this.getProperty<string>('drilling');
  }

  /**
   * Sets the value of <code>hiddenCategories</code> property.
   * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
   * @param hiddenCategories The value to set for <code>hiddenCategories</code>
   *
   */
  public changeHiddenCategories(hiddenCategories: Array<string>): Promise<void> {
    return this.setProperty<Array<string>>('hiddenCategories', hiddenCategories);
  }

  /**
   * Gets the value of <code>hiddenCategories</code> property.
   * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
   * @return The value of <code>hiddenCategories</code> property.
   *
   */
  public getHiddenCategories(): Promise<Array<string>> {
    return this.getProperty<Array<string>>('hiddenCategories');
  }

  /**
   * Gets the value of <code>highlightMatch</code> property.
   * The matching condition for the highlightedCategories property. See the Help documentation for more information.
   * @return The value of <code>highlightMatch</code> property.
   *
   */
  public getHighlightMatch(): Promise<string> {
    return this.getProperty<string>('highlightMatch');
  }

  /**
   * Sets the value of <code>highlightedCategories</code> property.
   * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
   * @param highlightedCategories The value to set for <code>highlightedCategories</code>
   *
   */
  public changeHighlightedCategories(highlightedCategories: Array<string>): Promise<void> {
    return this.setProperty<Array<string>>('highlightedCategories', highlightedCategories);
  }

  /**
   * Gets the value of <code>highlightedCategories</code> property.
   * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
   * @return The value of <code>highlightedCategories</code> property.
   *
   */
  public getHighlightedCategories(): Promise<Array<string>> {
    return this.getProperty<Array<string>>('highlightedCategories');
  }

  /**
   * Gets the value of <code>hoverBehavior</code> property.
   * Defines the behavior applied when hovering over data items.
   * @return The value of <code>hoverBehavior</code> property.
   *
   */
  public getHoverBehavior(): Promise<string> {
    return this.getProperty<string>('hoverBehavior');
  }

  /**
   * Gets the value of <code>hoverBehaviorDelay</code> property.
   * Specifies initial hover delay in milliseconds for highlighting data items.
   * @return The value of <code>hoverBehaviorDelay</code> property.
   *
   */
  public getHoverBehaviorDelay(): Promise<number> {
    return this.getProperty<number>('hoverBehaviorDelay');
  }

  /**
   * Gets the value of <code>items</code> property.
   * An array of objects that define the picto chart items. See the Help documentation for more information.
   * @return The value of <code>items</code> property.
   *
   */
  public getItems(): Promise<Array<Items> | null | null> {
    return this.getProperty<Array<Items> | null | null>('items');
  }

  /**
   * Gets the value of <code>layout</code> property.
   * Specifies the direction in which items are laid out.
   * @return The value of <code>layout</code> property.
   *
   */
  public getLayout(): Promise<string> {
    return this.getProperty<string>('layout');
  }

  /**
   * Gets the value of <code>layoutOrigin</code> property.
   * Specifies where the first item is rendered. Subsequent items follow the first item according to the layout.
   * @return The value of <code>layoutOrigin</code> property.
   *
   */
  public getLayoutOrigin(): Promise<string> {
    return this.getProperty<string>('layoutOrigin');
  }

  /**
   * Gets the value of <code>rowCount</code> property.
   * The number of rows in the picto chart. If unspecified, the number of rows will be automatically computed.
   * @return The value of <code>rowCount</code> property.
   *
   */
  public getRowCount(): Promise<number | null> {
    return this.getProperty<number | null>('rowCount');
  }

  /**
   * Gets the value of <code>rowHeight</code> property.
   * The height of a row in pixels. If unspecified, the row height will be automatically computed. See the Help documentation for more information.
   * @return The value of <code>rowHeight</code> property.
   *
   */
  public getRowHeight(): Promise<number | null> {
    return this.getProperty<number | null>('rowHeight');
  }

  /**
   * Sets the value of <code>selection</code> property.
   * An array of id strings, used to define the selected objects.
   * @param selection The value to set for <code>selection</code>
   *
   */
  public changeSelection(selection: Array<any>): Promise<void> {
    return this.setProperty<Array<any>>('selection', selection);
  }

  /**
   * Gets the value of <code>selection</code> property.
   * An array of id strings, used to define the selected objects.
   * @return The value of <code>selection</code> property.
   *
   */
  public getSelection(): Promise<Array<any>> {
    return this.getProperty<Array<any>>('selection');
  }

  /**
   * Gets the value of <code>selectionMode</code> property.
   * Specifies the selection mode.
   * @return The value of <code>selectionMode</code> property.
   *
   */
  public getSelectionMode(): Promise<string> {
    return this.getProperty<string>('selectionMode');
  }

  /**
   * Gets the value of <code>tooltip</code> property.
   * An object containing an optional callback function for tooltip customization.
   * @return The value of <code>tooltip</code> property.
   *
   */
  public getTooltip(): Promise<Tooltip> {
    return this.getProperty<Tooltip>('tooltip');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   *
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Items {
  /**
   * The border color of the item. Does not apply if custom image is specified.
   */
  borderColor: string;
  /**
   * The border width of the item in pixels. Does not apply if custom image is specified.
   */
  borderWidth: number;
  /**
   * An array of category strings corresponding to this item. If not specified, defaults to the item id or name. This enables highlighting and filtering of individual data items through interactions with other visualization elements.
   */
  categories: Array<string>;
  /**
   * The color of the item. Does not apply if custom image is specified.
   */
  color: string;
  /**
   * The number of columns each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.
   */
  columnSpan: number;
  /**
   * Specifies the number of times that the shape (or custom image) is drawn. Fractional counts (such as 4.5) are supported; however, fractions other than the multiples of 0.5 should be avoided because the fractional rendering ignores the gaps between shapes and the irregularity of the shapes.
   */
  count: number;
  /**
   * Whether drilling is enabled for the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all items at once, use the drilling attribute in the top level.
   */
  drilling: string;
  /**
   * The item id. The item id should be set by the application if the DataProvider is not being used.
   */
  id: any;
  /**
   * The name of the item. Used for default tooltip and accessibility.
   */
  name: string;
  /**
   * The number of rows each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.
   */
  rowSpan: number;
  /**
   * The shape of the item. Can take the name of a built-in shape or the SVG path commands for a custom shape. "None" will make the item transparent and can be used to create gaps. Does not apply if custom image is specified.
   */
  shape: string;
  /**
   * Short description string for accessibility users.
   */
  shortDesc: string | null;
  /**
   * The URI of the custom image. If specified, it takes precedence over shape.
   */
  source: string;
  /**
   * The optional URI for the hover state. If not specified, the source image will be used.
   */
  sourceHover: string;
  /**
   * The optional URI for the hover selected state. If not specified, the source image will be used.
   */
  sourceHoverSelected: string;
  /**
   * The optional URI for the selected state. If not specified, the source image will be used.
   */
  sourceSelected: string;
  /**
   * The CSS style class to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified. Only SVG CSS style properties are supported.
   */
  svgStyle: object;
}
export interface Tooltip {}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   */
  stateVisible: string;
}
