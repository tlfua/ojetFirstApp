"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjPictoChartBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-picto-chart WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPictoChart.ts.
 */
class OjPictoChartBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationDuration</code> property.
     * The duration of the animations in milliseconds.
     * @return The value of <code>animationDuration</code> property.
     *
     */
    getAnimationDuration() {
        return this.getProperty('animationDuration');
    }
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Specifies the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Specifies the animation shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the itemTemplate slot.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>columnCount</code> property.
     * The number of columns in the picto chart. If unspecified, the number of columns will be automatically computed.
     * @return The value of <code>columnCount</code> property.
     *
     */
    getColumnCount() {
        return this.getProperty('columnCount');
    }
    /**
     * Gets the value of <code>columnWidth</code> property.
     * The width of a column in pixels. If unspecified, the column width will be automatically computed. See the Help documentation for more information.
     * @return The value of <code>columnWidth</code> property.
     *
     */
    getColumnWidth() {
        return this.getProperty('columnWidth');
    }
    /**
     * Gets the value of <code>drilling</code> property.
     * Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.
     * @return The value of <code>drilling</code> property.
     *
     */
    getDrilling() {
        return this.getProperty('drilling');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>highlightMatch</code> property.
     * The matching condition for the highlightedCategories property. See the Help documentation for more information.
     * @return The value of <code>highlightMatch</code> property.
     *
     */
    getHighlightMatch() {
        return this.getProperty('highlightMatch');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over data items.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>hoverBehaviorDelay</code> property.
     * Specifies initial hover delay in milliseconds for highlighting data items.
     * @return The value of <code>hoverBehaviorDelay</code> property.
     *
     */
    getHoverBehaviorDelay() {
        return this.getProperty('hoverBehaviorDelay');
    }
    /**
     * Gets the value of <code>items</code> property.
     * An array of objects that define the picto chart items. See the Help documentation for more information.
     * @return The value of <code>items</code> property.
     *
     */
    getItems() {
        return this.getProperty('items');
    }
    /**
     * Gets the value of <code>layout</code> property.
     * Specifies the direction in which items are laid out.
     * @return The value of <code>layout</code> property.
     *
     */
    getLayout() {
        return this.getProperty('layout');
    }
    /**
     * Gets the value of <code>layoutOrigin</code> property.
     * Specifies where the first item is rendered. Subsequent items follow the first item according to the layout.
     * @return The value of <code>layoutOrigin</code> property.
     *
     */
    getLayoutOrigin() {
        return this.getProperty('layoutOrigin');
    }
    /**
     * Gets the value of <code>rowCount</code> property.
     * The number of rows in the picto chart. If unspecified, the number of rows will be automatically computed.
     * @return The value of <code>rowCount</code> property.
     *
     */
    getRowCount() {
        return this.getProperty('rowCount');
    }
    /**
     * Gets the value of <code>rowHeight</code> property.
     * The height of a row in pixels. If unspecified, the row height will be automatically computed. See the Help documentation for more information.
     * @return The value of <code>rowHeight</code> property.
     *
     */
    getRowHeight() {
        return this.getProperty('rowHeight');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array of id strings, used to define the selected objects.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array of id strings, used to define the selected objects.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection mode.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjPictoChartBase = OjPictoChartBase;
//# sourceMappingURL=OjPictoChartBase.js.map