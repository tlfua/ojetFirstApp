import { OjWebElement } from '../';

/**
 * This is the base class for oj-dialog WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjDialog.ts.
 */
export class OjDialogBase extends OjWebElement {
  /**
   * Gets the value of <code>cancelBehavior</code> property.
   * Specifies the cancel behavior of the dialog. See the Help documentation for more information.
   * @return The value of <code>cancelBehavior</code> property.
   *
   */
  public getCancelBehavior(): Promise<string> {
    return this.getProperty<string>('cancelBehavior');
  }

  /**
   * Gets the value of <code>dialogTitle</code> property.
   * Specify the title of the dialog. null is the default.
   * @return The value of <code>dialogTitle</code> property.
   *
   */
  public getDialogTitle(): Promise<string | null> {
    return this.getProperty<string | null>('dialogTitle');
  }

  /**
   * Gets the value of <code>dragAffordance</code> property.
   * Specifies the drag affordance. See the Help documentation for more information.
   * @return The value of <code>dragAffordance</code> property.
   *
   */
  public getDragAffordance(): Promise<string> {
    return this.getProperty<string>('dragAffordance');
  }

  /**
   * Gets the value of <code>initialVisibility</code> property.
   * Set the initial visibility of the dialog.
   * @return The value of <code>initialVisibility</code> property.
   *
   */
  public getInitialVisibility(): Promise<string> {
    return this.getProperty<string>('initialVisibility');
  }

  /**
   * Gets the value of <code>modality</code> property.
   * Defines the modality of the dialog.
   * @return The value of <code>modality</code> property.
   *
   */
  public getModality(): Promise<string> {
    return this.getProperty<string>('modality');
  }

  /**
   * Gets the value of <code>position</code> property.
   * Establishes the location that the dialog will appear relative to another element. See the Help documentation for more information.
   * @return The value of <code>position</code> property.
   *
   */
  public getPosition(): Promise<Position> {
    return this.getProperty<Position>('position');
  }

  /**
   * Gets the value of <code>resizeBehavior</code> property.
   * Specifies the resizeBehavior of the dialog. See the Help documentation for more information.
   * @return The value of <code>resizeBehavior</code> property.
   *
   */
  public getResizeBehavior(): Promise<string> {
    return this.getProperty<string>('resizeBehavior');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Position {
  /**
   * Defines which position on the target element ("of") to align the positioned element against.
   */
  at: PositionAt;
  /**
   * Rule for alternate alignment.
   */
  collision: string;
  /**
   * Defines which edge on the dialog to align with the target ("of") element.
   */
  my: PositionMy;
  /**
   * Specifies which element to position the dialog against. See the Help documentation for more information.
   */
  of: string | object;
  /**
   * Defines a point offset in pixels from the ("my") alignment.
   */
  offset: PositionOffset;
}
export interface PositionAt {
  /**
   *
   */
  horizontal: string;
  /**
   *
   */
  vertical: string;
}
export interface PositionMy {
  /**
   *
   */
  horizontal: string;
  /**
   *
   */
  vertical: string;
}
export interface PositionOffset {
  /**
   * Horizontal alignment offset.
   */
  x: number;
  /**
   * Vertical alignment offset.
   */
  y: number;
}
export interface Translations {
  /**
   * Label for the dialog close button.
   */
  labelCloseIcon: string;
}
