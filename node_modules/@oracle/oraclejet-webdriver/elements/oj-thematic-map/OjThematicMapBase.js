"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjThematicMapBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-thematic-map WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjThematicMap.ts.
 */
class OjThematicMapBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationDuration</code> property.
     * The duration of the animations in milliseconds. See the Help documentation for more information.
     * @return The value of <code>animationDuration</code> property.
     *
     */
    getAnimationDuration() {
        return this.getProperty('animationDuration');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Specifies the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>areas</code> property.
     * An array of objects that define area data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.
     * @return The value of <code>areas</code> property.
     *
     */
    getAreas() {
        return this.getProperty('areas');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the areaTemplate, markerTemplate, or linkTemplate slots.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>focusRenderer</code> property.
     * An optional callback function to update the data item in response to changes in keyboard focus state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.
     * @return The value of <code>focusRenderer</code> property.
     *
     */
    getFocusRenderer() {
        return this.getProperty('focusRenderer');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items matching categories in this array will be filtered.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items matching categories in this array will be filtered.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>highlightMatch</code> property.
     * The matching condition for the highlightedCategories property. See the Help documentation for more information.
     * @return The value of <code>highlightMatch</code> property.
     *
     */
    getHighlightMatch() {
        return this.getProperty('highlightMatch');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over data items.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>hoverRenderer</code> property.
     * An optional callback function to update the node in response to changes in hover state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.
     * @return The value of <code>hoverRenderer</code> property.
     *
     */
    getHoverRenderer() {
        return this.getProperty('hoverRenderer');
    }
    /**
     * Gets the value of <code>initialZooming</code> property.
     * Specifies whether the map will zoom to fit the data objects on initial render.
     * @return The value of <code>initialZooming</code> property.
     *
     */
    getInitialZooming() {
        return this.getProperty('initialZooming');
    }
    /**
     * Gets the value of <code>isolatedItem</code> property.
     * The id for the isolated area of this area data layer. If set, only the isolated area will be displayed.
     * @return The value of <code>isolatedItem</code> property.
     *
     */
    getIsolatedItem() {
        return this.getProperty('isolatedItem');
    }
    /**
     * Gets the value of <code>labelDisplay</code> property.
     * Specifies how labels for this layer should be displayed.
     * @return The value of <code>labelDisplay</code> property.
     *
     */
    getLabelDisplay() {
        return this.getProperty('labelDisplay');
    }
    /**
     * Gets the value of <code>labelType</code> property.
     * Specifies which type of map labels to display.
     * @return The value of <code>labelType</code> property.
     *
     */
    getLabelType() {
        return this.getProperty('labelType');
    }
    /**
     * Gets the value of <code>links</code> property.
     * An array of objects that define the map links. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.
     * @return The value of <code>links</code> property.
     *
     */
    getLinks() {
        return this.getProperty('links');
    }
    /**
     * Gets the value of <code>mapProvider</code> property.
     * An object defining a custom map.
     * @return The value of <code>mapProvider</code> property.
     *
     */
    getMapProvider() {
        return this.getProperty('mapProvider');
    }
    /**
     * Gets the value of <code>markerZoomBehavior</code> property.
     * Specifies marker behavior on zoom.
     * @return The value of <code>markerZoomBehavior</code> property.
     *
     */
    getMarkerZoomBehavior() {
        return this.getProperty('markerZoomBehavior');
    }
    /**
     * Gets the value of <code>markers</code> property.
     * An array of objects that define marker data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.
     * @return The value of <code>markers</code> property.
     *
     */
    getMarkers() {
        return this.getProperty('markers');
    }
    /**
     * Gets the value of <code>maxZoom</code> property.
     * Specifies the maximum zoom level for this element. Must be greater than or equal to 1.0. See the Help documentation for more information.
     * @return The value of <code>maxZoom</code> property.
     *
     */
    getMaxZoom() {
        return this.getProperty('maxZoom');
    }
    /**
     * Gets the value of <code>panning</code> property.
     * Specifies whether element panning is allowed.
     * @return The value of <code>panning</code> property.
     *
     */
    getPanning() {
        return this.getProperty('panning');
    }
    /**
     * Gets the value of <code>renderer</code> property.
     * An optional callback function to stamp custom SVG elements for a data layer. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.
     * @return The value of <code>renderer</code> property.
     *
     */
    getRenderer() {
        return this.getProperty('renderer');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array of strings containing the ids of the selected data items.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array of strings containing the ids of the selected data items.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection mode.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>selectionRenderer</code> property.
     * An optional callback function to update the data item in response to changes in selection state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.
     * @return The value of <code>selectionRenderer</code> property.
     *
     */
    getSelectionRenderer() {
        return this.getProperty('selectionRenderer');
    }
    /**
     * Gets the value of <code>styleDefaults</code> property.
     * An object defining the style defaults for this thematic map. See the Help documentation for more information.
     * @return The value of <code>styleDefaults</code> property.
     *
     */
    getStyleDefaults() {
        return this.getProperty('styleDefaults');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>tooltipDisplay</code> property.
     * Specifies the tooltip behavior of the thematic map.
     * @return The value of <code>tooltipDisplay</code> property.
     *
     */
    getTooltipDisplay() {
        return this.getProperty('tooltipDisplay');
    }
    /**
     * Gets the value of <code>touchResponse</code> property.
     * Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.
     * @return The value of <code>touchResponse</code> property.
     *
     */
    getTouchResponse() {
        return this.getProperty('touchResponse');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>zooming</code> property.
     * Specifies whether element zooming is allowed.
     * @return The value of <code>zooming</code> property.
     *
     */
    getZooming() {
        return this.getProperty('zooming');
    }
}
exports.OjThematicMapBase = OjThematicMapBase;
//# sourceMappingURL=OjThematicMapBase.js.map