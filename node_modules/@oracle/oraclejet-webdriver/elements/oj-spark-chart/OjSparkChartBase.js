"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjSparkChartBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-spark-chart WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjSparkChart.ts.
 */
class OjSparkChartBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationDuration</code> property.
     * The duration of the animations in milliseconds.
     * @return The value of <code>animationDuration</code> property.
     *
     */
    getAnimationDuration() {
        return this.getProperty('animationDuration');
    }
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Defines the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Defines the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>areaColor</code> property.
     * The color of the area. Only applies if type is "area" or "lineWithArea".
     * @return The value of <code>areaColor</code> property.
     *
     */
    getAreaColor() {
        return this.getProperty('areaColor');
    }
    /**
     * Gets the value of <code>areaSvgClassName</code> property.
     * The CSS style class to apply if type is "area" or "lineWithArea".
     * @return The value of <code>areaSvgClassName</code> property.
     *
     */
    getAreaSvgClassName() {
        return this.getProperty('areaSvgClassName');
    }
    /**
     * Gets the value of <code>areaSvgStyle</code> property.
     * The inline style to apply if type is "area" or "lineWithArea".
     * @return The value of <code>areaSvgStyle</code> property.
     *
     */
    getAreaSvgStyle() {
        return this.getProperty('areaSvgStyle');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the itemTemplate slot.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>barGapRatio</code> property.
     * Specifies the width of the bar gap as a ratio of the item width. The valid value is a number from 0 to 1.
     * @return The value of <code>barGapRatio</code> property.
     *
     */
    getBarGapRatio() {
        return this.getProperty('barGapRatio');
    }
    /**
     * Gets the value of <code>baselineScaling</code> property.
     * Defines whether the axis baseline starts at the minimum value of the data or at zero.
     * @return The value of <code>baselineScaling</code> property.
     *
     */
    getBaselineScaling() {
        return this.getProperty('baselineScaling');
    }
    /**
     * Gets the value of <code>color</code> property.
     * The color of the data items.
     * @return The value of <code>color</code> property.
     *
     */
    getColor() {
        return this.getProperty('color');
    }
    /**
     * Gets the value of <code>firstColor</code> property.
     * The color of the first data item.
     * @return The value of <code>firstColor</code> property.
     *
     */
    getFirstColor() {
        return this.getProperty('firstColor');
    }
    /**
     * Gets the value of <code>highColor</code> property.
     * The color of the data item with the greatest value.
     * @return The value of <code>highColor</code> property.
     *
     */
    getHighColor() {
        return this.getProperty('highColor');
    }
    /**
     * Gets the value of <code>items</code> property.
     * An array of objects that define the data for the spark chart. See the Help documentation for more information.
     * @return The value of <code>items</code> property.
     *
     */
    getItems() {
        return this.getProperty('items');
    }
    /**
     * Gets the value of <code>lastColor</code> property.
     * The color of the last data item.
     * @return The value of <code>lastColor</code> property.
     *
     */
    getLastColor() {
        return this.getProperty('lastColor');
    }
    /**
     * Gets the value of <code>lineStyle</code> property.
     * The line style of the data line. Only applies to line spark charts.
     * @return The value of <code>lineStyle</code> property.
     *
     */
    getLineStyle() {
        return this.getProperty('lineStyle');
    }
    /**
     * Gets the value of <code>lineType</code> property.
     * The line type of the data line or area. Only applies to line and area spark charts.
     * @return The value of <code>lineType</code> property.
     *
     */
    getLineType() {
        return this.getProperty('lineType');
    }
    /**
     * Gets the value of <code>lineWidth</code> property.
     * The width of the data line in pixels. Only applies to line spark charts.
     * @return The value of <code>lineWidth</code> property.
     *
     */
    getLineWidth() {
        return this.getProperty('lineWidth');
    }
    /**
     * Gets the value of <code>lowColor</code> property.
     * The color of the data item with the lowest value.
     * @return The value of <code>lowColor</code> property.
     *
     */
    getLowColor() {
        return this.getProperty('lowColor');
    }
    /**
     * Gets the value of <code>markerShape</code> property.
     * The shape of the data markers. See the Help documentation for more information.
     * @return The value of <code>markerShape</code> property.
     *
     */
    getMarkerShape() {
        return this.getProperty('markerShape');
    }
    /**
     * Gets the value of <code>markerSize</code> property.
     * The size of the data markers in pixels. Only applies to line and area spark charts.
     * @return The value of <code>markerSize</code> property.
     *
     */
    getMarkerSize() {
        return this.getProperty('markerSize');
    }
    /**
     * Gets the value of <code>referenceObjects</code> property.
     * An array of reference objects associated with the y axis of the spark chart.
     * @return The value of <code>referenceObjects</code> property.
     *
     */
    getReferenceObjects() {
        return this.getProperty('referenceObjects');
    }
    /**
     * Gets the value of <code>svgClassName</code> property.
     * The CSS style class to apply to the data items. If type is "lineWithArea", this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.
     * @return The value of <code>svgClassName</code> property.
     *
     */
    getSvgClassName() {
        return this.getProperty('svgClassName');
    }
    /**
     * Gets the value of <code>svgStyle</code> property.
     * The inline style to apply to the data items. If type is "lineWithArea", this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.
     * @return The value of <code>svgStyle</code> property.
     *
     */
    getSvgStyle() {
        return this.getProperty('svgStyle');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>type</code> property.
     * The chart type.
     * @return The value of <code>type</code> property.
     *
     */
    getType() {
        return this.getProperty('type');
    }
    /**
     * Gets the value of <code>visualEffects</code> property.
     * Defines whether visual effects such as overlays are applied to the spark chart.
     * @return The value of <code>visualEffects</code> property.
     *
     */
    getVisualEffects() {
        return this.getProperty('visualEffects');
    }
}
exports.OjSparkChartBase = OjSparkChartBase;
//# sourceMappingURL=OjSparkChartBase.js.map