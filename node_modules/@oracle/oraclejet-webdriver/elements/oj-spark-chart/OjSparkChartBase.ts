import { OjWebElement } from '../';

/**
 * This is the base class for oj-spark-chart WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjSparkChart.ts.
 */
export class OjSparkChartBase extends OjWebElement {
  /**
   * Gets the value of <code>animationDuration</code> property.
   * The duration of the animations in milliseconds.
   * @return The value of <code>animationDuration</code> property.
   *
   */
  public getAnimationDuration(): Promise<number> {
    return this.getProperty<number>('animationDuration');
  }

  /**
   * Gets the value of <code>animationOnDataChange</code> property.
   * Defines the animation that is applied on data changes.
   * @return The value of <code>animationOnDataChange</code> property.
   *
   */
  public getAnimationOnDataChange(): Promise<string> {
    return this.getProperty<string>('animationOnDataChange');
  }

  /**
   * Gets the value of <code>animationOnDisplay</code> property.
   * Defines the animation that is shown on initial display.
   * @return The value of <code>animationOnDisplay</code> property.
   *
   */
  public getAnimationOnDisplay(): Promise<string> {
    return this.getProperty<string>('animationOnDisplay');
  }

  /**
   * Gets the value of <code>areaColor</code> property.
   * The color of the area. Only applies if type is "area" or "lineWithArea".
   * @return The value of <code>areaColor</code> property.
   *
   */
  public getAreaColor(): Promise<string> {
    return this.getProperty<string>('areaColor');
  }

  /**
   * Gets the value of <code>areaSvgClassName</code> property.
   * The CSS style class to apply if type is "area" or "lineWithArea".
   * @return The value of <code>areaSvgClassName</code> property.
   *
   */
  public getAreaSvgClassName(): Promise<string> {
    return this.getProperty<string>('areaSvgClassName');
  }

  /**
   * Gets the value of <code>areaSvgStyle</code> property.
   * The inline style to apply if type is "area" or "lineWithArea".
   * @return The value of <code>areaSvgStyle</code> property.
   *
   */
  public getAreaSvgStyle(): Promise<object> {
    return this.getProperty<object>('areaSvgStyle');
  }

  /**
   * Gets the value of <code>as</code> property.
   * An alias for the '$current' context variable passed to slot content for the itemTemplate slot.
   * @return The value of <code>as</code> property.
   * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
   */
  public getAs(): Promise<string> {
    return this.getProperty<string>('as');
  }

  /**
   * Gets the value of <code>barGapRatio</code> property.
   * Specifies the width of the bar gap as a ratio of the item width. The valid value is a number from 0 to 1.
   * @return The value of <code>barGapRatio</code> property.
   *
   */
  public getBarGapRatio(): Promise<number> {
    return this.getProperty<number>('barGapRatio');
  }

  /**
   * Gets the value of <code>baselineScaling</code> property.
   * Defines whether the axis baseline starts at the minimum value of the data or at zero.
   * @return The value of <code>baselineScaling</code> property.
   *
   */
  public getBaselineScaling(): Promise<string> {
    return this.getProperty<string>('baselineScaling');
  }

  /**
   * Gets the value of <code>color</code> property.
   * The color of the data items.
   * @return The value of <code>color</code> property.
   *
   */
  public getColor(): Promise<string> {
    return this.getProperty<string>('color');
  }

  /**
   * Gets the value of <code>firstColor</code> property.
   * The color of the first data item.
   * @return The value of <code>firstColor</code> property.
   *
   */
  public getFirstColor(): Promise<string> {
    return this.getProperty<string>('firstColor');
  }

  /**
   * Gets the value of <code>highColor</code> property.
   * The color of the data item with the greatest value.
   * @return The value of <code>highColor</code> property.
   *
   */
  public getHighColor(): Promise<string> {
    return this.getProperty<string>('highColor');
  }

  /**
   * Gets the value of <code>items</code> property.
   * An array of objects that define the data for the spark chart. See the Help documentation for more information.
   * @return The value of <code>items</code> property.
   *
   */
  public getItems(): Promise<Array<Items> | Array<number> | null | null> {
    return this.getProperty<Array<Items> | Array<number> | null | null>('items');
  }

  /**
   * Gets the value of <code>lastColor</code> property.
   * The color of the last data item.
   * @return The value of <code>lastColor</code> property.
   *
   */
  public getLastColor(): Promise<string> {
    return this.getProperty<string>('lastColor');
  }

  /**
   * Gets the value of <code>lineStyle</code> property.
   * The line style of the data line. Only applies to line spark charts.
   * @return The value of <code>lineStyle</code> property.
   *
   */
  public getLineStyle(): Promise<string> {
    return this.getProperty<string>('lineStyle');
  }

  /**
   * Gets the value of <code>lineType</code> property.
   * The line type of the data line or area. Only applies to line and area spark charts.
   * @return The value of <code>lineType</code> property.
   *
   */
  public getLineType(): Promise<string> {
    return this.getProperty<string>('lineType');
  }

  /**
   * Gets the value of <code>lineWidth</code> property.
   * The width of the data line in pixels. Only applies to line spark charts.
   * @return The value of <code>lineWidth</code> property.
   *
   */
  public getLineWidth(): Promise<number> {
    return this.getProperty<number>('lineWidth');
  }

  /**
   * Gets the value of <code>lowColor</code> property.
   * The color of the data item with the lowest value.
   * @return The value of <code>lowColor</code> property.
   *
   */
  public getLowColor(): Promise<string> {
    return this.getProperty<string>('lowColor');
  }

  /**
   * Gets the value of <code>markerShape</code> property.
   * The shape of the data markers. See the Help documentation for more information.
   * @return The value of <code>markerShape</code> property.
   *
   */
  public getMarkerShape(): Promise<string> {
    return this.getProperty<string>('markerShape');
  }

  /**
   * Gets the value of <code>markerSize</code> property.
   * The size of the data markers in pixels. Only applies to line and area spark charts.
   * @return The value of <code>markerSize</code> property.
   *
   */
  public getMarkerSize(): Promise<number> {
    return this.getProperty<number>('markerSize');
  }

  /**
   * Gets the value of <code>referenceObjects</code> property.
   * An array of reference objects associated with the y axis of the spark chart.
   * @return The value of <code>referenceObjects</code> property.
   *
   */
  public getReferenceObjects(): Promise<Array<ReferenceObjects>> {
    return this.getProperty<Array<ReferenceObjects>>('referenceObjects');
  }

  /**
   * Gets the value of <code>svgClassName</code> property.
   * The CSS style class to apply to the data items. If type is "lineWithArea", this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.
   * @return The value of <code>svgClassName</code> property.
   *
   */
  public getSvgClassName(): Promise<string> {
    return this.getProperty<string>('svgClassName');
  }

  /**
   * Gets the value of <code>svgStyle</code> property.
   * The inline style to apply to the data items. If type is "lineWithArea", this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.
   * @return The value of <code>svgStyle</code> property.
   *
   */
  public getSvgStyle(): Promise<object> {
    return this.getProperty<object>('svgStyle');
  }

  /**
   * Gets the value of <code>tooltip</code> property.
   * An object containing an optional callback function for tooltip customization.
   * @return The value of <code>tooltip</code> property.
   *
   */
  public getTooltip(): Promise<Tooltip> {
    return this.getProperty<Tooltip>('tooltip');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   *
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Gets the value of <code>type</code> property.
   * The chart type.
   * @return The value of <code>type</code> property.
   *
   */
  public getType(): Promise<string> {
    return this.getProperty<string>('type');
  }

  /**
   * Gets the value of <code>visualEffects</code> property.
   * Defines whether visual effects such as overlays are applied to the spark chart.
   * @return The value of <code>visualEffects</code> property.
   *
   */
  public getVisualEffects(): Promise<string> {
    return this.getProperty<string>('visualEffects');
  }
}
export interface Items {
  /**
   * The default border color for the data items.
   */
  borderColor: string;
  /**
   * The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds.
   */
  color: string;
  /**
   * The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.
   */
  high: number;
  /**
   * The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.
   */
  low: number;
  /**
   * Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts.
   */
  markerDisplayed: string;
  /**
   * The shape of the data markers. Can take the name of a built-in shape or the SVG path commands for a custom shape. Only applies to line and area spark charts.
   */
  markerShape: string;
  /**
   * The size of the data markers in pixels. Only applies to line and area spark charts.
   */
  markerSize: number;
  /**
   * The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute. Only SVG CSS style properties are supported.
   */
  svgStyle: object;
  /**
   * The value of the data item.
   */
  value: number;
}
export interface ReferenceObjects {
  /**
   * The color of the reference object.
   */
  color: string;
  /**
   * The high value of a reference area.
   */
  high: number;
  /**
   * The line style of a reference line.
   */
  lineStyle: string;
  /**
   * The width of a reference line.
   */
  lineWidth: number;
  /**
   * The location of the reference object relative to the data items.
   */
  location: string;
  /**
   * The low value of a reference area.
   */
  low: number;
  /**
   * The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties. Only SVG CSS style properties are supported.
   */
  svgStyle: object;
  /**
   * The type of reference object being shown.
   */
  type: string;
  /**
   * The value of a reference line.
   */
  value: number;
}
export interface Tooltip {}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   */
  stateVisible: string;
}
