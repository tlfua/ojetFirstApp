"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjTabBarBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-tab-bar WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTabBar.ts.
 */
class OjTabBarBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>as</code> property.
     * Specifies the alias for the current item when referenced inside the item template.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Sets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @param currentItem The value to set for <code>currentItem</code>
     *
     */
    changeCurrentItem(currentItem) {
        return this.setProperty('currentItem', currentItem);
    }
    /**
     * Gets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @return The value of <code>currentItem</code> property.
     *
     */
    getCurrentItem() {
        return this.getProperty('currentItem');
    }
    /**
     * Gets the value of <code>data</code> property.
     * Specifies the data provider for the Tab Bar. See the Help documentation for more information.
     * @return The value of <code>data</code> property.
     * @deprecated Since 14.0.0. Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead.
     */
    getData() {
        return this.getProperty('data');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies what needs to be displayed. See the Help documentation for more information.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>edge</code> property.
     * Specifies the edge position of the Tab Bar.
     * @return The value of <code>edge</code> property.
     *
     */
    getEdge() {
        return this.getProperty('edge');
    }
    /**
     * Gets the value of <code>item</code> property.
     * Customize the functionality of each tab on Tab Bar.
     * @return The value of <code>item</code> property.
     *
     */
    getItem() {
        return this.getProperty('item');
    }
    /**
     * Gets the value of <code>layout</code> property.
     * Specifies whether to stretch the tab bar items to occupy available space or to condense items.
     * @return The value of <code>layout</code> property.
     *
     */
    getLayout() {
        return this.getProperty('layout');
    }
    /**
     * Gets the value of <code>overflow</code> property.
     * Specifies overflow behaviour for the Tab Bar.
     * @return The value of <code>overflow</code> property.
     *
     */
    getOverflow() {
        return this.getProperty('overflow');
    }
    /**
     * Gets the value of <code>reorderable</code> property.
     * Specifies whether tabs can be reordered.
     * @return The value of <code>reorderable</code> property.
     *
     */
    getReorderable() {
        return this.getProperty('reorderable');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the key of the selected item. See the Help documentation for more information.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the key of the selected item. See the Help documentation for more information.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>truncation</code> property.
     * Specifies whether truncation needs to be applied.
     * @return The value of <code>truncation</code> property.
     *
     */
    getTruncation() {
        return this.getProperty('truncation');
    }
}
exports.OjTabBarBase = OjTabBarBase;
//# sourceMappingURL=OjTabBarBase.js.map