"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjNavigationListBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-navigation-list WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjNavigationList.ts.
 */
class OjNavigationListBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>as</code> property.
     * Specifies the alias for the current item when referenced inside the item template.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Sets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @param currentItem The value to set for <code>currentItem</code>
     *
     */
    changeCurrentItem(currentItem) {
        return this.setProperty('currentItem', currentItem);
    }
    /**
     * Gets the value of <code>currentItem</code> property.
     * Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.
     * @return The value of <code>currentItem</code> property.
     *
     */
    getCurrentItem() {
        return this.getProperty('currentItem');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies what needs to be displayed. See the Help documentation for more information.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>drillMode</code> property.
     * Specifies whether expand/collapse or sliding operations are allowed.
     * @return The value of <code>drillMode</code> property.
     *
     */
    getDrillMode() {
        return this.getProperty('drillMode');
    }
    /**
     * Gets the value of <code>edge</code> property.
     * Specifies the edge position of the Navigation List.
     * @return The value of <code>edge</code> property.
     *
     */
    getEdge() {
        return this.getProperty('edge');
    }
    /**
     * Gets the value of <code>hierarchyMenuThreshold</code> property.
     * Specifies the level at which the user can see hierarchical menu button. See the Help documentation for more information.
     * @return The value of <code>hierarchyMenuThreshold</code> property.
     * @deprecated Since 13.0.0. The hierarchyMenuThreshold property is deprecated as it is not supported in the Redwood theme.
     */
    getHierarchyMenuThreshold() {
        return this.getProperty('hierarchyMenuThreshold');
    }
    /**
     * Gets the value of <code>item</code> property.
     * Customize the functionality of each item in Navigation List.
     * @return The value of <code>item</code> property.
     *
     */
    getItem() {
        return this.getProperty('item');
    }
    /**
     * Gets the value of <code>overflow</code> property.
     * Specifies overflow behaviour for the Navigation List.
     * @return The value of <code>overflow</code> property.
     *
     */
    getOverflow() {
        return this.getProperty('overflow');
    }
    /**
     * Gets the value of <code>rootLabel</code> property.
     * Specifies the label for top level list items.
     * @return The value of <code>rootLabel</code> property.
     *
     */
    getRootLabel() {
        return this.getProperty('rootLabel');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the key of the selected item. See the Help documentation for more information.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the key of the selected item. See the Help documentation for more information.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjNavigationListBase = OjNavigationListBase;
//# sourceMappingURL=OjNavigationListBase.js.map