"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjLedGaugeBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-led-gauge WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjLedGauge.ts.
 */
class OjLedGaugeBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>borderColor</code> property.
     * The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
     * @return The value of <code>borderColor</code> property.
     *
     */
    getBorderColor() {
        return this.getProperty('borderColor');
    }
    /**
     * Gets the value of <code>color</code> property.
     * The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
     * @return The value of <code>color</code> property.
     *
     */
    getColor() {
        return this.getProperty('color');
    }
    /**
     * Gets the value of <code>label</code> property.
     * An object defining the label.
     * @return The value of <code>label</code> property.
     * @deprecated Since 12.1.0. This attribute is deprecated. Use metric-label instead.
     */
    getLabel() {
        return this.getProperty('label');
    }
    /**
     * Gets the value of <code>markerSize</code> property.
     * Specifies the led size.
     * @return The value of <code>markerSize</code> property.
     *
     */
    getMarkerSize() {
        return this.getProperty('markerSize');
    }
    /**
     * Gets the value of <code>max</code> property.
     * The maximum value of the gauge.
     * @return The value of <code>max</code> property.
     *
     */
    getMax() {
        return this.getProperty('max');
    }
    /**
     * Gets the value of <code>metricLabel</code> property.
     * An object defining the value label.
     * @return The value of <code>metricLabel</code> property.
     *
     */
    getMetricLabel() {
        return this.getProperty('metricLabel');
    }
    /**
     * Gets the value of <code>min</code> property.
     * The minimum value of the gauge.
     * @return The value of <code>min</code> property.
     *
     */
    getMin() {
        return this.getProperty('min');
    }
    /**
     * Gets the value of <code>rotation</code> property.
     * The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.
     * @return The value of <code>rotation</code> property.
     *
     */
    getRotation() {
        return this.getProperty('rotation');
    }
    /**
     * Gets the value of <code>size</code> property.
     * Fraction of area to use. Values range from 0 to 1.
     * @return The value of <code>size</code> property.
     *
     */
    getSizeProperty() {
        return this.getProperty('size');
    }
    /**
     * Gets the value of <code>svgClassName</code> property.
     * The CSS style class to apply to the gauge. See the Help documentation for more information.
     * @return The value of <code>svgClassName</code> property.
     *
     */
    getSvgClassName() {
        return this.getProperty('svgClassName');
    }
    /**
     * Gets the value of <code>svgStyle</code> property.
     * The inline style to apply to the gauge. See the Help documentation for more information.
     * @return The value of <code>svgStyle</code> property.
     *
     */
    getSvgStyle() {
        return this.getProperty('svgStyle');
    }
    /**
     * Gets the value of <code>thresholds</code> property.
     * An array of objects specifying the gauge thresholds.
     * @return The value of <code>thresholds</code> property.
     *
     */
    getThresholds() {
        return this.getProperty('thresholds');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>type</code> property.
     * The shape of the LED gauge. Can take the name of a built-in shape or the SVG path commands for a custom shape.
     * @return The value of <code>type</code> property.
     *
     */
    getType() {
        return this.getProperty('type');
    }
    /**
     * Sets the value of <code>value</code> property.
     * The metric value.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * The metric value.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
    /**
     * Gets the value of <code>visualEffects</code> property.
     * Defines whether the theme specific visual effects such as overlays and gradients are applied to the gauge.
     * @return The value of <code>visualEffects</code> property.
     * @deprecated Since 12.1.0. Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated.
     */
    getVisualEffects() {
        return this.getProperty('visualEffects');
    }
}
exports.OjLedGaugeBase = OjLedGaugeBase;
//# sourceMappingURL=OjLedGaugeBase.js.map