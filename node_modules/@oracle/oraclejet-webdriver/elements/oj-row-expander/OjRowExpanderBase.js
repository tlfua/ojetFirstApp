"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjRowExpanderBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-row-expander WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjRowExpander.ts.
 */
class OjRowExpanderBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>context</code> property.
     * The context object obtained from the column renderer (Table) or cell renderer (DataGrid)
     * @return The value of <code>context</code> property.
     *
     */
    getContext() {
        return this.getProperty('context');
    }
    /**
     * Sets the value of <code>expanded</code> property.
     * Specifies if the RowExpander is expanded.
     * @param expanded The value to set for <code>expanded</code>
     * @deprecated Since 7.0.0. The source of truth for expansion is the data source key set.
     */
    changeExpanded(expanded) {
        return this.setProperty('expanded', expanded);
    }
    /**
     * Gets the value of <code>expanded</code> property.
     * Specifies if the RowExpander is expanded.
     * @return The value of <code>expanded</code> property.
     * @deprecated Since 7.0.0. The source of truth for expansion is the data source key set.
     */
    getExpanded() {
        return this.getProperty('expanded');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjRowExpanderBase = OjRowExpanderBase;
//# sourceMappingURL=OjRowExpanderBase.js.map