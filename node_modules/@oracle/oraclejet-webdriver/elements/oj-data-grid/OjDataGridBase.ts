import { OjWebElement } from '../';

/**
 * This is the base class for oj-data-grid WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjDataGrid.ts.
 */
export class OjDataGridBase extends OjWebElement {
  /**
   * Gets the value of <code>bandingInterval</code> property.
   * Specifies the data body row and column banding intervals.
   * @return The value of <code>bandingInterval</code> property.
   *
   */
  public getBandingInterval(): Promise<BandingInterval> {
    return this.getProperty<BandingInterval>('bandingInterval');
  }

  /**
   * Gets the value of <code>cell</code> property.
   * Specifies attributes on the cells.
   * @return The value of <code>cell</code> property.
   *
   */
  public getCell(): Promise<Cell> {
    return this.getProperty<Cell>('cell');
  }

  /**
   * Sets the value of <code>currentCell</code> property.
   * Specifies the grid's currently focused cell.
   * @param currentCell The value to set for <code>currentCell</code>
   *
   */
  public changeCurrentCell(currentCell: object): Promise<void> {
    return this.setProperty<object>('currentCell', currentCell);
  }

  /**
   * Gets the value of <code>currentCell</code> property.
   * Specifies the grid's currently focused cell.
   * @return The value of <code>currentCell</code> property.
   *
   */
  public getCurrentCell(): Promise<object> {
    return this.getProperty<object>('currentCell');
  }

  /**
   * Gets the value of <code>dataTransferOptions</code> property.
   * Specifies data transfer features.
   * @return The value of <code>dataTransferOptions</code> property.
   *
   */
  public getDataTransferOptions(): Promise<DataTransferOptions> {
    return this.getProperty<DataTransferOptions>('dataTransferOptions');
  }

  /**
   * Gets the value of <code>dnd</code> property.
   * Specifies drag and drop features.
   * @return The value of <code>dnd</code> property.
   *
   */
  public getDnd(): Promise<Dnd> {
    return this.getProperty<Dnd>('dnd');
  }

  /**
   * Sets the value of <code>editMode</code> property.
   * Specifies if the grid is read-only or editable.
   * @param editMode The value to set for <code>editMode</code>
   *
   */
  public changeEditMode(editMode: string): Promise<void> {
    return this.setProperty<string>('editMode', editMode);
  }

  /**
   * Gets the value of <code>editMode</code> property.
   * Specifies if the grid is read-only or editable.
   * @return The value of <code>editMode</code> property.
   *
   */
  public getEditMode(): Promise<string> {
    return this.getProperty<string>('editMode');
  }

  /**
   * Sets the value of <code>frozenColumnCount</code> property.
   * Specifies count of columns to be frozen.
   * @param frozenColumnCount The value to set for <code>frozenColumnCount</code>
   *
   */
  public changeFrozenColumnCount(frozenColumnCount: number): Promise<void> {
    return this.setProperty<number>('frozenColumnCount', frozenColumnCount);
  }

  /**
   * Gets the value of <code>frozenColumnCount</code> property.
   * Specifies count of columns to be frozen.
   * @return The value of <code>frozenColumnCount</code> property.
   *
   */
  public getFrozenColumnCount(): Promise<number> {
    return this.getProperty<number>('frozenColumnCount');
  }

  /**
   * Sets the value of <code>frozenRowCount</code> property.
   * Specifies count of rows to be frozen.
   * @param frozenRowCount The value to set for <code>frozenRowCount</code>
   *
   */
  public changeFrozenRowCount(frozenRowCount: number): Promise<void> {
    return this.setProperty<number>('frozenRowCount', frozenRowCount);
  }

  /**
   * Gets the value of <code>frozenRowCount</code> property.
   * Specifies count of rows to be frozen.
   * @return The value of <code>frozenRowCount</code> property.
   *
   */
  public getFrozenRowCount(): Promise<number> {
    return this.getProperty<number>('frozenRowCount');
  }

  /**
   * Gets the value of <code>gridlines</code> property.
   * Specifies the visibility of the grid body vertical and horizontal gridlines.
   * @return The value of <code>gridlines</code> property.
   *
   */
  public getGridlines(): Promise<Gridlines> {
    return this.getProperty<Gridlines>('gridlines');
  }

  /**
   * Gets the value of <code>header</code> property.
   * Specifies attributes on the headers.
   * @return The value of <code>header</code> property.
   *
   */
  public getHeader(): Promise<Header> {
    return this.getProperty<Header>('header');
  }

  /**
   * Sets the value of <code>hiddenColumns</code> property.
   * Use to hide columns of grid on initial render.
   * @param hiddenColumns The value to set for <code>hiddenColumns</code>
   *
   */
  public changeHiddenColumns(hiddenColumns: object): Promise<void> {
    return this.setProperty<object>('hiddenColumns', hiddenColumns);
  }

  /**
   * Gets the value of <code>hiddenColumns</code> property.
   * Use to hide columns of grid on initial render.
   * @return The value of <code>hiddenColumns</code> property.
   *
   */
  public getHiddenColumns(): Promise<object> {
    return this.getProperty<object>('hiddenColumns');
  }

  /**
   * Gets the value of <code>scrollPolicy</code> property.
   * Specifies how data are fetched as user scrolls through the data grid.
   * @return The value of <code>scrollPolicy</code> property.
   *
   */
  public getScrollPolicy(): Promise<string | null> {
    return this.getProperty<string | null>('scrollPolicy');
  }

  /**
   * Gets the value of <code>scrollPolicyOptions</code> property.
   * Specifies fetch options for scrolling behaviors that trigger data fetches.
   * @return The value of <code>scrollPolicyOptions</code> property.
   *
   */
  public getScrollPolicyOptions(): Promise<ScrollPolicyOptions | null> {
    return this.getProperty<ScrollPolicyOptions | null>('scrollPolicyOptions');
  }

  /**
   * Sets the value of <code>scrollPosition</code> property.
   * Specifies the current scroll position of the data grid. See the Help documentation for more information.
   * @param scrollPosition The value to set for <code>scrollPosition</code>
   *
   */
  public changeScrollPosition(scrollPosition: ScrollPosition): Promise<void> {
    return this.setProperty<ScrollPosition>('scrollPosition', scrollPosition);
  }

  /**
   * Gets the value of <code>scrollPosition</code> property.
   * Specifies the current scroll position of the data grid. See the Help documentation for more information.
   * @return The value of <code>scrollPosition</code> property.
   *
   */
  public getScrollPosition(): Promise<ScrollPosition> {
    return this.getProperty<ScrollPosition>('scrollPosition');
  }

  /**
   * Gets the value of <code>scrollToKey</code> property.
   * Specifies the behavior when DataGrid needs to scroll to a position based on a row/column key.
   * @return The value of <code>scrollToKey</code> property.
   *
   */
  public getScrollToKey(): Promise<string | null> {
    return this.getProperty<string | null>('scrollToKey');
  }

  /**
   * Sets the value of <code>selection</code> property.
   * Specifies the grid's current selection.
   * @param selection The value to set for <code>selection</code>
   *
   */
  public changeSelection(selection: Array<object>): Promise<void> {
    return this.setProperty<Array<object>>('selection', selection);
  }

  /**
   * Gets the value of <code>selection</code> property.
   * Specifies the grid's current selection.
   * @return The value of <code>selection</code> property.
   *
   */
  public getSelection(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('selection');
  }

  /**
   * Gets the value of <code>selectionMode</code> property.
   * Specifies the row and cell selection modes. See the Help documentation for more information.
   * @return The value of <code>selectionMode</code> property.
   *
   */
  public getSelectionMode(): Promise<SelectionMode> {
    return this.getProperty<SelectionMode>('selectionMode');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface BandingInterval {
  /**
   * Specifies the data body column banding intervals.
   */
  column: number;
  /**
   * Specifies the data body row banding intervals.
   */
  row: number;
}
export interface Cell {
  /**
   * Specifies CSS class names to apply to cells. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * A function that returns cell content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies inline style to add to the cells. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface DataTransferOptions {
  /**
   * Allows copy on selected range.
   */
  copy: string;
  /**
   * Allows cut on selected range.
   */
  cut: string;
  /**
   * Allows auto fill data to selected range.
   */
  fill: string;
  /**
   * Allows paste on selected range.
   */
  paste: string;
}
export interface Dnd {
  /**
   * An object that describes drag functionality.
   */
  drag: DndDrag;
  /**
   * An object that describes drop functionality.
   */
  drop: DndDrop;
  /**
   * Specifies drag and drop reordering features.
   */
  reorder: DndReorder;
}
export interface DndDrag {
  /**
   * An object that describes drag functionality for a selected set of columns. See the Help documentation for more information.
   */
  columns: DndDragColumns;
  /**
   * An object that describes drag functionality for a selected set of rows. See the Help documentation for more information.
   */
  rows: DndDragRows;
}
export interface DndDragColumns {
  /**
   * The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.
   */
  dataTypes: string | Array<string>;
}
export interface DndDragRows {
  /**
   * The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.
   */
  dataTypes: string | Array<string>;
}
export interface DndDrop {
  /**
   * An object that describes drop functionality for a selected set of columns. See the Help documentation for more information.
   */
  columns: DndDropColumns;
  /**
   * An object that describes drop functionality for a selected set of rows. See the Help documentation for more information.
   */
  rows: DndDropRows;
}
export interface DndDropColumns {
  /**
   * A data type or an array of data types this element can accept.
   */
  dataTypes: string | Array<string>;
}
export interface DndDropRows {
  /**
   * A data type or an array of data types this element can accept.
   */
  dataTypes: string | Array<string>;
}
export interface DndReorder {
  /**
   * Specifies whether drag and drop row reordering is enabled.
   */
  row: string;
}
export interface Gridlines {
  /**
   * Specifies the visibility of the horizontal gridlines.
   */
  horizontal: string;
  /**
   * Specifies the visibility of the vertical gridlines.
   */
  vertical: string;
}
export interface Header {
  /**
   * Specifies attributes on the column headers.
   */
  column: HeaderColumn;
  /**
   * Specifies attributes on the column end headers.
   */
  columnEnd: HeaderColumnEnd;
  /**
   * Specifies attributes on the row headers.
   */
  row: HeaderRow;
  /**
   * Specifies attributes on the row end headers.
   */
  rowEnd: HeaderRowEnd;
}
export interface HeaderColumn {
  /**
   * Specifies CSS class names to apply to column headers. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * Allows freeze/unfreeze on columns.
   */
  freezable: string;
  /**
   * Allows hide/unhide on columns.
   */
  hidable: string;
  /**
   * Specifies attributes on the column header labels.
   */
  label: HeaderColumnLabel;
  /**
   * A function that returns column header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies resizing options along the column headers.
   */
  resizable: HeaderColumnResizable;
  /**
   * Specifies whether sorting is enabled on the column headers. See the Help documentation for more information.
   */
  sortable: null | string;
  /**
   * Specifies inline style to add to the column headers. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderColumnLabel {
  /**
   * Specifies CSS class names to apply to column header labels. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * A function that returns column header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies inline style to apply to column header labels. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderColumnResizable {
  /**
   * Enable or disable height resizing along the column headers.
   */
  height: string;
  /**
   * Enable or disable width resizing along the column headers.
   */
  width: string | null;
}
export interface HeaderColumnEnd {
  /**
   * Specifies CSS class names to apply to column end headers. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * Specifies attributes on the column end header labels.
   */
  label: HeaderColumnEndLabel;
  /**
   * A function that returns column end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies resizing options along the column end headers.
   */
  resizable: HeaderColumnEndResizable;
  /**
   * Specifies inline style to add to the column end headers. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderColumnEndLabel {
  /**
   * Specifies CSS class names to apply to column end header labels. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * A function that returns column end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies inline style to apply to column end header labels. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderColumnEndResizable {
  /**
   * Enable or disable height resizing along the column end headers.
   */
  height: string;
  /**
   * Enable or disable width resizing along the column end headers.
   */
  width: string | null;
}
export interface HeaderRow {
  /**
   * Specifies CSS class names to apply to row headers. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * Allows freeze/unfreeze on rows.
   */
  freezable: string;
  /**
   * Specifies attributes on the row header labels.
   */
  label: HeaderRowLabel;
  /**
   * A function that returns row header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies resizing options on the row headers.
   */
  resizable: HeaderRowResizable;
  /**
   * Specifies whether sorting is enabled on the row headers. See the Help documentation for more information.
   */
  sortable: null | string;
  /**
   * Specifies inline style to add to the row headers. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderRowLabel {
  /**
   * Specifies CSS class names to apply to row header labels. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * A function that returns row header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies inline style to apply to row header labels. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderRowResizable {
  /**
   * Enable or disable height resizing along the row headers.
   */
  height: string | null;
  /**
   * Enable or disable width resizing along the row headers.
   */
  width: string;
}
export interface HeaderRowEnd {
  /**
   * Specifies CSS class names to apply to row end headers. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * Specifies attributes on the row end header labels.
   */
  label: HeaderRowEndLabel;
  /**
   * A function that returns row end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies resizing options along the row end headers.
   */
  resizable: HeaderRowEndResizable;
  /**
   * Specifies inline style to add to the row end headers. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderRowEndLabel {
  /**
   * Specifies CSS class names to apply to row end header labels. See the Help documentation for more information.
   */
  className: null | string | null;
  /**
   * A function that returns row end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.
   */
  renderer: null | null;
  /**
   * Specifies inline style to apply to row end header labels. See the Help documentation for more information.
   */
  style: null | string | null;
}
export interface HeaderRowEndResizable {
  /**
   * Enable or disable height resizing along the row end headers.
   */
  height: string | null;
  /**
   * Enable or disable width resizing along the row end headers.
   */
  width: string;
}
export interface ScrollPolicyOptions {
  /**
   * The maximum number of columns to display before fetching more data rows will be stopped.
   */
  maxColumnCount: number;
  /**
   * The maximum number of rows to display before fetching more data rows will be stopped.
   */
  maxRowCount: number;
}
export interface ScrollPosition {
  /**
   * The zero-based column index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.
   */
  columnIndex: number;
  /**
   * The column key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.
   */
  columnKey: any;
  /**
   * The horizontal offset in pixel relative to the cell identified by key/index.
   */
  offsetX: number;
  /**
   * The vertical offset in pixel relative to the cell identified by key/index.
   */
  offsetY: number;
  /**
   * The zero-based row index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.
   */
  rowIndex: number;
  /**
   * The row key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.
   */
  rowKey: any;
  /**
   * The horizontal position in pixels.
   */
  x: number;
  /**
   * The vertical position in pixels.
   */
  y: number;
}
export interface SelectionMode {
  /**
   * Specifies the cell selection mode. By default, cell selection is disabled.
   */
  cell: string;
  /**
   * Specifies the row selection mode. By default, row selection is disabled.
   */
  row: string;
}
export interface Translations {
  /**
   * Provides properties to customize the accessible context to enter actionable mode.
   */
  accessibleActionableMode: string;
  /**
   * Provides properties to customize the accessible context when a header is collapsible.
   */
  accessibleCollapsed: string;
  /**
   * Provides properties to customize the accessible context for the column index.
   */
  accessibleColumnContext: string;
  /**
   * Provides properties to customize the accessible context for the column end header index.
   */
  accessibleColumnEndHeaderContext: string;
  /**
   * Provides properties to customize the accessible context for the column end header label.
   */
  accessibleColumnEndHeaderLabelContext: string;
  /**
   * Provides properties to customize the accessible context for the column header index.
   */
  accessibleColumnHeaderContext: string;
  /**
   * Provides properties to customize the accessible context for the column header label.
   */
  accessibleColumnHeaderLabelContext: string;
  /**
   * Hierarchical information for screen readers on the column's position in it's set and it's set size when available.
   */
  accessibleColumnHierarchicalFull: string;
  /**
   * Hierarchical information for screen readers when the column's set size is not available.
   */
  accessibleColumnHierarchicalPartial: string;
  /**
   * Hierarchical information for screen readers when the column's position in the set and the set size is not available.
   */
  accessibleColumnHierarchicalUnknown: string;
  /**
   * Provides properties to customize the accessible context when a column is selected.
   */
  accessibleColumnSelected: string;
  /**
   * Provides properties to customize the accessible context for the cell column extent/span.
   */
  accessibleColumnSpanContext: string;
  /**
   * Provides properties to customize the accessible text when a cell contains controls.
   */
  accessibleContainsControls: string;
  /**
   * Provides properties to customize the accessible context when a row is expanded.
   */
  accessibleExpanded: string;
  /**
   * Provides properties to customize the accessible context when the first column is reached.
   */
  accessibleFirstColumn: string;
  /**
   * Provides properties to customize the accessible context when the first row is reached.
   */
  accessibleFirstRow: string;
  /**
   * Provides properties to customize the accessible context when the last column is reached.
   */
  accessibleLastColumn: string;
  /**
   * Provides properties to customize the accessible context when the last row is reached.
   */
  accessibleLastRow: string;
  /**
   * Provides properties to customize the accessible context for the header level when grouped.
   */
  accessibleLevelContext: string;
  /**
   * Provides properties to customize the accessible context for the header level when hierarchical.
   */
  accessibleLevelHierarchicalContext: string;
  /**
   * Provides properties to customize the accessible context when multiple cells are selected.
   */
  accessibleMultiCellSelected: string;
  /**
   * Provides properties to customize the accessible context to enter navigation mode.
   */
  accessibleNavigationMode: string;
  /**
   * Provides properties to customize the accessible context for discontinuous selection off.
   */
  accessibleRangeSelectModeOff: string;
  /**
   * Provides properties to customize the accessible context for discontinuous selection on.
   */
  accessibleRangeSelectModeOn: string;
  /**
   * Provides properties to customize the accessible context when a row is collapsed.
   */
  accessibleRowCollapsed: string;
  /**
   * Provides properties to customize the accessible context for the row index.
   */
  accessibleRowContext: string;
  /**
   * Provides properties to customize the accessible context for the row end header index.
   */
  accessibleRowEndHeaderContext: string;
  /**
   * Provides properties to customize the accessible context for the row end header label.
   */
  accessibleRowEndHeaderLabelContext: string;
  /**
   * Provides properties to customize the accessible context when a header is expandable.
   */
  accessibleRowExpanded: string;
  /**
   * Provides properties to customize the accessible context for the row header index.
   */
  accessibleRowHeaderContext: string;
  /**
   * Provides properties to customize the accessible context for the row header label.
   */
  accessibleRowHeaderLabelContext: string;
  /**
   * Hierarchical information for screen readers on the row's position in it's set and it's set size when available.
   */
  accessibleRowHierarchicalFull: string;
  /**
   * Hierarchical information for screen readers when the rows's set size is not available..
   */
  accessibleRowHierarchicalPartial: string;
  /**
   * Hierarchical information for screen readers when the row's position in the set and the set size is not available.
   */
  accessibleRowHierarchicalUnknown: string;
  /**
   * Provides properties to customize the accessible context when a row is selected.
   */
  accessibleRowSelected: string;
  /**
   * Provides properties to customize the accessible context for the cell extent/span.
   */
  accessibleRowSpanContext: string;
  /**
   * Provides properties to customize the accessible context for the bottom selection affordance on touch device.
   */
  accessibleSelectionAffordanceBottom: string;
  /**
   * Provides properties to customize the accessible context for the top selection affordance on touch devices.
   */
  accessibleSelectionAffordanceTop: string;
  /**
   * Provides properties to customize the accessible text when a header is sorted ascending.
   */
  accessibleSortAscending: string;
  /**
   * Provides properties to customize the accessible text when a header is sorted descending.
   */
  accessibleSortDescending: string;
  /**
   * Provides properties to customize the accesible text when a header is able to be sorted.
   */
  accessibleSortable: string;
  /**
   * Provides properties to customize the accessible context when an item has been selected.
   */
  accessibleStateSelected: string;
  /**
   * Provides properties to customize the accessible context read when the exact row and column count are unknown.
   */
  accessibleSummaryEstimate: string;
  /**
   * Provides properties to customize the accessible context read when the exact row and column count are known.
   */
  accessibleSummaryExact: string;
  /**
   * Provides properties to customize the accessible context reading out the total number of rows expanded inside the data grid.
   */
  accessibleSummaryExpanded: string;
  /**
   * Title of the tooltip when header has the ability to be collapsed
   */
  collapsedText: string;
  /**
   * Field in dialog to enter the desired column width for the selected column or columns.
   */
  columnWidth: string;
  /**
   * Title of the tooltip when header has the ability to be expanded.
   */
  expandedText: string;
  /**
   * Provides properties to customize the context menu copy label for data transfer action.
   */
  labelCopyCells: string;
  /**
   * Provides properties to customize the context menu cut label for row reordering.
   */
  labelCut: string;
  /**
   * Provides properties to customize the context menu cut for data transfer action.
   */
  labelCutCells: string;
  /**
   * Provides properties to customize the context menu label for exiting non-contiguous selection.
   */
  labelDisableNonContiguous: string;
  /**
   * Provides properties to customize the context menu label for entering non-contiguous selection.
   */
  labelEnableNonContiguous: string;
  /**
   * Provides properties to customize the context menu fill label for data transfer action.
   */
  labelFillCells: string;
  /**
   * Action menu item in the context menu to freeze column.
   */
  labelFreezeCol: string;
  /**
   * Action menu item in the context menu to freeze row.
   */
  labelFreezeRow: string;
  /**
   * Provides properties to customize the context menu hide column label.
   */
  labelHideColumn: string;
  /**
   * Provides properties to customize the context menu paste label for row reordering.
   */
  labelPaste: string;
  /**
   * Provides properties to customize the context menu paste label for data transfer action.
   */
  labelPasteCells: string;
  /**
   * Provides properties to customize the context menu resize label.
   */
  labelResize: string;
  /**
   * Action menu item in the context menu to open the dialog to change the column width of the selection.
   */
  labelResizeColumn: string;
  /**
   * Button to apply the resize values.
   */
  labelResizeDialogApply: string;
  /**
   * Button to cancel the resize action and close the resize dialog.
   */
  labelResizeDialogCancel: string;
  /**
   * Provides properties to customize the resize dialog submit button.
   */
  labelResizeDialogSubmit: string;
  /**
   * Action menu item in the context menu to resize the selection to fit.
   */
  labelResizeFitToContent: string;
  /**
   * Action menu item in the context menu to open the dialog to change the row height of the selection.
   */
  labelResizeHeight: string;
  /**
   * Action menu item in the context menu to open the dialog to change the row height of the selection.
   */
  labelResizeRow: string;
  /**
   * Action menu item in the context menu to open the dialog to change the column width of the selection.
   */
  labelResizeWidth: string;
  /**
   * Action menu item in the row and column context menus to change state to select multiple cells.
   */
  labelSelectMultiple: string;
  /**
   * Context menu label and sort icon tooltip for sort ascending.
   */
  labelSortAsc: string;
  /**
   * Provides properties to customize the context menu sort column label.
   */
  labelSortCol: string;
  /**
   * Action menu item in the row context menu to sort column in ascending order.
   */
  labelSortColAsc: string;
  /**
   * Action menu item in the row context menu to sort column in descending order.
   */
  labelSortColDsc: string;
  /**
   * Context menu label and sort icon tooltip for sort descending.
   */
  labelSortDsc: string;
  /**
   * Provides properties to customize the context menu sort row label.
   */
  labelSortRow: string;
  /**
   * Action menu item in the row context menu to sort row in ascending order.
   */
  labelSortRowAsc: string;
  /**
   * Action menu item in the row context menu to sort row in descending order.
   */
  labelSortRowDsc: string;
  /**
   * Action menu item in the context menu to unfreeze column.
   */
  labelUnfreezeCol: string;
  /**
   * Action menu item in the context menu to unfreeze row.
   */
  labelUnfreezeRow: string;
  /**
   * Provides properties to customize the context menu unhide column label.
   */
  labelUnhideColumn: string;
  /**
   * Provides properties to customize the text when fetching data.
   */
  msgFetchingData: string;
  /**
   * Provides properties to customize the empty data grid text.
   */
  msgNoData: string;
  /**
   * Title of the dialog to set and apply column width.
   */
  resizeColumnDialog: string;
  /**
   * Title of the dialog to set and apply row height.
   */
  resizeRowDialog: string;
  /**
   * Field in dialog to enter the desired row height for the selected row or rows.
   */
  rowHeight: string;
  /**
   * Used for the default required icon tooltip.
   */
  tooltipRequired: string;
}
