"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjDataGridBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-data-grid WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjDataGrid.ts.
 */
class OjDataGridBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>bandingInterval</code> property.
     * Specifies the data body row and column banding intervals.
     * @return The value of <code>bandingInterval</code> property.
     *
     */
    getBandingInterval() {
        return this.getProperty('bandingInterval');
    }
    /**
     * Gets the value of <code>cell</code> property.
     * Specifies attributes on the cells.
     * @return The value of <code>cell</code> property.
     *
     */
    getCell() {
        return this.getProperty('cell');
    }
    /**
     * Sets the value of <code>currentCell</code> property.
     * Specifies the grid's currently focused cell.
     * @param currentCell The value to set for <code>currentCell</code>
     *
     */
    changeCurrentCell(currentCell) {
        return this.setProperty('currentCell', currentCell);
    }
    /**
     * Gets the value of <code>currentCell</code> property.
     * Specifies the grid's currently focused cell.
     * @return The value of <code>currentCell</code> property.
     *
     */
    getCurrentCell() {
        return this.getProperty('currentCell');
    }
    /**
     * Gets the value of <code>dataTransferOptions</code> property.
     * Specifies data transfer features.
     * @return The value of <code>dataTransferOptions</code> property.
     *
     */
    getDataTransferOptions() {
        return this.getProperty('dataTransferOptions');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Specifies drag and drop features.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Sets the value of <code>editMode</code> property.
     * Specifies if the grid is read-only or editable.
     * @param editMode The value to set for <code>editMode</code>
     *
     */
    changeEditMode(editMode) {
        return this.setProperty('editMode', editMode);
    }
    /**
     * Gets the value of <code>editMode</code> property.
     * Specifies if the grid is read-only or editable.
     * @return The value of <code>editMode</code> property.
     *
     */
    getEditMode() {
        return this.getProperty('editMode');
    }
    /**
     * Sets the value of <code>frozenColumnCount</code> property.
     * Specifies count of columns to be frozen.
     * @param frozenColumnCount The value to set for <code>frozenColumnCount</code>
     *
     */
    changeFrozenColumnCount(frozenColumnCount) {
        return this.setProperty('frozenColumnCount', frozenColumnCount);
    }
    /**
     * Gets the value of <code>frozenColumnCount</code> property.
     * Specifies count of columns to be frozen.
     * @return The value of <code>frozenColumnCount</code> property.
     *
     */
    getFrozenColumnCount() {
        return this.getProperty('frozenColumnCount');
    }
    /**
     * Sets the value of <code>frozenRowCount</code> property.
     * Specifies count of rows to be frozen.
     * @param frozenRowCount The value to set for <code>frozenRowCount</code>
     *
     */
    changeFrozenRowCount(frozenRowCount) {
        return this.setProperty('frozenRowCount', frozenRowCount);
    }
    /**
     * Gets the value of <code>frozenRowCount</code> property.
     * Specifies count of rows to be frozen.
     * @return The value of <code>frozenRowCount</code> property.
     *
     */
    getFrozenRowCount() {
        return this.getProperty('frozenRowCount');
    }
    /**
     * Gets the value of <code>gridlines</code> property.
     * Specifies the visibility of the grid body vertical and horizontal gridlines.
     * @return The value of <code>gridlines</code> property.
     *
     */
    getGridlines() {
        return this.getProperty('gridlines');
    }
    /**
     * Gets the value of <code>header</code> property.
     * Specifies attributes on the headers.
     * @return The value of <code>header</code> property.
     *
     */
    getHeader() {
        return this.getProperty('header');
    }
    /**
     * Sets the value of <code>hiddenColumns</code> property.
     * Use to hide columns of grid on initial render.
     * @param hiddenColumns The value to set for <code>hiddenColumns</code>
     *
     */
    changeHiddenColumns(hiddenColumns) {
        return this.setProperty('hiddenColumns', hiddenColumns);
    }
    /**
     * Gets the value of <code>hiddenColumns</code> property.
     * Use to hide columns of grid on initial render.
     * @return The value of <code>hiddenColumns</code> property.
     *
     */
    getHiddenColumns() {
        return this.getProperty('hiddenColumns');
    }
    /**
     * Gets the value of <code>scrollPolicy</code> property.
     * Specifies how data are fetched as user scrolls through the data grid.
     * @return The value of <code>scrollPolicy</code> property.
     *
     */
    getScrollPolicy() {
        return this.getProperty('scrollPolicy');
    }
    /**
     * Gets the value of <code>scrollPolicyOptions</code> property.
     * Specifies fetch options for scrolling behaviors that trigger data fetches.
     * @return The value of <code>scrollPolicyOptions</code> property.
     *
     */
    getScrollPolicyOptions() {
        return this.getProperty('scrollPolicyOptions');
    }
    /**
     * Sets the value of <code>scrollPosition</code> property.
     * Specifies the current scroll position of the data grid. See the Help documentation for more information.
     * @param scrollPosition The value to set for <code>scrollPosition</code>
     *
     */
    changeScrollPosition(scrollPosition) {
        return this.setProperty('scrollPosition', scrollPosition);
    }
    /**
     * Gets the value of <code>scrollPosition</code> property.
     * Specifies the current scroll position of the data grid. See the Help documentation for more information.
     * @return The value of <code>scrollPosition</code> property.
     *
     */
    getScrollPosition() {
        return this.getProperty('scrollPosition');
    }
    /**
     * Gets the value of <code>scrollToKey</code> property.
     * Specifies the behavior when DataGrid needs to scroll to a position based on a row/column key.
     * @return The value of <code>scrollToKey</code> property.
     *
     */
    getScrollToKey() {
        return this.getProperty('scrollToKey');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the grid's current selection.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the grid's current selection.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the row and cell selection modes. See the Help documentation for more information.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjDataGridBase = OjDataGridBase;
//# sourceMappingURL=OjDataGridBase.js.map