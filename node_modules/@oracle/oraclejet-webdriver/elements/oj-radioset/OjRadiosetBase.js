"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjRadiosetBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-radioset WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjRadioset.ts.
 */
class OjRadiosetBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>describedBy</code> property.
     * The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
     * @return The value of <code>describedBy</code> property.
     *
     */
    getDescribedBy() {
        return this.getProperty('describedBy');
    }
    /**
     * Gets the value of <code>disabled</code> property.
     * Specifies if the component is disabled. If true, then all of its inputs and labels are also disabled. See the Help documentation for more information.
     * @return The value of <code>disabled</code> property.
     *
     */
    getDisabled() {
        return this.getProperty('disabled');
    }
    /**
     * Gets the value of <code>displayOptions</code> property.
     * Display options for auxiliary content that determines whether or not it should be displayed.
     * @return The value of <code>displayOptions</code> property.
     *
     */
    getDisplayOptions() {
        return this.getProperty('displayOptions');
    }
    /**
     * Gets the value of <code>help</code> property.
     * Form component help information.
     * @return The value of <code>help</code> property.
     *
     */
    getHelp() {
        return this.getProperty('help');
    }
    /**
     * Gets the value of <code>helpHints</code> property.
     * Represents hints for an oj-form-layout element to render help information on the label of the editable component.
     * @return The value of <code>helpHints</code> property.
     *
     */
    getHelpHints() {
        return this.getProperty('helpHints');
    }
    /**
     * Gets the value of <code>labelEdge</code> property.
     * Defines how the label of a component is created. See the Help documentation for more information.
     * @return The value of <code>labelEdge</code> property.
     *
     */
    getLabelEdge() {
        return this.getProperty('labelEdge');
    }
    /**
     * Gets the value of <code>labelHint</code> property.
     * Represents a hint for oj-form-layout element to render a label on the editable component.
     * @return The value of <code>labelHint</code> property.
     *
     */
    getLabelHint() {
        return this.getProperty('labelHint');
    }
    /**
     * Gets the value of <code>labelledBy</code> property.
     * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
     * @return The value of <code>labelledBy</code> property.
     *
     */
    getLabelledBy() {
        return this.getProperty('labelledBy');
    }
    /**
     * Sets the value of <code>messagesCustom</code> property.
     * A list of messages added by an application to the component. See the Help documentation for more information.
     * @param messagesCustom The value to set for <code>messagesCustom</code>
     *
     */
    changeMessagesCustom(messagesCustom) {
        return this.setProperty('messagesCustom', messagesCustom);
    }
    /**
     * Gets the value of <code>messagesCustom</code> property.
     * A list of messages added by an application to the component. See the Help documentation for more information.
     * @return The value of <code>messagesCustom</code> property.
     *
     */
    getMessagesCustom() {
        return this.getProperty('messagesCustom');
    }
    /**
     * Gets the value of <code>optionRenderer</code> property.
     * The renderer function that renders the content of each option.
     * @return The value of <code>optionRenderer</code> property.
     *
     */
    getOptionRenderer() {
        return this.getProperty('optionRenderer');
    }
    /**
     * Gets the value of <code>options</code> property.
     * The option items for the Radioset.
     * @return The value of <code>options</code> property.
     *
     */
    getOptions() {
        return this.getProperty('options');
    }
    /**
     * Gets the value of <code>optionsKeys</code> property.
     * Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.
     * @return The value of <code>optionsKeys</code> property.
     *
     */
    getOptionsKeys() {
        return this.getProperty('optionsKeys');
    }
    /**
     * Gets the value of <code>readonly</code> property.
     * Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.
     * @return The value of <code>readonly</code> property.
     *
     */
    getReadonly() {
        return this.getProperty('readonly');
    }
    /**
     * Gets the value of <code>required</code> property.
     * Specifies whether the component is required or optional. See the Help documentation for more information.
     * @return The value of <code>required</code> property.
     *
     */
    getRequired() {
        return this.getProperty('required');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>userAssistanceDensity</code> property.
     * Specifies the density of the form component's user assistance presentation.
     * @return The value of <code>userAssistanceDensity</code> property.
     *
     */
    getUserAssistanceDensity() {
        return this.getProperty('userAssistanceDensity');
    }
    /**
     * Gets the value of <code>valid</code> property.
     * The validity state of the component
     * @return The value of <code>valid</code> property.
     *
     */
    getValid() {
        return this.getProperty('valid');
    }
    /**
     * Sets the value of <code>value</code> property.
     * The value of the component. See the Help documentation for more information.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * The value of the component. See the Help documentation for more information.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
}
exports.OjRadiosetBase = OjRadiosetBase;
//# sourceMappingURL=OjRadiosetBase.js.map