"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjChartBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-chart WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjChart.ts.
 */
class OjChartBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Defines the animation that is applied on data changes. Animation is automatically disabled when there are a large number of data items.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Defines the animation that is shown on initial display. Animation is automatically disabled when there are a large number of data items.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the itemTemplate, seriesTemplate, or groupTemplate slots.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>comboSeriesOrder</code> property.
     * Specifies the series render order for combo charts. If set to 'seriesType', rendering order between series types will follow a set z ordering aimed at minimizing overlap: area and lineWithArea series type in the background, bar series, then line series in the foreground. Series within the same type are rendered in the order presented in the data. If set to "data", series z order follows the series order in the data. Note that, series-comparator can be used to change the series order in the data.
     * @return The value of <code>comboSeriesOrder</code> property.
     *
     */
    getComboSeriesOrder() {
        return this.getProperty('comboSeriesOrder');
    }
    /**
     * Gets the value of <code>coordinateSystem</code> property.
     * The coordinate system of the chart. Only applies to bar, line, area, combo, scatter, and bubble charts.
     * @return The value of <code>coordinateSystem</code> property.
     *
     */
    getCoordinateSystem() {
        return this.getProperty('coordinateSystem');
    }
    /**
     * Gets the value of <code>dataCursor</code> property.
     * Defines whether the data cursor is enabled. The data cursor is not supported for polar charts. See the Help documentation for more information.
     * @return The value of <code>dataCursor</code> property.
     *
     */
    getDataCursor() {
        return this.getProperty('dataCursor');
    }
    /**
     * Gets the value of <code>dataCursorBehavior</code> property.
     * Defines the behavior of the data cursor when moving between data items.
     * @return The value of <code>dataCursorBehavior</code> property.
     *
     */
    getDataCursorBehavior() {
        return this.getProperty('dataCursorBehavior');
    }
    /**
     * Sets the value of <code>dataCursorPosition</code> property.
     * Specifies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed.
     * @param dataCursorPosition The value to set for <code>dataCursorPosition</code>
     *
     */
    changeDataCursorPosition(dataCursorPosition) {
        return this.setProperty('dataCursorPosition', dataCursorPosition);
    }
    /**
     * Gets the value of <code>dataCursorPosition</code> property.
     * Specifies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed.
     * @return The value of <code>dataCursorPosition</code> property.
     *
     */
    getDataCursorPosition() {
        return this.getProperty('dataCursorPosition');
    }
    /**
     * Gets the value of <code>dataLabel</code> property.
     * A function that returns a custom data label. The function takes a context argument, provided by the chart. See the Help documentation for more information.
     * @return The value of <code>dataLabel</code> property.
     *
     */
    getDataLabel() {
        return this.getProperty('dataLabel');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Provides support for HTML5 Drag and Drop events. See the Help documentation for more information.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>dragMode</code> property.
     * The action that is performed when a drag occurs on the chart. See the Help documentation for more information.
     * @return The value of <code>dragMode</code> property.
     *
     */
    getDragMode() {
        return this.getProperty('dragMode');
    }
    /**
     * Gets the value of <code>drilling</code> property.
     * Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.
     * @return The value of <code>drilling</code> property.
     *
     */
    getDrilling() {
        return this.getProperty('drilling');
    }
    /**
     * Gets the value of <code>groupComparator</code> property.
     * A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.
     * @return The value of <code>groupComparator</code> property.
     *
     */
    getGroupComparator() {
        return this.getProperty('groupComparator');
    }
    /**
     * Gets the value of <code>groups</code> property.
     * An array of strings identifying the group labels, or an array of objects specifying group labels and styles. See the Help documentation for more information.
     * @return The value of <code>groups</code> property.
     *
     */
    getGroups() {
        return this.getProperty('groups');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>hideAndShowBehavior</code> property.
     * Defines the hide and show behavior that is performed when clicking on a legend item. When data items are hidden, the y axes can be optionally rescaled to fit to the remaining data.
     * @return The value of <code>hideAndShowBehavior</code> property.
     *
     */
    getHideAndShowBehavior() {
        return this.getProperty('hideAndShowBehavior');
    }
    /**
     * Gets the value of <code>highlightMatch</code> property.
     * The matching condition for the highlightedCategories property. See the Help documentation for more information.
     * @return The value of <code>highlightMatch</code> property.
     *
     */
    getHighlightMatch() {
        return this.getProperty('highlightMatch');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Series or data items matching categories in this array will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Series or data items matching categories in this array will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over data items.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>initialZooming</code> property.
     * Specifies whether automatic initial zooming is enabled. Only applies to bar, line, area, and combo charts with zoomAndScroll turned on. See the Help documentation for more information.
     * @return The value of <code>initialZooming</code> property.
     *
     */
    getInitialZooming() {
        return this.getProperty('initialZooming');
    }
    /**
     * Gets the value of <code>legend</code> property.
     * An object defining the style, positioning, and behavior of the legend.
     * @return The value of <code>legend</code> property.
     *
     */
    getLegend() {
        return this.getProperty('legend');
    }
    /**
     * Gets the value of <code>multiSeriesDrilling</code> property.
     * Specifies whether drilling on chart objects representing multiple series (e.g. other slice and legend item in pie charts) is enabled or not. Multiseries drill event is fired from the other slice and legend item of pieChart.
     * @return The value of <code>multiSeriesDrilling</code> property.
     *
     */
    getMultiSeriesDrilling() {
        return this.getProperty('multiSeriesDrilling');
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * The chart orientation. Only applies to bar, line, area, combo, box plot, and funnel charts.
     * @return The value of <code>orientation</code> property.
     *
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Gets the value of <code>otherThreshold</code> property.
     * Specifies the fraction of the whole pie under which a slice would be aggregated into an "Other" slice. Valid values range from 0 (default) to 1. For example, a value of 0.1 would cause all slices which are less than 10% of the pie to be aggregated into the "Other" slice. Only applies to pie chart.
     * @return The value of <code>otherThreshold</code> property.
     *
     */
    getOtherThreshold() {
        return this.getProperty('otherThreshold');
    }
    /**
     * Gets the value of <code>overview</code> property.
     * An object defining the overview scrollbar. Only applies if zoomAndScroll is not off. Currently only supported for vertical bar, line, area, stock, and combo charts.
     * @return The value of <code>overview</code> property.
     *
     */
    getOverview() {
        return this.getProperty('overview');
    }
    /**
     * Gets the value of <code>pieCenter</code> property.
     * An object defining the center content of a pie chart. Either a label can be displayed at the center of the pie chart or custom HTML content.
     * @return The value of <code>pieCenter</code> property.
     *
     */
    getPieCenter() {
        return this.getProperty('pieCenter');
    }
    /**
     * Gets the value of <code>plotArea</code> property.
     * An object defining the style of the plot area.
     * @return The value of <code>plotArea</code> property.
     *
     */
    getPlotArea() {
        return this.getProperty('plotArea');
    }
    /**
     * Gets the value of <code>polarGridShape</code> property.
     * Defines whether the grid shape of the polar chart is circle or polygon. Only applies to polar line and area charts.
     * @return The value of <code>polarGridShape</code> property.
     *
     */
    getPolarGridShape() {
        return this.getProperty('polarGridShape');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array used to define the ids of the initially selected objects. See the Help documentation for more information.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array used to define the ids of the initially selected objects. See the Help documentation for more information.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * The type of selection behavior that is enabled on the chart. See the Help documentation for more information.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>series</code> property.
     * An array of objects defining series labels and override series styles. See the Help documentation for more information.
     * @return The value of <code>series</code> property.
     *
     */
    getSeries() {
        return this.getProperty('series');
    }
    /**
     * Gets the value of <code>seriesComparator</code> property.
     * A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.
     * @return The value of <code>seriesComparator</code> property.
     *
     */
    getSeriesComparator() {
        return this.getProperty('seriesComparator');
    }
    /**
     * Gets the value of <code>sorting</code> property.
     * Specifies the sorting of the data. It should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.
     * @return The value of <code>sorting</code> property.
     *
     */
    getSorting() {
        return this.getProperty('sorting');
    }
    /**
     * Gets the value of <code>splitDualY</code> property.
     * Defines whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support "off".
     * @return The value of <code>splitDualY</code> property.
     *
     */
    getSplitDualY() {
        return this.getProperty('splitDualY');
    }
    /**
     * Gets the value of <code>splitterPosition</code> property.
     * In a split dual-Y chart, specifies the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.
     * @return The value of <code>splitterPosition</code> property.
     *
     */
    getSplitterPosition() {
        return this.getProperty('splitterPosition');
    }
    /**
     * Gets the value of <code>stack</code> property.
     * Defines whether the data items are stacked. Only applies to bar, line, area, and combo charts. Does not apply to range series.
     * @return The value of <code>stack</code> property.
     *
     */
    getStack() {
        return this.getProperty('stack');
    }
    /**
     * Gets the value of <code>stackLabel</code> property.
     * Defines whether the total values of stacked data items should be displayed. Only applies to bar charts. See the Help documentation for more information.
     * @return The value of <code>stackLabel</code> property.
     *
     */
    getStackLabel() {
        return this.getProperty('stackLabel');
    }
    /**
     * Gets the value of <code>stackLabelProvider</code> property.
     * A function that returns a custom stack label. The function takes a context argument, provided by the chart. See the Help documentation for more information.
     * @return The value of <code>stackLabelProvider</code> property.
     *
     */
    getStackLabelProvider() {
        return this.getProperty('stackLabelProvider');
    }
    /**
     * Gets the value of <code>styleDefaults</code> property.
     * An object defining the default styles for series colors, marker shapes, and other style attributes. Properties specified on this object may be overridden by specifications on the data object.
     * @return The value of <code>styleDefaults</code> property.
     *
     */
    getStyleDefaults() {
        return this.getProperty('styleDefaults');
    }
    /**
     * Gets the value of <code>timeAxisType</code> property.
     * The type of time axis to display in the chart. Time axis is only supported for Cartesian bar, line, area, stock, box plot, and combo charts. See the Help documentation for more information.
     * @return The value of <code>timeAxisType</code> property.
     *
     */
    getTimeAxisType() {
        return this.getProperty('timeAxisType');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>touchResponse</code> property.
     * Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.
     * @return The value of <code>touchResponse</code> property.
     *
     */
    getTouchResponse() {
        return this.getProperty('touchResponse');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>type</code> property.
     * Specifies the chart type. See the Help documentation for more information.
     * @return The value of <code>type</code> property.
     *
     */
    getType() {
        return this.getProperty('type');
    }
    /**
     * Gets the value of <code>valueFormats</code> property.
     * An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.
     * @return The value of <code>valueFormats</code> property.
     *
     */
    getValueFormats() {
        return this.getProperty('valueFormats');
    }
    /**
     * Gets the value of <code>xAxis</code> property.
     * An object defining properties for the axis, tick marks, tick labels, and axis titles.
     * @return The value of <code>xAxis</code> property.
     *
     */
    getXAxis() {
        return this.getProperty('xAxis');
    }
    /**
     * Gets the value of <code>y2Axis</code> property.
     * An object defining properties for the axis, tick marks, tick labels, and axis titles. Y2 axis is only supported for Cartesian bar, line, area, and combo charts.
     * @return The value of <code>y2Axis</code> property.
     *
     */
    getY2Axis() {
        return this.getProperty('y2Axis');
    }
    /**
     * Gets the value of <code>yAxis</code> property.
     * An object defining properties for the axis, tick marks, tick labels, and axis titles.
     * @return The value of <code>yAxis</code> property.
     *
     */
    getYAxis() {
        return this.getProperty('yAxis');
    }
    /**
     * Gets the value of <code>zoomAndScroll</code> property.
     * Specifies the zoom and scroll behavior of the chart. See the Help documentation for more information.
     * @return The value of <code>zoomAndScroll</code> property.
     *
     */
    getZoomAndScroll() {
        return this.getProperty('zoomAndScroll');
    }
    /**
     * Gets the value of <code>zoomDirection</code> property.
     * Specifies the zoom direction of bubble and scatter charts. "Auto" zooms in both x and y direction. Use "x" or "y" for single direction zooming.
     * @return The value of <code>zoomDirection</code> property.
     *
     */
    getZoomDirection() {
        return this.getProperty('zoomDirection');
    }
}
exports.OjChartBase = OjChartBase;
//# sourceMappingURL=OjChartBase.js.map