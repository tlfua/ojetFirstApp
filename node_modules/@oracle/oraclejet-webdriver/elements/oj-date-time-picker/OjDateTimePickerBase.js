"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjDateTimePickerBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-date-time-picker WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjDateTimePicker.ts.
 */
class OjDateTimePickerBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>asyncValidators</code> property.
     * Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.
     * @return The value of <code>asyncValidators</code> property.
     * @deprecated Since 8.0.0. Use the validators property instead for either regular Validators or AsyncValidators.
     */
    getAsyncValidators() {
        return this.getProperty('asyncValidators');
    }
    /**
     * Gets the value of <code>autofocus</code> property.
     * Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.
     * @return The value of <code>autofocus</code> property.
     *
     */
    getAutofocus() {
        return this.getProperty('autofocus');
    }
    /**
     * Gets the value of <code>converter</code> property.
     * An object that converts the datetime value. See the Help documentation for more information.
     * @return The value of <code>converter</code> property.
     *
     */
    getConverter() {
        return this.getProperty('converter');
    }
    /**
     * Gets the value of <code>datePicker</code> property.
     * An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.
     * @return The value of <code>datePicker</code> property.
     *
     */
    getDatePicker() {
        return this.getProperty('datePicker');
    }
    /**
     * Gets the value of <code>dayFormatter</code> property.
     * Specifies a callback function used when rendering the day. See the Help documentation for more information.
     * @return The value of <code>dayFormatter</code> property.
     *
     */
    getDayFormatter() {
        return this.getProperty('dayFormatter');
    }
    /**
     * Gets the value of <code>dayMetaData</code> property.
     * Specifies additional information to be used when rendering the day. See the Help documentation for more information.
     * @return The value of <code>dayMetaData</code> property.
     *
     */
    getDayMetaData() {
        return this.getProperty('dayMetaData');
    }
    /**
     * Gets the value of <code>describedBy</code> property.
     * The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
     * @return The value of <code>describedBy</code> property.
     *
     */
    getDescribedBy() {
        return this.getProperty('describedBy');
    }
    /**
     * Gets the value of <code>disabled</code> property.
     * Specifies whether the component is disabled. The default is false.
     * @return The value of <code>disabled</code> property.
     *
     */
    getDisabled() {
        return this.getProperty('disabled');
    }
    /**
     * Gets the value of <code>displayOptions</code> property.
     * Display options for auxiliary content that determines whether or not it should be displayed.
     * @return The value of <code>displayOptions</code> property.
     *
     */
    getDisplayOptions() {
        return this.getProperty('displayOptions');
    }
    /**
     * Gets the value of <code>help</code> property.
     * Form component help information.
     * @return The value of <code>help</code> property.
     *
     */
    getHelp() {
        return this.getProperty('help');
    }
    /**
     * Gets the value of <code>helpHints</code> property.
     * Represents hints for an oj-form-layout element to render help information on the label of the editable component.
     * @return The value of <code>helpHints</code> property.
     *
     */
    getHelpHints() {
        return this.getProperty('helpHints');
    }
    /**
     * Gets the value of <code>keyboardEdit</code> property.
     * Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is "disabled".
     * @return The value of <code>keyboardEdit</code> property.
     *
     */
    getKeyboardEdit() {
        return this.getProperty('keyboardEdit');
    }
    /**
     * Gets the value of <code>labelEdge</code> property.
     * Defines how the label of a component is created. See the Help documentation for more information.
     * @return The value of <code>labelEdge</code> property.
     *
     */
    getLabelEdge() {
        return this.getProperty('labelEdge');
    }
    /**
     * Gets the value of <code>labelHint</code> property.
     * Represents a hint for oj-form-layout element to render a label on the editable component.
     * @return The value of <code>labelHint</code> property.
     *
     */
    getLabelHint() {
        return this.getProperty('labelHint');
    }
    /**
     * Gets the value of <code>labelledBy</code> property.
     * The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.
     * @return The value of <code>labelledBy</code> property.
     *
     */
    getLabelledBy() {
        return this.getProperty('labelledBy');
    }
    /**
     * Gets the value of <code>max</code> property.
     * The maximum selectable datetime, in ISO string format. When set to null, there is no maximum.
     * @return The value of <code>max</code> property.
     *
     */
    getMax() {
        return this.getProperty('max');
    }
    /**
     * Sets the value of <code>messagesCustom</code> property.
     * A list of messages added by an application to the component. See the Help documentation for more information.
     * @param messagesCustom The value to set for <code>messagesCustom</code>
     *
     */
    changeMessagesCustom(messagesCustom) {
        return this.setProperty('messagesCustom', messagesCustom);
    }
    /**
     * Gets the value of <code>messagesCustom</code> property.
     * A list of messages added by an application to the component. See the Help documentation for more information.
     * @return The value of <code>messagesCustom</code> property.
     *
     */
    getMessagesCustom() {
        return this.getProperty('messagesCustom');
    }
    /**
     * Gets the value of <code>min</code> property.
     * The minimum selectable datetime, in ISO string format. When set to null, there is no minimum.
     * @return The value of <code>min</code> property.
     *
     */
    getMin() {
        return this.getProperty('min');
    }
    /**
     * Gets the value of <code>name</code> property.
     * Specifies the name of the component.
     * @return The value of <code>name</code> property.
     * @deprecated Since 6.0.0. JET does not use form submit, so this is not needed.
     */
    getName() {
        return this.getProperty('name');
    }
    /**
     * Gets the value of <code>pickerAttributes</code> property.
     * Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.
     * @return The value of <code>pickerAttributes</code> property.
     *
     */
    getPickerAttributes() {
        return this.getProperty('pickerAttributes');
    }
    /**
     * Gets the value of <code>placeholder</code> property.
     * The placeholder text to set on the element.
     * @return The value of <code>placeholder</code> property.
     *
     */
    getPlaceholder() {
        return this.getProperty('placeholder');
    }
    /**
     * Gets the value of <code>rawValue</code> property.
     * Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.
     * @return The value of <code>rawValue</code> property.
     * @deprecated Since 11.0.0. This property is deprecated because it was incorrectly exposed on oj-date-time-picker and not fully implemented.
     */
    getRawValue() {
        return this.getProperty('rawValue');
    }
    /**
     * Gets the value of <code>readonly</code> property.
     * Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.
     * @return The value of <code>readonly</code> property.
     *
     */
    getReadonly() {
        return this.getProperty('readonly');
    }
    /**
     * Gets the value of <code>renderMode</code> property.
     * Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.
     * @return The value of <code>renderMode</code> property.
     * @deprecated Since 8.0.0. The "native" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable "$inputDateTimeRenderModeOptionDefault" is also deprecated for the same reason.
     */
    getRenderMode() {
        return this.getProperty('renderMode');
    }
    /**
     * Gets the value of <code>required</code> property.
     * Specifies whether the component is required or optional. See the Help documentation for more information.
     * @return The value of <code>required</code> property.
     *
     */
    getRequired() {
        return this.getProperty('required');
    }
    /**
     * Gets the value of <code>timePicker</code> property.
     * An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.
     * @return The value of <code>timePicker</code> property.
     *
     */
    getTimePicker() {
        return this.getProperty('timePicker');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>userAssistanceDensity</code> property.
     * Specifies the density of the form component's user assistance presentation.
     * @return The value of <code>userAssistanceDensity</code> property.
     *
     */
    getUserAssistanceDensity() {
        return this.getProperty('userAssistanceDensity');
    }
    /**
     * Gets the value of <code>valid</code> property.
     * The validity state of the component
     * @return The value of <code>valid</code> property.
     *
     */
    getValid() {
        return this.getProperty('valid');
    }
    /**
     * Gets the value of <code>validators</code> property.
     * A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.
     * @return The value of <code>validators</code> property.
     *
     */
    getValidators() {
        return this.getProperty('validators');
    }
    /**
     * Sets the value of <code>value</code> property.
     * The value of the datetime picker element, which must be an ISOString. See the Help documentation for more information.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * The value of the datetime picker element, which must be an ISOString. See the Help documentation for more information.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
}
exports.OjDateTimePickerBase = OjDateTimePickerBase;
//# sourceMappingURL=OjDateTimePickerBase.js.map