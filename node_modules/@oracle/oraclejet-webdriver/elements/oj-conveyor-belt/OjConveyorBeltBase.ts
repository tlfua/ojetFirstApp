import { OjWebElement } from '../';

/**
 * This is the base class for oj-conveyor-belt WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjConveyorBelt.ts.
 */
export class OjConveyorBeltBase extends OjWebElement {
  /**
   * Sets the value of <code>arrowVisibility</code> property.
   * Specifies visibility of overflow arrow buttons.
   * @param arrowVisibility The value to set for <code>arrowVisibility</code>
   *
   */
  public changeArrowVisibility(arrowVisibility: string): Promise<void> {
    return this.setProperty<string>('arrowVisibility', arrowVisibility);
  }

  /**
   * Gets the value of <code>arrowVisibility</code> property.
   * Specifies visibility of overflow arrow buttons.
   * @return The value of <code>arrowVisibility</code> property.
   *
   */
  public getArrowVisibility(): Promise<string> {
    return this.getProperty<string>('arrowVisibility');
  }

  /**
   * Sets the value of <code>contentParent</code> property.
   * Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.
   * @param contentParent The value to set for <code>contentParent</code>
   *
   */
  public changeContentParent(contentParent: string): Promise<void> {
    return this.setProperty<string>('contentParent', contentParent);
  }

  /**
   * Gets the value of <code>contentParent</code> property.
   * Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.
   * @return The value of <code>contentParent</code> property.
   *
   */
  public getContentParent(): Promise<string> {
    return this.getProperty<string>('contentParent');
  }

  /**
   * Sets the value of <code>orientation</code> property.
   * Specifies the orientation of the conveyorBelt.
   * @param orientation The value to set for <code>orientation</code>
   *
   */
  public changeOrientation(orientation: string): Promise<void> {
    return this.setProperty<string>('orientation', orientation);
  }

  /**
   * Gets the value of <code>orientation</code> property.
   * Specifies the orientation of the conveyorBelt.
   * @return The value of <code>orientation</code> property.
   *
   */
  public getOrientation(): Promise<string> {
    return this.getProperty<string>('orientation');
  }

  /**
   * Sets the value of <code>scrollPosition</code> property.
   * Gets or sets the number of pixels that an element's content is scrolled from its initial position.
   * @param scrollPosition The value to set for <code>scrollPosition</code>
   *
   */
  public changeScrollPosition(scrollPosition: number): Promise<void> {
    return this.setProperty<number>('scrollPosition', scrollPosition);
  }

  /**
   * Gets the value of <code>scrollPosition</code> property.
   * Gets or sets the number of pixels that an element's content is scrolled from its initial position.
   * @return The value of <code>scrollPosition</code> property.
   *
   */
  public getScrollPosition(): Promise<number> {
    return this.getProperty<number>('scrollPosition');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Translations {
  /**
   * Tooltip for the next overflow content arrow.
   */
  tipArrowNext: string;
  /**
   * Tooltip for the previous overflow content arrow.
   */
  tipArrowPrevious: string;
}
