"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjConveyorBeltBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-conveyor-belt WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjConveyorBelt.ts.
 */
class OjConveyorBeltBase extends __1.OjWebElement {
    /**
     * Sets the value of <code>arrowVisibility</code> property.
     * Specifies visibility of overflow arrow buttons.
     * @param arrowVisibility The value to set for <code>arrowVisibility</code>
     *
     */
    changeArrowVisibility(arrowVisibility) {
        return this.setProperty('arrowVisibility', arrowVisibility);
    }
    /**
     * Gets the value of <code>arrowVisibility</code> property.
     * Specifies visibility of overflow arrow buttons.
     * @return The value of <code>arrowVisibility</code> property.
     *
     */
    getArrowVisibility() {
        return this.getProperty('arrowVisibility');
    }
    /**
     * Sets the value of <code>contentParent</code> property.
     * Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.
     * @param contentParent The value to set for <code>contentParent</code>
     *
     */
    changeContentParent(contentParent) {
        return this.setProperty('contentParent', contentParent);
    }
    /**
     * Gets the value of <code>contentParent</code> property.
     * Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.
     * @return The value of <code>contentParent</code> property.
     *
     */
    getContentParent() {
        return this.getProperty('contentParent');
    }
    /**
     * Sets the value of <code>orientation</code> property.
     * Specifies the orientation of the conveyorBelt.
     * @param orientation The value to set for <code>orientation</code>
     *
     */
    changeOrientation(orientation) {
        return this.setProperty('orientation', orientation);
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * Specifies the orientation of the conveyorBelt.
     * @return The value of <code>orientation</code> property.
     *
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Sets the value of <code>scrollPosition</code> property.
     * Gets or sets the number of pixels that an element's content is scrolled from its initial position.
     * @param scrollPosition The value to set for <code>scrollPosition</code>
     *
     */
    changeScrollPosition(scrollPosition) {
        return this.setProperty('scrollPosition', scrollPosition);
    }
    /**
     * Gets the value of <code>scrollPosition</code> property.
     * Gets or sets the number of pixels that an element's content is scrolled from its initial position.
     * @return The value of <code>scrollPosition</code> property.
     *
     */
    getScrollPosition() {
        return this.getProperty('scrollPosition');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjConveyorBeltBase = OjConveyorBeltBase;
//# sourceMappingURL=OjConveyorBeltBase.js.map