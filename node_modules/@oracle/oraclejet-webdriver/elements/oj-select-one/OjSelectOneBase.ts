import { OjWebElement } from '../';

/**
 * This is the base class for oj-select-one WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjSelectOne.ts.
 */
export class OjSelectOneBase extends OjWebElement {
  /**
   * Gets the value of <code>describedBy</code> property.
   * The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string> {
    return this.getProperty<string>('describedBy');
  }

  /**
   * Gets the value of <code>disabled</code> property.
   * Specifies whether the component is disabled. The default is false.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>displayOptions</code> property.
   * Display options for auxiliary content that determines whether or not it should be displayed.
   * @return The value of <code>displayOptions</code> property.
   *
   */
  public getDisplayOptions(): Promise<DisplayOptions> {
    return this.getProperty<DisplayOptions>('displayOptions');
  }

  /**
   * Gets the value of <code>help</code> property.
   * Form component help information.
   * @return The value of <code>help</code> property.
   *
   */
  public getHelp(): Promise<Help> {
    return this.getProperty<Help>('help');
  }

  /**
   * Gets the value of <code>helpHints</code> property.
   * Represents hints for an oj-form-layout element to render help information on the label of the editable component.
   * @return The value of <code>helpHints</code> property.
   *
   */
  public getHelpHints(): Promise<HelpHints> {
    return this.getProperty<HelpHints>('helpHints');
  }

  /**
   * Gets the value of <code>labelEdge</code> property.
   * Defines how the label of a component is created. See the Help documentation for more information.
   * @return The value of <code>labelEdge</code> property.
   *
   */
  public getLabelEdge(): Promise<string> {
    return this.getProperty<string>('labelEdge');
  }

  /**
   * Gets the value of <code>labelHint</code> property.
   * Represents a hint for oj-form-layout element to render a label on the editable component.
   * @return The value of <code>labelHint</code> property.
   *
   */
  public getLabelHint(): Promise<string> {
    return this.getProperty<string>('labelHint');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * The oj-label sets the labelledBy property programmatically on the form component.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Gets the value of <code>maximumResultCount</code> property.
   * The maximum number of results displayed in the dropdown.
   * @return The value of <code>maximumResultCount</code> property.
   *
   */
  public getMaximumResultCount(): Promise<number> {
    return this.getProperty<number>('maximumResultCount');
  }

  /**
   * Sets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @param messagesCustom The value to set for <code>messagesCustom</code>
   *
   */
  public changeMessagesCustom(messagesCustom: Array<object>): Promise<void> {
    return this.setProperty<Array<object>>('messagesCustom', messagesCustom);
  }

  /**
   * Gets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @return The value of <code>messagesCustom</code> property.
   *
   */
  public getMessagesCustom(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('messagesCustom');
  }

  /**
   * Gets the value of <code>minimumResultsForSearch</code> property.
   * The threshold for showing the search box in the dropdown.
   * @return The value of <code>minimumResultsForSearch</code> property.
   *
   */
  public getMinimumResultsForSearch(): Promise<number> {
    return this.getProperty<number>('minimumResultsForSearch');
  }

  /**
   * Gets the value of <code>optionRenderer</code> property.
   * The renderer function that renders the content of each option.
   * @return The value of <code>optionRenderer</code> property.
   *
   */
  public getOptionRenderer(): Promise<null | null> {
    return this.getProperty<null | null>('optionRenderer');
  }

  /**
   * Gets the value of <code>options</code> property.
   * The option items for the Select.
   * @return The value of <code>options</code> property.
   *
   */
  public getOptions(): Promise<Array<object> | object | null> {
    return this.getProperty<Array<object> | object | null>('options');
  }

  /**
   * Gets the value of <code>optionsKeys</code> property.
   * Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.
   * @return The value of <code>optionsKeys</code> property.
   *
   */
  public getOptionsKeys(): Promise<OptionsKeys> {
    return this.getProperty<OptionsKeys>('optionsKeys');
  }

  /**
   * Gets the value of <code>pickerAttributes</code> property.
   * The style attributes for the drop down.
   * @return The value of <code>pickerAttributes</code> property.
   *
   */
  public getPickerAttributes(): Promise<PickerAttributes> {
    return this.getProperty<PickerAttributes>('pickerAttributes');
  }

  /**
   * Gets the value of <code>placeholder</code> property.
   * A short hint that can be displayed before user selects a value.
   * @return The value of <code>placeholder</code> property.
   *
   */
  public getPlaceholder(): Promise<string | null> {
    return this.getProperty<string | null>('placeholder');
  }

  /**
   * Gets the value of <code>readonly</code> property.
   * Specifies whether a value is readonly
   * @return The value of <code>readonly</code> property.
   *
   */
  public getReadonly(): Promise<boolean> {
    return this.getProperty<boolean>('readonly');
  }

  /**
   * Gets the value of <code>renderMode</code> property.
   * Specifies whether to render select in JET or as a HTML Select tag.
   * @return The value of <code>renderMode</code> property.
   * @deprecated Since 8.0.0. The "native" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable "$selectRenderModeOptionDefault" is also deprecated for the same reason.
   */
  public getRenderMode(): Promise<string> {
    return this.getProperty<string>('renderMode');
  }

  /**
   * Gets the value of <code>required</code> property.
   * Specifies whether the component is required or optional. See the Help documentation for more information.
   * @return The value of <code>required</code> property.
   *
   */
  public getRequired(): Promise<boolean> {
    return this.getProperty<boolean>('required');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Gets the value of <code>userAssistanceDensity</code> property.
   * Specifies the density of the form component's user assistance presentation.
   * @return The value of <code>userAssistanceDensity</code> property.
   *
   */
  public getUserAssistanceDensity(): Promise<string> {
    return this.getProperty<string>('userAssistanceDensity');
  }

  /**
   * Gets the value of <code>valid</code> property.
   * The validity state of the component
   * @return The value of <code>valid</code> property.
   *
   */
  public getValid(): Promise<string> {
    return this.getProperty<string>('valid');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The value of the element.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: any): Promise<void> {
    return this.setProperty<any>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The value of the element.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<any> {
    return this.getProperty<any>('value');
  }

  /**
   * Sets the value of <code>valueOption</code> property.
   * The current value of the element and its associated display label.
   * @param valueOption The value to set for <code>valueOption</code>
   *
   */
  public changeValueOption(valueOption: null | ValueOption): Promise<void> {
    return this.setProperty<null | ValueOption>('valueOption', valueOption);
  }

  /**
   * Gets the value of <code>valueOption</code> property.
   * The current value of the element and its associated display label.
   * @return The value of <code>valueOption</code> property.
   *
   */
  public getValueOption(): Promise<null | ValueOption> {
    return this.getProperty<null | ValueOption>('valueOption');
  }
}
export interface DisplayOptions {
  /**
   * Display options for auxiliary converter hint text that determines whether it should be displayed.
   */
  converterHint: Array<string> | string;
  /**
   * Display options for auxiliary help instruction text that determines whether it should be displayed.
   * @deprecated Since 9.0.0. If you want none, remove help-instruction attribute.
   */
  helpInstruction: Array<string> | string;
  /**
   * Display options for auxiliary message text that determines whether it should be displayed.
   */
  messages: Array<string> | string;
  /**
   * Display options for auxiliary validator hint text that determines whether it should be displayed.
   */
  validatorHint: Array<string> | string;
}
export interface Help {
  /**
   * Represents advisory information for the component, such as would be appropriate for a tooltip.
   */
  instruction: string;
}
export interface HelpHints {
  /**
   * Hint for help definition text associated with the label.
   */
  definition: string;
  /**
   * Help source URL associated with the component.
   */
  source: string;
}
export interface OptionsKeys {
  /**
   * The object for the child keys. It is ignored when using a TreeDataProvider.
   */
  childKeys: OptionsKeysChildKeys;
  /**
   * The key name for the children. It is ignored when using a TreeDataProvider.
   */
  children: string;
  /**
   * The key name for the label.
   */
  label: string;
  /**
   * The key name for the value.
   */
  value: string;
}
export interface OptionsKeysChildKeys {
  /**
   * The object for the child keys.
   */
  childKeys: object;
  /**
   * The key name for the children.
   */
  children: string;
  /**
   * The key name for the label.
   */
  label: string;
  /**
   * The key name for the value.
   */
  value: string;
}
export interface PickerAttributes {
  /**
   * The css class to append to the picker.
   */
  class: string;
  /**
   * The css style to append to the picker.
   * @deprecated Since 7.0.0. Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged.
   */
  style: string;
}
export interface Translations {
  /**
   * Text at the top of drop down when not all results are fetched and users need to filter further.
   */
  filterFurther: string;
  /**
   * Text for the drop down when more than one options are found.
   */
  moreMatchesFound: string;
  /**
   * Text for the drop down when no options are found.
   */
  noMatchesFound: string;
  /**
   * Text for the drop down when one option is found.
   */
  oneMatchesFound: string;
  /**
   * Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.
   */
  required: TranslationsRequired;
  /**
   * Tooltip text for the search box
   */
  searchField: string;
}
export interface TranslationsRequired {
  /**
   * Hint text used by required validation error.
   */
  hint: string;
  /**
   * Message text that describes the details of the required validation error.
   */
  messageDetail: string;
  /**
   * Message text for summarizing a required validation error.
   * @deprecated Since 14.0.0. This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed.
   */
  messageSummary: string;
}
export interface ValueOption {
  /**
   * display label of value above. If missing, String(value) is used.
   */
  label: string;
  /**
   * current value of JET Select
   */
  value: any;
}
