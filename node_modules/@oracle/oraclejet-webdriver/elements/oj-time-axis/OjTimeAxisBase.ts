import { OjWebElement } from '../';

/**
 * This is the base class for oj-time-axis WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTimeAxis.ts.
 */
export class OjTimeAxisBase extends OjWebElement {
  /**
   * Gets the value of <code>converter</code> property.
   * An object that converts the labels of the time axis for all 'scale' values'. See the Help documentation for more information.
   * @return The value of <code>converter</code> property.
   *
   */
  public getConverter(): Promise<Converter> {
    return this.getProperty<Converter>('converter');
  }

  /**
   * Gets the value of <code>end</code> property.
   * The end time of the time axis. See the Help documentation for more information.
   * @return The value of <code>end</code> property.
   *
   */
  public getEnd(): Promise<string> {
    return this.getProperty<string>('end');
  }

  /**
   * Gets the value of <code>scale</code> property.
   * The time scale used for the time axis.
   * @return The value of <code>scale</code> property.
   *
   */
  public getScale(): Promise<string> {
    return this.getProperty<string>('scale');
  }

  /**
   * Gets the value of <code>start</code> property.
   * The start time of the time axis. See the Help documentation for more information.
   * @return The value of <code>start</code> property.
   *
   */
  public getStart(): Promise<string> {
    return this.getProperty<string>('start');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   *
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Converter {
  /**
   * A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  days: object;
  /**
   * The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.
   */
  default: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  hours: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  minutes: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  months: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  quarters: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  seconds: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  weeks: object;
  /**
   * A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.
   */
  years: object;
}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   */
  stateVisible: string;
}
