"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjButtonsetOneBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-buttonset-one WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjButtonsetOne.ts.
 */
class OjButtonsetOneBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>chroming</code> property.
     * Indicates in what states the buttonset has chrome (background and border).
     * @return The value of <code>chroming</code> property.
     *
     */
    getChroming() {
        return this.getProperty('chroming');
    }
    /**
     * Gets the value of <code>describedBy</code> property.
     * buttonset's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
     * @return The value of <code>describedBy</code> property.
     *
     */
    getDescribedBy() {
        return this.getProperty('describedBy');
    }
    /**
     * Gets the value of <code>disabled</code> property.
     * Specifies that the buttonset element should be disabled.
     * @return The value of <code>disabled</code> property.
     *
     */
    getDisabled() {
        return this.getProperty('disabled');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies whether the buttonset displays label and icons, or just icons.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>focusManagement</code> property.
     * Should be set to none when the buttonset is placed within a toolbar.
     * @return The value of <code>focusManagement</code> property.
     *
     */
    getFocusManagement() {
        return this.getProperty('focusManagement');
    }
    /**
     * Gets the value of <code>labelledBy</code> property.
     * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
     * @return The value of <code>labelledBy</code> property.
     *
     */
    getLabelledBy() {
        return this.getProperty('labelledBy');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Sets the value of <code>value</code> property.
     * Indicates which oj-option in the buttonset is selected.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * Indicates which oj-option in the buttonset is selected.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
}
exports.OjButtonsetOneBase = OjButtonsetOneBase;
//# sourceMappingURL=OjButtonsetOneBase.js.map