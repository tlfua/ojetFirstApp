import { OjWebElement } from '../';

/**
 * This is the base class for oj-switch WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjSwitch.ts.
 */
export class OjSwitchBase extends OjWebElement {
  /**
   * Gets the value of <code>describedBy</code> property.
   * The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string> {
    return this.getProperty<string>('describedBy');
  }

  /**
   * Gets the value of <code>disabled</code> property.
   * Specifies whether the component is disabled. The default is false.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>displayOptions</code> property.
   * Display options for auxiliary content that determines whether or not it should be displayed.
   * @return The value of <code>displayOptions</code> property.
   *
   */
  public getDisplayOptions(): Promise<DisplayOptions> {
    return this.getProperty<DisplayOptions>('displayOptions');
  }

  /**
   * Gets the value of <code>help</code> property.
   * Form component help information.
   * @return The value of <code>help</code> property.
   *
   */
  public getHelp(): Promise<Help> {
    return this.getProperty<Help>('help');
  }

  /**
   * Gets the value of <code>helpHints</code> property.
   * Represents hints for an oj-form-layout element to render help information on the label of the editable component.
   * @return The value of <code>helpHints</code> property.
   *
   */
  public getHelpHints(): Promise<HelpHints> {
    return this.getProperty<HelpHints>('helpHints');
  }

  /**
   * Gets the value of <code>labelEdge</code> property.
   * Defines how the label of a component is created. See the Help documentation for more information.
   * @return The value of <code>labelEdge</code> property.
   *
   */
  public getLabelEdge(): Promise<string> {
    return this.getProperty<string>('labelEdge');
  }

  /**
   * Gets the value of <code>labelHint</code> property.
   * Represents a hint for oj-form-layout element to render a label on the editable component.
   * @return The value of <code>labelHint</code> property.
   *
   */
  public getLabelHint(): Promise<string> {
    return this.getProperty<string>('labelHint');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * The oj-label sets the labelledBy property programmatically on the form component.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Sets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @param messagesCustom The value to set for <code>messagesCustom</code>
   *
   */
  public changeMessagesCustom(messagesCustom: Array<object>): Promise<void> {
    return this.setProperty<Array<object>>('messagesCustom', messagesCustom);
  }

  /**
   * Gets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @return The value of <code>messagesCustom</code> property.
   *
   */
  public getMessagesCustom(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('messagesCustom');
  }

  /**
   * Gets the value of <code>readonly</code> property.
   * Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.
   * @return The value of <code>readonly</code> property.
   *
   */
  public getReadonly(): Promise<boolean> {
    return this.getProperty<boolean>('readonly');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Gets the value of <code>userAssistanceDensity</code> property.
   * Specifies the density of the form component's user assistance presentation.
   * @return The value of <code>userAssistanceDensity</code> property.
   *
   */
  public getUserAssistanceDensity(): Promise<string> {
    return this.getProperty<string>('userAssistanceDensity');
  }

  /**
   * Gets the value of <code>valid</code> property.
   * The validity state of the component
   * @return The value of <code>valid</code> property.
   *
   */
  public getValid(): Promise<string> {
    return this.getProperty<string>('valid');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The boolean state of the switch component.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: boolean): Promise<void> {
    return this.setProperty<boolean>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The boolean state of the switch component.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<boolean> {
    return this.getProperty<boolean>('value');
  }
}
export interface DisplayOptions {
  /**
   * Display options for auxiliary converter hint text that determines whether it should be displayed.
   */
  converterHint: Array<string> | string;
  /**
   * Display options for auxiliary help instruction text that determines whether it should be displayed.
   * @deprecated Since 9.0.0. If you want none, remove help-instruction attribute.
   */
  helpInstruction: Array<string> | string;
  /**
   * Display options for auxiliary message text that determines whether it should be displayed.
   */
  messages: Array<string> | string;
  /**
   * Display options for auxiliary validator hint text that determines whether it should be displayed.
   */
  validatorHint: Array<string> | string;
}
export interface Help {
  /**
   * Represents advisory information for the component, such as would be appropriate for a tooltip.
   */
  instruction: string;
}
export interface HelpHints {
  /**
   * Hint for help definition text associated with the label.
   */
  definition: string;
  /**
   * Help source URL associated with the component.
   */
  source: string;
}
export interface Translations {
  /**
   * Text to be displayed when the oj-switch is in readonly mode and value is false.
   */
  switchOff: string;
  /**
   * Text to be displayed when the oj-switch is in readonly mode and value is true.
   */
  switchOn: string;
}
