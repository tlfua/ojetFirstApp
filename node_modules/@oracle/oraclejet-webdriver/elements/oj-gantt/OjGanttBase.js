"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjGanttBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-gantt WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjGantt.ts.
 */
class OjGanttBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Defines the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Defines the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the dependencyTemplate, taskTemplate, or rowTemplate slots.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>axisPosition</code> property.
     * The position of the major and minor axis.
     * @return The value of <code>axisPosition</code> property.
     *
     */
    getAxisPosition() {
        return this.getProperty('axisPosition');
    }
    /**
     * Gets the value of <code>dependencies</code> property.
     * An array of objects that defines dependencies between tasks. See the Help documentation for more information.
     * @return The value of <code>dependencies</code> property.
     *
     */
    getDependencies() {
        return this.getProperty('dependencies');
    }
    /**
     * Gets the value of <code>dependencyLineShape</code> property.
     * Specifies the shape of the dependency lines.
     * @return The value of <code>dependencyLineShape</code> property.
     *
     */
    getDependencyLineShape() {
        return this.getProperty('dependencyLineShape');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Enables drag and drop functionality.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>dragMode</code> property.
     * Specifies the action that is performed when a drag occurs.
     * @return The value of <code>dragMode</code> property.
     *
     */
    getDragMode() {
        return this.getProperty('dragMode');
    }
    /**
     * Gets the value of <code>end</code> property.
     * The end time of the Gantt. See the Help documentation for more information.
     * @return The value of <code>end</code> property.
     *
     */
    getEnd() {
        return this.getProperty('end');
    }
    /**
     * Gets the value of <code>gridlines</code> property.
     * An object specifying whether to display or hide the horizontal and vertical grid lines.
     * @return The value of <code>gridlines</code> property.
     *
     */
    getGridlines() {
        return this.getProperty('gridlines');
    }
    /**
     * Gets the value of <code>majorAxis</code> property.
     * Specifies the major time axis. If not specified, no major time axis is shown.
     * @return The value of <code>majorAxis</code> property.
     *
     */
    getMajorAxis() {
        return this.getProperty('majorAxis');
    }
    /**
     * Gets the value of <code>minorAxis</code> property.
     * Specifies the minor time axis. This is required for the Gantt to render properly.
     * @return The value of <code>minorAxis</code> property.
     *
     */
    getMinorAxis() {
        return this.getProperty('minorAxis');
    }
    /**
     * Gets the value of <code>referenceObjects</code> property.
     * The array of reference objects associated with the Gantt. See the Help documentation for more information.
     * @return The value of <code>referenceObjects</code> property.
     *
     */
    getReferenceObjects() {
        return this.getProperty('referenceObjects');
    }
    /**
     * Gets the value of <code>rowAxis</code> property.
     * Specifies properties for the row labels region.
     * @return The value of <code>rowAxis</code> property.
     *
     */
    getRowAxis() {
        return this.getProperty('rowAxis');
    }
    /**
     * Gets the value of <code>rowDefaults</code> property.
     * Specifies default styling for rows in the Gantt.
     * @return The value of <code>rowDefaults</code> property.
     *
     */
    getRowDefaults() {
        return this.getProperty('rowDefaults');
    }
    /**
     * Gets the value of <code>rows</code> property.
     * An array of objects used to define rows and tasks within rows. See the Help documentation for more information.
     * @return The value of <code>rows</code> property.
     *
     */
    getRows() {
        return this.getProperty('rows');
    }
    /**
     * Sets the value of <code>scrollPosition</code> property.
     * The current scroll position of the Gantt. See the Help documentation for more information.
     * @param scrollPosition The value to set for <code>scrollPosition</code>
     *
     */
    changeScrollPosition(scrollPosition) {
        return this.setProperty('scrollPosition', scrollPosition);
    }
    /**
     * Gets the value of <code>scrollPosition</code> property.
     * The current scroll position of the Gantt. See the Help documentation for more information.
     * @return The value of <code>scrollPosition</code> property.
     *
     */
    getScrollPosition() {
        return this.getProperty('scrollPosition');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array containing the ids of the initially selected tasks.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array containing the ids of the initially selected tasks.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionBehavior</code> property.
     * Specifies the action that is performed when a drag occurs.
     * @return The value of <code>selectionBehavior</code> property.
     *
     */
    getSelectionBehavior() {
        return this.getProperty('selectionBehavior');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection behavior of the Gantt. See the Help documentation for more information.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>start</code> property.
     * The start time of the Gantt. A valid value is required for the Gantt to render properly. See the Help documentation for more information.
     * @return The value of <code>start</code> property.
     *
     */
    getStart() {
        return this.getProperty('start');
    }
    /**
     * Gets the value of <code>taskAggregation</code> property.
     * Specifies whether to apply a horizontally stacked visual treatment to adjacent tasks.
     * @return The value of <code>taskAggregation</code> property.
     *
     */
    getTaskAggregation() {
        return this.getProperty('taskAggregation');
    }
    /**
     * Gets the value of <code>taskDefaults</code> property.
     * Specifies default styling for tasks in the Gantt.
     * @return The value of <code>taskDefaults</code> property.
     *
     */
    getTaskDefaults() {
        return this.getProperty('taskDefaults');
    }
    /**
     * Gets the value of <code>timeCursor</code> property.
     * Specifies whether the time cursor is enabled.
     * @return The value of <code>timeCursor</code> property.
     *
     */
    getTimeCursor() {
        return this.getProperty('timeCursor');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>valueFormats</code> property.
     * An object specifying value formatting and tooltip behavior, whose keys generally correspond to task properties.
     * @return The value of <code>valueFormats</code> property.
     *
     */
    getValueFormats() {
        return this.getProperty('valueFormats');
    }
    /**
     * Gets the value of <code>viewportEnd</code> property.
     * The Gantt viewport end time. See the Help documentation for more information.
     * @return The value of <code>viewportEnd</code> property.
     *
     */
    getViewportEnd() {
        return this.getProperty('viewportEnd');
    }
    /**
     * Gets the value of <code>viewportStart</code> property.
     * The Gantt viewport start time. See the Help documentation for more information.
     * @return The value of <code>viewportStart</code> property.
     *
     */
    getViewportStart() {
        return this.getProperty('viewportStart');
    }
    /**
     * Gets the value of <code>zooming</code> property.
     * Specifies whether zooming is allowed on the Gantt.
     * @return The value of <code>zooming</code> property.
     *
     */
    getZooming() {
        return this.getProperty('zooming');
    }
}
exports.OjGanttBase = OjGanttBase;
//# sourceMappingURL=OjGanttBase.js.map