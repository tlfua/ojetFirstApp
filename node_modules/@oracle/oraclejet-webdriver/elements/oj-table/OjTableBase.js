"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjTableBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-table WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTable.ts.
 */
class OjTableBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>accessibility</code> property.
     * Accessibility attributes.
     * @return The value of <code>accessibility</code> property.
     *
     */
    getAccessibility() {
        return this.getProperty('accessibility');
    }
    /**
     * Gets the value of <code>addRowDisplay</code> property.
     * Specifies whether to show or hide add new row when addRowTemplate or addRowCellTemplate is present.
     * @return The value of <code>addRowDisplay</code> property.
     *
     */
    getAddRowDisplay() {
        return this.getProperty('addRowDisplay');
    }
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to the content of the cell template.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Sets the value of <code>columns</code> property.
     * An array of column definitions. See the Help documentation for more information.
     * @param columns The value to set for <code>columns</code>
     *
     */
    changeColumns(columns) {
        return this.setProperty('columns', columns);
    }
    /**
     * Gets the value of <code>columns</code> property.
     * An array of column definitions. See the Help documentation for more information.
     * @return The value of <code>columns</code> property.
     *
     */
    getColumns() {
        return this.getProperty('columns');
    }
    /**
     * Gets the value of <code>columnsDefault</code> property.
     * Default values to apply to all column objects.
     * @return The value of <code>columnsDefault</code> property.
     *
     */
    getColumnsDefault() {
        return this.getProperty('columnsDefault');
    }
    /**
     * Sets the value of <code>currentRow</code> property.
     * Specifies the row that currently has keyboard focus. See the Help documentation for more information.
     * @param currentRow The value to set for <code>currentRow</code>
     *
     */
    changeCurrentRow(currentRow) {
        return this.setProperty('currentRow', currentRow);
    }
    /**
     * Gets the value of <code>currentRow</code> property.
     * Specifies the row that currently has keyboard focus. See the Help documentation for more information.
     * @return The value of <code>currentRow</code> property.
     *
     */
    getCurrentRow() {
        return this.getProperty('currentRow');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies whether to display this table in list or grid mode. See the Help documentation for more information.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Specifies drag and drop features. See the Help documentation for more information.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>editMode</code> property.
     * Specifies if the table is read-only or editable. See the Help documentation for more information.
     * @return The value of <code>editMode</code> property.
     *
     */
    getEditMode() {
        return this.getProperty('editMode');
    }
    /**
     * Sets the value of <code>editRow</code> property.
     * Specifies the row that is currently being edited. See the Help documentation for more information.
     * @param editRow The value to set for <code>editRow</code>
     *
     */
    changeEditRow(editRow) {
        return this.setProperty('editRow', editRow);
    }
    /**
     * Gets the value of <code>editRow</code> property.
     * Specifies the row that is currently being edited. See the Help documentation for more information.
     * @return The value of <code>editRow</code> property.
     *
     */
    getEditRow() {
        return this.getProperty('editRow');
    }
    /**
     * Gets the value of <code>firstSelectedRow</code> property.
     * Read-only property used for retrieving the key and data of the first selected row. See the Help documentation for more information.
     * @return The value of <code>firstSelectedRow</code> property.
     *
     */
    getFirstSelectedRow() {
        return this.getProperty('firstSelectedRow');
    }
    /**
     * Gets the value of <code>horizontalGridVisible</code> property.
     * Specifies the visibility of the horizontal gridlines. See the Help documentation for more information.
     * @return The value of <code>horizontalGridVisible</code> property.
     *
     */
    getHorizontalGridVisible() {
        return this.getProperty('horizontalGridVisible');
    }
    /**
     * Gets the value of <code>layout</code> property.
     * The column sizing method used for the Table and its columns.
     * @return The value of <code>layout</code> property.
     *
     */
    getLayout() {
        return this.getProperty('layout');
    }
    /**
     * Gets the value of <code>row</code> property.
     * Customizes the functionality of each row in the table.
     * @return The value of <code>row</code> property.
     *
     */
    getRow() {
        return this.getProperty('row');
    }
    /**
     * Gets the value of <code>rowRenderer</code> property.
     * A function that returns row content. The function takes a context argument, provided by the table. See the Help documentation for more information.
     * @return The value of <code>rowRenderer</code> property.
     *
     */
    getRowRenderer() {
        return this.getProperty('rowRenderer');
    }
    /**
     * Gets the value of <code>scrollPolicy</code> property.
     * Specifies how data are fetched as user scrolls down the table.
     * @return The value of <code>scrollPolicy</code> property.
     *
     */
    getScrollPolicy() {
        return this.getProperty('scrollPolicy');
    }
    /**
     * Gets the value of <code>scrollPolicyOptions</code> property.
     * Specifies fetch options for scrolling behaviors that trigger data fetches.
     * @return The value of <code>scrollPolicyOptions</code> property.
     *
     */
    getScrollPolicyOptions() {
        return this.getProperty('scrollPolicyOptions');
    }
    /**
     * Sets the value of <code>scrollPosition</code> property.
     * Specifies the scroll position of the table. See the Help documentation for more information.
     * @param scrollPosition The value to set for <code>scrollPosition</code>
     *
     */
    changeScrollPosition(scrollPosition) {
        return this.setProperty('scrollPosition', scrollPosition);
    }
    /**
     * Gets the value of <code>scrollPosition</code> property.
     * Specifies the scroll position of the table. See the Help documentation for more information.
     * @return The value of <code>scrollPosition</code> property.
     *
     */
    getScrollPosition() {
        return this.getProperty('scrollPosition');
    }
    /**
     * Gets the value of <code>scrollToKey</code> property.
     * Specifies the behavior when Table needs to scroll to a position based on an item key.
     * @return The value of <code>scrollToKey</code> property.
     *
     */
    getScrollToKey() {
        return this.getProperty('scrollToKey');
    }
    /**
     * Gets the value of <code>selectAllControl</code> property.
     * Specifies the visibility of the select all control. See the Help documentation for more information.
     * @return The value of <code>selectAllControl</code> property.
     *
     */
    getSelectAllControl() {
        return this.getProperty('selectAllControl');
    }
    /**
     * Sets the value of <code>selected</code> property.
     * Specifies the current selected rows and/or columns in the table. See the Help documentation for more information.
     * @param selected The value to set for <code>selected</code>
     *
     */
    changeSelected(selected) {
        return this.setProperty('selected', selected);
    }
    /**
     * Gets the value of <code>selected</code> property.
     * Specifies the current selected rows and/or columns in the table. See the Help documentation for more information.
     * @return The value of <code>selected</code> property.
     *
     */
    getSelected() {
        return this.getProperty('selected');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the current selections in the table. See the Help documentation for more information.
     * @param selection The value to set for <code>selection</code>
     * @deprecated Since 7.0.0. Use selected attribute instead.
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the current selections in the table. See the Help documentation for more information.
     * @return The value of <code>selection</code> property.
     * @deprecated Since 7.0.0. Use selected attribute instead.
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the row and column selection modes.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>selectionRequired</code> property.
     * Specifies whether selection is required on the Table.
     * @return The value of <code>selectionRequired</code> property.
     *
     */
    getSelectionRequired() {
        return this.getProperty('selectionRequired');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>verticalGridVisible</code> property.
     * Specifies the visibility of the vertical gridlines. See the Help documentation for more information.
     * @return The value of <code>verticalGridVisible</code> property.
     *
     */
    getVerticalGridVisible() {
        return this.getProperty('verticalGridVisible');
    }
}
exports.OjTableBase = OjTableBase;
//# sourceMappingURL=OjTableBase.js.map