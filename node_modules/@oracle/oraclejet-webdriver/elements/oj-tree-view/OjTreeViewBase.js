"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjTreeViewBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-tree-view WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTreeView.ts.
 */
class OjTreeViewBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>currentItem</code> property.
     * Read-only property used for retrieving the key of the item that currently has focus.
     * @return The value of <code>currentItem</code> property.
     *
     */
    getCurrentItem() {
        return this.getProperty('currentItem');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Customizes the drag and drop functionality. See the Help documentation for more information.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>item</code> property.
     * Customizes the functionality of each item in the tree.
     * @return The value of <code>item</code> property.
     *
     */
    getItem() {
        return this.getProperty('item');
    }
    /**
     * Gets the value of <code>scrollPolicyOptions</code> property.
     * Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.
     * @return The value of <code>scrollPolicyOptions</code> property.
     *
     */
    getScrollPolicyOptions() {
        return this.getProperty('scrollPolicyOptions');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the current selections in the tree. An empty array indicates nothing is selected.
     * @param selection The value to set for <code>selection</code>
     * @deprecated Since 8.0.0. Use selected attribute instead.
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the current selections in the tree. An empty array indicates nothing is selected.
     * @return The value of <code>selection</code> property.
     * @deprecated Since 8.0.0. Use selected attribute instead.
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection mode.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjTreeViewBase = OjTreeViewBase;
//# sourceMappingURL=OjTreeViewBase.js.map