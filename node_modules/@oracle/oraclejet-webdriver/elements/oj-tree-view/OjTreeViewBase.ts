import { OjWebElement } from '../';

/**
 * This is the base class for oj-tree-view WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTreeView.ts.
 */
export class OjTreeViewBase extends OjWebElement {
  /**
   * Gets the value of <code>currentItem</code> property.
   * Read-only property used for retrieving the key of the item that currently has focus.
   * @return The value of <code>currentItem</code> property.
   *
   */
  public getCurrentItem(): Promise<any> {
    return this.getProperty<any>('currentItem');
  }

  /**
   * Gets the value of <code>dnd</code> property.
   * Customizes the drag and drop functionality. See the Help documentation for more information.
   * @return The value of <code>dnd</code> property.
   *
   */
  public getDnd(): Promise<Dnd> {
    return this.getProperty<Dnd>('dnd');
  }

  /**
   * Gets the value of <code>item</code> property.
   * Customizes the functionality of each item in the tree.
   * @return The value of <code>item</code> property.
   *
   */
  public getItem(): Promise<Item> {
    return this.getProperty<Item>('item');
  }

  /**
   * Gets the value of <code>scrollPolicyOptions</code> property.
   * Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.
   * @return The value of <code>scrollPolicyOptions</code> property.
   *
   */
  public getScrollPolicyOptions(): Promise<unknown | null> {
    return this.getProperty<unknown | null>('scrollPolicyOptions');
  }

  /**
   * Sets the value of <code>selection</code> property.
   * Specifies the current selections in the tree. An empty array indicates nothing is selected.
   * @param selection The value to set for <code>selection</code>
   * @deprecated Since 8.0.0. Use selected attribute instead.
   */
  public changeSelection(selection: Array<any>): Promise<void> {
    return this.setProperty<Array<any>>('selection', selection);
  }

  /**
   * Gets the value of <code>selection</code> property.
   * Specifies the current selections in the tree. An empty array indicates nothing is selected.
   * @return The value of <code>selection</code> property.
   * @deprecated Since 8.0.0. Use selected attribute instead.
   */
  public getSelection(): Promise<Array<any>> {
    return this.getProperty<Array<any>>('selection');
  }

  /**
   * Gets the value of <code>selectionMode</code> property.
   * Specifies the selection mode.
   * @return The value of <code>selectionMode</code> property.
   *
   */
  public getSelectionMode(): Promise<string> {
    return this.getProperty<string>('selectionMode');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Dnd {
  /**
   * Customizes the drag functionality.
   */
  drag: DndDrag;
  /**
   * Customizes the drop functionality.
   */
  drop: DndDrop;
}
export interface DndDrag {
  /**
   * If this object is specified, TreeView will initiate drag operation when the user drags on an item.
   */
  items: DndDragItems;
}
export interface DndDragItems {
  /**
   * The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.
   */
  dataTypes: string | Array<string>;
}
export interface DndDrop {
  /**
   * An object that specifies callback functions to handle dropping items
   */
  items: DndDropItems;
}
export interface DndDropItems {
  /**
   * A data type or an array of data types this component can accept.
   */
  dataTypes: string | Array<string>;
}
export interface Item {}
export interface Translations {
  /**
   * Aria Label for when parent node's data has been received.
   */
  receivedDataAria: string;
  /**
   * Aria Label for when parent node's data is being retrieved.
   */
  retrievingDataAria: string;
  /**
   * Aria Label for each treeview row selector
   * @deprecated Since 15.0.0. This is deprecated because this was a workaround for a JAWS issue that since has been fixed and is no longer used by TreeView.
   */
  treeViewSelectorAria: string;
}
