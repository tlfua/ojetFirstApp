import { OjWebElement } from '../';

/**
 * This is the base class for oj-menu WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjMenu.ts.
 */
export class OjMenuBase extends OjWebElement {
  /**
   * Gets the value of <code>disabled</code> property.
   * Disables the menu if set to true.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>openOptions</code> property.
   * Specifies settings for launching a menu. See the Help documentation for more information.
   * @return The value of <code>openOptions</code> property.
   *
   */
  public getOpenOptions(): Promise<OpenOptions> {
    return this.getProperty<OpenOptions>('openOptions');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface OpenOptions {
  /**
   * Specifies whether the menu displays as a drop down or as a sheet. See the Help documentation for more information.
   */
  display: string;
  /**
   * Specifies focus behavior when the menu is initially opened.
   */
  initialFocus: string;
  /**
   * Specifies the DOM node that launches this menu. See the Help documentation for more information.
   */
  launcher: string;
  /**
   * Specifies the position of a drop down menu when launched. See the Help documentation for more information.
   */
  position: OpenOptionsPosition;
}
export interface OpenOptionsPosition {
  /**
   * Defines which position on the target element ("of") to align the positioned element against.
   */
  at: OpenOptionsPositionAt;
  /**
   * Rule for alternate alignment.
   */
  collision: string;
  /**
   * Defines which edge on the menu to align with the target ("of") element.
   */
  my: OpenOptionsPositionMy;
  /**
   * Which element to position the menu against. See the Help documentation for more information.
   */
  of: string | object;
  /**
   * Defines a point offset in pixels from the ("my") alignment.
   */
  offset: OpenOptionsPositionOffset;
}
export interface OpenOptionsPositionAt {
  /**
   * Defines the horizontal alignment of what the menu is aligned to. See the Help documentation for more information.
   */
  horizontal: string;
  /**
   * Defines the vertical alignment of what the menu is aligned to. See the Help documentation for more information.
   */
  vertical: string;
}
export interface OpenOptionsPositionMy {
  /**
   * Defines the horizontal alignment of the menu.
   */
  horizontal: string;
  /**
   * Defines the vertical alignment of the menu.
   */
  vertical: string;
}
export interface OpenOptionsPositionOffset {
  /**
   * Horizontal alignment offset.
   */
  x: number;
  /**
   * Vertical alignment offset.
   */
  y: number;
}
export interface Translations {
  /**
   * Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected before the first menu item. It is used for establishing VO cursor focus. Activation of the link will move focus to the first menu item.
   */
  ariaFocusSkipLink: string;
  /**
   * Label for the "Cancel" menu item.
   */
  labelCancel: string;
}
