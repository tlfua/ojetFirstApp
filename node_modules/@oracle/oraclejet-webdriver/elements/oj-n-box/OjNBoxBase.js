"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjNBoxBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-n-box WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjNBox.ts.
 */
class OjNBoxBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Specifies the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Specifies the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>as</code> property.
     * Specifies the alias for the current item when referenced inside the nodeTemplate.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>cellContent</code> property.
     * Specifies the content displayed in cells. See the Help documentation for more information.
     * @return The value of <code>cellContent</code> property.
     *
     */
    getCellContent() {
        return this.getProperty('cellContent');
    }
    /**
     * Gets the value of <code>cellMaximize</code> property.
     * Specifies whether cell maximize/de-maximize gestures are enabled.
     * @return The value of <code>cellMaximize</code> property.
     *
     */
    getCellMaximize() {
        return this.getProperty('cellMaximize');
    }
    /**
     * Gets the value of <code>cells</code> property.
     * Specifies the list of cells. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>cells</code> property.
     *
     */
    getCells() {
        return this.getProperty('cells');
    }
    /**
     * Gets the value of <code>columns</code> property.
     * Specifies the list of columns. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>columns</code> property.
     *
     */
    getColumns() {
        return this.getProperty('columns');
    }
    /**
     * Gets the value of <code>columnsTitle</code> property.
     * The text for the title on the column edge.
     * @return The value of <code>columnsTitle</code> property.
     *
     */
    getColumnsTitle() {
        return this.getProperty('columnsTitle');
    }
    /**
     * Gets the value of <code>countLabel</code> property.
     * A function that returns custom text for the cell count labels.
     * @return The value of <code>countLabel</code> property.
     *
     */
    getCountLabel() {
        return this.getProperty('countLabel');
    }
    /**
     * Gets the value of <code>groupAttributes</code> property.
     * An array of attributes for styling the group nodes.
     * @return The value of <code>groupAttributes</code> property.
     *
     */
    getGroupAttributes() {
        return this.getProperty('groupAttributes');
    }
    /**
     * Gets the value of <code>groupBehavior</code> property.
     * Specifies how nodes should be grouped.
     * @return The value of <code>groupBehavior</code> property.
     *
     */
    getGroupBehavior() {
        return this.getProperty('groupBehavior');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>highlightMatch</code> property.
     * The matching condition for the highlightedCategories property. See the Help documentation for more information.
     * @return The value of <code>highlightMatch</code> property.
     *
     */
    getHighlightMatch() {
        return this.getProperty('highlightMatch');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over data items.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>labelTruncation</code> property.
     * Specifies node label truncation behavior. See the Help documentation for more information.
     * @return The value of <code>labelTruncation</code> property.
     *
     */
    getLabelTruncation() {
        return this.getProperty('labelTruncation');
    }
    /**
     * Sets the value of <code>maximizedColumn</code> property.
     * The id of the column to be maximized.
     * @param maximizedColumn The value to set for <code>maximizedColumn</code>
     *
     */
    changeMaximizedColumn(maximizedColumn) {
        return this.setProperty('maximizedColumn', maximizedColumn);
    }
    /**
     * Gets the value of <code>maximizedColumn</code> property.
     * The id of the column to be maximized.
     * @return The value of <code>maximizedColumn</code> property.
     *
     */
    getMaximizedColumn() {
        return this.getProperty('maximizedColumn');
    }
    /**
     * Sets the value of <code>maximizedRow</code> property.
     * The id of the row to be maximized.
     * @param maximizedRow The value to set for <code>maximizedRow</code>
     *
     */
    changeMaximizedRow(maximizedRow) {
        return this.setProperty('maximizedRow', maximizedRow);
    }
    /**
     * Gets the value of <code>maximizedRow</code> property.
     * The id of the row to be maximized.
     * @return The value of <code>maximizedRow</code> property.
     *
     */
    getMaximizedRow() {
        return this.getProperty('maximizedRow');
    }
    /**
     * Gets the value of <code>nodes</code> property.
     * The list of nodes. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>nodes</code> property.
     *
     */
    getNodes() {
        return this.getProperty('nodes');
    }
    /**
     * Gets the value of <code>otherColor</code> property.
     * The color for the "other" group nodes. See the Help documentation for more information.
     * @return The value of <code>otherColor</code> property.
     *
     */
    getOtherColor() {
        return this.getProperty('otherColor');
    }
    /**
     * Gets the value of <code>otherThreshold</code> property.
     * The threshold for aggregating nodes into an "other" group node. See the Help documentation for more information.
     * @return The value of <code>otherThreshold</code> property.
     *
     */
    getOtherThreshold() {
        return this.getProperty('otherThreshold');
    }
    /**
     * Gets the value of <code>rows</code> property.
     * The list of rows. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>rows</code> property.
     *
     */
    getRows() {
        return this.getProperty('rows');
    }
    /**
     * Gets the value of <code>rowsTitle</code> property.
     * The text for the title on the row edge.
     * @return The value of <code>rowsTitle</code> property.
     *
     */
    getRowsTitle() {
        return this.getProperty('rowsTitle');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * Specifies the ids of the selected nodes.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * Specifies the ids of the selected nodes.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection behavior on the NBox. See the Help documentation for more information.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>styleDefaults</code> property.
     * An object defining the style defaults for this NBox.
     * @return The value of <code>styleDefaults</code> property.
     *
     */
    getStyleDefaults() {
        return this.getProperty('styleDefaults');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>touchResponse</code> property.
     * Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.
     * @return The value of <code>touchResponse</code> property.
     *
     */
    getTouchResponse() {
        return this.getProperty('touchResponse');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjNBoxBase = OjNBoxBase;
//# sourceMappingURL=OjNBoxBase.js.map