"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjPagingControlBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-paging-control WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPagingControl.ts.
 */
class OjPagingControlBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>data</code> property.
     * Specifies the data bound to the Paging Control. See the Help documentation for more information.
     * @return The value of <code>data</code> property.
     * @deprecated Since 14.0.0. Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead.
     */
    getData() {
        return this.getProperty('data');
    }
    /**
     * Gets the value of <code>loadMoreOptions</code> property.
     * Options for loadMore mode.
     * @return The value of <code>loadMoreOptions</code> property.
     * @deprecated Since 7.0.0. This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, "loadMore" is not compatible with Table, Listview, DataGrid default scroll-policy "loadMoreOnScroll".
     */
    getLoadMoreOptions() {
        return this.getProperty('loadMoreOptions');
    }
    /**
     * Gets the value of <code>mode</code> property.
     * Specifies the paging mode.
     * @return The value of <code>mode</code> property.
     *
     */
    getMode() {
        return this.getProperty('mode');
    }
    /**
     * Gets the value of <code>overflow</code> property.
     * Specifies the options for when the Paging Control width is too narrow.
     * @return The value of <code>overflow</code> property.
     *
     */
    getOverflow() {
        return this.getProperty('overflow');
    }
    /**
     * Gets the value of <code>pageOptions</code> property.
     * Options for page mode.
     * @return The value of <code>pageOptions</code> property.
     *
     */
    getPageOptions() {
        return this.getProperty('pageOptions');
    }
    /**
     * Gets the value of <code>pageSize</code> property.
     * Page size.
     * @return The value of <code>pageSize</code> property.
     *
     */
    getPageSize() {
        return this.getProperty('pageSize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjPagingControlBase = OjPagingControlBase;
//# sourceMappingURL=OjPagingControlBase.js.map