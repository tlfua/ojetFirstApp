import { OjWebElement } from '../';

/**
 * This is the base class for oj-paging-control WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPagingControl.ts.
 */
export class OjPagingControlBase extends OjWebElement {
  /**
   * Gets the value of <code>data</code> property.
   * Specifies the data bound to the Paging Control. See the Help documentation for more information.
   * @return The value of <code>data</code> property.
   * @deprecated Since 14.0.0. Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead.
   */
  public getData(): Promise<object> {
    return this.getProperty<object>('data');
  }

  /**
   * Gets the value of <code>loadMoreOptions</code> property.
   * Options for loadMore mode.
   * @return The value of <code>loadMoreOptions</code> property.
   * @deprecated Since 7.0.0. This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, "loadMore" is not compatible with Table, Listview, DataGrid default scroll-policy "loadMoreOnScroll".
   */
  public getLoadMoreOptions(): Promise<LoadMoreOptions> {
    return this.getProperty<LoadMoreOptions>('loadMoreOptions');
  }

  /**
   * Gets the value of <code>mode</code> property.
   * Specifies the paging mode.
   * @return The value of <code>mode</code> property.
   *
   */
  public getMode(): Promise<string> {
    return this.getProperty<string>('mode');
  }

  /**
   * Gets the value of <code>overflow</code> property.
   * Specifies the options for when the Paging Control width is too narrow.
   * @return The value of <code>overflow</code> property.
   *
   */
  public getOverflow(): Promise<string> {
    return this.getProperty<string>('overflow');
  }

  /**
   * Gets the value of <code>pageOptions</code> property.
   * Options for page mode.
   * @return The value of <code>pageOptions</code> property.
   *
   */
  public getPageOptions(): Promise<PageOptions> {
    return this.getProperty<PageOptions>('pageOptions');
  }

  /**
   * Gets the value of <code>pageSize</code> property.
   * Page size.
   * @return The value of <code>pageSize</code> property.
   *
   */
  public getPageSize(): Promise<number> {
    return this.getProperty<number>('pageSize');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface LoadMoreOptions {
  /**
   * The maximum number of items to display.
   * @deprecated Since 7.0.0. This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid).
   */
  maxCount: number;
}
export interface PageOptions {
  /**
   * An array of values specifying the navigation controls to display for numeric page links.
   */
  layout: Array<string>;
  /**
   * Specifies the maximum number of numeric page links to display.
   */
  maxPageLinks: number;
  /**
   * Specifies the orientation of the page links.
   */
  orientation: string;
  /**
   * Specifies the type of page links.
   */
  type: string;
}
export interface Translations {
  /**
   * Singe item page index text.
   */
  fullMsgItem: string;
  /**
   * Single item page index text for approximate number of items.
   */
  fullMsgItemApprox: string;
  /**
   * Single item page index text for minimum number of items.
   */
  fullMsgItemAtLeast: string;
  /**
   * Item range page index text.
   */
  fullMsgItemRange: string;
  /**
   * Item range page index text for approximate number of items.
   */
  fullMsgItemRangeApprox: string;
  /**
   * Item range page index text for minimum number of items.
   */
  fullMsgItemRangeAtLeast: string;
  /**
   * First page label for screen readers.
   */
  labelAccNavFirstPage: string;
  /**
   * Last page label for screen readers.
   */
  labelAccNavLastPage: string;
  /**
   * Next page label for screen readers.
   */
  labelAccNavNextPage: string;
  /**
   * Current page label for screen readers.
   */
  labelAccNavPage: string;
  /**
   * Previous page label for screen readers.
   */
  labelAccNavPreviousPage: string;
  /**
   * Paging control page number label for screen readers.
   */
  labelAccPageNumber: string;
  /**
   * Paging control label for screen readers.
   */
  labelAccPaging: string;
  /**
   * Load more link text.
   * @deprecated Since 7.0.0. This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid).
   */
  labelLoadMore: string;
  /**
   * Label for when load more has reached the maximum limit of rows to fetch.
   * @deprecated Since 7.0.0. This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid).
   */
  labelLoadMoreMaxRows: string;
  /**
   * Current page label.
   */
  labelNavInputPage: string;
  /**
   * Maximum page label.
   */
  labelNavInputPageMax: string;
  /**
   * Invalid max page links value error.
   */
  maxPageLinksInvalid: string;
  /**
   * Single item page index text when no total number of items is available.
   */
  msgItemNoTotal: string;
  /**
   * Item range text for known row count.
   */
  msgItemRangeCurrent: string;
  /**
   * Item range text for single page range.
   */
  msgItemRangeCurrentSingle: string;
  /**
   * Item range "items" text.
   */
  msgItemRangeItems: string;
  /**
   * Item range page index text when no total number of items is available.
   */
  msgItemRangeNoTotal: string;
  /**
   * Item range "of" text.
   */
  msgItemRangeOf: string;
  /**
   * Item range of "approx" text.
   */
  msgItemRangeOfApprox: string;
  /**
   * Item range of "at least" text.
   */
  msgItemRangeOfAtLeast: string;
  /**
   * Invalid page error.
   */
  pageInvalid: string;
  /**
   * First page button tip.
   */
  tipNavFirstPage: string;
  /**
   * Current page tip.
   */
  tipNavInputPage: string;
  /**
   * Last page button tip.
   */
  tipNavLastPage: string;
  /**
   * Next page button tip.
   */
  tipNavNextPage: string;
  /**
   * Current page link tip.
   */
  tipNavPageLink: string;
  /**
   * Previous page button tip.
   */
  tipNavPreviousPage: string;
}
