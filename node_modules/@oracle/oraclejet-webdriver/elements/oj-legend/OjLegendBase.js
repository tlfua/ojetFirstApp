"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjLegendBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-legend WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjLegend.ts.
 */
class OjLegendBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>as</code> property.
     * An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.
     * @return The value of <code>as</code> property.
     * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
     */
    getAs() {
        return this.getProperty('as');
    }
    /**
     * Gets the value of <code>drilling</code> property.
     * Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. See the Help documentation for more information.
     * @return The value of <code>drilling</code> property.
     *
     */
    getDrilling() {
        return this.getProperty('drilling');
    }
    /**
     * Sets the value of <code>expanded</code> property.
     * Specifies the key set containing the ids of sections that should be expanded on initial render. See the Help documentation for more information.
     * @param expanded The value to set for <code>expanded</code>
     *
     */
    changeExpanded(expanded) {
        return this.setProperty('expanded', expanded);
    }
    /**
     * Gets the value of <code>expanded</code> property.
     * Specifies the key set containing the ids of sections that should be expanded on initial render. See the Help documentation for more information.
     * @return The value of <code>expanded</code> property.
     *
     */
    getExpanded() {
        return this.getProperty('expanded');
    }
    /**
     * Gets the value of <code>halign</code> property.
     * Defines the horizontal alignment of the legend contents.
     * @return The value of <code>halign</code> property.
     *
     */
    getHalign() {
        return this.getProperty('halign');
    }
    /**
     * Sets the value of <code>hiddenCategories</code> property.
     * An array of categories that will be hidden.
     * @param hiddenCategories The value to set for <code>hiddenCategories</code>
     *
     */
    changeHiddenCategories(hiddenCategories) {
        return this.setProperty('hiddenCategories', hiddenCategories);
    }
    /**
     * Gets the value of <code>hiddenCategories</code> property.
     * An array of categories that will be hidden.
     * @return The value of <code>hiddenCategories</code> property.
     *
     */
    getHiddenCategories() {
        return this.getProperty('hiddenCategories');
    }
    /**
     * Gets the value of <code>hideAndShowBehavior</code> property.
     * Defines whether the legend can be used to initiate hide and show behavior on referenced data items.
     * @return The value of <code>hideAndShowBehavior</code> property.
     *
     */
    getHideAndShowBehavior() {
        return this.getProperty('hideAndShowBehavior');
    }
    /**
     * Sets the value of <code>highlightedCategories</code> property.
     * An array of categories that will be highlighted.
     * @param highlightedCategories The value to set for <code>highlightedCategories</code>
     *
     */
    changeHighlightedCategories(highlightedCategories) {
        return this.setProperty('highlightedCategories', highlightedCategories);
    }
    /**
     * Gets the value of <code>highlightedCategories</code> property.
     * An array of categories that will be highlighted.
     * @return The value of <code>highlightedCategories</code> property.
     *
     */
    getHighlightedCategories() {
        return this.getProperty('highlightedCategories');
    }
    /**
     * Gets the value of <code>hoverBehavior</code> property.
     * Defines the behavior applied when hovering over a legend item.
     * @return The value of <code>hoverBehavior</code> property.
     *
     */
    getHoverBehavior() {
        return this.getProperty('hoverBehavior');
    }
    /**
     * Gets the value of <code>hoverBehaviorDelay</code> property.
     * Specifies initial hover delay in milliseconds for highlighting items in legend.
     * @return The value of <code>hoverBehaviorDelay</code> property.
     * @deprecated Since 14.1.0. This is not recommended in the Redwood design system.
     */
    getHoverBehaviorDelay() {
        return this.getProperty('hoverBehaviorDelay');
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * Defines the orientation of the legend, which determines the direction in which the legend items are laid out.
     * @return The value of <code>orientation</code> property.
     *
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Gets the value of <code>scrolling</code> property.
     * Defines whether scrolling is enabled for the legend.
     * @return The value of <code>scrolling</code> property.
     * @deprecated Since 12.1.0. Setting scrolling to off is not supported in Redwood theme and it is not recommended. As such, this attribute is deprecated.
     */
    getScrolling() {
        return this.getProperty('scrolling');
    }
    /**
     * Gets the value of <code>sectionTitleHalign</code> property.
     * The horizontal alignment of the section titles.
     * @return The value of <code>sectionTitleHalign</code> property.
     *
     */
    getSectionTitleHalign() {
        return this.getProperty('sectionTitleHalign');
    }
    /**
     * Gets the value of <code>sectionTitleStyle</code> property.
     * The CSS style object defining the style of the section titles' text.
     * @return The value of <code>sectionTitleStyle</code> property.
     *
     */
    getSectionTitleStyle() {
        return this.getProperty('sectionTitleStyle');
    }
    /**
     * Gets the value of <code>sections</code> property.
     * An array of objects specifying the legend sections.
     * @return The value of <code>sections</code> property.
     *
     */
    getSections() {
        return this.getProperty('sections');
    }
    /**
     * Gets the value of <code>symbolHeight</code> property.
     * The height of the legend symbol in pixels. See the Help documentation for more information.
     * @return The value of <code>symbolHeight</code> property.
     *
     */
    getSymbolHeight() {
        return this.getProperty('symbolHeight');
    }
    /**
     * Gets the value of <code>symbolWidth</code> property.
     * The width of the legend symbol in pixels. See the Help documentation for more information.
     * @return The value of <code>symbolWidth</code> property.
     *
     */
    getSymbolWidth() {
        return this.getProperty('symbolWidth');
    }
    /**
     * Gets the value of <code>textStyle</code> property.
     * The CSS style object defining the style of the legend item text.
     * @return The value of <code>textStyle</code> property.
     *
     */
    getTextStyle() {
        return this.getProperty('textStyle');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     * @deprecated Since 15.0.0. With the track resize optimized, this API is no longer required. track-resize on will be the default behavior.
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>valign</code> property.
     * Defines the vertical alignment of the legend contents.
     * @return The value of <code>valign</code> property.
     *
     */
    getValign() {
        return this.getProperty('valign');
    }
}
exports.OjLegendBase = OjLegendBase;
//# sourceMappingURL=OjLegendBase.js.map