import { OjWebElement } from '../';

/**
 * This is the base class for oj-buttonset-many WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjButtonsetMany.ts.
 */
export class OjButtonsetManyBase extends OjWebElement {
  /**
   * Gets the value of <code>chroming</code> property.
   * Indicates in what states the buttonset has chrome (background and border).
   * @return The value of <code>chroming</code> property.
   *
   */
  public getChroming(): Promise<string> {
    return this.getProperty<string>('chroming');
  }

  /**
   * Gets the value of <code>describedBy</code> property.
   * buttonset's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string> {
    return this.getProperty<string>('describedBy');
  }

  /**
   * Gets the value of <code>disabled</code> property.
   * Specifies that the buttonset element should be disabled.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>display</code> property.
   * Specifies whether the buttonset displays label and icons, or just icons.
   * @return The value of <code>display</code> property.
   *
   */
  public getDisplay(): Promise<string> {
    return this.getProperty<string>('display');
  }

  /**
   * Gets the value of <code>focusManagement</code> property.
   * Should be set to none when the buttonset is placed within a toolbar.
   * @return The value of <code>focusManagement</code> property.
   *
   */
  public getFocusManagement(): Promise<string> {
    return this.getProperty<string>('focusManagement');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<object | null> {
    return this.getProperty<object | null>('translations');
  }

  /**
   * Sets the value of <code>value</code> property.
   * Indicates which oj-options in the buttonset are selected.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: Array<any> | null): Promise<void> {
    return this.setProperty<Array<any> | null>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * Indicates which oj-options in the buttonset are selected.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<Array<any> | null> {
    return this.getProperty<Array<any> | null>('value');
  }
}
