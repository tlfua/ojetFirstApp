"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjMenuButtonBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-menu-button WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjMenuButton.ts.
 */
class OjMenuButtonBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>chroming</code> property.
     * Indicates in what states the button has chrome (background and border).
     * @return The value of <code>chroming</code> property.
     *
     */
    getChroming() {
        return this.getProperty('chroming');
    }
    /**
     * Gets the value of <code>disabled</code> property.
     * Specifies that the button element should be disabled.
     * @return The value of <code>disabled</code> property.
     *
     */
    getDisabled() {
        return this.getProperty('disabled');
    }
    /**
     * Gets the value of <code>display</code> property.
     * Specifies whether the button displays label and icons, or just icons.
     * @return The value of <code>display</code> property.
     *
     */
    getDisplay() {
        return this.getProperty('display');
    }
    /**
     * Gets the value of <code>label</code> property.
     * Text to show in the button. The label attribute takes precedence over the default DOM slot.
     * @return The value of <code>label</code> property.
     *
     */
    getLabel() {
        return this.getProperty('label');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjMenuButtonBase = OjMenuButtonBase;
//# sourceMappingURL=OjMenuButtonBase.js.map