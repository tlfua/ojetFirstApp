import { OjWebElement } from '../';

/**
 * This is the base class for oj-tag-cloud WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTagCloud.ts.
 */
export class OjTagCloudBase extends OjWebElement {
  /**
   * Gets the value of <code>animationOnDataChange</code> property.
   * Specifies the animation that is applied on data changes.
   * @return The value of <code>animationOnDataChange</code> property.
   *
   */
  public getAnimationOnDataChange(): Promise<string> {
    return this.getProperty<string>('animationOnDataChange');
  }

  /**
   * Gets the value of <code>animationOnDisplay</code> property.
   * Specifies the animation that is shown on initial display.
   * @return The value of <code>animationOnDisplay</code> property.
   *
   */
  public getAnimationOnDisplay(): Promise<string> {
    return this.getProperty<string>('animationOnDisplay');
  }

  /**
   * Gets the value of <code>as</code> property.
   * An alias for the '$current' context variable passed to slot content for the itemTemplate slot.
   * @return The value of <code>as</code> property.
   * @deprecated Since 6.2.0. Set the alias directly on the template element using the data-oj-as attribute instead.
   */
  public getAs(): Promise<string> {
    return this.getProperty<string>('as');
  }

  /**
   * Sets the value of <code>hiddenCategories</code> property.
   * An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.
   * @param hiddenCategories The value to set for <code>hiddenCategories</code>
   *
   */
  public changeHiddenCategories(hiddenCategories: Array<string>): Promise<void> {
    return this.setProperty<Array<string>>('hiddenCategories', hiddenCategories);
  }

  /**
   * Gets the value of <code>hiddenCategories</code> property.
   * An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.
   * @return The value of <code>hiddenCategories</code> property.
   *
   */
  public getHiddenCategories(): Promise<Array<string>> {
    return this.getProperty<Array<string>>('hiddenCategories');
  }

  /**
   * Gets the value of <code>highlightMatch</code> property.
   * The matching condition for the highlightedCategories property. See the Help documentation for more information.
   * @return The value of <code>highlightMatch</code> property.
   *
   */
  public getHighlightMatch(): Promise<string> {
    return this.getProperty<string>('highlightMatch');
  }

  /**
   * Sets the value of <code>highlightedCategories</code> property.
   * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
   * @param highlightedCategories The value to set for <code>highlightedCategories</code>
   *
   */
  public changeHighlightedCategories(highlightedCategories: Array<string>): Promise<void> {
    return this.setProperty<Array<string>>('highlightedCategories', highlightedCategories);
  }

  /**
   * Gets the value of <code>highlightedCategories</code> property.
   * An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.
   * @return The value of <code>highlightedCategories</code> property.
   *
   */
  public getHighlightedCategories(): Promise<Array<string>> {
    return this.getProperty<Array<string>>('highlightedCategories');
  }

  /**
   * Gets the value of <code>hoverBehavior</code> property.
   * Defines the behavior applied when hovering over data items.
   * @return The value of <code>hoverBehavior</code> property.
   *
   */
  public getHoverBehavior(): Promise<string> {
    return this.getProperty<string>('hoverBehavior');
  }

  /**
   * Gets the value of <code>items</code> property.
   * An array of objects defining the data items for the tag cloud items. Also accepts a Promise for deferred data rendering.
   * @return The value of <code>items</code> property.
   *
   */
  public getItems(): Promise<Array<Items> | null | null> {
    return this.getProperty<Array<Items> | null | null>('items');
  }

  /**
   * Gets the value of <code>layout</code> property.
   * The layout to use for tag display.
   * @return The value of <code>layout</code> property.
   *
   */
  public getLayout(): Promise<string> {
    return this.getProperty<string>('layout');
  }

  /**
   * Sets the value of <code>selection</code> property.
   * An array containing the ids of the initially selected data items.
   * @param selection The value to set for <code>selection</code>
   *
   */
  public changeSelection(selection: Array<any>): Promise<void> {
    return this.setProperty<Array<any>>('selection', selection);
  }

  /**
   * Gets the value of <code>selection</code> property.
   * An array containing the ids of the initially selected data items.
   * @return The value of <code>selection</code> property.
   *
   */
  public getSelection(): Promise<Array<any>> {
    return this.getProperty<Array<any>>('selection');
  }

  /**
   * Gets the value of <code>selectionMode</code> property.
   * Specifies the selection mode.
   * @return The value of <code>selectionMode</code> property.
   *
   */
  public getSelectionMode(): Promise<string> {
    return this.getProperty<string>('selectionMode');
  }

  /**
   * Gets the value of <code>styleDefaults</code> property.
   * An object defining the style defaults for this tag cloud.
   * @return The value of <code>styleDefaults</code> property.
   *
   */
  public getStyleDefaults(): Promise<StyleDefaults> {
    return this.getProperty<StyleDefaults>('styleDefaults');
  }

  /**
   * Gets the value of <code>tooltip</code> property.
   * An object containing an optional callback function for tooltip customization.
   * @return The value of <code>tooltip</code> property.
   *
   */
  public getTooltip(): Promise<Tooltip> {
    return this.getProperty<Tooltip>('tooltip');
  }

  /**
   * Gets the value of <code>touchResponse</code> property.
   * Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.
   * @return The value of <code>touchResponse</code> property.
   *
   */
  public getTouchResponse(): Promise<string> {
    return this.getProperty<string>('touchResponse');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   * @deprecated Since 15.0.0. This is no longer needed due to performance enhancements. The default behaviour will be used.
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Items {
  /**
   * An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.
   */
  categories: Array<string>;
  /**
   * The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.
   */
  color: string;
  /**
   * The item id should be set by the application if the DataProvider is not being used. The row key will be used as id in the DataProvider case.
   */
  id: any;
  /**
   * The text of the item.
   */
  label: string;
  /**
   * The description of the item. This is used for customizing the tooltip text.
   */
  shortDesc: string | null;
  /**
   * The CSS style class defining the style of the item text.
   */
  svgClassName: string;
  /**
   * The CSS style object defining the style of the item text. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.
   * @deprecated Since 15.0.0. This is not recommended in the Redwood design system.
   */
  svgStyle: object;
  /**
   * The url this item references.
   */
  url: string;
  /**
   * The value of this item which will be used to scale its font-size within the tag cloud.
   */
  value: number;
}
export interface StyleDefaults {
  /**
   * The duration of the animations in milliseconds.
   */
  animationDuration: number;
  /**
   * Specifies initial hover delay in milliseconds for highlighting data items.
   * @deprecated Since 15.0.0. This is not recommended in the Redwood design system. The default theme value will be used.
   */
  hoverBehaviorDelay: number;
  /**
   * The CSS style object defining the style of the items.
   * @deprecated Since 15.0.0. This is not recommended in the Redwood design system.
   */
  svgStyle: object;
}
export interface Tooltip {}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   * @deprecated Since 15.0.0. This is deprecated because it is not used by the ojTagCloud
   */
  stateVisible: string;
}
