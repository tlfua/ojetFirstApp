import { By, error } from 'selenium-webdriver';
import { SlotProxy, slotProxy } from '../..';
import { OjMessageBannerBase } from './OjMessageBannerBase';

/**
 * The component WebElement for [oj-message-banner](../../jsdocs/oj.ojMessageBanner.html).
 * Do not instantiate this class directly, instead, use
 * [ojMessageBanner](../modules/elements.html#ojMessageBanner).
 */
export class OjMessageBanner extends OjMessageBannerBase {
  /**
   * Retrieve a SlotProxy which represents the detail content of a single message.
   * @param messageLocator.key The key within the MessageBanner's dataset associated with the individual message.
   * @throws {Error} when the detail content rendered is not provided by the application
   * @returns The detail content of the message rendered by the application
   */
  async findDetail<K>(messageLocator: { key: K }): Promise<SlotProxy> {
    const key = messageLocator.key;
    const messageSelector = this.getMessageSelector(key);
    const customDetailContentSelector = '[data-oj-message-custom-detail]';

    try {
      const el = await this.findElement(
        By.css(`${messageSelector} ${customDetailContentSelector}`)
      );
      return slotProxy(el, this);
    } catch (e) {
      throw new error.NoSuchElementError(
        'No corresponding detail template or renderer found for the messageLocator.'
      );
    }
  }

  /**
   * Closes the message identified by the provided key.
   * @param messageLocator.key The key within the MessageBanner's dataset associated with the individual message.
   * @throws {Error} when the specified is not closable (closeAffordance set to "off")
   */
  async doClose<K>(messageLocator: { key: K }): Promise<void> {
    const key = messageLocator.key;
    const messageSelector = this.getMessageSelector(key);
    const closeButtonSelector = '[data-oj-message-close-button] oj-button';

    try {
      const el = await this.findElement(By.css(`${messageSelector} ${closeButtonSelector}`));
      await el.click();
    } catch (e) {
      throw new error.UnsupportedOperationError(
        'The close operation is not applicable for the messageLocator.'
      );
    }
  }

  /**
   * Creates the CSS selector for the message with the provided key.
   *
   * @param key The key of the message
   * @returns the css selector that can used to fetch the message
   */
  private getMessageSelector<K>(key: K) {
    return typeof key === 'number'
      ? `[data-oj-key="number-${key}"]`
      : `[data-oj-key="string-${key}"]`;
  }
}
