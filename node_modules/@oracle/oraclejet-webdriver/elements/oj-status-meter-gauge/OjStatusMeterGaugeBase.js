"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjStatusMeterGaugeBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-status-meter-gauge WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjStatusMeterGauge.ts.
 */
class OjStatusMeterGaugeBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>angleExtent</code> property.
     * Specifies the angle extent of a gauge with circular orientation. Value should be provided in degrees.
     * @return The value of <code>angleExtent</code> property.
     *
     */
    getAngleExtent() {
        return this.getProperty('angleExtent');
    }
    /**
     * Gets the value of <code>animationDuration</code> property.
     * The duration of the animations in milliseconds.
     * @return The value of <code>animationDuration</code> property.
     *
     */
    getAnimationDuration() {
        return this.getProperty('animationDuration');
    }
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Defines the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Defines the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>borderColor</code> property.
     * The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
     * @return The value of <code>borderColor</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getBorderColor() {
        return this.getProperty('borderColor');
    }
    /**
     * Gets the value of <code>borderRadius</code> property.
     * Specifies the border radius of the indicator and plot area. See the Help documentation for more information.
     * @return The value of <code>borderRadius</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getBorderRadius() {
        return this.getProperty('borderRadius');
    }
    /**
     * Gets the value of <code>center</code> property.
     * An object defining the center content of a status meter with circular orientation.
     * @return The value of <code>center</code> property.
     *
     */
    getCenter() {
        return this.getProperty('center');
    }
    /**
     * Gets the value of <code>color</code> property.
     * The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
     * @return The value of <code>color</code> property.
     *
     */
    getColor() {
        return this.getProperty('color');
    }
    /**
     * Gets the value of <code>describedBy</code> property.
     * Specifies a relationship between this component and another element.
     * @return The value of <code>describedBy</code> property.
     *
     */
    getDescribedBy() {
        return this.getProperty('describedBy');
    }
    /**
     * Gets the value of <code>indicatorSize</code> property.
     * Defines the ratio of relative thickness of the indicator to the plot area.
     * @return The value of <code>indicatorSize</code> property.
     *
     */
    getIndicatorSize() {
        return this.getProperty('indicatorSize');
    }
    /**
     * Gets the value of <code>innerRadius</code> property.
     * Specifies the inner radius of a gauge with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1.
     * @return The value of <code>innerRadius</code> property.
     *
     */
    getInnerRadius() {
        return this.getProperty('innerRadius');
    }
    /**
     * Gets the value of <code>label</code> property.
     * An object defining the label.
     * @return The value of <code>label</code> property.
     * @deprecated Since 12.1.0. This attribute is deprecated. Use metric-label instead.
     */
    getLabel() {
        return this.getProperty('label');
    }
    /**
     * Gets the value of <code>labelledBy</code> property.
     * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
     * @return The value of <code>labelledBy</code> property.
     *
     */
    getLabelledBy() {
        return this.getProperty('labelledBy');
    }
    /**
     * Gets the value of <code>max</code> property.
     * The maximum value of the gauge.
     * @return The value of <code>max</code> property.
     *
     */
    getMax() {
        return this.getProperty('max');
    }
    /**
     * Gets the value of <code>metricLabel</code> property.
     * An object defining the value label.
     * @return The value of <code>metricLabel</code> property.
     *
     */
    getMetricLabel() {
        return this.getProperty('metricLabel');
    }
    /**
     * Gets the value of <code>min</code> property.
     * The minimum value of the gauge.
     * @return The value of <code>min</code> property.
     *
     */
    getMin() {
        return this.getProperty('min');
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * Defines the type of status meter to be rendered.
     * @return The value of <code>orientation</code> property.
     *
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Gets the value of <code>plotArea</code> property.
     * Plot Area for Status Meter Gauge
     * @return The value of <code>plotArea</code> property.
     *
     */
    getPlotArea() {
        return this.getProperty('plotArea');
    }
    /**
     * Gets the value of <code>readonly</code> property.
     * Defines whether the value of the gauge can be changed by the end user.
     * @return The value of <code>readonly</code> property.
     *
     */
    getReadonly() {
        return this.getProperty('readonly');
    }
    /**
     * Gets the value of <code>referenceLines</code> property.
     * An array of objects specifying the reference lines for the gauge.
     * @return The value of <code>referenceLines</code> property.
     *
     */
    getReferenceLines() {
        return this.getProperty('referenceLines');
    }
    /**
     * Gets the value of <code>size</code> property.
     * Specifies the gauge size.
     * @return The value of <code>size</code> property.
     *
     */
    getSizeProperty() {
        return this.getProperty('size');
    }
    /**
     * Gets the value of <code>startAngle</code> property.
     * Specifies the start angle of a gauge with circular orientation. Value should be provided in degrees.
     * @return The value of <code>startAngle</code> property.
     *
     */
    getStartAngle() {
        return this.getProperty('startAngle');
    }
    /**
     * Gets the value of <code>step</code> property.
     * Specifies the increment by which values can be changed by the end user. See the Help documentation for more information.
     * @return The value of <code>step</code> property.
     *
     */
    getStep() {
        return this.getProperty('step');
    }
    /**
     * Gets the value of <code>svgClassName</code> property.
     * The CSS style class to apply to the gauge indicator. See the Help documentation for more information.
     * @return The value of <code>svgClassName</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getSvgClassName() {
        return this.getProperty('svgClassName');
    }
    /**
     * Gets the value of <code>svgStyle</code> property.
     * The inline style to apply to the gauge indicator. See the Help documentation for more information.
     * @return The value of <code>svgStyle</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getSvgStyle() {
        return this.getProperty('svgStyle');
    }
    /**
     * Gets the value of <code>thresholdDisplay</code> property.
     * Controls whether the current threshold is displayed on the indicator, in the plotArea, or if all the thresholds are displayed in the plot area.
     * @return The value of <code>thresholdDisplay</code> property.
     *
     */
    getThresholdDisplay() {
        return this.getProperty('thresholdDisplay');
    }
    /**
     * Gets the value of <code>thresholds</code> property.
     * An array of objects specifying the gauge thresholds.
     * @return The value of <code>thresholds</code> property.
     *
     */
    getThresholds() {
        return this.getProperty('thresholds');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>transientValue</code> property.
     * Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.
     * @return The value of <code>transientValue</code> property.
     *
     */
    getTransientValue() {
        return this.getProperty('transientValue');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Sets the value of <code>value</code> property.
     * The metric value.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * The metric value.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
    /**
     * Gets the value of <code>visualEffects</code> property.
     * Defines whether the theme specific visual effects such as overlays and gradients are applied to the gauge.
     * @return The value of <code>visualEffects</code> property.
     * @deprecated Since 12.1.0. Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated.
     */
    getVisualEffects() {
        return this.getProperty('visualEffects');
    }
}
exports.OjStatusMeterGaugeBase = OjStatusMeterGaugeBase;
//# sourceMappingURL=OjStatusMeterGaugeBase.js.map