import { OjWebElement } from '../';

/**
 * This is the base class for oj-status-meter-gauge WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjStatusMeterGauge.ts.
 */
export class OjStatusMeterGaugeBase extends OjWebElement {
  /**
   * Gets the value of <code>angleExtent</code> property.
   * Specifies the angle extent of a gauge with circular orientation. Value should be provided in degrees.
   * @return The value of <code>angleExtent</code> property.
   *
   */
  public getAngleExtent(): Promise<number> {
    return this.getProperty<number>('angleExtent');
  }

  /**
   * Gets the value of <code>animationDuration</code> property.
   * The duration of the animations in milliseconds.
   * @return The value of <code>animationDuration</code> property.
   *
   */
  public getAnimationDuration(): Promise<number> {
    return this.getProperty<number>('animationDuration');
  }

  /**
   * Gets the value of <code>animationOnDataChange</code> property.
   * Defines the animation that is applied on data changes.
   * @return The value of <code>animationOnDataChange</code> property.
   *
   */
  public getAnimationOnDataChange(): Promise<string> {
    return this.getProperty<string>('animationOnDataChange');
  }

  /**
   * Gets the value of <code>animationOnDisplay</code> property.
   * Defines the animation that is shown on initial display.
   * @return The value of <code>animationOnDisplay</code> property.
   *
   */
  public getAnimationOnDisplay(): Promise<string> {
    return this.getProperty<string>('animationOnDisplay');
  }

  /**
   * Gets the value of <code>borderColor</code> property.
   * The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
   * @return The value of <code>borderColor</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getBorderColor(): Promise<string> {
    return this.getProperty<string>('borderColor');
  }

  /**
   * Gets the value of <code>borderRadius</code> property.
   * Specifies the border radius of the indicator and plot area. See the Help documentation for more information.
   * @return The value of <code>borderRadius</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getBorderRadius(): Promise<string> {
    return this.getProperty<string>('borderRadius');
  }

  /**
   * Gets the value of <code>center</code> property.
   * An object defining the center content of a status meter with circular orientation.
   * @return The value of <code>center</code> property.
   *
   */
  public getCenter(): Promise<Center> {
    return this.getProperty<Center>('center');
  }

  /**
   * Gets the value of <code>color</code> property.
   * The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.
   * @return The value of <code>color</code> property.
   *
   */
  public getColor(): Promise<string> {
    return this.getProperty<string>('color');
  }

  /**
   * Gets the value of <code>describedBy</code> property.
   * Specifies a relationship between this component and another element.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string | null> {
    return this.getProperty<string | null>('describedBy');
  }

  /**
   * Gets the value of <code>indicatorSize</code> property.
   * Defines the ratio of relative thickness of the indicator to the plot area.
   * @return The value of <code>indicatorSize</code> property.
   *
   */
  public getIndicatorSize(): Promise<number> {
    return this.getProperty<number>('indicatorSize');
  }

  /**
   * Gets the value of <code>innerRadius</code> property.
   * Specifies the inner radius of a gauge with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1.
   * @return The value of <code>innerRadius</code> property.
   *
   */
  public getInnerRadius(): Promise<number> {
    return this.getProperty<number>('innerRadius');
  }

  /**
   * Gets the value of <code>label</code> property.
   * An object defining the label.
   * @return The value of <code>label</code> property.
   * @deprecated Since 12.1.0. This attribute is deprecated. Use metric-label instead.
   */
  public getLabel(): Promise<Label> {
    return this.getProperty<Label>('label');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Gets the value of <code>max</code> property.
   * The maximum value of the gauge.
   * @return The value of <code>max</code> property.
   *
   */
  public getMax(): Promise<number> {
    return this.getProperty<number>('max');
  }

  /**
   * Gets the value of <code>metricLabel</code> property.
   * An object defining the value label.
   * @return The value of <code>metricLabel</code> property.
   *
   */
  public getMetricLabel(): Promise<MetricLabel> {
    return this.getProperty<MetricLabel>('metricLabel');
  }

  /**
   * Gets the value of <code>min</code> property.
   * The minimum value of the gauge.
   * @return The value of <code>min</code> property.
   *
   */
  public getMin(): Promise<number> {
    return this.getProperty<number>('min');
  }

  /**
   * Gets the value of <code>orientation</code> property.
   * Defines the type of status meter to be rendered.
   * @return The value of <code>orientation</code> property.
   *
   */
  public getOrientation(): Promise<string> {
    return this.getProperty<string>('orientation');
  }

  /**
   * Gets the value of <code>plotArea</code> property.
   * Plot Area for Status Meter Gauge
   * @return The value of <code>plotArea</code> property.
   *
   */
  public getPlotArea(): Promise<PlotArea> {
    return this.getProperty<PlotArea>('plotArea');
  }

  /**
   * Gets the value of <code>readonly</code> property.
   * Defines whether the value of the gauge can be changed by the end user.
   * @return The value of <code>readonly</code> property.
   *
   */
  public getReadonly(): Promise<boolean> {
    return this.getProperty<boolean>('readonly');
  }

  /**
   * Gets the value of <code>referenceLines</code> property.
   * An array of objects specifying the reference lines for the gauge.
   * @return The value of <code>referenceLines</code> property.
   *
   */
  public getReferenceLines(): Promise<Array<ReferenceLines>> {
    return this.getProperty<Array<ReferenceLines>>('referenceLines');
  }

  /**
   * Gets the value of <code>size</code> property.
   * Specifies the gauge size.
   * @return The value of <code>size</code> property.
   *
   */
  public getSizeProperty(): Promise<string> {
    return this.getProperty<string>('size');
  }

  /**
   * Gets the value of <code>startAngle</code> property.
   * Specifies the start angle of a gauge with circular orientation. Value should be provided in degrees.
   * @return The value of <code>startAngle</code> property.
   *
   */
  public getStartAngle(): Promise<number> {
    return this.getProperty<number>('startAngle');
  }

  /**
   * Gets the value of <code>step</code> property.
   * Specifies the increment by which values can be changed by the end user. See the Help documentation for more information.
   * @return The value of <code>step</code> property.
   *
   */
  public getStep(): Promise<number | null> {
    return this.getProperty<number | null>('step');
  }

  /**
   * Gets the value of <code>svgClassName</code> property.
   * The CSS style class to apply to the gauge indicator. See the Help documentation for more information.
   * @return The value of <code>svgClassName</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getSvgClassName(): Promise<string> {
    return this.getProperty<string>('svgClassName');
  }

  /**
   * Gets the value of <code>svgStyle</code> property.
   * The inline style to apply to the gauge indicator. See the Help documentation for more information.
   * @return The value of <code>svgStyle</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getSvgStyle(): Promise<object> {
    return this.getProperty<object>('svgStyle');
  }

  /**
   * Gets the value of <code>thresholdDisplay</code> property.
   * Controls whether the current threshold is displayed on the indicator, in the plotArea, or if all the thresholds are displayed in the plot area.
   * @return The value of <code>thresholdDisplay</code> property.
   *
   */
  public getThresholdDisplay(): Promise<string> {
    return this.getProperty<string>('thresholdDisplay');
  }

  /**
   * Gets the value of <code>thresholds</code> property.
   * An array of objects specifying the gauge thresholds.
   * @return The value of <code>thresholds</code> property.
   *
   */
  public getThresholds(): Promise<Array<Thresholds>> {
    return this.getProperty<Array<Thresholds>>('thresholds');
  }

  /**
   * Gets the value of <code>tooltip</code> property.
   * An object containing an optional callback function for tooltip customization.
   * @return The value of <code>tooltip</code> property.
   *
   */
  public getTooltip(): Promise<Tooltip> {
    return this.getProperty<Tooltip>('tooltip');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   *
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>transientValue</code> property.
   * Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.
   * @return The value of <code>transientValue</code> property.
   *
   */
  public getTransientValue(): Promise<number | null> {
    return this.getProperty<number | null>('transientValue');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The metric value.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: number | null): Promise<void> {
    return this.setProperty<number | null>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The metric value.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<number | null> {
    return this.getProperty<number | null>('value');
  }

  /**
   * Gets the value of <code>visualEffects</code> property.
   * Defines whether the theme specific visual effects such as overlays and gradients are applied to the gauge.
   * @return The value of <code>visualEffects</code> property.
   * @deprecated Since 12.1.0. Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated.
   */
  public getVisualEffects(): Promise<string> {
    return this.getProperty<string>('visualEffects');
  }
}
export interface Center {}
export interface Label {
  /**
   * Specifies the label position for horizontal and vertical gauges. See the Help documentation for more information.
   */
  position: string;
  /**
   * The CSS style object to apply to the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.
   */
  style: object;
  /**
   * The text for the label.
   */
  text: string;
}
export interface MetricLabel {
  /**
   * The converter used to format the labels. See the Help documentation for more information.
   */
  converter: object;
  /**
   * Specifies the metric label position for horizontal and vertical gauges. See the Help documentation for more information.
   */
  position: string;
  /**
   * Defines if the label is rendered. If set to auto, the label is rendered if the orientation is circular.
   */
  rendered: string;
  /**
   * The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.
   */
  scaling: string;
  /**
   * The CSS style object to apply to the label.
   */
  style: object;
  /**
   * The text for the label. If specified, text will overwrite the numeric value that is displayed by default. See the Help documentation for more information.
   */
  text: string;
  /**
   * Defines whether the label is a number or a percentage of the total value.
   */
  textType: string;
}
export interface PlotArea {
  /**
   * The border color of the plot area.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  borderColor: string;
  /**
   * Specifies the border radius of the plot area shape. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  borderRadius: string;
  /**
   * The color of the plot area.
   */
  color: string;
  /**
   * Specifies whether to render the plot area. See the Help documentation for more information.
   */
  rendered: string;
  /**
   * The CSS style class to apply to the plot area. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the plot area. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgStyle: object;
}
export interface ReferenceLines {
  /**
   * The color of the reference line.
   */
  color: string;
  /**
   * The line style of the reference line.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system
   */
  lineStyle: string;
  /**
   * The width of the reference line.
   * @deprecated Since 14.1.0. This is not recommended in the Redwood design system
   */
  lineWidth: number;
  /**
   * The value of the reference line.
   */
  value: number;
}
export interface Thresholds {
  /**
   * The border color of the threshold.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system
   */
  borderColor: string;
  /**
   * The color of the threshold.
   */
  color: string;
  /**
   * The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.
   */
  max: number;
  /**
   * Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.
   */
  shortDesc: string;
}
export interface Tooltip {}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-status-meter-gauge.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the status meter gauge.
   */
  stateVisible: string;
}
