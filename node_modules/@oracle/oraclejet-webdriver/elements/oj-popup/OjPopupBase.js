"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjPopupBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-popup WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPopup.ts.
 */
class OjPopupBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>autoDismiss</code> property.
     * Specifies the auto dismissal behavior.
     * @return The value of <code>autoDismiss</code> property.
     *
     */
    getAutoDismiss() {
        return this.getProperty('autoDismiss');
    }
    /**
     * Gets the value of <code>chrome</code> property.
     * Specifies whether to use the border, shadow, and background colors from the active theme.
     * @return The value of <code>chrome</code> property.
     *
     */
    getChrome() {
        return this.getProperty('chrome');
    }
    /**
     * Gets the value of <code>initialFocus</code> property.
     * Specifies whether the popup steals focus to its content when initially opened.
     * @return The value of <code>initialFocus</code> property.
     *
     */
    getInitialFocus() {
        return this.getProperty('initialFocus');
    }
    /**
     * Gets the value of <code>modality</code> property.
     * Specifies whether the popup should block user input to the page.
     * @return The value of <code>modality</code> property.
     *
     */
    getModality() {
        return this.getProperty('modality');
    }
    /**
     * Gets the value of <code>position</code> property.
     * Specifies the position of a popup when launched. See the Help documentation for more information.
     * @return The value of <code>position</code> property.
     *
     */
    getPosition() {
        return this.getProperty('position');
    }
    /**
     * Gets the value of <code>tail</code> property.
     * Specifies whether to display a decoration pointing from the popup to the launching element. See the Help documentation for more information.
     * @return The value of <code>tail</code> property.
     *
     */
    getTail() {
        return this.getProperty('tail');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
}
exports.OjPopupBase = OjPopupBase;
//# sourceMappingURL=OjPopupBase.js.map