import { OjWebElement } from '../';

/**
 * This is the base class for oj-popup WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjPopup.ts.
 */
export class OjPopupBase extends OjWebElement {
  /**
   * Gets the value of <code>autoDismiss</code> property.
   * Specifies the auto dismissal behavior.
   * @return The value of <code>autoDismiss</code> property.
   *
   */
  public getAutoDismiss(): Promise<string> {
    return this.getProperty<string>('autoDismiss');
  }

  /**
   * Gets the value of <code>chrome</code> property.
   * Specifies whether to use the border, shadow, and background colors from the active theme.
   * @return The value of <code>chrome</code> property.
   *
   */
  public getChrome(): Promise<string> {
    return this.getProperty<string>('chrome');
  }

  /**
   * Gets the value of <code>initialFocus</code> property.
   * Specifies whether the popup steals focus to its content when initially opened.
   * @return The value of <code>initialFocus</code> property.
   *
   */
  public getInitialFocus(): Promise<string> {
    return this.getProperty<string>('initialFocus');
  }

  /**
   * Gets the value of <code>modality</code> property.
   * Specifies whether the popup should block user input to the page.
   * @return The value of <code>modality</code> property.
   *
   */
  public getModality(): Promise<string> {
    return this.getProperty<string>('modality');
  }

  /**
   * Gets the value of <code>position</code> property.
   * Specifies the position of a popup when launched. See the Help documentation for more information.
   * @return The value of <code>position</code> property.
   *
   */
  public getPosition(): Promise<Position> {
    return this.getProperty<Position>('position');
  }

  /**
   * Gets the value of <code>tail</code> property.
   * Specifies whether to display a decoration pointing from the popup to the launching element. See the Help documentation for more information.
   * @return The value of <code>tail</code> property.
   *
   */
  public getTail(): Promise<string> {
    return this.getProperty<string>('tail');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Position {
  /**
   * Defines which position on the target element ("of") to align the positioned element against.
   */
  at: PositionAt;
  /**
   * Rule for alternate alignment.
   */
  collision: string;
  /**
   * Defines which edge on the popup to align with the target ("of") element.
   */
  my: PositionMy;
  /**
   * Which element to position the popup against. See the Help documentation for more information.
   */
  of: string | object;
  /**
   * Defines a point offset in pixels from the ("my") alignment.
   */
  offset: PositionOffset;
}
export interface PositionAt {
  /**
   * Defines the horizontal alignment of what the popup is aligned to.
   */
  horizontal: string;
  /**
   * Defines the vertical alignment of what the popup is aligned to.
   */
  vertical: string;
}
export interface PositionMy {
  /**
   * Defines the horizontal alignment of the popup.
   */
  horizontal: string;
  /**
   * Defines the vertical alignment of the popup.
   */
  vertical: string;
}
export interface PositionOffset {
  /**
   * Horizontal alignment offset.
   */
  x: number;
  /**
   * Vertical alignment offset.
   */
  y: number;
}
export interface Translations {
  /**
   * Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the context area of an open popup and used for ojPopup#close activation.
   */
  ariaCloseSkipLink: string;
  /**
   * Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the launcher of an open popup. The launcher is passed as the first argument to ojPopup#open. Activation of the link will move focus to the content of the associated popup.
   */
  ariaFocusSkipLink: string;
  /**
   * Message announced to a WAI-ARIA live region on desktop platforms when a popup opens and steals initial focus.
   */
  ariaLiveRegionInitialFocusFirstFocusable: string;
  /**
   * Message announced to a WAI-ARIA live region on platforms supporting VoiceOver when a popup opens and steals initial focus.
   */
  ariaLiveRegionInitialFocusFirstFocusableTouch: string;
  /**
   * Message announced to a WAI-ARIA live region on desktop platforms when a popup opens but doesn't change focus.
   */
  ariaLiveRegionInitialFocusNone: string;
  /**
   * Message announced to a WAI-ARIA live region on platforms supporting VoiceOver when a popup opens but doesn't change focus.
   */
  ariaLiveRegionInitialFocusNoneTouch: string;
}
