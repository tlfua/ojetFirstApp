"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjTimelineBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-timeline WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTimeline.ts.
 */
class OjTimelineBase extends __1.OjWebElement {
    /**
     * Gets the value of <code>animationOnDataChange</code> property.
     * Specifies the animation that is applied on data changes.
     * @return The value of <code>animationOnDataChange</code> property.
     *
     */
    getAnimationOnDataChange() {
        return this.getProperty('animationOnDataChange');
    }
    /**
     * Gets the value of <code>animationOnDisplay</code> property.
     * Specifies the animation that is shown on initial display.
     * @return The value of <code>animationOnDisplay</code> property.
     *
     */
    getAnimationOnDisplay() {
        return this.getProperty('animationOnDisplay');
    }
    /**
     * Gets the value of <code>dnd</code> property.
     * Enables drag and drop functionality.
     * @return The value of <code>dnd</code> property.
     *
     */
    getDnd() {
        return this.getProperty('dnd');
    }
    /**
     * Gets the value of <code>end</code> property.
     * The end time of the timeline. See the Help documentation for more information.
     * @return The value of <code>end</code> property.
     *
     */
    getEnd() {
        return this.getProperty('end');
    }
    /**
     * Gets the value of <code>itemDefaults</code> property.
     * Specifies default properties for items in the Timeline.
     * @return The value of <code>itemDefaults</code> property.
     *
     */
    getItemDefaults() {
        return this.getProperty('itemDefaults');
    }
    /**
     * Gets the value of <code>majorAxis</code> property.
     * An object defining the optional timeline major axis.
     * @return The value of <code>majorAxis</code> property.
     *
     */
    getMajorAxis() {
        return this.getProperty('majorAxis');
    }
    /**
     * Gets the value of <code>minorAxis</code> property.
     * An object defining the timeline minor axis.
     * @return The value of <code>minorAxis</code> property.
     *
     */
    getMinorAxis() {
        return this.getProperty('minorAxis');
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * The orientation of the element.
     * @return The value of <code>orientation</code> property.
     *
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Gets the value of <code>overview</code> property.
     * An object defining the optional timeline overview.
     * @return The value of <code>overview</code> property.
     *
     */
    getOverview() {
        return this.getProperty('overview');
    }
    /**
     * Gets the value of <code>referenceObjects</code> property.
     * The array of reference objects associated with the timeline. See the Help documentation for more information.
     * @return The value of <code>referenceObjects</code> property.
     *
     */
    getReferenceObjects() {
        return this.getProperty('referenceObjects');
    }
    /**
     * Sets the value of <code>selection</code> property.
     * An array of strings containing the ids of the initially selected items.
     * @param selection The value to set for <code>selection</code>
     *
     */
    changeSelection(selection) {
        return this.setProperty('selection', selection);
    }
    /**
     * Gets the value of <code>selection</code> property.
     * An array of strings containing the ids of the initially selected items.
     * @return The value of <code>selection</code> property.
     *
     */
    getSelection() {
        return this.getProperty('selection');
    }
    /**
     * Gets the value of <code>selectionMode</code> property.
     * Specifies the selection mode.
     * @return The value of <code>selectionMode</code> property.
     *
     */
    getSelectionMode() {
        return this.getProperty('selectionMode');
    }
    /**
     * Gets the value of <code>series</code> property.
     * An array of objects defining each timeline series. Also accepts a Promise for deferred data rendering.
     * @return The value of <code>series</code> property.
     *
     */
    getSeries() {
        return this.getProperty('series');
    }
    /**
     * Gets the value of <code>start</code> property.
     * The start time of the timeline. See the Help documentation for more information.
     * @return The value of <code>start</code> property.
     *
     */
    getStart() {
        return this.getProperty('start');
    }
    /**
     * Gets the value of <code>styleDefaults</code> property.
     * An object defining the default styling for this timeline.
     * @return The value of <code>styleDefaults</code> property.
     *
     */
    getStyleDefaults() {
        return this.getProperty('styleDefaults');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>valueFormats</code> property.
     * An object specifying value formatting and tooltip behavior, whose keys generally correspond to item properties.
     * @return The value of <code>valueFormats</code> property.
     *
     */
    getValueFormats() {
        return this.getProperty('valueFormats');
    }
    /**
     * Gets the value of <code>viewportEnd</code> property.
     * The end time of the timeline's viewport. See the Help documentation for more information.
     * @return The value of <code>viewportEnd</code> property.
     *
     */
    getViewportEnd() {
        return this.getProperty('viewportEnd');
    }
    /**
     * Gets the value of <code>viewportNavigationMode</code> property.
     * The viewport navigation mode of the timeline.
     * @return The value of <code>viewportNavigationMode</code> property.
     *
     */
    getViewportNavigationMode() {
        return this.getProperty('viewportNavigationMode');
    }
    /**
     * Gets the value of <code>viewportStart</code> property.
     * The start time of the timeline's viewport. See the Help documentation for more information.
     * @return The value of <code>viewportStart</code> property.
     *
     */
    getViewportStart() {
        return this.getProperty('viewportStart');
    }
}
exports.OjTimelineBase = OjTimelineBase;
//# sourceMappingURL=OjTimelineBase.js.map