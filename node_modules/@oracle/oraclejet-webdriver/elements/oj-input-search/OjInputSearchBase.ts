import { OjWebElement } from '../';

/**
 * This is the base class for oj-input-search WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjInputSearch.ts.
 */
export class OjInputSearchBase extends OjWebElement {
  /**
   * Gets the value of <code>suggestionItemText</code> property.
   * Specifies the text string to render for a suggestion.
   * @return The value of <code>suggestionItemText</code> property.
   *
   */
  public getSuggestionItemText(): Promise<string | number | null> {
    return this.getProperty<string | number | null>('suggestionItemText');
  }

  /**
   * Gets the value of <code>placeholder</code> property.
   * A short hint that can be displayed before user selects or enters a value.
   * @return The value of <code>placeholder</code> property.
   *
   */
  public getPlaceholder(): Promise<string> {
    return this.getProperty<string>('placeholder');
  }

  /**
   * Gets the value of <code>rawValue</code> property.
   * Read-only property used for retrieving the current value from the input field in string form.
   * @return The value of <code>rawValue</code> property.
   *
   */
  public getRawValue(): Promise<string> {
    return this.getProperty<string>('rawValue');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The value of the element.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: string): Promise<void> {
    return this.setProperty<string>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The value of the element.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<string> {
    return this.getProperty<string>('value');
  }
}
