import { OjWebElement } from '../';

/**
 * This is the base class for oj-train WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjTrain.ts.
 */
export class OjTrainBase extends OjWebElement {
  /**
   * Sets the value of <code>selectedStep</code> property.
   * Specifies the id of the current selected step.
   * @param selectedStep The value to set for <code>selectedStep</code>
   *
   */
  public changeSelectedStep(selectedStep: string): Promise<void> {
    return this.setProperty<string>('selectedStep', selectedStep);
  }

  /**
   * Gets the value of <code>selectedStep</code> property.
   * Specifies the id of the current selected step.
   * @return The value of <code>selectedStep</code> property.
   *
   */
  public getSelectedStep(): Promise<string> {
    return this.getProperty<string>('selectedStep');
  }

  /**
   * Gets the value of <code>steps</code> property.
   * The array of step objects.
   * @return The value of <code>steps</code> property.
   *
   */
  public getSteps(): Promise<Array<Steps>> {
    return this.getProperty<Array<Steps>>('steps');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }
}
export interface Steps {
  /**
   * Specifies whether the step is disabled
   */
  disabled: boolean;
  /**
   * The id of the step
   */
  id: string;
  /**
   * The label of the step
   */
  label: string;
  /**
   * Specifies the type of message icon displayed on the step. A null value removes the message icon.
   */
  messageType: string | null;
  /**
   * Specifies whether the step has been visited
   */
  visited: boolean;
}
export interface Translations {
  /**
   * Description for the current train step status.
   */
  stepCurrent: string;
  /**
   * Description for the disabled train step status.
   */
  stepDisabled: string;
  /**
   * General description for a train step. The text may contain tokens '{index}' and '{count}', which will be replaced by the corresponding train step values.
   */
  stepInfo: string;
  /**
   * Description for the train step message type Confirmation.
   */
  stepMessageConfirmation: string;
  /**
   * Description for the train step message type Error.
   */
  stepMessageError: string;
  /**
   * Description for the train step message type Info.
   */
  stepMessageInfo: string;
  /**
   * Description for the train step message type. The actual value is passed in the '{messageType}' token.
   */
  stepMessageType: string;
  /**
   * Description for the train step message type Warning.
   */
  stepMessageWarning: string;
  /**
   * Description for the non-visited train step status.
   */
  stepNotVisited: string;
  /**
   * Description for the train step status. The actual status value is passed in the '{status}' token.
   */
  stepStatus: string;
  /**
   * Description for the visited train step status.
   */
  stepVisited: string;
}
