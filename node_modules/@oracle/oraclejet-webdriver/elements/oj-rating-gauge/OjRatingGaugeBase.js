"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OjRatingGaugeBase = void 0;
const __1 = require("../");
/**
 * This is the base class for oj-rating-gauge WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjRatingGauge.ts.
 */
class OjRatingGaugeBase extends __1.OjWebElement {
    /**
     * Sets the value of <code>changed</code> property.
     * Whether there has been a value entered by the user.
     * @param changed The value to set for <code>changed</code>
     *
     */
    changeChanged(changed) {
        return this.setProperty('changed', changed);
    }
    /**
     * Gets the value of <code>changed</code> property.
     * Whether there has been a value entered by the user.
     * @return The value of <code>changed</code> property.
     *
     */
    getChanged() {
        return this.getProperty('changed');
    }
    /**
     * Gets the value of <code>changedState</code> property.
     * The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true.
     * @return The value of <code>changedState</code> property.
     *
     */
    getChangedState() {
        return this.getProperty('changedState');
    }
    /**
     * Gets the value of <code>describedBy</code> property.
     * Specifies a relationship between this component and another element.
     * @return The value of <code>describedBy</code> property.
     *
     */
    getDescribedBy() {
        return this.getProperty('describedBy');
    }
    /**
     * Gets the value of <code>disabled</code> property.
     * Defines whether the gauge is disabled or not. User interaction is prevented if set to true. Visual indication will not be present when custom image source is used. Other state specific svg-class-name and svg-style will be overridden by disabled default style.
     * @return The value of <code>disabled</code> property.
     *
     */
    getDisabled() {
        return this.getProperty('disabled');
    }
    /**
     * Gets the value of <code>hoverState</code> property.
     * The shape that displays on hover.
     * @return The value of <code>hoverState</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getHoverState() {
        return this.getProperty('hoverState');
    }
    /**
     * Gets the value of <code>labelledBy</code> property.
     * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
     * @return The value of <code>labelledBy</code> property.
     *
     */
    getLabelledBy() {
        return this.getProperty('labelledBy');
    }
    /**
     * Gets the value of <code>max</code> property.
     * Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed.
     * @return The value of <code>max</code> property.
     *
     */
    getMax() {
        return this.getProperty('max');
    }
    /**
     * Gets the value of <code>min</code> property.
     * The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API.
     * @return The value of <code>min</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getMin() {
        return this.getProperty('min');
    }
    /**
     * Gets the value of <code>orientation</code> property.
     * Defines the type of rating gauge to be rendered.
     * @return The value of <code>orientation</code> property.
     * @deprecated Since 9.0.0. Usage of vertical rating gauges is not recommended.
     */
    getOrientation() {
        return this.getProperty('orientation');
    }
    /**
     * Gets the value of <code>preserveAspectRatio</code> property.
     * Specifies whether the images provided should show up at their defined aspect ratios. See the Help documentation for more information.
     * @return The value of <code>preserveAspectRatio</code> property.
     *
     */
    getPreserveAspectRatio() {
        return this.getProperty('preserveAspectRatio');
    }
    /**
     * Gets the value of <code>readonly</code> property.
     * Defines whether the value of the gauge can be changed by the end user.
     * @return The value of <code>readonly</code> property.
     *
     */
    getReadonly() {
        return this.getProperty('readonly');
    }
    /**
     * Gets the value of <code>selectedState</code> property.
     * The selected shape for the gauge.
     * @return The value of <code>selectedState</code> property.
     *
     */
    getSelectedState() {
        return this.getProperty('selectedState');
    }
    /**
     * Gets the value of <code>size</code> property.
     * Specifies the size of the rating gauge item. See the Help documentation for more information.
     * @return The value of <code>size</code> property.
     *
     */
    getSizeProperty() {
        return this.getProperty('size');
    }
    /**
     * Gets the value of <code>step</code> property.
     * Specifies the increment by which values can be specified by the end user.
     * @return The value of <code>step</code> property.
     *
     */
    getStep() {
        return this.getProperty('step');
    }
    /**
     * Gets the value of <code>thresholds</code> property.
     * An array of objects specifying the gauge thresholds.
     * @return The value of <code>thresholds</code> property.
     *
     */
    getThresholds() {
        return this.getProperty('thresholds');
    }
    /**
     * Gets the value of <code>tooltip</code> property.
     * An object containing an optional callback function for tooltip customization.
     * @return The value of <code>tooltip</code> property.
     *
     */
    getTooltip() {
        return this.getProperty('tooltip');
    }
    /**
     * Gets the value of <code>trackResize</code> property.
     * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
     * @return The value of <code>trackResize</code> property.
     *
     */
    getTrackResize() {
        return this.getProperty('trackResize');
    }
    /**
     * Gets the value of <code>transientValue</code> property.
     * Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.
     * @return The value of <code>transientValue</code> property.
     *
     */
    getTransientValue() {
        return this.getProperty('transientValue');
    }
    /**
     * Gets the value of <code>translations</code> property.
     * A collection of translated resources from the translation bundle, or null if this component has no resources.
     * @return The value of <code>translations</code> property.
     *
     */
    getTranslations() {
        return this.getProperty('translations');
    }
    /**
     * Gets the value of <code>unselectedState</code> property.
     * The unselected shape for the gauge.
     * @return The value of <code>unselectedState</code> property.
     * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
     */
    getUnselectedState() {
        return this.getProperty('unselectedState');
    }
    /**
     * Sets the value of <code>value</code> property.
     * The value set on the gauge.
     * @param value The value to set for <code>value</code>
     *
     */
    changeValue(value) {
        return this.setProperty('value', value);
    }
    /**
     * Gets the value of <code>value</code> property.
     * The value set on the gauge.
     * @return The value of <code>value</code> property.
     *
     */
    getValue() {
        return this.getProperty('value');
    }
    /**
     * Gets the value of <code>visualEffects</code> property.
     * Defines whether theme specific visual effects such as overlays and gradients are applied to the gauge.
     * @return The value of <code>visualEffects</code> property.
     * @deprecated Since 12.1.0. Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated.
     */
    getVisualEffects() {
        return this.getProperty('visualEffects');
    }
}
exports.OjRatingGaugeBase = OjRatingGaugeBase;
//# sourceMappingURL=OjRatingGaugeBase.js.map