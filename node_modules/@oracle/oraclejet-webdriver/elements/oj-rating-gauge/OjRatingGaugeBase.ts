import { OjWebElement } from '../';

/**
 * This is the base class for oj-rating-gauge WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjRatingGauge.ts.
 */
export class OjRatingGaugeBase extends OjWebElement {
  /**
   * Sets the value of <code>changed</code> property.
   * Whether there has been a value entered by the user.
   * @param changed The value to set for <code>changed</code>
   *
   */
  public changeChanged(changed: boolean): Promise<void> {
    return this.setProperty<boolean>('changed', changed);
  }

  /**
   * Gets the value of <code>changed</code> property.
   * Whether there has been a value entered by the user.
   * @return The value of <code>changed</code> property.
   *
   */
  public getChanged(): Promise<boolean> {
    return this.getProperty<boolean>('changed');
  }

  /**
   * Gets the value of <code>changedState</code> property.
   * The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true.
   * @return The value of <code>changedState</code> property.
   *
   */
  public getChangedState(): Promise<ChangedState> {
    return this.getProperty<ChangedState>('changedState');
  }

  /**
   * Gets the value of <code>describedBy</code> property.
   * Specifies a relationship between this component and another element.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string | null> {
    return this.getProperty<string | null>('describedBy');
  }

  /**
   * Gets the value of <code>disabled</code> property.
   * Defines whether the gauge is disabled or not. User interaction is prevented if set to true. Visual indication will not be present when custom image source is used. Other state specific svg-class-name and svg-style will be overridden by disabled default style.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>hoverState</code> property.
   * The shape that displays on hover.
   * @return The value of <code>hoverState</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getHoverState(): Promise<HoverState> {
    return this.getProperty<HoverState>('hoverState');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Gets the value of <code>max</code> property.
   * Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed.
   * @return The value of <code>max</code> property.
   *
   */
  public getMax(): Promise<number> {
    return this.getProperty<number>('max');
  }

  /**
   * Gets the value of <code>min</code> property.
   * The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API.
   * @return The value of <code>min</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getMin(): Promise<number> {
    return this.getProperty<number>('min');
  }

  /**
   * Gets the value of <code>orientation</code> property.
   * Defines the type of rating gauge to be rendered.
   * @return The value of <code>orientation</code> property.
   * @deprecated Since 9.0.0. Usage of vertical rating gauges is not recommended.
   */
  public getOrientation(): Promise<string> {
    return this.getProperty<string>('orientation');
  }

  /**
   * Gets the value of <code>preserveAspectRatio</code> property.
   * Specifies whether the images provided should show up at their defined aspect ratios. See the Help documentation for more information.
   * @return The value of <code>preserveAspectRatio</code> property.
   *
   */
  public getPreserveAspectRatio(): Promise<string> {
    return this.getProperty<string>('preserveAspectRatio');
  }

  /**
   * Gets the value of <code>readonly</code> property.
   * Defines whether the value of the gauge can be changed by the end user.
   * @return The value of <code>readonly</code> property.
   *
   */
  public getReadonly(): Promise<boolean> {
    return this.getProperty<boolean>('readonly');
  }

  /**
   * Gets the value of <code>selectedState</code> property.
   * The selected shape for the gauge.
   * @return The value of <code>selectedState</code> property.
   *
   */
  public getSelectedState(): Promise<SelectedState> {
    return this.getProperty<SelectedState>('selectedState');
  }

  /**
   * Gets the value of <code>size</code> property.
   * Specifies the size of the rating gauge item. See the Help documentation for more information.
   * @return The value of <code>size</code> property.
   *
   */
  public getSizeProperty(): Promise<string> {
    return this.getProperty<string>('size');
  }

  /**
   * Gets the value of <code>step</code> property.
   * Specifies the increment by which values can be specified by the end user.
   * @return The value of <code>step</code> property.
   *
   */
  public getStep(): Promise<number> {
    return this.getProperty<number>('step');
  }

  /**
   * Gets the value of <code>thresholds</code> property.
   * An array of objects specifying the gauge thresholds.
   * @return The value of <code>thresholds</code> property.
   *
   */
  public getThresholds(): Promise<Array<Thresholds>> {
    return this.getProperty<Array<Thresholds>>('thresholds');
  }

  /**
   * Gets the value of <code>tooltip</code> property.
   * An object containing an optional callback function for tooltip customization.
   * @return The value of <code>tooltip</code> property.
   *
   */
  public getTooltip(): Promise<Tooltip> {
    return this.getProperty<Tooltip>('tooltip');
  }

  /**
   * Gets the value of <code>trackResize</code> property.
   * Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.
   * @return The value of <code>trackResize</code> property.
   *
   */
  public getTrackResize(): Promise<string> {
    return this.getProperty<string>('trackResize');
  }

  /**
   * Gets the value of <code>transientValue</code> property.
   * Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.
   * @return The value of <code>transientValue</code> property.
   *
   */
  public getTransientValue(): Promise<number | null> {
    return this.getProperty<number | null>('transientValue');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Gets the value of <code>unselectedState</code> property.
   * The unselected shape for the gauge.
   * @return The value of <code>unselectedState</code> property.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  public getUnselectedState(): Promise<UnselectedState> {
    return this.getProperty<UnselectedState>('unselectedState');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The value set on the gauge.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: number | null): Promise<void> {
    return this.setProperty<number | null>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The value set on the gauge.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<number | null> {
    return this.getProperty<number | null>('value');
  }

  /**
   * Gets the value of <code>visualEffects</code> property.
   * Defines whether theme specific visual effects such as overlays and gradients are applied to the gauge.
   * @return The value of <code>visualEffects</code> property.
   * @deprecated Since 12.1.0. Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated.
   */
  public getVisualEffects(): Promise<string> {
    return this.getProperty<string>('visualEffects');
  }
}
export interface ChangedState {
  /**
   * The border color for changed state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  borderColor: string;
  /**
   * The color for changed state. Does not apply if a custom image is specified. See the Help documentation for more information.
   */
  color: string;
  /**
   * The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  shape: string;
  /**
   * The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  source: string;
  /**
   * The CSS style class to apply to the changed state. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the changed state. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgStyle: object;
}
export interface HoverState {
  /**
   * The border color for hover state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.
   */
  borderColor: string;
  /**
   * The color for hover state. Does not apply if a custom image is specified. See the Help documentation for more information.
   */
  color: string;
  /**
   * The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.
   */
  shape: string;
  /**
   * The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.
   */
  source: string;
  /**
   * The CSS style class to apply to the hover state. See the Help documentation for more information.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the hover state. See the Help documentation for more information.
   */
  svgStyle: object;
}
export interface SelectedState {
  /**
   * The border color for selected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  borderColor: string;
  /**
   * The color for selected state. Does not apply if a custom image is specified. See the Help documentation for more information.
   */
  color: string;
  /**
   * The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  shape: string;
  /**
   * The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  source: string;
  /**
   * The CSS style class to apply to the selected state. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the selected state. See the Help documentation for more information.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system.
   */
  svgStyle: object;
}
export interface Thresholds {
  /**
   * The border color of the threshold.
   * @deprecated Since 14.0.0. This is not recommended in the Redwood design system
   */
  borderColor: string;
  /**
   * The color of the threshold.
   */
  color: string;
  /**
   * The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.
   */
  max: number;
  /**
   * Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.
   */
  shortDesc: string;
}
export interface Tooltip {}
export interface Translations {
  /**
   * Used to describe a container that contains controls.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  accessibleContainsControls: string;
  /**
   * Used to describe the data visualization type for accessibility.
   */
  componentName: string;
  /**
   * Used to display a label and its value.
   */
  labelAndValue: string;
  /**
   * Text shown for clearing multiple selection on touch devices.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  labelClearSelection: string;
  /**
   * Used to display a count out of a total.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  labelCountWithTotal: string;
  /**
   * Label for data visualizations used for accessibility.
   */
  labelDataVisualization: string;
  /**
   * Text shown when the component receives invalid data.
   */
  labelInvalidData: string;
  /**
   * Text shown when the component receives no data.
   */
  labelNoData: string;
  /**
   * Used to describe the collapsed state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateCollapsed: string;
  /**
   * Used to describe a drillable object for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gaugee.
   */
  stateDrillable: string;
  /**
   * Used to describe the expanded state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateExpanded: string;
  /**
   * Used to describe the hidden state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateHidden: string;
  /**
   * Used to describe the isolated state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateIsolated: string;
  /**
   * Used to describe the maximized state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateMaximized: string;
  /**
   * Used to describe the minimized state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateMinimized: string;
  /**
   * Used to describe the selected state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateSelected: string;
  /**
   * Used to describe the unselected state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateUnselected: string;
  /**
   * Used to describe the visible state for accessibility.
   * @deprecated Since 14.0.0. This is deprecated because it is not used by the oj-rating-gauge.
   */
  stateVisible: string;
}
export interface UnselectedState {
  /**
   * The border color for unselected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.
   */
  borderColor: string;
  /**
   * The color for unselected state. Does not apply if a custom image is specified. See the Help documentation for more information.
   */
  color: string;
  /**
   * The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.
   */
  shape: string;
  /**
   * The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.
   */
  source: string;
  /**
   * The CSS style class to apply to the unselected state. See the Help documentation for more information.
   */
  svgClassName: string;
  /**
   * The inline style to apply to the unselected state. See the Help documentation for more information.
   */
  svgStyle: object;
}
