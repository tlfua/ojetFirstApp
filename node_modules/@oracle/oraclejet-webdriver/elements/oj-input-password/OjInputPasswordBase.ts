import { OjWebElement } from '../';

/**
 * This is the base class for oj-input-password WebElement, and is generated from the
 * component's metadata. Do not modify these contents since they'll be replaced
 * during the next generation.
 * Put overrides into the WebElements's subclass, OjInputPassword.ts.
 */
export class OjInputPasswordBase extends OjWebElement {
  /**
   * Gets the value of <code>asyncValidators</code> property.
   * Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.
   * @return The value of <code>asyncValidators</code> property.
   * @deprecated Since 8.0.0. Use the validators property instead for either regular Validators or AsyncValidators.
   */
  public getAsyncValidators(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('asyncValidators');
  }

  /**
   * Gets the value of <code>autocomplete</code> property.
   * Specifies a component's autocomplete state. See the Help documentation for more information.
   * @return The value of <code>autocomplete</code> property.
   *
   */
  public getAutocomplete(): Promise<string> {
    return this.getProperty<string>('autocomplete');
  }

  /**
   * Gets the value of <code>autofocus</code> property.
   * Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.
   * @return The value of <code>autofocus</code> property.
   *
   */
  public getAutofocus(): Promise<boolean> {
    return this.getProperty<boolean>('autofocus');
  }

  /**
   * Gets the value of <code>describedBy</code> property.
   * The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.
   * @return The value of <code>describedBy</code> property.
   *
   */
  public getDescribedBy(): Promise<string> {
    return this.getProperty<string>('describedBy');
  }

  /**
   * Gets the value of <code>disabled</code> property.
   * Specifies whether the component is disabled. The default is false.
   * @return The value of <code>disabled</code> property.
   *
   */
  public getDisabled(): Promise<boolean> {
    return this.getProperty<boolean>('disabled');
  }

  /**
   * Gets the value of <code>displayOptions</code> property.
   * Display options for auxiliary content that determines whether or not it should be displayed.
   * @return The value of <code>displayOptions</code> property.
   *
   */
  public getDisplayOptions(): Promise<DisplayOptions> {
    return this.getProperty<DisplayOptions>('displayOptions');
  }

  /**
   * Gets the value of <code>help</code> property.
   * Form component help information.
   * @return The value of <code>help</code> property.
   *
   */
  public getHelp(): Promise<Help> {
    return this.getProperty<Help>('help');
  }

  /**
   * Gets the value of <code>helpHints</code> property.
   * Represents hints for an oj-form-layout element to render help information on the label of the editable component.
   * @return The value of <code>helpHints</code> property.
   *
   */
  public getHelpHints(): Promise<HelpHints> {
    return this.getProperty<HelpHints>('helpHints');
  }

  /**
   * Gets the value of <code>labelEdge</code> property.
   * Defines how the label of a component is created. See the Help documentation for more information.
   * @return The value of <code>labelEdge</code> property.
   *
   */
  public getLabelEdge(): Promise<string> {
    return this.getProperty<string>('labelEdge');
  }

  /**
   * Gets the value of <code>labelHint</code> property.
   * Represents a hint for oj-form-layout element to render a label on the editable component.
   * @return The value of <code>labelHint</code> property.
   *
   */
  public getLabelHint(): Promise<string> {
    return this.getProperty<string>('labelHint');
  }

  /**
   * Gets the value of <code>labelledBy</code> property.
   * The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.
   * @return The value of <code>labelledBy</code> property.
   *
   */
  public getLabelledBy(): Promise<string | null> {
    return this.getProperty<string | null>('labelledBy');
  }

  /**
   * Gets the value of <code>maskIcon</code> property.
   * The mask icon is used to mask or unmask the visibility of the password. The password always starts out masked, but using the mask icon the user can toggle the visibility of the password so that it can be read. The mask-icon attribute is used to make the mask icon visible or hidden. If it is hidden, then the user has no way to toggle the visibility of the password.
   * @return The value of <code>maskIcon</code> property.
   *
   */
  public getMaskIcon(): Promise<string> {
    return this.getProperty<string>('maskIcon');
  }

  /**
   * Sets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @param messagesCustom The value to set for <code>messagesCustom</code>
   *
   */
  public changeMessagesCustom(messagesCustom: Array<object>): Promise<void> {
    return this.setProperty<Array<object>>('messagesCustom', messagesCustom);
  }

  /**
   * Gets the value of <code>messagesCustom</code> property.
   * A list of messages added by an application to the component. See the Help documentation for more information.
   * @return The value of <code>messagesCustom</code> property.
   *
   */
  public getMessagesCustom(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('messagesCustom');
  }

  /**
   * Gets the value of <code>name</code> property.
   * Specifies the name of the component.
   * @return The value of <code>name</code> property.
   * @deprecated Since 6.0.0. JET does not use form submit, so this is not needed.
   */
  public getName(): Promise<string> {
    return this.getProperty<string>('name');
  }

  /**
   * Gets the value of <code>placeholder</code> property.
   * The placeholder text to set on the element.
   * @return The value of <code>placeholder</code> property.
   *
   */
  public getPlaceholder(): Promise<string> {
    return this.getProperty<string>('placeholder');
  }

  /**
   * Gets the value of <code>rawValue</code> property.
   * Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.
   * @return The value of <code>rawValue</code> property.
   *
   */
  public getRawValue(): Promise<string> {
    return this.getProperty<string>('rawValue');
  }

  /**
   * Gets the value of <code>readonly</code> property.
   * Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.
   * @return The value of <code>readonly</code> property.
   *
   */
  public getReadonly(): Promise<boolean> {
    return this.getProperty<boolean>('readonly');
  }

  /**
   * Gets the value of <code>required</code> property.
   * Specifies whether the component is required or optional. See the Help documentation for more information.
   * @return The value of <code>required</code> property.
   *
   */
  public getRequired(): Promise<boolean> {
    return this.getProperty<boolean>('required');
  }

  /**
   * Gets the value of <code>translations</code> property.
   * A collection of translated resources from the translation bundle, or null if this component has no resources.
   * @return The value of <code>translations</code> property.
   *
   */
  public getTranslations(): Promise<Translations | null> {
    return this.getProperty<Translations | null>('translations');
  }

  /**
   * Gets the value of <code>userAssistanceDensity</code> property.
   * Specifies the density of the form component's user assistance presentation.
   * @return The value of <code>userAssistanceDensity</code> property.
   *
   */
  public getUserAssistanceDensity(): Promise<string> {
    return this.getProperty<string>('userAssistanceDensity');
  }

  /**
   * Gets the value of <code>valid</code> property.
   * The validity state of the component
   * @return The value of <code>valid</code> property.
   *
   */
  public getValid(): Promise<string> {
    return this.getProperty<string>('valid');
  }

  /**
   * Gets the value of <code>validators</code> property.
   * Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.
   * @return The value of <code>validators</code> property.
   *
   */
  public getValidators(): Promise<Array<object>> {
    return this.getProperty<Array<object>>('validators');
  }

  /**
   * Sets the value of <code>value</code> property.
   * The value of the component. Value must be a string or null.
   * @param value The value to set for <code>value</code>
   *
   */
  public changeValue(value: string | null): Promise<void> {
    return this.setProperty<string | null>('value', value);
  }

  /**
   * Gets the value of <code>value</code> property.
   * The value of the component. Value must be a string or null.
   * @return The value of <code>value</code> property.
   *
   */
  public getValue(): Promise<string | null> {
    return this.getProperty<string | null>('value');
  }
}
export interface DisplayOptions {
  /**
   * Display options for auxiliary converter hint text that determines whether it should be displayed.
   */
  converterHint: Array<string> | string;
  /**
   * Display options for auxiliary help instruction text that determines whether it should be displayed.
   * @deprecated Since 9.0.0. If you want none, remove help-instruction attribute.
   */
  helpInstruction: Array<string> | string;
  /**
   * Display options for auxiliary message text that determines whether it should be displayed.
   */
  messages: Array<string> | string;
  /**
   * Display options for auxiliary validator hint text that determines whether it should be displayed.
   */
  validatorHint: Array<string> | string;
}
export interface Help {
  /**
   * Represents advisory information for the component, such as would be appropriate for a tooltip.
   */
  instruction: string;
}
export interface HelpHints {
  /**
   * Hint for help definition text associated with the label.
   */
  definition: string;
  /**
   * Help source URL associated with the component.
   */
  source: string;
}
export interface Translations {
  /**
   * Label for the 'view-hide' mask visibility icon.
   */
  accessibleHidePassword: string;
  /**
   * Message to announce to AT via aria-live when the length.max is exceeded.
   */
  accessibleMaxLengthExceeded: string;
  /**
   * Message to annnouce to AT via aria-live for the remaining character count.
   */
  accessibleMaxLengthRemaining: string;
  /**
   * Label for the 'view' mask visibility icon.
   */
  accessibleShowPassword: string;
  /**
   * Provides properties to customize the message text used by the implicit regexp validator associated to the InputPassword component.
   */
  regexp: TranslationsRegexp;
  /**
   * Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.
   */
  required: TranslationsRequired;
}
export interface TranslationsRegexp {
  /**
   * Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputPassword component.
   */
  messageDetail: string;
  /**
   * Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.
   */
  messageSummary: string;
}
export interface TranslationsRequired {
  /**
   * Hint text used by required validation error.
   */
  hint: string;
  /**
   * Message text that describes the details of the required validation error.
   */
  messageDetail: string;
  /**
   * Message text for summarizing a required validation error.
   * @deprecated Since 14.0.0. This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed.
   */
  messageSummary: string;
}
