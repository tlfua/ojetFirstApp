import { By } from 'selenium-webdriver';
import { DriverLike, register } from '@oracle/oraclejet-webdriver';
import { @CLASSNAME@ } from './@CLASSNAME@';
export { @CLASSNAME@ };

/**
 * Retrieve an instance of [[@CLASSNAME@]].
 * @example
 * ```javascript
 * import { @CAMELNAME@ } from '@oracle/oraclejet-webdriver/elements';
 * const el = await @CAMELNAME@(driver, By.id('my-@NAME@'));
 * ```
 * @param driver A WebDriver/WebElement instance from where the element will be
 * searched. If WebDriver is passed, the element will be searched globally in the
 * document. If WebElement is passed, the search will be relative to this element.
 * @param by The locator with which to find the element
 */
export async function @CAMELNAME@(driver: DriverLike, by: By): Promise<@CLASSNAME@> {
  const webEl = await driver.findElement(by);
  // Check that the element is of type @CLASSNAME@
  if (!(webEl instanceof @CLASSNAME@)) {
    const tagName = await webEl.getTagName();
    let supplemental = '';
    if (tagName === @CLASSNAME@.name) {
      supplemental = 'You likely have multiple installations of this package.';
    }
    throw Error(
      `@CAMELNAME@(${by}) created ${webEl.constructor.name} for <${tagName}>, but expected ${@CLASSNAME@.name}. ${supplemental}`
    );
  }
  return webEl;
}

register('@NAME@', @CLASSNAME@);
