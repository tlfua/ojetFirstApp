/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
require('./utils/UNSAFE_classNames.js');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme = require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js');
var classNames = require('./classNames-d619a292.js');

function InlineHelpSource({ children, source }) {
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const userAssistance_learnMoreStr = translations.userAssistance_learnMore();
    children = children ?? userAssistance_learnMoreStr;
    // JET-52914 - Implement Tabbable mode API contract in InputText
    // if not tabbable, spread tabbableModeProps on component
    const { isTabbable, tabbableModeProps } = hooks_UNSAFE_useTabbableMode.useTabbableMode();
    // TODO: Implement and use a preact Link component instead of using an anchor tag
    const { classes, styles } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_UserAssistance_themes_redwood_UserAssistanceTheme.UserAssistanceRedwoodTheme);
    const { helpSourceStyles } = styles; // TODO: refactor types so inferring works properly
    return (jsxRuntime.jsx("a", { class: classNames.classNames([classes, helpSourceStyles]), target: "_blank", href: source, ...(!isTabbable && tabbableModeProps), children: children }));
}

exports.InlineHelpSource = InlineHelpSource;
//# sourceMappingURL=InlineHelpSource-ecc4f96f.js.map
