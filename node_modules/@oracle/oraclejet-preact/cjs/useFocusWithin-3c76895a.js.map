{"version":3,"file":"useFocusWithin-3c76895a.js","sources":["../../src/hooks/UNSAFE_useFocusWithin/useFocusWithin.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'preact/hooks';\n\ntype FocusEvents = {\n  onBlurWithin?: (e: FocusEvent) => void;\n  onFocusWithin?: (e: FocusEvent) => void;\n};\n\ntype UseFocusWithinProps = FocusEvents & {\n  isDisabled?: boolean;\n};\n\nexport function useFocusWithin({\n  isDisabled,\n  onBlurWithin,\n  onFocusWithin\n}: UseFocusWithinProps = {}) {\n  const [isFocused, setIsFocused] = useState(false);\n  // Maintain a ref for whether we're focused so that we can update it synchronously and check\n  // it in the listeners.  It's possible for an element to receive and lose focus before\n  // the next render happens, in which case the isFocused state hasn't been updated yet for\n  // the focusin event.  The focusout listener would not do anything based on that stale state,\n  // which would result in the isFocused state incorrectly remaining true.\n  // We still need the isFocused state because that state change will trigger a rerender,\n  // whereas updating the ref will not.\n  const isFocusedRef = useRef(false);\n  const onfocusin = useCallback(\n    (event: FocusEvent) => {\n      if (!isFocusedRef.current) {\n        onFocusWithin?.(event);\n        setIsFocused(true);\n        isFocusedRef.current = true;\n      }\n    },\n    [onFocusWithin]\n  );\n  const onfocusout = useCallback(\n    (event: FocusEvent) => {\n      // Trigger focus event changes only when the focus goes outside of the current\n      // target. Ignore focus changes within the current target\n      if (\n        isFocusedRef.current &&\n        (event.relatedTarget == null ||\n          !(event.currentTarget as HTMLElement).contains(event.relatedTarget as HTMLElement))\n      ) {\n        onBlurWithin?.(event);\n        setIsFocused(false);\n        isFocusedRef.current = false;\n      }\n    },\n    [onBlurWithin]\n  );\n\n  return isDisabled\n    ? {\n        isFocused: false,\n        focusProps: {}\n      }\n    : {\n        isFocused,\n        focusProps: {\n          onfocusin,\n          onfocusout\n        }\n      };\n}\n"],"names":["useState","useRef","useCallback"],"mappings":";;;;;AAWM,SAAU,cAAc,CAAC,EAC7B,UAAU,EACV,YAAY,EACZ,aAAa,EAAA,GACU,EAAE,EAAA;IACzB,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAGA,cAAQ,CAAC,KAAK,CAAC,CAAC;;;;;;;;AAQlD,IAAA,MAAM,YAAY,GAAGC,YAAM,CAAC,KAAK,CAAC,CAAC;AACnC,IAAA,MAAM,SAAS,GAAGC,iBAAW,CAC3B,CAAC,KAAiB,KAAI;AACpB,QAAA,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;AACzB,YAAA,aAAa,GAAG,KAAK,CAAC,CAAC;YACvB,YAAY,CAAC,IAAI,CAAC,CAAC;AACnB,YAAA,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;AAC7B,SAAA;AACH,KAAC,EACD,CAAC,aAAa,CAAC,CAChB,CAAC;AACF,IAAA,MAAM,UAAU,GAAGA,iBAAW,CAC5B,CAAC,KAAiB,KAAI;;;QAGpB,IACE,YAAY,CAAC,OAAO;AACpB,aAAC,KAAK,CAAC,aAAa,IAAI,IAAI;gBAC1B,CAAE,KAAK,CAAC,aAA6B,CAAC,QAAQ,CAAC,KAAK,CAAC,aAA4B,CAAC,CAAC,EACrF;AACA,YAAA,YAAY,GAAG,KAAK,CAAC,CAAC;YACtB,YAAY,CAAC,KAAK,CAAC,CAAC;AACpB,YAAA,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC;AAC9B,SAAA;AACH,KAAC,EACD,CAAC,YAAY,CAAC,CACf,CAAC;AAEF,IAAA,OAAO,UAAU;AACf,UAAE;AACE,YAAA,SAAS,EAAE,KAAK;AAChB,YAAA,UAAU,EAAE,EAAE;AACf,SAAA;AACH,UAAE;YACE,SAAS;AACT,YAAA,UAAU,EAAE;gBACV,SAAS;gBACT,UAAU;AACX,aAAA;SACF,CAAC;AACR;;;;"}