/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var preact = require('preact');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var UNSAFE_Train_themes_redwood_TrainTheme = require('./UNSAFE_Train/themes/redwood/TrainTheme.js');
var hooks_UNSAFE_usePress = require('./hooks/UNSAFE_usePress.js');
var hooks_UNSAFE_useInteractionStyle = require('./hooks/UNSAFE_useInteractionStyle.js');
require('./utils/UNSAFE_classNames.js');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');
var classNames = require('./classNames-d619a292.js');
var PRIVATE_ThemedIcons_MessageConfirmationIcon = require('./PRIVATE_ThemedIcons/MessageConfirmationIcon.js');
var PRIVATE_ThemedIcons_MessageErrorIcon = require('./PRIVATE_ThemedIcons/MessageErrorIcon.js');
var PRIVATE_ThemedIcons_MessageInfoIcon = require('./PRIVATE_ThemedIcons/MessageInfoIcon.js');
var PRIVATE_ThemedIcons_MessageWarningIcon = require('./PRIVATE_ThemedIcons/MessageWarningIcon.js');
var hooks_UNSAFE_useActive = require('./hooks/UNSAFE_useActive.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
require('./UNSAFE_HiddenAccessible.js');
var HiddenAccessible = require('./HiddenAccessible-c4ad96e7.js');
require('./utils/UNSAFE_logger.js');
require('./_curry1-6e9511bf.js');
require('./_curry2-53a902bf.js');
require('./UNSAFE_Train/themes/TrainStyles.css.js');

require('./UNSAFE_Train/themes/redwood/TrainBaseTheme.css.js');

require('./UNSAFE_Train/themes/redwood/TrainVariants.css.js');

require('./vanilla-extract-recipes-createRuntimeFn.esm-8a4b93e4.js');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-b9e7be1e.js');
require('./hooks/UNSAFE_useHover.js');
require('./hooks/UNSAFE_useToggle.js');
require('./UNSAFE_Icon.js');
require('./Icon-e47442ad.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-b9f57550.js');
require('./Common/themes/themeContract.css.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./hooks/UNSAFE_useId.js');
require('./UNSAFE_Floating.js');
require('./Floating-3415cf36.js');
require('preact/compat');
require('./index-0a166c9e.js');
require('./hooks/UNSAFE_useUser.js');
require('./index-c3ee789d.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-4bc33829.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-ee4e7934.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-ad2313fd.js');
require('./_has-aa203696.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-802f3cdb.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./UNSAFE_Icon/themes/IconStyle.css.js');



const Context = preact.createContext(null);

/**
The JET Train component serves as a visual navigator enabling users to traverse through different 'steps'. Each 'step' is represented by the Step sub-component which can manifest its own state - 'visited', 'unvisited', or 'disabled', and is capable of communicating various message types including 'error', 'confirmation', 'warning', or 'info'.
 */
function Train({ onSelect, selectedStep, children }) {
    const { classes, styles } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme);
    const selectedStepIndex = children.findIndex((step) => step.props.id === selectedStep);
    const onStepSelect = hooks.useCallback((event, stepId) => {
        onSelect?.({
            event: event,
            toStep: stepId
        });
    }, [onSelect]);
    const trainContext = {
        onSelect: onStepSelect,
        selectedStep: selectedStep,
        selectedStepIndex: selectedStepIndex,
        numberOfSteps: children.length,
        index: 0
    };
    const childrenArray = preact.toChildArray(children).filter(Boolean);
    return (jsxRuntime.jsx("div", { class: classes, children: childrenArray.map((step, index) => (jsxRuntime.jsx(Context.Provider, { value: { ...trainContext, index }, children: jsxRuntime.jsx("div", { class: styles.baseListStyle, children: step }) }))) }));
}

const Connector = ({ isConnected }) => {
    const { styles, variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme, {
        connectorConnected: isConnected ? 'isConnected' : 'notConnected'
    });
    return jsxRuntime.jsx("span", { class: classNames.classNames([styles.connectorBaseStyle, variantClasses]) });
};

const messageTypeIcons = {
    confirmation: PRIVATE_ThemedIcons_MessageConfirmationIcon.MessageConfirmationIcon,
    error: PRIVATE_ThemedIcons_MessageErrorIcon.MessageErrorIcon,
    fatal: PRIVATE_ThemedIcons_MessageErrorIcon.MessageErrorIcon,
    info: PRIVATE_ThemedIcons_MessageInfoIcon.MessageInfoIcon,
    warning: PRIVATE_ThemedIcons_MessageWarningIcon.MessageWarningIcon
};
/**
 * UserChosenIcon Component for rendering the severity based icon in Message
 */
function UserChosenIcon({ messageType, isDisabled = false }) {
    const IconComponent = messageTypeIcons[messageType];
    const { styles, variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme, {
        messageType: messageType,
        stepIconDisabled: isDisabled ? 'isDisabled' : 'notDisabled'
    });
    return (jsxRuntime.jsx("div", { class: classNames.classNames([styles.messageTypeIconBaseStyle, variantClasses]), role: "presentation", children: jsxRuntime.jsx(IconComponent, {}) }));
}

/**
 * Step icon
 */
const StepIcon = ({ isDisabled, isVisited, messageType }) => {
    const { index, selectedStepIndex } = hooks.useContext(Context);
    const isCurrent = selectedStepIndex === index;
    const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = hooks_UNSAFE_useInteractionStyle.useInteractionStyle(isDisabled || isCurrent);
    const { isActive, activeProps } = hooks_UNSAFE_useActive.useActive({ isDisabled: isDisabled || isCurrent });
    console.log('isActive', isActive);
    const mergedProps = utils_UNSAFE_mergeProps.mergeProps(interactionProps, activeProps);
    const { styles, variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme, {
        stepIconDisabled: isDisabled ? 'isDisabled' : 'notDisabled',
        stepIconCurrent: isCurrent ? 'isCurrent' : 'notCurrent',
        stepIconVisited: isVisited ? 'isVisited' : 'notVisited',
        stepIconNeedsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',
        stepIconPseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',
        stepIconActive: isActive ? 'isActive' : 'notActive'
    });
    const iconStyles = () => {
        if (messageType) {
            return jsxRuntime.jsx(UserChosenIcon, { messageType: messageType, isDisabled: isDisabled });
        }
        else {
            return (jsxRuntime.jsx("span", { ...mergedProps, class: classNames.classNames([styles.stepIconBaseStyle, variantClasses]), children: index + 1 }));
        }
    };
    return jsxRuntime.jsx("span", { class: styles.stepIconContainerStyle, children: iconStyles() });
};

/**
 * Step label component
 */
const StepLabel = ({ label, isDisabled, isVisited, messageType }) => {
    const { numberOfSteps, index, selectedStepIndex } = hooks.useContext(Context);
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const isCurrent = selectedStepIndex === index;
    const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = hooks_UNSAFE_useInteractionStyle.useInteractionStyle(isDisabled || isCurrent);
    const currentStepStatus = isCurrent
        ? translations.train_current()
        : isVisited
            ? translations.train_visited()
            : translations.train_not_visited();
    const currentStep = index + 1;
    const statusTextForCurrentStep = messageType
        ? `${translations.train_status({
            currentStep: currentStep.toString(),
            numberOfSteps: numberOfSteps.toString()
        })}. ${currentStepStatus}, ${translations.train_message_type()}: ${messageType}`
        : `${translations.train_status({
            currentStep: currentStep.toString(),
            numberOfSteps: numberOfSteps.toString()
        })}. ${currentStepStatus}`;
    const { styles, variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme, {
        stepLabelDisabled: isDisabled ? 'isDisabled' : 'notDisabled',
        stepLabelCurrent: isCurrent ? 'isCurrent' : 'notCurrent',
        stepLabelVisited: isVisited ? 'isVisited' : 'notVisited',
        stepLabelNeedsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',
        stepLabelPseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover'
    });
    const handleClick = (event) => {
        event.preventDefault();
    };
    return (jsxRuntime.jsx("span", { class: styles.stepLabelWrapperStyle, children: jsxRuntime.jsxs("a", { ...interactionProps, href: "#", class: classNames.classNames([styles.stepLabelBaseStyle, variantClasses]), onClick: handleClick, children: [label, jsxRuntime.jsx(HiddenAccessible.HiddenAccessible, { children: statusTextForCurrentStep })] }) }));
};

/**
 * Step component
 */
const Step = ({ id, isDisabled, isVisited, messageType, label }) => {
    const { onSelect, /* selectedStep ,*/ numberOfSteps, selectedStepIndex, index } = hooks.useContext(Context) || // get the context object or...
        (() => {
            // if there's no context object, throw an error
            throw new Error('Step component must be rendered within a Train component.');
        })();
    const isCurrent = selectedStepIndex === index;
    const [isActive, setIsActive] = hooks.useState(false);
    const { interactionProps, applyPseudoHoverStyle, applyHoverStyle } = hooks_UNSAFE_useInteractionStyle.useInteractionStyle(isDisabled || isCurrent);
    const isConnectorConnected = selectedStepIndex > index;
    const onSelectHandler = hooks.useCallback((event) => {
        if (!isDisabled && !isCurrent) {
            onSelect(event, id);
        }
    }, [isDisabled, onSelect, id]);
    const { pressProps } = hooks_UNSAFE_usePress.usePress(onSelectHandler, {});
    const isLast = index !== numberOfSteps - 1;
    const onMouseUpHandler = hooks.useCallback(() => {
        setIsActive(false);
    }, [isActive]);
    const onMouseDownHandler = hooks.useCallback(() => {
        setIsActive(true);
    }, [isActive]);
    const { styles, variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_Train_themes_redwood_TrainTheme.TrainRedwoodTheme, {
        stepDisabled: isDisabled ? 'isDisabled' : 'notDisabled',
        needsEventsHover: applyHoverStyle ? 'isNeedsEventsHover' : 'notNeedsEventsHover',
        pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',
        stepActive: isActive && !isCurrent ? 'isActive' : 'notActive'
    });
    const mergedProps = utils_UNSAFE_mergeProps.mergeProps(pressProps, interactionProps, {
        onMouseUp: onMouseUpHandler,
        onMouseDown: onMouseDownHandler
    });
    return (jsxRuntime.jsxs("span", { class: styles.stepContainerStyle, children: [isLast && jsxRuntime.jsx(Connector, { isConnected: isConnectorConnected }), jsxRuntime.jsxs("span", { ...mergedProps, class: classNames.classNames([styles.stepBaseStyle, variantClasses]), children: [jsxRuntime.jsx(StepIcon, { isVisited: isVisited, isDisabled: isDisabled, messageType: messageType }), jsxRuntime.jsx(StepLabel, { label: label, isVisited: isVisited, isDisabled: isDisabled, messageType: messageType })] })] }));
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.Step = Step;
exports.Train = Train;
//# sourceMappingURL=UNSAFE_Train.js.map
