{"version":3,"file":"UNSAFE_ExpandableList.js","sources":["../../src/UNSAFE_ExpandableList/useExpandCollapse.ts","../../src/UNSAFE_ExpandableList/ExpandableList.tsx","../../src/UNSAFE_ExpandableList/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback } from 'preact/hooks';\nimport { ToggleDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { containsKey, Keys } from '../utils/UNSAFE_keys';\n\n/**\n * A hook that handles mouse and keyboard gesture that toggles the expanded state.\n * @param keyExtractor\n * @param expanded\n * @param onToggle\n * @returns\n */\nexport function useExpandCollapse<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  expanded: Keys<K>,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      handleToggle(event, keyExtractor, onToggle);\n    },\n    [keyExtractor, onToggle]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        handleToggle(event, keyExtractor, onToggle);\n      } else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n        const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;\n        handleArrowKey(isLeftArrow, event.target as HTMLElement, expanded, keyExtractor, onToggle);\n        // arrow key might cause it to scroll horizontally\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    [keyExtractor, onToggle]\n  );\n\n  return onToggle ? { onClick, onKeyDown, onKeyUp } : {};\n}\n\n// prevent default (propagation) for keyDown to prevent scrolling the container\nconst onKeyDown = (event: KeyboardEvent) => {\n  if (event.key === 'Enter' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n    event.preventDefault();\n  }\n};\n\nconst handleArrowKey = <K>(\n  isLeftArrow: boolean,\n  target: HTMLElement,\n  expanded: Keys<K>,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(target);\n  if (onToggle && itemKey) {\n    const contains = containsKey(expanded, itemKey);\n    if ((isLeftArrow && contains) || (!isLeftArrow && !contains)) {\n      onToggle({ value: itemKey });\n    }\n  }\n};\n\nconst handleToggle = <K>(\n  event: Event,\n  keyExtractor: (element: HTMLElement) => K | null,\n  onToggle?: (detail: ToggleDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (onToggle && itemKey) {\n    onToggle({ value: itemKey });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n","import { ComponentChildren, Fragment } from 'preact';\nimport { useState, useMemo, useCallback } from 'preact/hooks';\nimport { memo } from 'preact/compat';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport {\n  HierarchicalItemContext,\n  ListItemContext,\n  SelectionDetail,\n  ToggleDetail,\n  FlattenedDataState\n} from '../UNSAFE_Collection';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\nimport { Keys, containsKey, isSameKey } from '../utils/UNSAFE_keys';\nimport { Button } from '../UNSAFE_Button';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { ExpandIcon } from '../PRIVATE_ThemedIcons/ExpandIcon';\nimport { CollapseIcon } from '../PRIVATE_ThemedIcons/CollapseIcon';\nimport {\n  List,\n  ListGroupHeader,\n  GROUP_SELECTOR,\n  excludeGroup,\n  GroupLoadingIndicator\n} from '../PRIVATE_List';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { CustomRendererContext, PublicListProps } from '../UNSAFE_ListView/List.types';\nimport { useExpandCollapse } from './useExpandCollapse';\nimport { keyExtractor } from '../utils/PRIVATE_collectionUtils';\n\n// these are the props that are different from ListView\ntype SpecificTypes<K, D> = {\n  /**\n   * A function to render an item or a group header.\n   */\n  children: (context: HierarchicalItemContext<K, D>) => ComponentChildren;\n  /**\n   * A FlattenedDataState object that provides information including data and metadata to this ExpandableList.\n   * If the value is null, then ExpandableList will show loading indicator until a FlattenedDataState is set.\n   */\n  data: FlattenedDataState<K, D> | null;\n  /**\n   * A function to handle when user performs a gesture that toggles the expansion state of a group header\n   */\n  onToggle?: (detail: ToggleDetail<K>) => void;\n};\n\n/**\n * Props for the ExpandableList Component, which consist of all props from ListView\n * except some which have different signatures.\n */\ntype ExpandableListProps<K, D> = Omit<PublicListProps<K, D>, 'children' | 'data'> &\n  SpecificTypes<K, D>;\n\n/**\n * An ExpandableList shows a two-level group of items where each group header can be expand or collapse.\n */\nexport function ExpandableList<K extends string | number, D>({\n  children,\n  currentKey,\n  data,\n  onSelectionChange,\n  onToggle,\n  ...props\n}: ExpandableListProps<K, D>) {\n  const [statusText, setStatusText] = useState('');\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const expandCollapseProps = useExpandCollapse(\n    (element: HTMLElement) => {\n      if (element.getAttribute('role') === 'treegrid') {\n        return currentKey === undefined ? null : currentKey;\n      }\n      return keyExtractor(element, GROUP_SELECTOR) as K;\n    },\n    data == null ? (emptyKeys as Keys<K>) : data.expanded,\n    onToggle\n      ? useCallback(\n          (detail: ToggleDetail<K>) => {\n            onToggle(detail);\n            if (data) {\n              const previouslyExpanded = containsKey(data?.expanded, detail.value);\n              setStatusText(\n                previouslyExpanded\n                  ? translations.expandableList_groupCollapse()\n                  : translations.expandableList_groupExpand()\n              );\n              // we need to clear the live region text otherwise screenreader\n              // won't read again if the content did not change the next time\n              setTimeout(() => {\n                setStatusText('');\n              }, 1000);\n            }\n          },\n          [onToggle, data]\n        )\n      : undefined\n  );\n\n  const descId = useId();\n  const stableDescId = useMemo(() => {\n    // this should never change after mounted\n    return descId;\n  }, []);\n\n  const createHierarchicalContext = <K, D>(\n    context: ListItemContext<K, D>,\n    options?: { expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }\n  ) => {\n    const expanderRenderer =\n      options !== undefined\n        ? () => (\n            <Expander\n              itemKey={context.metadata.key}\n              expanded={options.expanded}\n              onToggle={options.onToggle}\n            />\n          )\n        : undefined;\n\n    return {\n      ...context,\n      parentKey: context.metadata.parentKey,\n      leaf: context.metadata.isLeaf ?? true,\n      depth: context.metadata.treeDepth ?? 1,\n      expander: expanderRenderer\n    };\n  };\n\n  const handleSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      if (onSelectionChange && data) {\n        const keys = excludeGroup(data, detail.value);\n        if (isSameKey(keys, detail.value)) {\n          onSelectionChange(detail);\n        } else if (keys.keys && keys.keys.size > 0) {\n          onSelectionChange({ ...detail, value: keys });\n        }\n      }\n    },\n    [onSelectionChange, data]\n  );\n\n  const customItemRenderer = (context: CustomRendererContext<K, D>) => {\n    const itemKey = context.listItemContext.metadata.key;\n    const options =\n      data && onToggle ? { expanded: containsKey(data.expanded, itemKey), onToggle } : undefined;\n    const itemContext = createHierarchicalContext(context.listItemContext, options);\n    if (itemContext.leaf) {\n      return context.defaultListItem(itemContext, { itemDepth: itemContext.depth + 1 });\n    } else {\n      return (\n        <ListGroupHeader\n          key={itemContext.metadata.key}\n          ariaDescribedBy={stableDescId}\n          itemKey={itemContext.metadata.key}\n          itemIndex={itemContext.index}\n          itemDepth={itemContext.depth}\n          isFocused={context.isFocused}\n          isFocusRingVisible={context.isFocusRingVisible}\n          isActive={context.isActive}\n          isGridlineVisible={false}\n          isExpandable={true}\n          expandedKeys={data == null ? (emptyKeys as Keys<K>) : data.expanded}\n          onToggle={onToggle}>\n          {children(itemContext)}\n        </ListGroupHeader>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <List\n        isVirtualized={false}\n        currentKey={currentKey}\n        data={data}\n        role=\"treegrid\"\n        loadingIndicator={<GroupLoadingIndicator />}\n        onSelectionChange={handleSelectionChange}\n        customItemRenderer={customItemRenderer}\n        eventHandlers={expandCollapseProps}\n        {...props}>\n        {(context: ListItemContext<K, D>) => {\n          return children(context as HierarchicalItemContext<K, D>);\n        }}\n      </List>\n      {onToggle && (\n        <Fragment>\n          <LiveRegion>{statusText}</LiveRegion>\n          <span id={stableDescId}>\n            <HiddenAccessible>\n              {translations.expandableList_expandCollapseInstructionText()}\n            </HiddenAccessible>\n          </span>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n\nconst emptyKeys = { all: false, keys: new Set() };\n\nconst Expander = memo(\n  <K,>(props: { itemKey: K; expanded: boolean; onToggle: (detail: ToggleDetail<K>) => void }) => {\n    const styles = {\n      base: cssProps`${{\n        margin: '0 calc(1.25 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x))'\n      }}`\n    };\n\n    const classes = classNames([styles.base, 'oj-listview-expander']);\n\n    const actionHandler = () => {\n      props.onToggle({ value: props.itemKey });\n    };\n\n    return (\n      <span class={classes} role=\"presentation\">\n        <Button\n          onAction={actionHandler}\n          variant=\"ghost\"\n          startIcon={props.expanded ? <ExpandIcon size=\"6x\" /> : <CollapseIcon size=\"6x\" />}\n        />\n      </span>\n    );\n  },\n  (prev: any, next: any) => {\n    return (\n      prev.itemKey === next.itemKey &&\n      prev.expanded === next.expanded &&\n      prev.onToggle === next.onToggle\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { ExpandableList } from './ExpandableList';\n"],"names":["useUser","useCallback","containsKey","ExpandableList","children","currentKey","data","onSelectionChange","onToggle","props","translations","useTranslationBundle","expandCollapseProps","useExpandCollapse","element","keyExtractor","GROUP_SELECTOR","emptyKeys","expanded","detail","previouslyExpanded","value","setStatusText","expandableList_groupCollapse","expandableList_groupExpand","descId","useId","stableDescId","useMemo","createHierarchicalContext","context","options","expanderRenderer","undefined","_jsx","Expander","itemKey","metadata","key","parentKey","leaf","isLeaf","depth","treeDepth","expander","handleSelectionChange","customItemRenderer","defaultListItem","itemContext","itemDepth","ListGroupHeader","ariaDescribedBy","itemIndex","index","isFocused","isFocusRingVisible","isActive","isGridlineVisible","isExpandable","expandedKeys","_jsxs","Fragment","LiveRegion","statusText","id","HiddenAccessible","expandableList_expandCollapseInstructionText","all","keys","Set","memo","styles","classes","classNames","base","prev","next"],"mappings":"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"}