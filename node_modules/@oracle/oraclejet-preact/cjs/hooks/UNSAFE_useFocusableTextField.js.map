{"version":3,"file":"UNSAFE_useFocusableTextField.js","sources":["../../../src/hooks/UNSAFE_useFocusableTextField/useFocusableTextField.ts"],"sourcesContent":["import { Ref } from 'preact';\nimport { useEffect, useImperativeHandle, useRef } from 'preact/hooks';\nimport { useFocusWithin } from '../UNSAFE_useFocusWithin';\n\nexport type FocusableHandle = {\n  focus: () => void;\n  blur: () => void;\n};\ntype UseFocusWithinProps = Parameters<typeof useFocusWithin>[0];\ntype UseFocusableTextFieldProps = UseFocusWithinProps & {\n  /**\n   * flag indicating whether the field is readonly\n   */\n  isReadonly?: boolean;\n\n  /**\n   * An optional ref to add imperative handles\n   */\n  ref?: Ref<FocusableHandle>;\n};\n\n/**\n * A custom hook that handles the focus when the text field\n * is toggled between readonly and enabled\n * @typedef E represents the type of the enabled element\n * @typedef R represents the type of the readonly element\n */\nexport function useFocusableTextField<E extends HTMLElement, R extends HTMLElement>({\n  isReadonly,\n  ref = () => {},\n  ...useFocusWithinProps\n}: UseFocusableTextFieldProps) {\n  const { focusProps, isFocused } = useFocusWithin(useFocusWithinProps);\n\n  const previousIsFocusedRef = useRef(isFocused);\n  const enabledElementRef = useRef<E>(null);\n  const readonlyElementRef = useRef<R>(null);\n\n  // Retain focus when toggling between readonly and enabled\n  useEffect(() => {\n    // if the readonly state is changed and previously we\n    // were holding focus, set the focus to newly rendered element\n    if (previousIsFocusedRef.current) {\n      if (isReadonly) {\n        setTimeout(() => readonlyElementRef.current?.focus());\n      } else {\n        setTimeout(() => enabledElementRef.current?.focus());\n      }\n    }\n  }, [isReadonly]);\n\n  // Keep the previousFocusRef in sync, but be sure to run this hook\n  // after handling focus for the readonly toggling.\n  useEffect(() => {\n    previousIsFocusedRef.current = isFocused;\n  }, [isFocused]);\n\n  // Add focus and blur methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        if (isReadonly) {\n          readonlyElementRef.current?.focus();\n        } else {\n          enabledElementRef.current?.focus();\n        }\n      },\n      blur: () => {\n        if (isReadonly) {\n          readonlyElementRef.current?.blur();\n        } else {\n          enabledElementRef.current?.blur();\n        }\n      }\n    }),\n    [isReadonly]\n  );\n\n  return {\n    enabledElementRef,\n    readonlyElementRef,\n    isFocused,\n    focusProps\n  };\n}\n"],"names":["useFocusWithin","useRef","useEffect","useImperativeHandle"],"mappings":";;;;;;;;;AAqBA;;;;;AAKG;AACa,SAAA,qBAAqB,CAA+C,EAClF,UAAU,EACV,GAAG,GAAG,MAAO,GAAC,EACd,GAAG,mBAAmB,EACK,EAAA;IAC3B,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAGA,6BAAc,CAAC,mBAAmB,CAAC,CAAC;AAEtE,IAAA,MAAM,oBAAoB,GAAGC,YAAM,CAAC,SAAS,CAAC,CAAC;AAC/C,IAAA,MAAM,iBAAiB,GAAGA,YAAM,CAAI,IAAI,CAAC,CAAC;AAC1C,IAAA,MAAM,kBAAkB,GAAGA,YAAM,CAAI,IAAI,CAAC,CAAC;;IAG3CC,eAAS,CAAC,MAAK;;;QAGb,IAAI,oBAAoB,CAAC,OAAO,EAAE;AAChC,YAAA,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,MAAM,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACvD,aAAA;AAAM,iBAAA;gBACL,UAAU,CAAC,MAAM,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AACtD,aAAA;AACF,SAAA;AACH,KAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;;;IAIjBA,eAAS,CAAC,MAAK;AACb,QAAA,oBAAoB,CAAC,OAAO,GAAG,SAAS,CAAC;AAC3C,KAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;;AAGhB,IAAAC,yBAAmB,CACjB,GAAG,EACH,OAAO;QACL,KAAK,EAAE,MAAK;AACV,YAAA,IAAI,UAAU,EAAE;AACd,gBAAA,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;AACrC,aAAA;AAAM,iBAAA;AACL,gBAAA,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;AACpC,aAAA;SACF;QACD,IAAI,EAAE,MAAK;AACT,YAAA,IAAI,UAAU,EAAE;AACd,gBAAA,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;AACpC,aAAA;AAAM,iBAAA;AACL,gBAAA,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;AACnC,aAAA;SACF;AACF,KAAA,CAAC,EACF,CAAC,UAAU,CAAC,CACb,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,kBAAkB;QAClB,SAAS;QACT,UAAU;KACX,CAAC;AACJ;;;;"}