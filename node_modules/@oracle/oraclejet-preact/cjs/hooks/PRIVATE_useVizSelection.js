/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('preact/hooks');

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
const NAVKEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
/**
 * Compares if two sets are equal.
 */
const isEqual = (setA, setB) => {
    return setA.size === setB.size && [...setA].every((value) => setB.has(value));
};
/**
 * Handles the selection.
 * @param itemId The id of the item.
 * @param selectedIds The set of selected item ids.
 * @param selectionMode The selection mode.
 * @param selectionBehavior The selection behavior. If 'toggle', unselected item will be selected and
 * vice versa. If 'replace', the item will replace the previous selection.
 * @param onChange The callback to trigger when selection changes.
 */
const handleSelect = (itemId, selectedIds, selectionMode, selectionBehavior, onChange) => {
    let ids = new Set([]);
    if (itemId != null) {
        ids = new Set(selectedIds);
        const isSelected = selectedIds.has(itemId);
        if (selectionBehavior === 'toggle') {
            if (isSelected) {
                ids.delete(itemId);
            }
            else if (selectionMode === 'single') {
                ids = new Set([itemId]); // only selection
            }
            else {
                ids.add(itemId); // add to selection in "multiple" selectionMode
            }
        }
        else if (!isSelected) {
            // In "multiple" selection mode, only replace selection if unselected item is selected.
            // In "single" selection mode, only need to replace if unselected item is selected.
            ids = new Set([itemId]);
        }
    }
    if (!isEqual(ids, selectedIds)) {
        onChange?.({ ids: [...ids] });
    }
};
/**
 * The hook to handle the selection behavior in vizualization components.
 */
function useSelection({ selection = [], selectionMode = 'none', idExtracter, onChange }) {
    const onPointerUp = hooks.useCallback((event) => {
        const key = idExtracter(event);
        const isMeta = event.metaKey;
        const isCtrl = event.ctrlKey;
        if (key == null && (isMeta || isCtrl)) {
            return;
        }
        handleSelect(key, new Set(selection), selectionMode, isMeta || isCtrl || event.pointerType === 'touch' ? 'toggle' : 'replace', onChange);
    }, [selection, selectionMode, onChange]);
    const onContextMenu = hooks.useCallback((event) => {
        const key = idExtracter(event);
        const isCtrl = event.ctrlKey;
        handleSelect(key, new Set(selection), selectionMode, isCtrl ? 'toggle' : 'replace', onChange);
    }, [selection, selectionMode, onChange]);
    const onKeyUp = hooks.useCallback((event) => {
        const isShift = event.shiftKey;
        const isSpaceCtrl = event.ctrlKey && event.key === ' ';
        const isArrowKey = NAVKEYS.indexOf(event.key) !== -1;
        const itemKey = idExtracter(event);
        if (isArrowKey || isSpaceCtrl) {
            const behavior = isShift || isSpaceCtrl ? 'toggle' : 'replace';
            handleSelect(itemKey, new Set(selection), selectionMode, behavior, onChange);
        }
    }, [selection, selectionMode, onChange]);
    return selectionMode === 'none' || onChange == null
        ? {}
        : { onKeyUp, onContextMenu, onPointerUp };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.useSelection = useSelection;
//# sourceMappingURL=PRIVATE_useVizSelection.js.map
