{"version":3,"file":"UNSAFE_useTextFieldInputHandlers.js","sources":["../../../src/hooks/UNSAFE_useTextFieldInputHandlers/useTextFieldInputHandlers.ts"],"sourcesContent":["import { useCallback, useReducer, useRef } from 'preact/hooks';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\nimport { ValueUpdateDetail } from '../../utils/UNSAFE_valueUpdateDetail';\n\ntype TextFieldInputProps = {\n  currentCommitValue?: string;\n  value?: string;\n  onInput?: (detail: ValueUpdateDetail<string>) => void;\n  onCommit?: (detail: ValueUpdateDetail<string>) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n};\n\nexport function useTextFieldInputHandlers({\n  currentCommitValue,\n  value,\n  onInput,\n  onCommit,\n  onKeyDown\n}: TextFieldInputProps) {\n  const isComposing = useRef(false);\n\n  // preactjs/preact #1899 - https://github.com/preactjs/preact/issues/1899\n  // Preact does not force the native input to be controlled, so we need to\n  // trigger a rerender in order to keep it fully controlled.\n  // Force update hack is from https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n  const [, forceUpdate] = useReducer((x) => x + 1, 0);\n\n  // TODO: Currently, this assumes that the input field is a text field\n  // so that the change event can be simulated by capturing blur and enter keydown\n  // event. We might have to make this generic to handle other input types\n  // as well like radio, select, checkbox.\n  const handleChange = useCallback(\n    (event: Event) => {\n      const currentValue = (event.target as HTMLInputElement).value;\n      // When do we *not* want to call onCommit?\n      // When the input's value\n      // is the same as the currentCommitValue (like if the user hits Enter over and over,\n      // or if the user focuses and blurs over and over).\n      // Or when the component's value is programmatically changed.\n      // (currentCommitValue is updated whenever we commit or get a programmatic change.\n      // See component code and useCurrentValueReducer hook)\n\n      // We only need to trigger an onCommit for user interacted changes, not programmatic changes\n      if (currentCommitValue !== currentValue) {\n        onCommit?.({ previousValue: currentCommitValue, value: currentValue });\n      }\n    },\n    [onCommit, currentCommitValue]\n  );\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      onKeyDown?.(event);\n\n      if (event.key === 'Enter') {\n        handleChange(event);\n      }\n    },\n    [handleChange, onKeyDown]\n  );\n  const handleCompositionStart = useCallback(() => {\n    isComposing.current = true;\n  }, []);\n  const handleCompositionEnd = useCallback((event: Event) => {\n    isComposing.current = false;\n    // On some browsers, compositionend event is fired before the final input event,\n    // while it's the other way around on other browsers. Just call handleInput here\n    // anyway since handleInput will compare the value before actually calling it.\n    // When all browsers support the input event's isComposing property, we can use that.\n    // https://w3c.github.io/uievents/#dom-inputevent-iscomposing\n    handleInput(event);\n  }, []);\n  const handleInput = useCallback(\n    (event: Event) => {\n      // In android device we need to update input value even for composition events\n      // See JET-39086 for more details.\n      if (isComposing.current && getClientHints().platform !== 'android') return;\n\n      const newValue = (event.target as HTMLInputElement).value;\n      if (value === newValue) return;\n\n      onInput?.({ previousValue: value, value: newValue });\n\n      // preactjs/preact #1899 - https://github.com/preactjs/preact/issues/1899\n      // Preact does not force the native input to be controlled, so we need to\n      // trigger a rerender in order to keep it fully controlled.\n      // Force a rerender here, so if the value was not pushed back, the input\n      // will be reset to the old value mimicking a controlled input.\n      // One minor issue here is that the cursor position will also be reverted\n      // back to the end due to the forced value update. But this behavior should\n      // be fine as it happens in our oj-input-text as well.\n      forceUpdate(null);\n    },\n    [value, onInput]\n  );\n\n  return {\n    // With preact/compat, we will not have an onChange event.\n    // \"If you're using preact/compat, most onChange events are internally converted to onInput\n    // to emulate React's behavior. This is one of the tricks we use to ensure maximum\n    // compatibility with the React ecosystem.\"\n    // Since we need the onChange event, we will be simulating this to match the native event\n    // as best as we can. To do this, we will be capturing `blur` event and Enter `keydown` event.\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event\n    onBlur: handleChange,\n    onKeyDown: handleKeyDown,\n    // Since, preact does not support onCompositionStart and onCompositionEnd events\n    // we need to use all lowercase event name to use the native DOM events. Also,\n    // currently we do not have any need for the event object in these two handlers\n    // so ignored the arguments here.\n    oncompositionstart: handleCompositionStart,\n    oncompositionend: handleCompositionEnd,\n    onInput: handleInput\n  };\n}\n"],"names":["useRef","useReducer","useCallback","getClientHints"],"mappings":";;;;;;;;;AAYgB,SAAA,yBAAyB,CAAC,EACxC,kBAAkB,EAClB,KAAK,EACL,OAAO,EACP,QAAQ,EACR,SAAS,EACW,EAAA;AACpB,IAAA,MAAM,WAAW,GAAGA,YAAM,CAAC,KAAK,CAAC,CAAC;;;;;AAMlC,IAAA,MAAM,GAAG,WAAW,CAAC,GAAGC,gBAAU,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;;;;AAMpD,IAAA,MAAM,YAAY,GAAGC,iBAAW,CAC9B,CAAC,KAAY,KAAI;AACf,QAAA,MAAM,YAAY,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;;;;;;;;;QAU9D,IAAI,kBAAkB,KAAK,YAAY,EAAE;AACvC,YAAA,QAAQ,GAAG,EAAE,aAAa,EAAE,kBAAkB,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;AACxE,SAAA;AACH,KAAC,EACD,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAC/B,CAAC;AACF,IAAA,MAAM,aAAa,GAAGA,iBAAW,CAC/B,CAAC,KAAoB,KAAI;AACvB,QAAA,SAAS,GAAG,KAAK,CAAC,CAAC;AAEnB,QAAA,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;YACzB,YAAY,CAAC,KAAK,CAAC,CAAC;AACrB,SAAA;AACH,KAAC,EACD,CAAC,YAAY,EAAE,SAAS,CAAC,CAC1B,CAAC;AACF,IAAA,MAAM,sBAAsB,GAAGA,iBAAW,CAAC,MAAK;AAC9C,QAAA,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;KAC5B,EAAE,EAAE,CAAC,CAAC;AACP,IAAA,MAAM,oBAAoB,GAAGA,iBAAW,CAAC,CAAC,KAAY,KAAI;AACxD,QAAA,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;;;;;;QAM5B,WAAW,CAAC,KAAK,CAAC,CAAC;KACpB,EAAE,EAAE,CAAC,CAAC;AACP,IAAA,MAAM,WAAW,GAAGA,iBAAW,CAC7B,CAAC,KAAY,KAAI;;;QAGf,IAAI,WAAW,CAAC,OAAO,IAAIC,0BAAc,EAAE,CAAC,QAAQ,KAAK,SAAS;YAAE,OAAO;AAE3E,QAAA,MAAM,QAAQ,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC1D,IAAI,KAAK,KAAK,QAAQ;YAAE,OAAO;AAE/B,QAAA,OAAO,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;;;;;;;;;QAUrD,WAAW,CAAC,IAAI,CAAC,CAAC;AACpB,KAAC,EACD,CAAC,KAAK,EAAE,OAAO,CAAC,CACjB,CAAC;IAEF,OAAO;;;;;;;;AAQL,QAAA,MAAM,EAAE,YAAY;AACpB,QAAA,SAAS,EAAE,aAAa;;;;;AAKxB,QAAA,kBAAkB,EAAE,sBAAsB;AAC1C,QAAA,gBAAgB,EAAE,oBAAoB;AACtC,QAAA,OAAO,EAAE,WAAW;KACrB,CAAC;AACJ;;;;"}