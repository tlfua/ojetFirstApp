{"version":3,"file":"PRIVATE_useEffectEvent.js","sources":["../../../src/hooks/PRIVATE_useEffectEvent/useEffectEvent.ts","../../../src/hooks/PRIVATE_useEffectEvent/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useRef } from 'preact/hooks';\n\n/**\n * A polyfill for react's experimental_useEffectEvent\n * See https://react.dev/reference/react/experimental_useEffectEvent\n *\n * @param callback The event function that needs to be wrapped\n * @returns A non-reactive function that always “sees” the latest values of your props and state.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function useEffectEvent<T extends Function>(callback: T): T {\n  const fnRef = useRef<T>(callback);\n  fnRef.current = callback;\n\n  return useCallback<any>((...args: any[]) => {\n    return fnRef.current.apply(null, args);\n  }, []);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useEffectEvent } from './useEffectEvent';\n"],"names":["useRef","useCallback"],"mappings":";;;;;;;AAAA;;;;;;AAMG;AAGH;;;;;;AAMG;AACH;AACM,SAAU,cAAc,CAAqB,QAAW,EAAA;AAC5D,IAAA,MAAM,KAAK,GAAGA,YAAM,CAAI,QAAQ,CAAC,CAAC;AAClC,IAAA,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;AAEzB,IAAA,OAAOC,iBAAW,CAAM,CAAC,GAAG,IAAW,KAAI;QACzC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACxC,EAAE,EAAE,CAAC,CAAC;AACT;;ACxBA;;;;;;AAMG;;;;"}