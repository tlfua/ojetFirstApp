/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('preact/hooks');
var utils_UNSAFE_keys = require('../utils/UNSAFE_keys.js');
var hooks_UNSAFE_useUser = require('./UNSAFE_useUser.js');
require('../index-c3ee789d.js');
require('preact');
require('../Common.js');
require('../Common/themes.js');
require('../Common/themes/redwood/theme.js');
require('../Common/themes/themeContract.css.js');
require('preact/jsx-runtime');
require('preact/compat');

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Hook for handling current key update due to user interaction including keyboard navigation.
 * This can be reuse by all Collection components.
 *
 * @param keyExtractor function to extract the key based on the provided element
 * @param allowShiftKey if set to false, then pressing arrow key while shift key is down will not change the current key
 * @param getVerticalPrevKey function to get the previous key in the vertical direction based on the current key
 * @param getVerticalNextKey function to get the next key in the vertical direction based on the current key
 * @param getHorizontalPrevKey function to get the previous key in the horizontal direction based on the current key
 * @param getHorizontalNextKey function to get the next key based on the current key
 * @param currentKey the current key
 * @param onCurrentChange function to invoke if the current key has changed
 * @param keyComparator an optional function to compare keys, otherwise === is used
 * @returns
 */
function useCurrentKey(keyExtractor, allowShiftKey, getVerticalPrevKey, getVerticalNextKey, getHorizontalPrevKey, getHorizontalNextKey, currentKey, onChange, keyComparator) {
    const { direction } = hooks_UNSAFE_useUser.useUser();
    const isRtl = direction === 'rtl';
    const keyEquals = hooks.useCallback((key1, key2) => {
        if (keyComparator) {
            return keyComparator(key1, key2);
        }
        return key1 === key2;
    }, [keyComparator]);
    const onKeyDown = hooks.useCallback((event) => {
        if (onChange && utils_UNSAFE_keys.isKeyDefined(currentKey)) {
            const keyHandlers = {
                ArrowUp: getVerticalPrevKey,
                ArrowDown: getVerticalNextKey,
                ArrowLeft: isRtl ? getHorizontalNextKey : getHorizontalPrevKey,
                ArrowRight: isRtl ? getHorizontalPrevKey : getHorizontalNextKey
            };
            if (Object.keys(keyHandlers).includes(event.key) && (allowShiftKey || !event.shiftKey)) {
                const newKey = keyHandlers[event.key]?.();
                if (utils_UNSAFE_keys.isKeyDefined(newKey) && !keyEquals(currentKey, newKey)) {
                    onChange({ value: newKey });
                }
                event.preventDefault();
            }
        }
    }, [
        currentKey,
        onChange,
        getVerticalPrevKey,
        getVerticalNextKey,
        getHorizontalPrevKey,
        getHorizontalNextKey,
        keyEquals
    ]);
    const onClickCapture = hooks.useCallback((event) => {
        if (onChange && !event.shiftKey) {
            const nextKey = keyExtractor(event.target);
            if (utils_UNSAFE_keys.isKeyDefined(nextKey) && !keyEquals(currentKey, nextKey)) {
                onChange({ value: nextKey });
            }
        }
    }, [currentKey, keyExtractor, onChange, keyEquals]);
    const currentKeyProps = onChange == null ? {} : { onClickCapture, onKeyDown };
    return { currentKeyProps };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.useCurrentKey = useCurrentKey;
//# sourceMappingURL=PRIVATE_useCurrentKey.js.map
