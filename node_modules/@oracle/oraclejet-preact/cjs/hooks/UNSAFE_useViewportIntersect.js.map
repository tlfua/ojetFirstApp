{"version":3,"file":"UNSAFE_useViewportIntersect.js","sources":["../../../src/hooks/UNSAFE_useViewportIntersect/useViewportIntersect.ts","../../../src/hooks/UNSAFE_useViewportIntersect/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useEffect } from 'preact/hooks';\n\n/**\n * Configuration about the viewport.  For now, it only has a field that returns the viewport element.\n */\nexport type ViewportConfig = {\n  scroller: () => HTMLElement | null;\n};\n\n/**\n * Hook to detect when the specified viewport element intersects elements that matches the specified css selector.\n * This is currently used by IncrementalLoader and VirtualizeViewportCollection.\n * Note options to IntersectionObsever such as rootMargin is not exposed now but can be added in the future as\n * needed.  (for example, with sticky footer we want to specify a wider margin so it won't trigger intersect)\n *\n * @param viewport an object which provide information about the viewport including what the viewport element is\n * @param onIntersect callback when an intersection with an element that has the specified target\n *                    style class occurred\n * @param targetSelector the CSS querySelector string used to identify the element where IntersectionObserver\n *                       observes\n * @param margin the top and bottom margin surrounding the viewport element in which the intersect detection takes into account.\n */\nexport function useViewportIntersect(\n  viewport: ViewportConfig,\n  margin = 0,\n  threshold = 0,\n  targetSelector: string,\n  onIntersect: () => void,\n  onNotIntersect?: (entry: IntersectionObserverEntry) => void\n) {\n  // create an IntersectionObserver.  Note for now we are creating it on every render (instead of once\n  // on mounted) due to an issue we encountered where sometimes IntersectionObserver will not invoke\n  // the intersect callback (possibly due to the root might have been detach/re-attached?), see JET-49951.\n  useEffect(() => {\n    let observer: IntersectionObserver;\n    const root = viewport.scroller();\n    if (root) {\n      const options = {\n        // specifying null to cause ResizeObserver to use document viewport\n        root: root === document.body || root === document.documentElement ? null : root,\n        rootMargin: `${margin}px 0px`,\n        threshold: [threshold]\n      };\n      observer = new IntersectionObserver((entries) => {\n        for (const entry of entries) {\n          if (\n            entry.isIntersecting ||\n            // manually check intersection here, because rootMargin is ignored when scroller is not explicitly defined,\n            // e.g. using document.documentElement, which leads to intersection is not correctly detected during\n            // keyboard navigation. https://w3c.github.io/IntersectionObserver/#dom-intersectionobserver-rootmargin\n            (margin > 0 &&\n              !options.root &&\n              entry.rootBounds?.bottom &&\n              entry.boundingClientRect.top <= entry.rootBounds?.bottom)\n          ) {\n            onIntersect();\n            return;\n          }\n          if (entry.intersectionRatio > 0 && !entry.isIntersecting && onNotIntersect) {\n            onNotIntersect(entry);\n            return;\n          }\n        }\n      }, options);\n\n      // start observing the element with certain class is scrolled into viewport\n      root.querySelectorAll(targetSelector).forEach((target) => {\n        observer.observe(target);\n      });\n    }\n\n    return () => {\n      observer?.disconnect();\n    };\n  });\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useViewportIntersect, ViewportConfig } from './useViewportIntersect';\n"],"names":["useEffect"],"mappings":";;;;;;;AAAA;;;;;;AAMG;AAUH;;;;;;;;;;;;AAYG;SACa,oBAAoB,CAClC,QAAwB,EACxB,MAAM,GAAG,CAAC,EACV,SAAS,GAAG,CAAC,EACb,cAAsB,EACtB,WAAuB,EACvB,cAA2D,EAAA;;;;IAK3DA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,QAA8B,CAAC;AACnC,QAAA,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;AACjC,QAAA,IAAI,IAAI,EAAE;AACR,YAAA,MAAM,OAAO,GAAG;;AAEd,gBAAA,IAAI,EAAE,IAAI,KAAK,QAAQ,CAAC,IAAI,IAAI,IAAI,KAAK,QAAQ,CAAC,eAAe,GAAG,IAAI,GAAG,IAAI;gBAC/E,UAAU,EAAE,CAAG,EAAA,MAAM,CAAQ,MAAA,CAAA;gBAC7B,SAAS,EAAE,CAAC,SAAS,CAAC;aACvB,CAAC;AACF,YAAA,QAAQ,GAAG,IAAI,oBAAoB,CAAC,CAAC,OAAO,KAAI;AAC9C,gBAAA,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;oBAC3B,IACE,KAAK,CAAC,cAAc;;;;yBAInB,MAAM,GAAG,CAAC;4BACT,CAAC,OAAO,CAAC,IAAI;4BACb,KAAK,CAAC,UAAU,EAAE,MAAM;4BACxB,KAAK,CAAC,kBAAkB,CAAC,GAAG,IAAI,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,EAC3D;AACA,wBAAA,WAAW,EAAE,CAAC;wBACd,OAAO;AACR,qBAAA;AACD,oBAAA,IAAI,KAAK,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,cAAc,EAAE;wBAC1E,cAAc,CAAC,KAAK,CAAC,CAAC;wBACtB,OAAO;AACR,qBAAA;AACF,iBAAA;aACF,EAAE,OAAO,CAAC,CAAC;;YAGZ,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;AACvD,gBAAA,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,aAAC,CAAC,CAAC;AACJ,SAAA;AAED,QAAA,OAAO,MAAK;YACV,QAAQ,EAAE,UAAU,EAAE,CAAC;AACzB,SAAC,CAAC;AACJ,KAAC,CAAC,CAAC;AACL;;AClFA;;;;;;AAMG;;;;"}