{"version":3,"file":"UNSAFE_useTap.js","sources":["../../../src/hooks/UNSAFE_useTap/useTap.ts","../../../src/hooks/UNSAFE_useTap/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useCallback } from 'preact/hooks';\n\ntype TapOptions = {\n  isDisabled?: boolean;\n};\n\ntype TapInfo = {\n  x: number;\n  y: number;\n};\n\ntype TapState = {\n  pointerDownId: number | null;\n  startTime: number;\n};\n\n/**\n * Returns event handlers that can make a target element tapable.\n * useTap is used for non-keyboard elements.\n *\n * @param onTap function\n * @param settings object\n * @returns\n */\n\nexport function useTap(\n  onTap: (e: TapInfo) => void,\n  { isDisabled }: TapOptions = { isDisabled: false }\n): { tapProps: Record<string, any> } {\n  const ref = useRef<TapState>({\n    pointerDownId: null,\n    startTime: 0\n  });\n\n  const onPointerDown = useCallback((e: PointerEvent) => {\n    // return if it is not a left click\n    if (e.pointerType === 'mouse' && e.button !== 0) {\n      return;\n    }\n    if (!ref.current.pointerDownId) {\n      ref.current = { pointerDownId: e.pointerId, startTime: e.timeStamp };\n    } else {\n      clearTap();\n    }\n  }, []);\n\n  const onPointerUp = useCallback(\n    (e: PointerEvent) => {\n      if (e.pointerId === ref.current.pointerDownId) {\n        const tapTime = e.timeStamp - ref.current.startTime;\n        // 250ms maximum tap time based on numbers used in Hammer\n        if (tapTime <= 250) {\n          onTap({ x: e.offsetX, y: e.offsetY });\n        }\n      }\n      clearTap();\n    },\n    [onTap]\n  );\n\n  const clearTap = useCallback(() => {\n    ref.current = { pointerDownId: null, startTime: 0 };\n  }, []);\n\n  const tapProps = isDisabled\n    ? {}\n    : {\n        onPointerDown,\n        onPointerUp,\n        onPointerLeave: clearTap,\n        onPointerCancel: clearTap\n      };\n\n  return {\n    tapProps\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { useTap } from './useTap';\n"],"names":["useRef","useCallback"],"mappings":";;;;;;;AAAA;;;;;;AAMG;AAkBH;;;;;;;AAOG;AAEa,SAAA,MAAM,CACpB,KAA2B,EAC3B,EAAE,UAAU,EAAA,GAAiB,EAAE,UAAU,EAAE,KAAK,EAAE,EAAA;IAElD,MAAM,GAAG,GAAGA,YAAM,CAAW;AAC3B,QAAA,aAAa,EAAE,IAAI;AACnB,QAAA,SAAS,EAAE,CAAC;AACb,KAAA,CAAC,CAAC;AAEH,IAAA,MAAM,aAAa,GAAGC,iBAAW,CAAC,CAAC,CAAe,KAAI;;QAEpD,IAAI,CAAC,CAAC,WAAW,KAAK,OAAO,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE;AAC9B,YAAA,GAAG,CAAC,OAAO,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;AACtE,SAAA;AAAM,aAAA;AACL,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;KACF,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,MAAM,WAAW,GAAGA,iBAAW,CAC7B,CAAC,CAAe,KAAI;QAClB,IAAI,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE;YAC7C,MAAM,OAAO,GAAG,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;;YAEpD,IAAI,OAAO,IAAI,GAAG,EAAE;AAClB,gBAAA,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;AACvC,aAAA;AACF,SAAA;AACD,QAAA,QAAQ,EAAE,CAAC;AACb,KAAC,EACD,CAAC,KAAK,CAAC,CACR,CAAC;AAEF,IAAA,MAAM,QAAQ,GAAGA,iBAAW,CAAC,MAAK;AAChC,QAAA,GAAG,CAAC,OAAO,GAAG,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;KACrD,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,QAAQ,GAAG,UAAU;AACzB,UAAE,EAAE;AACJ,UAAE;YACE,aAAa;YACb,WAAW;AACX,YAAA,cAAc,EAAE,QAAQ;AACxB,YAAA,eAAe,EAAE,QAAQ;SAC1B,CAAC;IAEN,OAAO;QACL,QAAQ;KACT,CAAC;AACJ;;ACpFA;;;;;;AAMG;;;;"}