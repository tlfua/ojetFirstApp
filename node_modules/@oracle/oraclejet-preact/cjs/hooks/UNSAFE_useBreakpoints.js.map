{"version":3,"file":"UNSAFE_useBreakpoints.js","sources":["../../../src/hooks/UNSAFE_useBreakpoints/useBreakpoints.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'preact/hooks';\n\n/*\n * TODO: These default breakpoints are temporary (will be set by Provider in the future)\n *\n * This object defines default breakpoints for screens and containers.\n */\nexport const defaultBreakpoints = {\n  sm: '0px',\n  md: '600px',\n  lg: '1024px',\n  xl: '1440px'\n};\n\nexport type Breakpoints = Record<string, string>;\n\n/*\n * Simple custom hook which returns the current breakpoints based on viewport width.\n * The breakpoints are returned as an object that is a set of boolean values keyed to each breakpoint.\n * The window/viewport min-width is matched against a range of pixel values defined as the breakpoints.\n *\n * TODO: Investigate useBreakpoints scalability if a component that uses useBreakpoints ends up being stamped out in some collection component (JET-49558)\n *\n * TODO: Parameterize this hook type such that we enable type checking on the returned record key; introduce a type parameter that corresponds to the Record key type\n */\nexport function useBreakpoints(breakpoints: Breakpoints = defaultBreakpoints) {\n  // this handler will return current breakpoints as a single object we can watch, rather than looping through each breakpoint key\n  const queryMatches = useCallback(() => {\n    const currentMatches: Record<string, boolean> = {};\n    Object.entries(breakpoints).forEach(([key, value]) => {\n      currentMatches[key] = window.matchMedia(`(min-width: ${value})`).matches;\n    });\n    return currentMatches;\n  }, [breakpoints]);\n\n  const [matches, setMatches] = useState(() => queryMatches());\n\n  useEffect(() => {\n    const onResize = () => {\n      setMatches(queryMatches());\n    };\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [queryMatches]);\n\n  return matches;\n}\n"],"names":["useCallback","useState","useEffect"],"mappings":";;;;;;;AAEA;;;;AAIG;AACU,MAAA,kBAAkB,GAAG;AAChC,IAAA,EAAE,EAAE,KAAK;AACT,IAAA,EAAE,EAAE,OAAO;AACX,IAAA,EAAE,EAAE,QAAQ;AACZ,IAAA,EAAE,EAAE,QAAQ;EACZ;AAIF;;;;;;;;AAQG;AACa,SAAA,cAAc,CAAC,WAAA,GAA2B,kBAAkB,EAAA;;AAE1E,IAAA,MAAM,YAAY,GAAGA,iBAAW,CAAC,MAAK;QACpC,MAAM,cAAc,GAA4B,EAAE,CAAC;AACnD,QAAA,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AACnD,YAAA,cAAc,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAA,YAAA,EAAe,KAAK,CAAA,CAAA,CAAG,CAAC,CAAC,OAAO,CAAC;AAC3E,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,cAAc,CAAC;AACxB,KAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;AAElB,IAAA,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAGC,cAAQ,CAAC,MAAM,YAAY,EAAE,CAAC,CAAC;IAE7DC,eAAS,CAAC,MAAK;QACb,MAAM,QAAQ,GAAG,MAAK;AACpB,YAAA,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;AAC7B,SAAC,CAAC;AAEF,QAAA,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC5C,QAAA,OAAO,MAAK;AACV,YAAA,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACjD,SAAC,CAAC;AACJ,KAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;AAEnB,IAAA,OAAO,OAAO,CAAC;AACjB;;;;;"}