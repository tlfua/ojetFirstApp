{"version":3,"file":"Icon-e47442ad.js","sources":["../../src/UNSAFE_Icon/Icon.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX, Fragment } from 'preact';\nimport { Size, sizeToCSS } from '../utils/UNSAFE_size';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { styles } from './themes/IconStyle.css';\n\ntype IntrinsicProps = JSX.SVGAttributes<SVGSVGElement>;\n\ntype Props = Pick<IntrinsicProps, 'viewBox' | 'children'> & {\n  /**\n   * The size of the component. Defaults to '1em', which means the font size of the parent is used.\n   */\n  size?: Size | '1em';\n  /**\n   * The color of the component. Defaults to 'currentColor', which behaves like the CSS 'currentColor' value.\n   */\n  color?: keyof typeof styles;\n  /**\n   * A label to be used for accessibility purposes.\n   */\n  accessibleLabel?: string;\n};\n\nexport const Icon = ({\n  size = '1em',\n  color = 'currentColor',\n  accessibleLabel = '',\n  viewBox = 'none',\n  children\n}: Props) => (\n  <Svg\n    height=\"1em\"\n    width=\"1em\"\n    viewBox={viewBox}\n    accessibleLabel={accessibleLabel}\n    class={styles[color]}\n    style={{ fontSize: size === '1em' ? size : `${sizeToCSS(size)}` }}>\n    {children}\n  </Svg>\n);\n\ntype BaseSvgProps = Pick<\n  IntrinsicProps,\n  'height' | 'width' | 'viewBox' | 'class' | 'children' | 'style'\n>;\ntype SvgProps = BaseSvgProps & {\n  accessibleLabel: string;\n};\n\nconst Svg = ({ accessibleLabel, ...otherProps }: SvgProps) =>\n  accessibleLabel ? (\n    <SemanticSvg accessibleLabel={accessibleLabel} {...otherProps} />\n  ) : (\n    <DecorativeSvg {...otherProps} />\n  );\n\nconst DecorativeSvg = (props: BaseSvgProps) => <svg {...props} />;\n\nconst SemanticSvg = ({ accessibleLabel, children, ...props }: SvgProps) => {\n  // See JET-56791.\n  // We want the same effect as specifying a SVG <title> element for showing a tooltip.\n  // When <title> is used, the SVG is not keyboard focusable by default, and the tooltip only shows up\n  // on mouse hover. Typically any accessibility requirements beyond this should be handled by making the parent\n  // element accessible. This was the approved behavior by APO, and is consistent with the behavior of icons\n  // from other libraries.\n  //\n  // We need to use useTooltip for displaying the tooltip, but it appears spreading the onFocus and onBlur event\n  // handlers generated by the useTooltip hook onto the <svg> causes it to become keyboard focusable*.\n  // To fix this we need to omit spreading the onFocus and onBlur event handlers from the tooltipProps.\n  //\n  // *Most browsers implement the SVG 1.1 spec. There's also a SVG 1.2 Tiny spec that's not\n  // fully implemented in most browsers.\n  // The non-draft version of SVG 1.1 doesn't document the focus conditions and behavior AFAICT.\n  // However it appears browsers implemented the same behavior as the focusable=\"auto\" behavior as described\n  // in SVG 1.2 Tiny: https://www.w3.org/TR/SVGTiny12/interact.html#focus\n  // In particular, it states that if the SVG element has focus related event listeners registered on it, then it becomes focusable.\n  // The spec mentions focusin and focusout event handlers, but not focus event handlers. The reality is\n  // that having a focus event handler registered also causes the <svg> to become focusable (tested on Chrome), and that's\n  // probably because a focus event always precedes a focusin event.\n  // Note also setting focusable=\"false\", or setting tabindex=\"-1\" on the <svg> to prevent it from becoming focusable\n  // doesn't work based on my testing, and that's most probably because the focusable and tabindex attributes are not part\n  // of the SVG 1.1 spec.\n  const {\n    tooltipContent,\n    tooltipProps: { onFocus, onBlur, ...restTooltipProps }\n  } = useTooltip({\n    text: accessibleLabel,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    }\n  });\n\n  return (\n    <Fragment>\n      <svg role=\"img\" {...props} {...restTooltipProps} aria-label={accessibleLabel}>\n        {children}\n      </svg>\n      {tooltipContent}\n    </Fragment>\n  );\n};\n"],"names":["_jsx","styles","sizeToCSS","useTooltip","_jsxs","Fragment"],"mappings":";;;;;;;;;AA6Ba,MAAA,IAAI,GAAG,CAAC,EACnB,IAAI,GAAG,KAAK,EACZ,KAAK,GAAG,cAAc,EACtB,eAAe,GAAG,EAAE,EACpB,OAAO,GAAG,MAAM,EAChB,QAAQ,EACF,MACNA,cAAA,CAAC,GAAG,EAAA,EACF,MAAM,EAAC,KAAK,EACZ,KAAK,EAAC,KAAK,EACX,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,eAAe,EAChC,KAAK,EAAEC,uCAAM,CAAC,KAAK,CAAC,EACpB,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,KAAK,KAAK,GAAG,IAAI,GAAG,CAAG,EAAAC,2BAAS,CAAC,IAAI,CAAC,CAAE,CAAA,EAAE,YAChE,QAAQ,EAAA,CACL,EACN;AAUF,MAAM,GAAG,GAAG,CAAC,EAAE,eAAe,EAAE,GAAG,UAAU,EAAY,KACvD,eAAe,IACbF,cAAA,CAAC,WAAW,EAAA,EAAC,eAAe,EAAE,eAAe,EAAM,GAAA,UAAU,GAAI,KAEjEA,cAAC,CAAA,aAAa,OAAK,UAAU,EAAA,CAAI,CAClC,CAAC;AAEJ,MAAM,aAAa,GAAG,CAAC,KAAmB,KAAKA,cAAA,CAAA,KAAA,EAAA,EAAA,GAAS,KAAK,EAAA,CAAI,CAAC;AAElE,MAAM,WAAW,GAAG,CAAC,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAY,KAAI;;;;;;;;;;;;;;;;;;;;;;;;AAwBxE,IAAA,MAAM,EACJ,cAAc,EACd,YAAY,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAE,EACvD,GAAGG,kCAAU,CAAC;AACb,QAAA,IAAI,EAAE,eAAe;AACrB,QAAA,MAAM,EAAE;AACN,YAAA,CAAC,EAAE,SAAS;AACZ,YAAA,CAAC,EAAE,SAAS;AACb,SAAA;AACF,KAAA,CAAC,CAAC;IAEH,QACEC,gBAACC,eAAQ,EAAA,EAAA,QAAA,EAAA,CACPL,wBAAK,IAAI,EAAC,KAAK,EAAK,GAAA,KAAK,KAAM,gBAAgB,EAAA,YAAA,EAAc,eAAe,EACzE,QAAA,EAAA,QAAQ,GACL,EACL,cAAc,CACN,EAAA,CAAA,EACX;AACJ,CAAC;;;;"}