{"version":3,"file":"SplitMenuButton-67c6f593.js","sources":["../../src/UNSAFE_SplitMenuButton/SplitMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLayout } from '../UNSAFE_ButtonLayout';\nimport { NavDownIcon } from '../PRIVATE_ThemedIcons/NavDownIcon';\nimport { Menu } from '../UNSAFE_Menu';\n\nimport { BaseButton, StylingOptions } from '../UNSAFE_BaseButton';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useCallback, useState, useRef, useImperativeHandle } from 'preact/hooks';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'title'>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type Props = IntrinsicProps &\n  WidthInterpolationProps & {\n    /**\n     * children - One or more MenuItems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The label rendered on the action side of the button.  Used\n     * to identify which child MenuItem action is invoked.\n     */\n    label?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     \n     */\n    variant?: 'outlined' | 'solid' | 'callToAction';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n  };\n\nexport const compStyles = {\n  divider: cssProps`${{\n    borderTopWidth: '0px',\n    borderBottomWidth: '0px',\n    borderRightWidth: '0px',\n    borderLeftWidth: '1px',\n    borderStyle: 'solid',\n    height: '100%',\n    display: 'inline-flex',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color)'\n  }}`,\n\n  disabledDivider: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-disabled)'\n  }}`,\n\n  icon: cssProps`${{\n    display: 'contents'\n  }}`,\n\n  root: cssProps`${{\n    display: 'inline-block'\n  }}`,\n\n  childrenMargins: cssProps`${{\n    /* @ts-ignore */\n    '& > *': {\n      marginTop: '0 !important',\n      marginBottom: '0 !important',\n      marginLeft: '0 !important',\n      marginRight: '0 !important'\n    }\n  }}`\n};\n\nconst menuButtonStyling = ['embedded', 'min', 'noBorderRadiusStart'] as StylingOptions[];\nconst menuButtonActiveStyling = [...menuButtonStyling, 'active'] as StylingOptions[];\n\nconst actionbuttonStyling = ['embedded', 'fill', 'noBorderRadiusEnd'] as StylingOptions[];\nconst actionButtonActiveStyling = [...actionbuttonStyling, 'active'] as StylingOptions[];\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * A SplitMenuButton is a combined action and menu button.\n */\nexport const SplitMenuButton = forwardRef(\n  (\n    {\n      children,\n      label = '',\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      onAction,\n      ...props\n    }: Props,\n    ref?: ForwardedRef<HTMLSpanElement>\n  ) => {\n    const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const { class: cls, ...styles } = styleInterpolations(props);\n\n    // SPACE or ENTER on root area invokes action, as does CLICK/TAP on LEFT SIDE ACTION AREA\n    // DOWN ARROW invokes menu, as does CLICK/TAP on RIGHT SIDE MENU AREA\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          setIsActive(true);\n        } else if (event.key == 'ArrowDown') {\n          !isDisabled && setIsMenuOpen((menuOpen: boolean) => !menuOpen);\n          // Prevent page scroll for down arrow, user definitely wanted to show menu in this case.\n          // Don't prevent other keypress defaults, as user may want to hold SPACE down to scroll page.\n          event.preventDefault();\n        }\n      },\n      [isDisabled, setIsMenuOpen, setIsActive]\n    );\n\n    const onKeyUp = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          !isDisabled && onAction && onAction();\n          setIsActive(false);\n        }\n      },\n      [isDisabled, onAction, setIsActive]\n    );\n\n    const onBlur = useCallback(() => {\n      setIsActive(false);\n    }, [setIsActive]);\n\n    const _ref = useRef<HTMLSpanElement>(null);\n    useImperativeHandle(ref!, () => _ref.current!, [_ref]);\n\n    const menuHandler = () => {\n      setIsMenuOpen(!isMenuOpen);\n    };\n\n    const handleClose = (e: any) => {\n      //Focus has to be set on the launcher when menu is dismissed or\n      //item is \"selected\"\n      if (e.reason === 'dismissed' || e.reason === 'itemAction') {\n        _ref.current?.focus();\n      }\n      setIsMenuOpen(false);\n    };\n\n    const dividerStyles = classNames([\n      compStyles.divider,\n      isDisabled && compStyles.disabledDivider\n    ]);\n\n    const rootStyles = classNames([compStyles.root]);\n\n    // Using Span for top button allows us to avoid :hover state rendering by\n    // taking advantage of :enabled not on spans\n    const rootButton = () => {\n      return (\n        <BaseButton\n          elementDetails={{ type: 'span' }}\n          ref={\n            _ref as ForwardedRef<HTMLButtonElement> &\n              ForwardedRef<HTMLAnchorElement> &\n              ForwardedRef<HTMLSpanElement>\n          }\n          isDisabled={isDisabled}\n          styling={['container', 'min']}\n          variant={variant}\n          size={size}\n          aria-label={label}\n          aria-roledescription=\"split menu button, press down arrow to invoke menu\"\n          aria-expanded={isMenuOpen}>\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getActionButtonStyling(isActive)}\n              size={size}\n              isDisabled={isDisabled}\n              aria-hidden={true}\n              onAction={onAction}>\n              {label}\n            </BaseButton>\n            <div class={`${dividerStyles}`} />\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getMenuButtonStyling(isMenuOpen)}\n              size={size}\n              isDisabled={isDisabled}\n              aria-hidden={true}\n              onAction={menuHandler}>\n              <ButtonLayout\n                display=\"icons\"\n                startIcon={<NavDownIcon />}\n                size={size}\n                styling=\"embedded\"></ButtonLayout>\n            </BaseButton>\n          </TabbableModeContext.Provider>\n        </BaseButton>\n      );\n    };\n\n    if (isDisabled) {\n      return (\n        <span role=\"toolbar\" class={`${rootStyles} ${cls}`} style={styles}>\n          {rootButton()}\n        </span>\n      );\n    } else {\n      return (\n        <span\n          role=\"toolbar\"\n          class={`${rootStyles} ${cls}`}\n          style={styles}\n          onKeyDown={!isDisabled && onKeyDown}\n          onKeyUp={onKeyUp}\n          onBlur={onBlur}>\n          {rootButton()}\n          <Menu anchorRef={_ref} isOpen={isMenuOpen} onClose={handleClose}>\n            <span className={compStyles.childrenMargins}>{children}</span>\n          </Menu>\n        </span>\n      );\n    }\n  }\n);\n\nfunction getMenuButtonStyling(isActive: boolean) {\n  return isActive ? menuButtonActiveStyling : menuButtonStyling;\n}\n\nfunction getActionButtonStyling(isActive: boolean) {\n  return isActive ? actionButtonActiveStyling : actionbuttonStyling;\n}\n"],"names":["compStyles","menuButtonStyling","menuButtonActiveStyling","actionbuttonStyling","actionButtonActiveStyling","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","SplitMenuButton","forwardRef","children","label","variant","isDisabled","size","onAction","props","ref","class","cls","styles","onKeyDown","useCallback","event","key","setIsMenuOpen","menuOpen","onKeyUp","onBlur","setIsActive","_ref","useRef","useImperativeHandle","current","isMenuOpen","handleClose","e","focus","divider","_jsx","BaseButton","elementDetails","type","styling","_jsxs","TabbableModeContext","Provider","value","isTabbable","getActionButtonStyling","isActive","dividerStyles","getMenuButtonStyling","menuHandler","ButtonLayout","display","startIcon","NavDownIcon","role","rootStyles","style","rootButton","Menu","anchorRef","isOpen","onClose","className","childrenMargins"],"mappings":"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"}