/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('preact');
require('./UNSAFE_BaseButton.js');
require('./UNSAFE_ButtonLayout.js');
var compat = require('preact/compat');
var hooks_UNSAFE_useTooltip = require('./hooks/UNSAFE_useTooltip.js');
var BaseButton = require('./BaseButton-934b844e.js');
var ButtonLayout = require('./ButtonLayout-648ecbd5.js');

const IconButton = compat.forwardRef(({ variant = 'outlined', isDisabled = false, isRepeat = false, size = 'md', autofocus, onAction, tooltip, 'aria-label': accessibleLabel, 'aria-describedby': ariaDescribedBy, ...props }, ref) => {
    const { tooltipContent, tooltipProps } = hooks_UNSAFE_useTooltip.useTooltip({
        text: tooltip ? tooltip : accessibleLabel
    });
    return (jsxRuntime.jsxs(preact.Fragment, { children: [jsxRuntime.jsx(BaseButton.BaseButton, { ...tooltipProps, ref: ref, isDisabled: isDisabled, isRepeat: isRepeat, size: size, autofocus: autofocus, variant: variant, styling: ['min'], onAction: onAction, "aria-describedby": ariaDescribedBy, "aria-label": accessibleLabel ?? tooltip, children: jsxRuntime.jsx(ButtonLayout.ButtonLayout, { display: 'icons', startIcon: props.children, size: size }) }), tooltipContent] }));
});

exports.IconButton = IconButton;
//# sourceMappingURL=IconButton-bc45151b.js.map
