/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
require('./UNSAFE_Flex.js');
var utils_PRIVATE_timer = require('./utils/PRIVATE_timer.js');
require('./utils/UNSAFE_classNames.js');
var PRIVATE_Message_themes_MessageStyles_css = require('./PRIVATE_Message/themes/MessageStyles.css.js');
var MessageCloseButton = require('./MessageCloseButton-64c284a2.js');
var classNames = require('./classNames-d619a292.js');
var MessageDetail = require('./MessageDetail-dce2aadd.js');
var MessageFormattingUtils = require('./MessageFormattingUtils-3cf76724.js');
var MessageStartIcon = require('./MessageStartIcon-8a59b0b6.js');
var MessageSummary = require('./MessageSummary-5d0c793a.js');
var MessageTimestamp = require('./MessageTimestamp-eab05143.js');
var MessageUtils = require('./MessageUtils-ff85758f.js');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var UNSAFE_MessageBanner_themes_redwood_MessageBannerTheme = require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js');
var Flex = require('./Flex-2eb09dad.js');
var MessagesManager = require('./MessagesManager-411c2e38.js');
var Message_types = require('./Message.types-20efdde7.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-b9f57550.js');
require('./Common/themes/themeContract.css.js');
require('./_curry1-6e9511bf.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-ad2313fd.js');
require('./_curry2-53a902bf.js');
require('./_has-aa203696.js');

require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-65201aa4.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-8cd3009d.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-939ec1ef.js');

require('./UNSAFE_IconButton.js');
require('./IconButton-bc45151b.js');
require('preact');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-934b844e.js');
require('./hooks/UNSAFE_usePress.js');
require('./hooks/UNSAFE_useHover.js');
require('./hooks/UNSAFE_useToggle.js');
require('./hooks/UNSAFE_useActive.js');
require('preact/compat');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-b9e7be1e.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('./utils/UNSAFE_mergeProps.js');
require('./UNSAFE_ButtonLayout.js');
require('./ButtonLayout-648ecbd5.js');
require('./UNSAFE_Text.js');
require('./Text-4f1f698a.js');
require('./UNSAFE_Text/themes/TextStyles.css.js');

require('./vanilla-extract-recipes-createRuntimeFn.esm-8a4b93e4.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./hooks/UNSAFE_useId.js');
require('./UNSAFE_Floating.js');
require('./Floating-3415cf36.js');
require('./index-0a166c9e.js');
require('./hooks/UNSAFE_useUser.js');
require('./index-c3ee789d.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-4bc33829.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./utils/UNSAFE_logger.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-ee4e7934.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-802f3cdb.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./PRIVATE_ThemedIcons/CloseIcon.js');
require('./UNSAFE_Icon.js');
require('./Icon-e47442ad.js');
require('./UNSAFE_Icon/themes/IconStyle.css.js');

require('./utils/UNSAFE_getLocale.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-27007290.js');
require('./PRIVATE_ThemedIcons/MessageConfirmationIcon.js');
require('./PRIVATE_ThemedIcons/MessageErrorIcon.js');
require('./PRIVATE_ThemedIcons/MessageInfoIcon.js');
require('./PRIVATE_ThemedIcons/MessageWarningIcon.js');
require('./utils/UNSAFE_soundUtils.js');
require('./UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js');

require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useMessagesContext.js');

/**
 * Component for rendering custom icon/content for start icon in Message
 */
function MessageCustomStartIcon({ item, renderer }) {
    // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.
    const classes = classNames.classNames([
        PRIVATE_Message_themes_MessageStyles_css.messageStartIconStyles.base,
        // for now only toast has support for custom icon
        PRIVATE_Message_themes_MessageStyles_css.messageStartIconStyles.toast,
        PRIVATE_Message_themes_MessageStyles_css.messageStartIconStyles.customToast
    ]);
    return (jsxRuntime.jsx("div", { class: classes, role: "presentation", "data-oj-message-custom-icon": "", children: renderer(item) }));
}

/**
 * A component that styles the header for the message component
 * @param param0 Props
 * @returns MessageHeader component instance
 */
function MessageHeader({ children, variant = 'banner' }) {
    const rootClasses = classNames.classNames([PRIVATE_Message_themes_MessageStyles_css.messageHeaderStyles.base, PRIVATE_Message_themes_MessageStyles_css.messageHeaderStyles[variant]]);
    return (jsxRuntime.jsx("div", { role: "presentation", class: rootClasses, children: children }));
}

/**
 * Determines the base variant of the message - banner or toast
 *
 * @param variant The message variant
 * @returns The base variant
 */
function getBaseVariant(variant) {
    if (variant === 'pageBanner' || variant === 'sectionBanner') {
        return 'banner';
    }
    return 'toast';
}
/**
 * Determines if a severity icon is needed based on the component severity
 *
 * @param severity The component severity
 * @returns Whether or not to render the severity icon
 */
function isSeverityIconNeeded(severity) {
    const isValidSeverity = MessageFormattingUtils.isValidValueForProp(severity, 'severity');
    return isValidSeverity && severity !== 'none';
}
/**
 * Default timeout duration for autoTimeout in milliseconds
 */
const MIN_SECONDS = 5;
const DEFAULT_TIMEOUT = MIN_SECONDS * 1000;
/**
 * Component that renders an individual message
 */
function Message({ closeButtonRenderer, detailRenderer, iconRenderer, index = -1, item, onClose, messageRef = () => { }, variant = 'pageBanner', translations }) {
    const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;
    const { autoTimeout = 'off' } = item.data;
    const baseVariant = getBaseVariant(variant);
    /**
     * Handles clicking on the close icon of the message
     */
    const handleClose = hooks.useCallback(() => {
        onClose?.(item);
    }, [item, onClose]);
    /**
     * Handles closing the message on pressing Esc
     */
    const handleCloseOnEsc = hooks.useCallback((event) => {
        // Close the message only when closeAffordance is on
        if (event.key === 'Escape' && closeAffordance === 'on') {
            onClose?.(item);
        }
    }, [closeAffordance, item, onClose]);
    /**
     * Set auto timeout for toast messages
     */
    const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';
    const currentTimerRef = hooks.useRef();
    const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;
    const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;
    const startTimer = hooks.useCallback(() => {
        if (currentTimerRef.current)
            return;
        currentTimerRef.current = new utils_PRIVATE_timer.Timer(handleClose, timeoutDuration);
    }, [handleClose, timeoutDuration]);
    const clearTimer = hooks.useCallback(() => {
        if (!currentTimerRef.current)
            return;
        currentTimerRef.current.clear();
        currentTimerRef.current = undefined;
    }, []);
    const pauseTimer = hooks.useCallback(() => {
        currentTimerRef.current?.pause();
    }, []);
    const resumeTimer = hooks.useCallback(() => {
        currentTimerRef.current?.resume();
    }, []);
    hooks.useEffect(() => {
        if (MessageFormattingUtils.isValidValueForProp(sound)) {
            // It is sufficient to check for the value to be a
            // non-empty string. The playSound method takes care of the rest.
            MessageUtils.playSound(sound);
        }
        // on mount, start timer for toast messages if needed
        if (shouldTimeout) {
            startTimer();
        }
        return () => {
            // clear out any pending timer
            clearTimer();
        };
        // eslint-disable-next-line
    }, []); // No deps to run this only on mount
    const { variantClasses } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_MessageBanner_themes_redwood_MessageBannerTheme.MessageBannerRedwoodTheme, {
        severity
    });
    // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.
    const rootClasses = classNames.classNames([
        baseVariant === 'banner' && variantClasses,
        PRIVATE_Message_themes_MessageStyles_css.messageStyles.base[baseVariant],
        // for now, we do not have severity based styling on toast. So, we ignore this class for toasts
        variant !== 'toast' && MessageUtils.severityBasedStyleClass(severity, baseVariant),
        variant === 'sectionBanner' && PRIVATE_Message_themes_MessageStyles_css.messageStyles.section
    ]);
    const contentClasses = classNames.classNames([PRIVATE_Message_themes_MessageStyles_css.messageStyles.content.base, PRIVATE_Message_themes_MessageStyles_css.messageStyles.content[baseVariant]]);
    // We will be animating the root div, so add padding to an inner wrapper div so that
    // when animating height looks smooth. If padding were to be added to the root
    // div, the animation will not be smooth as height will never reach 0 due to the
    // padding.
    return (jsxRuntime.jsx("div", { ref: messageRef, class: rootClasses, role: "alert", "aria-atomic": "true", "data-oj-key": `${typeof item.key}-${item.key}`, tabIndex: 0, onKeyUp: handleCloseOnEsc, onfocusin: pauseTimer, onfocusout: resumeTimer, children: jsxRuntime.jsxs("div", { class: contentClasses, children: [iconRenderer ? (jsxRuntime.jsx(MessageCustomStartIcon, { item: { ...item, index }, renderer: iconRenderer })) : isSeverityIconNeeded(severity) ? (jsxRuntime.jsx(MessageStartIcon.MessageStartIcon, { severity: severity, variant: baseVariant, translations: translations })) : null, jsxRuntime.jsxs(Flex.Flex, { direction: "column", flex: "1", gap: "--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x", children: [jsxRuntime.jsxs(MessageHeader, { variant: baseVariant, children: [jsxRuntime.jsx(MessageSummary.MessageSummary, { variant: baseVariant, text: summary }), MessageFormattingUtils.isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && (jsxRuntime.jsx(MessageTimestamp.MessageTimestamp, { variant: baseVariant, value: timestamp }))] }), jsxRuntime.jsx(MessageDetail.MessageDetail, { variant: baseVariant, item: { ...item, index }, renderer: detailRenderer })] }), closeAffordance === 'on' && (jsxRuntime.jsx(MessageCloseButton.MessageCloseButton, { buttonRenderer: closeButtonRenderer, title: translations?.close, variant: baseVariant, onAction: handleClose }))] }) }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.MessageCloseButton = MessageCloseButton.MessageCloseButton;
exports.MessageDetail = MessageDetail.MessageDetail;
exports.formatTimestamp = MessageFormattingUtils.formatTimestamp;
exports.isValidValueForProp = MessageFormattingUtils.isValidValueForProp;
exports.MessageStartIcon = MessageStartIcon.MessageStartIcon;
exports.MessageSummary = MessageSummary.MessageSummary;
exports.MessageTimestamp = MessageTimestamp.MessageTimestamp;
exports.getRenderer = MessageUtils.getRenderer;
exports.getRendererWithoutIndex = MessageUtils.getRendererWithoutIndex;
exports.isSeverityIconNeeded = MessageUtils.isSeverityIconNeeded;
exports.playSound = MessageUtils.playSound;
exports.severityBasedStyleClass = MessageUtils.severityBasedStyleClass;
exports.throwError = MessageUtils.throwError;
exports.MessagesManager = MessagesManager.MessagesManager;
exports.severities = Message_types.severities;
exports.Message = Message;
//# sourceMappingURL=PRIVATE_Message.js.map
