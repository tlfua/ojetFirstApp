{"version":3,"file":"MessageToast-5cd5ca8d.js","sources":["../../src/UNSAFE_MessageToast/MessageToast.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'preact/hooks';\n\nimport { EnvironmentProvider } from '../UNSAFE_Environment';\nimport {\n  FocusableComponentHandle,\n  useMessageFocusManager\n} from '../hooks/PRIVATE_useMessagesFocusManager';\nimport { useBreakpointValues } from '../hooks/UNSAFE_useBreakpointValues';\nimport { useMessagesContext } from '../hooks/UNSAFE_useMessagesContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { getRendererWithoutIndex, Message, MessagesManager } from '../PRIVATE_Message';\nimport { MessageLayer } from '../PRIVATE_MessageLayer';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Flex } from '../UNSAFE_Flex';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { Item, ItemMetadata } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MessageToastRedwoodTheme } from './themes/redwood/MessageToastTheme';\n\n// TODO: refactor types so we don't repeat them here and MessageLayer\n// \nconst positions = stringLiteralArray([\n  'top',\n  'top-left',\n  'top-right',\n  'top-start',\n  'top-end',\n  'bottom',\n  'bottom-left',\n  'bottom-right',\n  'bottom-start',\n  'bottom-end'\n]);\n\ntype Position = typeof positions[number];\n\ntype Offset =\n  | number\n  | {\n      horizontal?: number;\n      vertical?: number;\n    };\n\n// TODO: Refactor Message Item types\n// \n\n/**\n * An object representing a single message in MessageToast component.\n */\nexport type MessageToastItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   *\n   * @default 'error'\n   */\n  severity?: 'none' | 'error' | 'warning' | 'confirmation' | 'info';\n\n  /**\n   * Defines the sound to be played when opening the message\n   *\n   * @default 'none'\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the time after which the message is to be closed automatically\n   *\n   * on - default of 5s\n   * off - no auto timeout, manually dismissed\n   * number - seconds in milliseconds format\n   *\n   * @default 'off'\n   */\n  autoTimeout?: 'on' | 'off' | number;\n};\n\n/**\n * Structure of data item passed to the renderers\n */\nexport type MessageToastRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n\ntype Props<Key, Data> = {\n  /**\n   * Defines the fixed position where the notifications will to be placed on the screen.\n   * - top-start resolves to top-left in LTR (top-right in RTL)\n   * - top-end resolves to top-right in LTR (top-left in RTL)\n   * - bottom-start resolves to bottom-left in LTR (bottom-right in RTL)\n   * - bottom-end resolves to bottom-right in LTR (bottom-left in RTL)\n   *\n   * default bottom\n   */\n  position?: Position;\n\n  /**\n   * Defines an offset (in pixels) in the placement. Value can be supplied as a number or\n   * an object with horizontal and vertical values.\n   *\n   * default 0\n   */\n  offset?: Offset;\n\n  /**\n   * Data for the MessageToast component. This data is used for rendering each toast message.\n   * The key for each message will be configured using the key of the corresponding item. This way,\n   * the component will know whether a new message is being added or an existing message is being updated/removed\n   * when the new data comes in.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The application\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message closed. If the application\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component and the message will stay in the UI opened.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of a renderer to use for rendering the detail content.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the detail content for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's detail content. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the detail content using the detail property of the corresponding message.\n   *\n   * If an application specifies both detail and a valid detailRendererKey, the detailRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the detail content.\n   */\n  detailRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of the renderer to use for rendering the start icon.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the start icon for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's start icon. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the start icon using the severity property of the corresponding message.\n   *\n   * If an application specifies both severity and a valid iconRendererKey, the iconRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the start icon.\n   */\n  iconRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * A set of available renderers for rendering the message content. Which renderer is used\n   * for rendering which content will be decided by specific properties in the row data.\n   */\n  renderers?: Record<string, (data: MessageToastRendererDataItem<Key, Data>) => ComponentChildren>;\n};\n\n/**\n * Animation states for toast messages\n * TODO: Get this from theme context provider\n */\nconst animationStates: ComponentProps<typeof MessagesManager>['animationStates'] = {\n  entering: (node) => ({\n    from: {\n      transform: `translate(0, ${node.offsetHeight}px)`,\n      opacity: 1\n    },\n    to: {\n      transform: 'translate(0, 0)',\n      opacity: 1\n    },\n    end: {\n      transform: 'unset',\n      opacity: 1\n    },\n    options: {\n      duration: 250\n    }\n  }),\n  exiting: {\n    from: {\n      opacity: 1\n    },\n    to: {\n      opacity: 0\n    },\n    end: {\n      opacity: 0\n    },\n    options: {\n      duration: 250\n    }\n  }\n};\nconst initialAnimationStyles = {\n  opacity: 0\n} as const;\n\nexport function MessageToast<K extends string | number, D extends MessageToastItem>({\n  data,\n  detailRendererKey,\n  iconRendererKey,\n  renderers,\n  onClose,\n  offset,\n  position\n}: Props<K, D>) {\n  const messagesRef = useRef(new Map<K, HTMLDivElement | null>());\n  const autoFocusRef = useRef<HTMLDivElement>(null) as RefObject<HTMLDivElement | null>;\n  const containerDivRef = useRef<HTMLDivElement>(null);\n  const focusHandleRef = useRef<FocusableComponentHandle>(null);\n  const [liveRegionText, setLiveRegionText] = useState<string>();\n  const [shouldRender, setShouldRender] = useState(data.length > 0);\n  const [shouldTrapFocus, setShouldTrapFocus] = useState(false);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { UNSAFE_messagesLayerId } = useMessagesContext();\n\n  // We need a ref that holds the current & previous data length, as the exiting\n  // node will always call handleNextFocus with previous data.\n  // As in TransitionGroup, when an item is removed from the data, a new vnode\n  // will not be created instead previous vnode will be used. So, the new handleNextFocus\n  // will not be called when the old vnode exits. Thus, we will be using a ref\n  // to always get the correct current data length.\n  const dataLengthRef = useRef(data.length);\n  const prevDataLengthRef = useRef(0);\n  // Update the data length ref\n  dataLengthRef.current = data.length;\n\n  // Update the focusHandleRef\n  useImperativeHandle(\n    focusHandleRef,\n    () => ({\n      focus: () => {\n        // Only trigger focus if the component is rendering messages\n        if (data.length) {\n          // set the autoFocus ref to the first message and enable the focus trap\n          // this will automatically focus the first message\n          autoFocusRef.current = messagesRef.current.get(data[0].key) ?? null;\n          setShouldTrapFocus(true);\n          return true;\n        }\n        return false;\n      },\n      contains: (element: Element) => {\n        // Only invoke method if the component is rendering messages\n        if (data.length && element) {\n          return containerDivRef.current?.contains(element) ?? false;\n        }\n        return false;\n      }\n    }),\n    [data]\n  );\n\n  // Register handlers for focus management\n  const { controller, handlers } = useMessageFocusManager(\n    focusHandleRef,\n    {\n      onFocus: useCallback(() => {\n        setLiveRegionText(translations.message_navigationFromMessagesRegion());\n      }, [translations]),\n      onFocusLeave: useCallback(() => {\n        // disable trap which should revert the focus back to the last focused item\n        setShouldTrapFocus(false);\n      }, [])\n    },\n    {\n      // we do not want the focus manager to handle Esc key as we handle it using the\n      // FocusTrap here\n      handleEscapeKey: false\n    }\n  );\n\n  /**\n   * Handles focus when a message is closed and animated away from the DOM\n   * @param key The key of the message\n   * @param index The index of the message\n   */\n  const handleNextFocus = useCallback(\n    (_key: K, index: number, closedMessageNode?: Element) => {\n      const isClosedMessageFocused = closedMessageNode?.contains(document.activeElement);\n\n      // If there are no messages, do not render anything. As the old messages\n      // are still in the DOM, use the data count to determine what to do next as it\n      // represents the next state.\n      if (dataLengthRef.current === 0) {\n        setShouldRender(false);\n        setShouldTrapFocus(false);\n        // If the current message holds focus, then restore previous focus\n        if (isClosedMessageFocused) {\n          // As we have FocusTrap, trying to restore focus now will simply result in focus being pulled\n          // back again. So, we restore the focus in the next tick so that the rendering will have been\n          // done in the microtask.\n          setImmediate(() => controller.restorePriorFocus());\n        }\n        return;\n      }\n\n      // In TransitionGroup, when an item is removed from the data, a new vnode\n      // will not be created instead previous vnode will be used. So, the new handleNextFocus\n      // will not be called when the old vnode exits. Thus, all the deps will not be pointing to\n      // the current references, rather they will be pointing to the ones where this vnode\n      // last existed in the data.\n      // This means, the data will contain the closing message as well. But, all the ref objects\n      // still point to the most up-to-date values. With that in mind, we will be evaluating the\n      // following values.\n      const renderedMessagesCount = data.length;\n\n      // Now that this message is closed, focus the next message that will take this index. If no\n      // message will take this message's index, then it means that this is the last message. If\n      // that is the case, focus the message at the previous index.\n      // Use the count of the messages that are currently shown in the UI (current state including\n      // the message that will be removed). This way we can get the correct item from the data\n      // as it will contain the closing message as well.\n      const nextMessageIndexToFocus = index + 1 < renderedMessagesCount ? index + 1 : index - 1;\n\n      // if next message is available then transfer the focus to the next element\n      if (nextMessageIndexToFocus > -1 && isClosedMessageFocused) {\n        const nextMessageKey = data[nextMessageIndexToFocus].key;\n        messagesRef.current.get(nextMessageKey)?.focus();\n      }\n    },\n    [controller, data]\n  );\n\n  // We will be using a function based ref to store the refs in the Map\n  const setHTMLDivElement = useCallback(\n    // TODO: use ramda.curry here (currently it is throwing ts error when used with generics)\n    (key: K) => {\n      return (ref: HTMLDivElement | null) => messagesRef.current.set(key, ref);\n    },\n    []\n  );\n  // Prioritize this component whenever the data changes and\n  // the new data has at least one message\n  useEffect(() => {\n    const previousDataLength = prevDataLengthRef.current;\n    prevDataLengthRef.current = data.length;\n\n    // if there are messages that need to be rendered now, then do the following deeds:\n    // 1. set the shouldRender flag\n    // 2. set the live region\n    // 3. prioritize this message component to be the latest\n    if (data.length) {\n      // set state to render content whenever the data is not empty\n      setShouldRender(true);\n      if (data.length > previousDataLength) {\n        // Only when having a new message, update the aria-live area with the\n        // text to indicate how to get the focus to the new message.\n        setLiveRegionText(translations.message_navigationToMessagesRegion());\n      }\n      controller.prioritize();\n      return;\n    }\n\n    // if there were messages and now removed, then set the live region to\n    // announce this information\n    if (previousDataLength) {\n      setLiveRegionText(translations.messageToast_allMessagesClosed());\n      return;\n    }\n\n    // When there are no messages, clear the live region so that\n    // the navigation text will be read when a new message appear\n    setLiveRegionText('');\n  }, [controller, data.length, translations]);\n\n  // determine responsive max-width\n  const maxWidth = useBreakpointValues<Size>({\n    sm: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-sm',\n    md: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-md',\n    lg: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-lg'\n  });\n  // without offset, the messages will be hugging the vertical edges of the screen\n  // so we will set a default offset.vertical value (any offset from the props will be\n  // added to this).\n  const paddedOffset = useBreakpointValues<Offset>({\n    sm: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 16 + (typeof offset === 'number' ? offset : offset?.vertical ?? 0)\n    },\n    lg: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 24 + (typeof offset === 'number' ? offset : offset?.vertical ?? 0)\n    }\n  });\n\n  // TODO: move this to the individual components.\n  // Cannot do this as of now, as doing do results in oj-message-banner not working.\n  const messageTranslations = useMemo(\n    () => ({\n      close: translations.close(),\n      confirmation: translations.confirmation(),\n      error: translations.error(),\n      info: translations.info(),\n      warning: translations.warn()\n    }),\n    [translations]\n  );\n\n  const { classes } = useComponentTheme(MessageToastRedwoodTheme);\n\n  // When both shouldRender flag is false and no data to render, do not render\n  // anything except the live region\n  if (!shouldRender && data.length === 0) {\n    return <LiveRegion>{liveRegionText}</LiveRegion>;\n  }\n\n  // TODO - Message Toast shouldn't always render as 'dark', it should be the inverse of the root environment context\n  // See JET-57590\n  return (\n    <EnvironmentProvider environment={{ colorScheme: 'dark' }}>\n      <MessageLayer offset={paddedOffset} position={position}>\n        <div\n          class={classes}\n          ref={containerDivRef}\n          tabIndex={-1} // Need to add tabindex to make the container receive the focus events\n          id={UNSAFE_messagesLayerId}\n          {...handlers}>\n          <FocusTrap autoFocusRef={autoFocusRef} isDisabled={!shouldTrapFocus}>\n            <Flex direction=\"column\" gap=\"1x\" align=\"center\" maxWidth={maxWidth}>\n              <MessagesManager\n                animationStates={animationStates}\n                initialAnimationStyles={initialAnimationStyles}\n                data={data}\n                onMessageWillRemove={handleNextFocus}>\n                {({ index, item }) => (\n                  <Message\n                    messageRef={setHTMLDivElement(item.key)}\n                    item={item}\n                    detailRenderer={getRendererWithoutIndex(item, detailRendererKey, renderers)}\n                    iconRenderer={getRendererWithoutIndex(item, iconRendererKey, renderers)}\n                    index={index}\n                    key={item.key}\n                    onClose={onClose}\n                    translations={messageTranslations}\n                    variant=\"toast\"\n                  />\n                )}\n              </MessagesManager>\n            </Flex>\n          </FocusTrap>\n        </div>\n      </MessageLayer>\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </EnvironmentProvider>\n  );\n}\n"],"names":["stringLiteralArray","useRef","useState","useTranslationBundle","useMessagesContext","useImperativeHandle","useMessageFocusManager","useCallback","useEffect","useBreakpointValues","useMemo","useComponentTheme","MessageToastRedwoodTheme","_jsx","LiveRegion","_jsxs","EnvironmentProvider","MessageLayer","FocusTrap","Flex","MessagesManager","Message","getRendererWithoutIndex"],"mappings":"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"}