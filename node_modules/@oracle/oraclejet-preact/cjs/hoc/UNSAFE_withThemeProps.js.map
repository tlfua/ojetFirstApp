{"version":3,"file":"UNSAFE_withThemeProps.js","sources":["../../../src/hoc/UNSAFE_withThemeProps/withThemeProps.tsx","../../../src/hoc/UNSAFE_withThemeProps/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createRef, ComponentType } from 'preact';\nimport { useEffect, forwardRef, Ref } from 'preact/compat';\nimport { EnvironmentProvider } from '../../UNSAFE_Environment';\nimport {\n  ThemeModifiers as Props,\n  DARK_CLASS,\n  INVERT_CLASS,\n  LIGHT_CLASS,\n  COLORSCHEME_DEPENDENT_CLASS,\n  SCALE_SM_CLASS,\n  SCALE_MD_CLASS,\n  SCALE_LG_CLASS,\n  SCALE_DEPENDENT_CLASS\n} from '../../UNSAFE_Theme';\n\n/**\n * Higher Order Component that allows you to wrap an existing component with an EnvironmentProvider\n * containing the desired colorScheme and scale context. The returned component contains all the props\n * of the wrapped component with the addition of the `colorScheme` and `scale` props.\n *\n * This should be used when nesting an alternate colorScheme (ie dark palette sub-form within a global light\n * palette). You can use this HOC instead of manually applying colorScheme classnames to DOM elements. This also\n * eliminates the need to add additional DOM wrapper elements.\n */\nconst withThemeProps = <T extends object>(WrappedComponent: ComponentType<T>) => {\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || 'ComponentWithProvider';\n\n  const ComponentWithProvider = forwardRef(\n    ({ colorScheme, scale, ...props }: T & Partial<Props>, ref) => {\n      // if no ref is supplied, create one\n      const wrapRef = (ref || createRef()) as Ref<unknown>;\n\n      useEffect(() => {\n        if (wrapRef.current) {\n          const { classList } = wrapRef.current as HTMLElement;\n          if (!classList) return;\n\n          // dynamically apply the appropriate colorscheme classname to ref element\n          if (colorScheme) {\n            const schemes = [\n              LIGHT_CLASS,\n              DARK_CLASS,\n              INVERT_CLASS,\n              COLORSCHEME_DEPENDENT_CLASS\n            ] as const;\n            schemes.map((current) => classList.remove(current));\n\n            if (colorScheme === 'dark') {\n              classList.add(DARK_CLASS);\n              classList.add(INVERT_CLASS);\n            } else {\n              classList.add(LIGHT_CLASS);\n            }\n            classList.add(COLORSCHEME_DEPENDENT_CLASS);\n          }\n\n          // dynamically apply the appropriate scale classname to ref element\n          if (scale) {\n            const scales = [SCALE_SM_CLASS, SCALE_MD_CLASS, SCALE_LG_CLASS, SCALE_DEPENDENT_CLASS];\n            scales.map((current) => classList.remove(current));\n            classList.add(\n              `${\n                scale === 'sm' ? SCALE_SM_CLASS : scale === 'md' ? SCALE_MD_CLASS : SCALE_LG_CLASS\n              }`\n            );\n            classList.add(SCALE_DEPENDENT_CLASS);\n          }\n        }\n      }, [wrapRef, colorScheme]);\n\n      // wrap component with new colorscheme context\n      return (\n        <EnvironmentProvider environment={{ colorScheme, scale }}>\n          <WrappedComponent {...(props as T)} ref={wrapRef} />\n        </EnvironmentProvider>\n      );\n    }\n  );\n\n  ComponentWithProvider.displayName = `withThemeProps(${displayName})`;\n\n  return ComponentWithProvider;\n};\n\nexport default withThemeProps;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { default as withThemeProps } from './withThemeProps';\n"],"names":["forwardRef","createRef","useEffect","LIGHT_CLASS","DARK_CLASS","INVERT_CLASS","COLORSCHEME_DEPENDENT_CLASS","SCALE_SM_CLASS","SCALE_MD_CLASS","SCALE_LG_CLASS","SCALE_DEPENDENT_CLASS","_jsx","EnvironmentProvider"],"mappings":";;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AAQG;AACH,MAAM,cAAc,GAAG,CAAmB,gBAAkC,KAAI;IAC9E,MAAM,WAAW,GACf,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,uBAAuB,CAAC;AAEnF,IAAA,MAAM,qBAAqB,GAAGA,iBAAU,CACtC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,KAAK,EAAsB,EAAE,GAAG,KAAI;;QAE5D,MAAM,OAAO,IAAI,GAAG,IAAIC,gBAAS,EAAE,CAAiB,CAAC;QAErDC,gBAAS,CAAC,MAAK;YACb,IAAI,OAAO,CAAC,OAAO,EAAE;AACnB,gBAAA,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,OAAsB,CAAC;AACrD,gBAAA,IAAI,CAAC,SAAS;oBAAE,OAAO;;AAGvB,gBAAA,IAAI,WAAW,EAAE;AACf,oBAAA,MAAM,OAAO,GAAG;wBACdC,wBAAW;wBACXC,uBAAU;wBACVC,yBAAY;wBACZC,wCAA2B;qBACnB,CAAC;AACX,oBAAA,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAEpD,IAAI,WAAW,KAAK,MAAM,EAAE;AAC1B,wBAAA,SAAS,CAAC,GAAG,CAACF,uBAAU,CAAC,CAAC;AAC1B,wBAAA,SAAS,CAAC,GAAG,CAACC,yBAAY,CAAC,CAAC;AAC7B,qBAAA;AAAM,yBAAA;AACL,wBAAA,SAAS,CAAC,GAAG,CAACF,wBAAW,CAAC,CAAC;AAC5B,qBAAA;AACD,oBAAA,SAAS,CAAC,GAAG,CAACG,wCAA2B,CAAC,CAAC;AAC5C,iBAAA;;AAGD,gBAAA,IAAI,KAAK,EAAE;oBACT,MAAM,MAAM,GAAG,CAACC,2BAAc,EAAEC,2BAAc,EAAEC,2BAAc,EAAEC,kCAAqB,CAAC,CAAC;AACvF,oBAAA,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBACnD,SAAS,CAAC,GAAG,CACX,CACE,EAAA,KAAK,KAAK,IAAI,GAAGH,2BAAc,GAAG,KAAK,KAAK,IAAI,GAAGC,2BAAc,GAAGC,2BACtE,CAAE,CAAA,CACH,CAAC;AACF,oBAAA,SAAS,CAAC,GAAG,CAACC,kCAAqB,CAAC,CAAC;AACtC,iBAAA;AACF,aAAA;AACH,SAAC,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;;QAG3B,QACEC,eAACC,sCAAmB,EAAA,EAAC,WAAW,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,YACtDD,cAAC,CAAA,gBAAgB,EAAM,EAAA,GAAA,KAAW,EAAE,GAAG,EAAE,OAAO,EAAA,CAAI,EAChC,CAAA,EACtB;AACJ,KAAC,CACF,CAAC;AAEF,IAAA,qBAAqB,CAAC,WAAW,GAAG,CAAkB,eAAA,EAAA,WAAW,GAAG,CAAC;AAErE,IAAA,OAAO,qBAAqB,CAAC;AAC/B;;AC3FA;;;;;;AAMG;;;;"}