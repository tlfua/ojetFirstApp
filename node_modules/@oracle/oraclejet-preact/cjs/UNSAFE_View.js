/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var compat = require('preact/compat');
var utils_UNSAFE_interpolations_borders = require('./utils/UNSAFE_interpolations/borders.js');
var utils_UNSAFE_interpolations_dimensions = require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
var utils_UNSAFE_interpolations_colors = require('./utils/UNSAFE_interpolations/colors.js');
var utils_UNSAFE_interpolations_padding = require('./utils/UNSAFE_interpolations/padding.js');
var utils_UNSAFE_interpolations_aria = require('./utils/UNSAFE_interpolations/aria.js');
var utils_UNSAFE_interpolations_theme = require('./utils/UNSAFE_interpolations/theme.js');
var utils_UNSAFE_mergeInterpolations = require('./utils/UNSAFE_mergeInterpolations.js');
var utils_UNSAFE_arrayUtils = require('./utils/UNSAFE_arrayUtils.js');
var UNSAFE_Environment = require('./index-c3ee789d.js');
var index = require('./index-8a92ac2f.js');
var Common_themes_themeContract_css = require('./Common/themes/themeContract.css.js');
var vanillaExtractDynamic_esm = require('./vanilla-extract-dynamic.esm-4bc33829.js');
var flexitem = require('./flexitem-939ec1ef.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-b9f57550.js');
require('./_curry1-6e9511bf.js');

require('./keys-65201aa4.js');
require('./_has-aa203696.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-d619a292.js');
require('./_curry3-ad2313fd.js');
require('./_curry2-53a902bf.js');
require('preact');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('preact/hooks');

const elementTypes = utils_UNSAFE_arrayUtils.stringLiteralArray(['div', 'main', 'article', 'section', 'aside']);
const interpolations = [
    ...Object.values(utils_UNSAFE_interpolations_borders.borderInterpolations),
    ...Object.values(utils_UNSAFE_interpolations_dimensions.dimensionInterpolations),
    ...Object.values(flexitem.flexitemInterpolations),
    ...Object.values(utils_UNSAFE_interpolations_colors.colorInterpolations),
    ...Object.values(utils_UNSAFE_interpolations_padding.paddingInterpolations),
    ...Object.values(utils_UNSAFE_interpolations_aria.ariaInterpolations),
    ...Object.values(utils_UNSAFE_interpolations_theme.themeInterpolations)
];
const mergedInterpolations = utils_UNSAFE_mergeInterpolations.mergeInterpolations(interpolations);
const View = compat.forwardRef((props, ref) => {
    const { as, children, colorScheme, scale, color, backgroundColor, ...rest } = props;
    const { class: cls, ariaLabelledBy, ariaLabel, ...styles } = mergedInterpolations({
        colorScheme,
        scale,
        backgroundColor,
        color,
        ...rest
    });
    const env = {};
    // We need to update the environment with any theme related props specified
    if (colorScheme) {
        env.colorScheme = colorScheme;
    }
    if (scale) {
        env.scale = scale;
    }
    let assignedVars = {}; // empty var override unless background is specified
    if (backgroundColor) {
        env.currentBgColor = backgroundColor;
        assignedVars = vanillaExtractDynamic_esm.assignInlineVars({
            [Common_themes_themeContract_css.globalVars.currentBackgroundColor]: styles['backgroundColor']
        });
    }
    // we hardcode box-sizing: border-box on all of our Preact components.
    const localStyles = { boxSizing: 'border-box' };
    const Component = as || 'div';
    const viewComponent = (jsxRuntime.jsx(Component, { "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, class: cls, style: { ...styles, ...localStyles, ...assignedVars }, ref: ref, children: children }));
    return index.isEmpty(env) ? (viewComponent) : (jsxRuntime.jsx(UNSAFE_Environment.EnvironmentProvider, { environment: env, children: viewComponent }));
});

exports.View = View;
exports.elementTypes = elementTypes;
//# sourceMappingURL=UNSAFE_View.js.map
