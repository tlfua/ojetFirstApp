/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var compat = require('preact/compat');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useFormFieldContextProps = require('./hooks/UNSAFE_useFormFieldContextProps.js');
var hooks_UNSAFE_useId = require('./hooks/UNSAFE_useId.js');
var PRIVATE_CheckboxRadioField = require('./PRIVATE_CheckboxRadioField.js');
var RadioGroupContext = require('./RadioGroupContext-766a3ddd.js');

const RadioGroup = compat.forwardRef(({ 'aria-describedby': ariaDescribedBy, assistiveText, direction = 'column', helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isReadonly: propIsReadonly, isRequired = false, label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, messages, onCommit, userAssistanceDensity: propUserAssistanceDensity, value, children }, ref) => {
    const hasValue = !!value;
    const { isDisabled: isFormDisabled, 
    // TODO: unused variables, are they needed?
    // isFormLayout,
    isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, userAssistanceDensity: formUserAssistanceDensity } = hooks_UNSAFE_useFormContext.useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled ?? isFormDisabled;
    const isReadonly = propIsReadonly ?? isFormReadonly;
    const labelEdge = propLabelEdge ?? formLabelEdge;
    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;
    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;
    const formFieldContext = hooks_UNSAFE_useFormFieldContextProps.useFormFieldContextProps({
        hasValue,
        isDisabled,
        isReadonly,
        value
    });
    const baseId = hooks_UNSAFE_useId.useId();
    return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, { value: formFieldContext, children: jsxRuntime.jsx(PRIVATE_CheckboxRadioField.CheckboxRadioField, { "aria-describedby": ariaDescribedBy, assistiveText: assistiveText, baseId: baseId, direction: direction, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, isDisabled: isDisabled, isReadonly: isReadonly, isRequired: isRequired, label: label, labelEdge: labelEdge, labelStartWidth: labelStartWidth, parentComponentVariant: "radioGroup", messages: messages, userAssistanceDensity: userAssistanceDensity, hasValue: hasValue, ref: ref, role: "radiogroup", children: jsxRuntime.jsx(RadioGroupContext.RadioGroupContext.Provider, { value: {
                    name: baseId,
                    value,
                    onCommit
                }, children: children }) }) }));
});

exports.RadioGroup = RadioGroup;
//# sourceMappingURL=RadioGroup-547716e1.js.map
