/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
require('./utils/UNSAFE_classNames.js');
var hooks_UNSAFE_useUser = require('./hooks/UNSAFE_useUser.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var PRIVATE_Meter = require('./PRIVATE_Meter.js');
var hooks_UNSAFE_useComponentTheme = require('./hooks/UNSAFE_useComponentTheme.js');
var UNSAFE_ProgressBar_themes_redwood_ProgressBarTheme = require('./UNSAFE_ProgressBar/themes/redwood/ProgressBarTheme.js');
var classNames = require('./classNames-d619a292.js');
require('preact/hooks');
require('./index-c3ee789d.js');
require('preact');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('preact/compat');
require('./utils/UNSAFE_logger.js');
require('./_curry1-6e9511bf.js');
require('./_curry2-53a902bf.js');
require('./UNSAFE_ProgressBar/themes/ProgressBarStyles.css.js');

require('./UNSAFE_ProgressBar/themes/redwood/ProgressBarBaseTheme.css.js');

require('./UNSAFE_ProgressBar/themes/redwood/ProgressBarVariants.css.js');

require('./vanilla-extract-recipes-createRuntimeFn.esm-8a4b93e4.js');

/**
 * A progress bar allows the user to visualize the progression of an extended computer operation.
 */
function ProgressBar({ value, max, ...otherProps }) {
    return value === 'indeterminate' ? (jsxRuntime.jsx(IndeterminateProgressBar, { ...otherProps })) : (jsxRuntime.jsx(DeterminateProgressBar, { value: value, max: max, ...otherProps }));
}
const IndeterminateProgressBar = ({ id, width, edge = 'none', ...props }) => {
    const { classes, styles: { valueStyle, indeterminate, animationStyleLTR, animationStyleRTL, highContrastValueStyle } } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_ProgressBar_themes_redwood_ProgressBarTheme.ProgressBarRedwoodTheme, {
        edge: edge === 'none' ? edge : undefined
    });
    const { direction, forcedColors } = hooks_UNSAFE_useUser.useUser();
    const barValueClasses = classNames.classNames([
        valueStyle,
        indeterminate,
        direction === 'rtl' ? animationStyleRTL : animationStyleLTR,
        forcedColors === 'active' ? highContrastValueStyle : ''
    ]);
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const ariaProps = {
        'aria-valuetext': props['aria-valuetext'] || translations.progressIndeterminate(),
        role: 'progressbar'
    };
    return (jsxRuntime.jsx(PRIVATE_Meter.BarTrack, { id: id, ariaProps: ariaProps, class: classes, length: width, children: jsxRuntime.jsx(PRIVATE_Meter.BarValue, { class: barValueClasses }) }));
};
const DeterminateProgressBar = ({ value = 0, max = 100, id, width, edge = 'none' }) => {
    const { forcedColors } = hooks_UNSAFE_useUser.useUser();
    const { classes, styles: { valueStyle, highContrastValueStyle } } = hooks_UNSAFE_useComponentTheme.useComponentTheme(UNSAFE_ProgressBar_themes_redwood_ProgressBarTheme.ProgressBarRedwoodTheme, {
        edge: edge === 'none' ? edge : undefined
    });
    const barValueClasses = classNames.classNames([
        valueStyle,
        forcedColors === 'active' ? highContrastValueStyle : ''
    ]);
    const percentage = `${Math.min(Math.max(0, value / max), 1) * 100}%`;
    const ariaProps = {};
    ariaProps['aria-valuemin'] = value != null ? 0 : undefined;
    ariaProps['aria-valuemax'] = value != null ? max : undefined;
    ariaProps['aria-valuenow'] = value != null ? value : undefined;
    ariaProps['role'] = 'progressbar';
    return (jsxRuntime.jsx(PRIVATE_Meter.BarTrack, { ariaProps: ariaProps, id: id, length: width, class: classes, children: jsxRuntime.jsx(PRIVATE_Meter.BarValue, { class: barValueClasses, length: percentage }) }));
};

exports.ProgressBar = ProgressBar;
//# sourceMappingURL=UNSAFE_ProgressBar.js.map
