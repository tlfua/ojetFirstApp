/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var compat = require('preact/compat');
var hooks = require('preact/hooks');
var hooks_UNSAFE_useFocusableTextField = require('./hooks/UNSAFE_useFocusableTextField.js');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useTextField = require('./hooks/UNSAFE_useTextField.js');
var hooks_UNSAFE_useHover = require('./hooks/UNSAFE_useHover.js');
require('./UNSAFE_Label.js');
var UNSAFE_TextField = require('./UNSAFE_TextField.js');
var UNSAFE_UserAssistance = require('./UNSAFE_UserAssistance.js');
require("identity-obj-proxy");
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var hooks_UNSAFE_usePress = require('./hooks/UNSAFE_usePress.js');
var PRIVATE_ThemedIcons_ViewHideIcon = require('./PRIVATE_ThemedIcons/ViewHideIcon.js');
var PRIVATE_ThemedIcons_ViewIcon = require('./PRIVATE_ThemedIcons/ViewIcon.js');
var hooks_UNSAFE_useClearIcon = require('./hooks/UNSAFE_useClearIcon.js');
var utils_UNSAFE_componentUtils = require('./utils/UNSAFE_componentUtils.js');
var ClearIcon = require('./ClearIcon-fa4fb5aa.js');
var hooks_UNSAFE_useToggle = require('./hooks/UNSAFE_useToggle.js');
var hooks_UNSAFE_useCurrentValueReducer = require('./hooks/UNSAFE_useCurrentValueReducer.js');
var Label = require('./Label-bb9ff3c9.js');
var ReadonlyTextFieldInput = require('./ReadonlyTextFieldInput-df771dd2.js');
var TextFieldInput = require('./TextFieldInput-28035e98.js');
require('./hooks/UNSAFE_useFocusWithin.js');
require('./useFocusWithin-3c76895a.js');
require('preact');
require('./hooks/PRIVATE_useMessageSeverity.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-27007290.js');
require('./hooks/UNSAFE_useFormFieldContextProps.js');
require('./hooks/UNSAFE_useId.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-d619a292.js');
require('./hooks/UNSAFE_useComponentTheme.js');
require('./utils/UNSAFE_logger.js');
require('./_curry1-6e9511bf.js');
require('./_curry2-53a902bf.js');
require('./InlineHelpSource-ecc4f96f.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js');
require('./UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js');

require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js');

require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js');
require('./vanilla-extract-recipes-createRuntimeFn.esm-8a4b93e4.js');
require('./index-c3ee789d.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('./UNSAFE_ComponentMessage.js');
require('./ComponentMessage-12850cb4.js');
require('./PRIVATE_Message.js');
require('./UNSAFE_Flex.js');
require('./Flex-2eb09dad.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-b9f57550.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-ad2313fd.js');
require('./_has-aa203696.js');
require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-65201aa4.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-8cd3009d.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-939ec1ef.js');
require('./utils/PRIVATE_timer.js');
require('./PRIVATE_Message/themes/MessageStyles.css.js');

require('./MessageCloseButton-64c284a2.js');
require('./UNSAFE_IconButton.js');
require('./IconButton-bc45151b.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-934b844e.js');
require('./hooks/UNSAFE_useActive.js');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-b9e7be1e.js');
require('./utils/UNSAFE_mergeProps.js');
require('./UNSAFE_ButtonLayout.js');
require('./ButtonLayout-648ecbd5.js');
require('./UNSAFE_Text.js');
require('./Text-4f1f698a.js');
require('./UNSAFE_Text/themes/TextStyles.css.js');

require('./hooks/UNSAFE_useTooltip.js');
require('./UNSAFE_Floating.js');
require('./Floating-3415cf36.js');
require('./index-0a166c9e.js');
require('./hooks/UNSAFE_useUser.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-4bc33829.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-ee4e7934.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-802f3cdb.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./PRIVATE_ThemedIcons/CloseIcon.js');
require('./UNSAFE_Icon.js');
require('./Icon-e47442ad.js');
require('./UNSAFE_Icon/themes/IconStyle.css.js');

require('./MessageDetail-dce2aadd.js');
require('./MessageFormattingUtils-3cf76724.js');
require('./utils/UNSAFE_getLocale.js');
require('./Message.types-20efdde7.js');
require('./MessageStartIcon-8a59b0b6.js');
require('./PRIVATE_ThemedIcons/MessageConfirmationIcon.js');
require('./PRIVATE_ThemedIcons/MessageErrorIcon.js');
require('./PRIVATE_ThemedIcons/MessageInfoIcon.js');
require('./PRIVATE_ThemedIcons/MessageWarningIcon.js');
require('./MessageSummary-5d0c793a.js');
require('./MessageTimestamp-eab05143.js');
require('./MessageUtils-ff85758f.js');
require('./utils/UNSAFE_soundUtils.js');
require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js');
require('./UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js');

require('./MessagesManager-411c2e38.js');
require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useMessagesContext.js');
require('./UNSAFE_HiddenAccessible.js');
require('./HiddenAccessible-c4ad96e7.js');
require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js');
require('./UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js');
require('./ComponentMessageContainer-93be9be1.js');
require('./hooks/UNSAFE_useInputGroupContext.js');
require('./UNSAFE_Popup.js');
require('./utils/PRIVATE_tabbableUtils.js');
require('./_arity-353457ba.js');
require('./UNSAFE_FocusTrap.js');
require('./FocusTrap-2209a89f.js');
require('./hooks/PRIVATE_useAnimationStatus.js');
require('./UNSAFE_Popup/themes/PopupContract.css.js');
require('./UNSAFE_Popup/themes/redwood/PopupTheme.js');
require('./UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js');

require('./UNSAFE_Popup/themes/redwood/PopupVariants.css.js');

require('./UNSAFE_Divider.js');
require('./Divider-ef0eee24.js');
require('./UNSAFE_Divider/themes/DividerStyles.css.js');

require('./CompactHelpSource-c5fd0d41.js');
require('./PRIVATE_ThemedIcons/HelpIcon.js');
require('./UNSAFE_Label/themes/redwood/LabelTheme.js');
require('./UNSAFE_Label/themes/LabelStyles.css.js');

require('./UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js');

require('./UNSAFE_Label/themes/redwood/LabelVariants.css.js');
require('./UNSAFE_TextField/themes/redwood/TextFieldTheme.js');
require('./UNSAFE_TextField/themes/TextFieldStyles.css.js');



require('./UNSAFE_TextField/themes/redwood/TextFieldBaseTheme.css.js');

require('./UNSAFE_TextField/themes/redwood/TextFieldVariants.css.js');

require('./UNSAFE_LabelValueLayout.js');

require('./UNSAFE_Radio/themes/redwood/RadioTheme.js');
require('./UNSAFE_Radio/themes/RadioStyles.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioBaseTheme.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioVariants.css.js');
require('./UNSAFE_TextField/themes/redwood/FormLayoutTheme.js');
require('./UNSAFE_TextField/themes/FormLayoutStyles.css.js');
require('./UNSAFE_TextField/themes/redwood/FormLayoutBaseTheme.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldTheme.js');
require('./UNSAFE_TextField/themes/ReadonlyTextFieldStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldVariants.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js');
require('./UNSAFE_Skeleton/themes/SkeletonStyles.css.js');
require('./UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js');
require('./hooks/UNSAFE_useDebounce.js');
require('./UNSAFE_LiveRegion.js');

require('./hooks/UNSAFE_useAccessibleContext.js');
require('./utils/UNSAFE_interpolations/text.js');
require('./index-8a92ac2f.js');
require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputTheme.js');
require('./UNSAFE_TextField/themes/ReadonlyTextFieldInputStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputVariants.css.js');
require('./hooks/UNSAFE_useTextFieldInputHandlers.js');
require('./UNSAFE_TextField/themes/redwood/TextFieldInputTheme.js');
require('./UNSAFE_TextField/themes/TextFieldInputStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/TextFieldInputVariants.css.js');

// TODO: This was copied from ClearIcon. When we have a preact <Button> component we
// will need to refactor to use that.
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-height) once it is available
const ojButtonHeight = '2.75rem';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius) once it is available
const ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color) once it is available
const ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color-hover) once it is available
const ojButtonBorderlessChromeTextColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-bg-color-hover) once it is available
const ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-border-color-hover) once it is available
const ojButtonBorderlessChromeBorderColorHover = 'transparent';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available
const ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';
const revealToggleIconStyles = {
  base: "_16w5zw8"
};
function RevealToggleIcon({
  isRevealed,
  onPress
}) {
  const {
    pressProps
  } = hooks_UNSAFE_usePress.usePress(onPress);
  const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
  // title attribute. We removed these because title is taking precedence over aria-label and this
  // is messing up the screen readers. To be accessible we are removing title and will implement
  // this as a <Tooltip> component when we have one.
  // TODO JET-51517 implement reveal icon title as a Tooltip
  // const hidePasswordStr = translations.inputPassword_hide();
  // const showPasswordStr = translations.inputPassword_show();
  const passwordMaskedStr = translations.inputPassword_hidden();
  // TODO: Use toggle <Button> when that is available, JET-49207
  return jsxRuntime.jsx("button", {
    "aria-label": passwordMaskedStr,
    role: "switch",
    "aria-checked": isRevealed ? false : true,
    class: revealToggleIconStyles.base,
    tabIndex: 0,
    ...pressProps,
    children: isRevealed ? jsxRuntime.jsx(PRIVATE_ThemedIcons_ViewHideIcon.ViewHideIcon, {}) : jsxRuntime.jsx(PRIVATE_ThemedIcons_ViewIcon.ViewIcon, {})
  });
}

// One way InputPassword differs from InputText is InputPassword's readonly
// is implemented with an <input> and not a <div>.
const InputPassword = compat.forwardRef(({ 'aria-describedby': ariaDescribedBy, assistiveText, autoComplete = 'off', autoFocus = false, hasClearIcon, hasRevealToggle = 'always', helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isReadonly: propIsReadonly, isRequired = false, isRequiredShown, label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, messages, placeholder, textAlign: propTextAlign, userAssistanceDensity: propUserAssistanceDensity, value, variant = 'default', onInput, onCommit }, ref) => {
    const { currentCommitValue, dispatch } = hooks_UNSAFE_useCurrentValueReducer.useCurrentValueReducer({ value });
    const onInputAndDispatch = hooks.useCallback((detail) => {
        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)
        dispatch({ type: 'input', payload: detail.value });
        onInput?.(detail);
    }, [onInput, dispatch]);
    const onCommitAndDispatch = hooks.useCallback((detail) => {
        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)
        dispatch({ type: 'commit', payload: detail.value });
        onCommit?.(detail);
    }, [onCommit, dispatch]);
    const { isDisabled: isFormDisabled, isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, textAlign: formTextAlign, userAssistanceDensity: formUserAssistanceDensity } = hooks_UNSAFE_useFormContext.useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled ?? isFormDisabled;
    const isReadonly = propIsReadonly ?? isFormReadonly;
    const labelEdge = propLabelEdge ?? formLabelEdge;
    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;
    const textAlign = propTextAlign ?? formTextAlign;
    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;
    const { bool: isRevealed, setFalse: setRevealedFalse, setTrue: setRevealedTrue } = hooks_UNSAFE_useToggle.useToggle(false);
    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = hooks_UNSAFE_useFocusableTextField.useFocusableTextField({ isDisabled, isReadonly, ref, onBlurWithin: setRevealedFalse });
    const { hoverProps, isHover } = hooks_UNSAFE_useHover.useHover({ isDisabled: isReadonly || isDisabled || false });
    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } = hooks_UNSAFE_useTextField.useTextField({
        ariaDescribedBy,
        helpSourceLink,
        helpSourceText,
        isDisabled,
        isFocused,
        isReadonly,
        isRequiredShown,
        labelEdge,
        messages,
        styleVariant: variant,
        userAssistanceDensity,
        value
    });
    // Callback on the RevealToggleButton.
    // When the user clicks on the reveal buttton,
    // toggle revealing/masking password
    const onRevealIconPress = hooks.useCallback(() => {
        isRevealed ? setRevealedFalse() : setRevealedTrue();
    }, [isRevealed, setRevealedFalse, setRevealedTrue]);
    const revealToggleIcon = !isDisabled && hasRevealToggle === 'always' ? (jsxRuntime.jsx(RevealToggleIcon, { onPress: onRevealIconPress, isRevealed: isRevealed })) : null;
    const onClickClearIcon = hooks.useCallback(() => {
        // Clicking the clear icon should put the focus on the input field
        enabledElementRef.current?.focus();
        // Send an event to clear the field's value
        onInputAndDispatch?.({ previousValue: value, value: '' });
    }, [onInputAndDispatch, value, enabledElementRef]);
    const maybeClearIcon = hooks_UNSAFE_useClearIcon.useClearIcon({
        clearIcon: jsxRuntime.jsx(ClearIcon.ClearIcon, { onClick: onClickClearIcon }),
        display: hasClearIcon,
        hasValue: formFieldContext.hasValue,
        isFocused,
        isEnabled: !isReadonly && !isDisabled,
        isHover
    });
    const endContentCombined = utils_UNSAFE_componentUtils.beforeVNode(revealToggleIcon, maybeClearIcon);
    const labelComp = labelEdge !== 'none' ? jsxRuntime.jsx(Label.Label, { ...labelProps, children: label }) : undefined;
    const fieldLabelProps = {
        label: labelEdge !== 'none' ? labelComp : undefined,
        labelEdge: labelEdge !== 'none' ? labelEdge : undefined,
        labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined
    };
    const ariaLabel = labelEdge === 'none' ? label : undefined;
    const isInlineDensity = userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';
    const inlineUserAssistance = isInlineDensity ? (isDisabled || isReadonly ? (
    // save space for user assistance if density is 'efficient', even though we don't
    // render user assistance for disabled or readonly fields
    userAssistanceDensity !== 'efficient' ? undefined : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, { userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, { assistiveText: assistiveText, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, messages: messages, isRequiredShown: isRequiredShown, userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : undefined;
    const anchorRef = hooks.useRef(null);
    const compactUserAssistance = userAssistanceDensity === 'compact' ? (jsxRuntime.jsx(UNSAFE_UserAssistance.CompactUserAssistance, { anchorRef: anchorRef, messages: messages, assistiveText: assistiveText, ...userAssistanceProps })) : undefined;
    if (isReadonly) {
        return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, { value: formFieldContext, children: jsxRuntime.jsx(UNSAFE_TextField.ReadonlyTextField, { role: "presentation", compactUserAssistance: compactUserAssistance, inlineUserAssistance: inlineUserAssistance, ref: anchorRef, ...fieldLabelProps, children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { "aria-describedby": inputProps['aria-describedby'], "aria-label": ariaLabel, "aria-labelledby": labelProps.id, as: "input", autoFocus: autoFocus, elementRef: readonlyElementRef, textAlign: textAlign, type: "password", value: value, hasEmptyLabel: label === '' && labelEdge === 'none', hasInsideLabel: label !== undefined && labelEdge === 'inside' }) }) }));
    }
    const mainContent = (jsxRuntime.jsx(TextFieldInput.TextFieldInput, { "aria-label": ariaLabel, autoComplete: autoComplete, autoFocus: autoFocus, currentCommitValue: currentCommitValue, hasEmptyLabel: label === '' && labelEdge === 'none', hasInsideLabel: labelComp !== undefined && labelEdge === 'inside', inputRef: enabledElementRef, isRequired: isRequired, onInput: onInputAndDispatch, onCommit: onCommitAndDispatch, placeholder: placeholder, textAlign: textAlign, value: value, type: isRevealed ? 'text' : 'password', ...inputProps }));
    return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, { value: formFieldContext, children: jsxRuntime.jsx(UNSAFE_TextField.TextField, { endContent: endContentCombined, inlineUserAssistance: inlineUserAssistance, compactUserAssistance: compactUserAssistance, mainContent: mainContent, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, mainFieldRef: anchorRef, ...textFieldProps, ...fieldLabelProps, ...hoverProps }) }));
});

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.InputPassword = InputPassword;
//# sourceMappingURL=UNSAFE_InputPassword.js.map
