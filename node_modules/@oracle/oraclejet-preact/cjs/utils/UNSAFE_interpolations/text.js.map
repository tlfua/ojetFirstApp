{"version":3,"file":"text.js","sources":["../../../../src/utils/UNSAFE_interpolations/text/text.ts","../../../../src/utils/UNSAFE_interpolations/text/textAlign.ts"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\n\n// FIXME: Revert after 15.0 release\n// import { style } from '@vanilla-extract/css';\n\nconst textAlignStyles = {\n  start: cssProps`${{\n    textAlign: 'start'\n  }}`,\n\n  end: cssProps`${{\n    textAlign: 'end'\n  }}`,\n\n  right: cssProps`${{\n    textAlign: 'right'\n  }}`\n};\n\nexport { textAlignStyles };\n","import { keys } from 'ramda';\nimport { textAlignStyles } from './text';\n\nconst textStyles = {\n  textAlign: textAlignStyles\n};\n\nconst textAligns = keys(textAlignStyles);\n\n// See https://stackoverflow.com/questions/55377365/what-does-keyof-typeof-mean-in-typescript\n// typeof operator gives you the type of an object\n// then keyof operator gives you the literal type union\n// derive the types of each property from the implementation\nexport type TextProps = {\n  textAlign?: keyof typeof textAlignStyles;\n};\n\nconst textInterpolations = {\n  textAlign: ({ textAlign }: Pick<TextProps, 'textAlign'>) =>\n    textAlign === undefined ? {} : { class: textAlignStyles[textAlign] }\n};\n\nexport { textAligns, textAlignStyles, textInterpolations, textStyles };\n"],"names":["textAlignStyles","keys"],"mappings":";;;;;;;;AAEA;AACA;AAEA,MAAAA,eAAA,GAAA;;;;;;ACFA,MAAM,UAAU,GAAG;AACjB,IAAA,SAAS,EAAE,eAAe;EAC1B;AAEF,MAAM,UAAU,GAAGC,UAAI,CAAC,eAAe,EAAE;AAUzC,MAAM,kBAAkB,GAAG;IACzB,SAAS,EAAE,CAAC,EAAE,SAAS,EAAgC,KACrD,SAAS,KAAK,SAAS,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,eAAe,CAAC,SAAS,CAAC,EAAE;;;;;;;;"}