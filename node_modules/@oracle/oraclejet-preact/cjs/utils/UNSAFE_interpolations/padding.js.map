{"version":3,"file":"padding.js","sources":["../../../../src/utils/UNSAFE_interpolations/padding/padding.ts"],"sourcesContent":["import { stringLiteralArray } from '../../UNSAFE_arrayUtils';\nimport { sizeToCSS, Size } from '../../UNSAFE_size';\nimport { coerceArray } from '../../UNSAFE_arrayUtils';\n\nconst paddingstartends = stringLiteralArray([\n  'paddingBlockStart',\n  'paddingBlockEnd',\n  'paddingInlineStart',\n  'paddingInlineEnd'\n]);\n\ntype PaddingStartEnd = typeof paddingstartends[number];\ntype PaddingStartEndProps = { [key in PaddingStartEnd]?: Size };\n\nexport type PaddingProps = {\n  padding?: Size | [Size] | [Size, Size] | [Size, Size, Size] | [Size, Size, Size, Size];\n} & PaddingStartEndProps;\n\nconst paddingInterpolations = {\n  padding: ({ padding }: Pick<PaddingProps, 'padding'>) => {\n    if (padding === undefined) {\n      return {};\n    } else {\n      const [\n        topPadding,\n        rightPadding = topPadding,\n        bottomPadding = topPadding,\n        leftPadding = rightPadding\n      ] = coerceArray(padding) as\n        | [Size]\n        | [Size, Size]\n        | [Size, Size, Size]\n        | [Size, Size, Size, Size];\n      return {\n        padding: `${sizeToCSS(topPadding)} ${sizeToCSS(rightPadding)} \n        ${sizeToCSS(bottomPadding)} ${sizeToCSS(leftPadding)}`\n      };\n    }\n  },\n  paddingBlockStart: ({ paddingBlockStart }: Pick<PaddingProps, 'paddingBlockStart'>) =>\n    paddingBlockStart === undefined\n      ? {}\n      : {\n          paddingBlockStart: `${sizeToCSS(paddingBlockStart)}`\n        },\n  paddingBlockEnd: ({ paddingBlockEnd }: Pick<PaddingProps, 'paddingBlockEnd'>) =>\n    paddingBlockEnd === undefined\n      ? {}\n      : {\n          paddingBlockEnd: `${sizeToCSS(paddingBlockEnd)}`\n        },\n  paddingInlineStart: ({ paddingInlineStart }: Pick<PaddingProps, 'paddingInlineStart'>) =>\n    paddingInlineStart === undefined\n      ? {}\n      : {\n          paddingInlineStart: `${sizeToCSS(paddingInlineStart)}`\n        },\n  paddingInlineEnd: ({ paddingInlineEnd }: Pick<PaddingProps, 'paddingInlineEnd'>) =>\n    paddingInlineEnd === undefined\n      ? {}\n      : {\n          paddingInlineEnd: `${sizeToCSS(paddingInlineEnd)}`\n        }\n};\n\nexport { paddingInterpolations };\n"],"names":["stringLiteralArray","coerceArray","sizeToCSS"],"mappings":";;;;;;;;;;;AAIA,MAAM,gBAAgB,GAAGA,0CAAkB,CAAC;IAC1C,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;AACnB,CAAA,CAAC,CAAC;AASH,MAAM,qBAAqB,GAAG;AAC5B,IAAA,OAAO,EAAE,CAAC,EAAE,OAAO,EAAiC,KAAI;QACtD,IAAI,OAAO,KAAK,SAAS,EAAE;AACzB,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;AAAM,aAAA;YACL,MAAM,CACJ,UAAU,EACV,YAAY,GAAG,UAAU,EACzB,aAAa,GAAG,UAAU,EAC1B,WAAW,GAAG,YAAY,CAC3B,GAAGC,mCAAW,CAAC,OAAO,CAIK,CAAC;YAC7B,OAAO;gBACL,OAAO,EAAE,CAAG,EAAAC,2BAAS,CAAC,UAAU,CAAC,CAAI,CAAA,EAAAA,2BAAS,CAAC,YAAY,CAAC,CAAA;UAC1DA,2BAAS,CAAC,aAAa,CAAC,CAAA,CAAA,EAAIA,2BAAS,CAAC,WAAW,CAAC,CAAE,CAAA;aACvD,CAAC;AACH,SAAA;KACF;IACD,iBAAiB,EAAE,CAAC,EAAE,iBAAiB,EAA2C,KAChF,iBAAiB,KAAK,SAAS;AAC7B,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,iBAAiB,EAAE,CAAG,EAAAA,2BAAS,CAAC,iBAAiB,CAAC,CAAE,CAAA;AACrD,SAAA;IACP,eAAe,EAAE,CAAC,EAAE,eAAe,EAAyC,KAC1E,eAAe,KAAK,SAAS;AAC3B,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,eAAe,EAAE,CAAG,EAAAA,2BAAS,CAAC,eAAe,CAAC,CAAE,CAAA;AACjD,SAAA;IACP,kBAAkB,EAAE,CAAC,EAAE,kBAAkB,EAA4C,KACnF,kBAAkB,KAAK,SAAS;AAC9B,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,kBAAkB,EAAE,CAAG,EAAAA,2BAAS,CAAC,kBAAkB,CAAC,CAAE,CAAA;AACvD,SAAA;IACP,gBAAgB,EAAE,CAAC,EAAE,gBAAgB,EAA0C,KAC7E,gBAAgB,KAAK,SAAS;AAC5B,UAAE,EAAE;AACJ,UAAE;AACE,YAAA,gBAAgB,EAAE,CAAG,EAAAA,2BAAS,CAAC,gBAAgB,CAAC,CAAE,CAAA;AACnD,SAAA;;;;;"}