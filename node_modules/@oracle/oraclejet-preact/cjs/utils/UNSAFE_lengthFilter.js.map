{"version":3,"file":"UNSAFE_lengthFilter.js","sources":["../../../src/utils/UNSAFE_lengthFilter/lengthFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type CountUnit = 'codePoint' | 'codeUnit';\n\nexport function calcLength(text: string, countBy: CountUnit = 'codeUnit'): number {\n  if (!text) {\n    return 0;\n  }\n  const codeUnitLength = text.length;\n  let length: number;\n  let surrogateLength = 0;\n\n  switch (countBy) {\n    case 'codePoint':\n      // if countBy is \"codePoint\", then count supplementary characters as length of one\n      // For UTF-16, a \"Unicode  surrogate pair\" represents a single supplementary character.\n      // The first (high) surrogate is a 16-bit code value in the range U+D800 to U+DBFF.\n      // The second (low) surrogate is a 16-bit code value in the range U+DC00 to U+DFFF.\n      // This code figures out if a charCode is a high or low surrogate and if so,\n      // increments surrogateLength\n      for (let i = 0; i < codeUnitLength; i++) {\n        // eslint-disable-next-line no-bitwise\n        if ((text.charCodeAt(i) & 0xf800) === 0xd800) {\n          surrogateLength += 1;\n        }\n      }\n      // e.g., if the string is two supplementary characters, codeUnitLength is 4, and the\n      // surrogateLength is 4, so we will return two.\n      // oj.Assert.assert(surrogateLength % 2 === 0,\n      // 'the number of surrogate chars must be an even number.');\n      length = codeUnitLength - surrogateLength / 2;\n      break;\n    case 'codeUnit':\n    default:\n      // Javascript's length function counts # of code units.\n      // A supplementary character has a length of 2 code units.\n      length = codeUnitLength;\n  }\n  return length;\n}\n\n/**\n * Filters the text based on the maximum length allowed.\n *\n * @param proposedText The proposed displayValue\n * @param max The max characters allowed\n * @param countBy The unit to be used for counting\n * @returns The filtered display value\n */\nexport function filter(proposedText: string, max?: number, countBy?: CountUnit) {\n  if (max == null) {\n    // No length filter\n    return proposedText;\n  }\n\n  if (max < 1) {\n    throw new Error(`length filter's max option cannot be less than 1. max option is ${max}`);\n  }\n\n  return calcLength(proposedText, countBy) <= max ? proposedText : proposedText.slice(0, max);\n}\n"],"names":[],"mappings":";;;;;AAAA;;;;;;AAMG;SAIa,UAAU,CAAC,IAAY,EAAE,UAAqB,UAAU,EAAA;IACtE,IAAI,CAAC,IAAI,EAAE;AACT,QAAA,OAAO,CAAC,CAAC;AACV,KAAA;AACD,IAAA,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC;AACnC,IAAA,IAAI,MAAc,CAAC;IACnB,IAAI,eAAe,GAAG,CAAC,CAAC;AAExB,IAAA,QAAQ,OAAO;AACb,QAAA,KAAK,WAAW;;;;;;;YAOd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;;AAEvC,gBAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,MAAM,MAAM,EAAE;oBAC5C,eAAe,IAAI,CAAC,CAAC;AACtB,iBAAA;AACF,aAAA;;;;;AAKD,YAAA,MAAM,GAAG,cAAc,GAAG,eAAe,GAAG,CAAC,CAAC;YAC9C,MAAM;AACR,QAAA,KAAK,UAAU,CAAC;AAChB,QAAA;;;YAGE,MAAM,GAAG,cAAc,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;;;;AAOG;SACa,MAAM,CAAC,YAAoB,EAAE,GAAY,EAAE,OAAmB,EAAA;IAC5E,IAAI,GAAG,IAAI,IAAI,EAAE;;AAEf,QAAA,OAAO,YAAY,CAAC;AACrB,KAAA;IAED,IAAI,GAAG,GAAG,CAAC,EAAE;AACX,QAAA,MAAM,IAAI,KAAK,CAAC,mEAAmE,GAAG,CAAA,CAAE,CAAC,CAAC;AAC3F,KAAA;IAED,OAAO,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,IAAI,GAAG,GAAG,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9F;;;;;"}