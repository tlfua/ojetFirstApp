{"version":3,"file":"UNSAFE_arrayUtils.js","sources":["../../../src/utils/UNSAFE_arrayUtils/arrayUtils.ts","../../../src/utils/UNSAFE_arrayUtils/index.ts"],"sourcesContent":["// If the value is an array, just return it, otherwise make a single entry array out of it and return it.\nexport const coerceArray = <T>(value: T | T[]) => (Array.isArray(value) ? value : [value]);\n\n// By default TS will infer `string[]` for an array so use this function to\n// extract string literal unions. This will automatically type your array.\n// Example:\n// const dimensions1 = [\"height\", \"width\"]; // dimensions1 type is string[].\n// const dimensions = stringLiteralArray([\"height\", \"width\"]);\n// dimensions type is (\"height\"|\"width\")[] (an array that can only have \"height\" and \"width\" in it)\nexport const stringLiteralArray = <LiteralString extends string>(xs: LiteralString[]) => xs;\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport * from './arrayUtils';\n"],"names":[],"mappings":";;;;;AAAA;AACa,MAAA,WAAW,GAAG,CAAI,KAAc,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;AAE3F;AACA;AACA;AACA;AACA;AACA;AACa,MAAA,kBAAkB,GAAG,CAA+B,EAAmB,KAAK;;ACTzF;;;;;;AAMG;;;;;"}