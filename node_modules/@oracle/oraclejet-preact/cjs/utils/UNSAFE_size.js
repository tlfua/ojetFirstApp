/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../UNSAFE_Theme.js');
var utils = require('../utils-b9f57550.js');
require('../Common/themes/themeContract.css.js');

const isStringZero = (v) => parseFloat(v) === 0;
const isPercent = (v) => v.endsWith('%');
const isCalcExpression = (v) => v.startsWith('calc(') && v.endsWith(')');
const isCssVar = (v) => v.startsWith('--');
const isXUnit = (v) => v.endsWith('x');
/**
 * This transforms a number + 'x' to a css calc.
 * E.g., if v is '1.2x' this method returns `calc(1.2 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x))`
 * @param {string } v - a value to transform
 * @returns {string | 0}
 */
const xToCSS = (v) => {
    // parse out the 'x'
    const nStr = v.slice(0, v.length - 1);
    // nStr should now only contain characters that could be part of a floating number.
    // I don't want a string with random characters in it to be ignored as it would with
    // parseFloat, so I'm using Number here. parseFloat('1.2p') -> 1.2. whereas
    // Number('1.2p') returns NaN.
    const num = Number(nStr);
    if (isNaN(num))
        return 0;
    // Note: 1x is equal to about 4px
    return utils.xUnits(num);
};
/**
 * Given a value that is of type Size, transform the value into
 * something that is usable in a css style property.
 * @param {string | 0 } v - a value to transform
 * @returns {string | 0}
 */
const sizeToCSS = (v) => {
    return v === 0 || isStringZero(v) // We want 0, '0%' and '0x' to return 0
        ? 0
        : isCalcExpression(v) || isPercent(v)
            ? v
            : isCssVar(v)
                ? `var(${v})`
                : isXUnit(v)
                    ? xToCSS(v)
                    : 0; // return 0 for any invalid v.
};

exports.sizeToCSS = sizeToCSS;
//# sourceMappingURL=UNSAFE_size.js.map
