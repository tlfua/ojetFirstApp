{"version":3,"file":"NavigationListItem-d8644605.js","sources":["../../src/UNSAFE_NavigationList/NavigationListContext.ts","../../src/UNSAFE_NavigationList/useNavigationListContext.ts","../../src/UNSAFE_NavigationList/useNavigationListItem.ts","../../src/UNSAFE_NavigationList/useNavigationList.ts","../../src/UNSAFE_NavigationList/NavigationList.tsx","../../src/UNSAFE_NavigationList/NavigationListItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { NavigationListProps } from './NavigationList';\nimport { MutableRefObject } from 'preact/compat';\n\nexport type NavigationListContextProps<K extends string | number> = Pick<\n  NavigationListProps<K>,\n  'selection' | 'onSelectionChange'\n> & {\n  currentKey?: K;\n  showFocusRing: boolean;\n  containsActiveElement: () => boolean;\n  firstItemRenderedKey?: MutableRefObject<K | undefined>;\n  onCurrentKeyChange: Required<NavigationListProps<K>>['onSelectionChange'];\n};\n\n/**\n * Context used to pass navlist information without having to pass it to navlist children props.\n * We want to communicate information down to any interested navlist item children.\n */\n\nconst NavigationListContext = createContext<NavigationListContextProps<string | number>>(null!);\n\nexport { NavigationListContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\nimport { NavigationListContext } from './NavigationListContext';\n\n/**\n * Utility hook for consuming the NavigationListContext\n *\n * @returns The value of NavigationListContext provider\n */\nfunction useNavigationListContext() {\n  return useContext(NavigationListContext);\n}\n\nexport { useNavigationListContext };\n","import { useLayoutEffect, MutableRef, useRef } from 'preact/hooks';\n\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useNavigationListContext } from './useNavigationListContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\n\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from './themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\n\n//Little hook to run some function before first render\nexport const useWillMount = (callback: () => void) => {\n  const willMount = useRef(true);\n\n  if (willMount.current) {\n    willMount.current = false;\n    callback();\n  }\n};\n\nconst flexItemStyleInterpolations = mergeInterpolations<FlexitemProps>([\n  ...Object.values(flexitemInterpolations)\n]);\nconst { class: labelContainerFlexItemClasses, ...labelContainerFlexItemStyle } =\n  flexItemStyleInterpolations({\n    alignSelf: 'center'\n  });\n\n// default style class for items in NavigationList\nexport const ITEM_STYLE_CLASS = 'oj-c-navigationlist-item';\nexport const ITEM_SELECTOR = '.' + ITEM_STYLE_CLASS;\n\nexport function useNavigationListItem<K extends string | number>({\n  itemRef,\n  itemKey\n}: {\n  itemRef: MutableRef<HTMLLIElement>;\n  itemKey: K;\n}) {\n  const {\n    onSelectionChange,\n    selection,\n    currentKey,\n    showFocusRing,\n    containsActiveElement,\n    firstItemRenderedKey,\n    onCurrentKeyChange\n  } = useNavigationListContext();\n\n  //Selection and focus state\n  const isCurrent = currentKey === itemKey;\n\n  useWillMount(() => {\n    if (\n      currentKey === undefined &&\n      firstItemRenderedKey &&\n      firstItemRenderedKey.current === undefined\n    ) {\n      firstItemRenderedKey.current = itemKey;\n    }\n  });\n\n  const isSelected = selection === itemKey;\n\n  //Styling\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle, applyActiveStyle } =\n    useInteractionStyle();\n\n  const {\n    classes: listItemClasses,\n    styles: { labelContainerClasses }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme,\n    {\n      focusRing: showFocusRing ? 'isFocusRing' : 'notFocusRing',\n      current: isCurrent ? 'isCurrent' : 'notCurrtent',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      hybridHover: applyHoverStyle ? 'isHybridHover' : 'notHybridHover',\n      pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      active: applyActiveStyle ? 'isActive' : 'notActive'\n    }\n  );\n\n  useLayoutEffect(() => {\n    //We just focus the item if the container is the active element\n    if (containsActiveElement?.() && isCurrent) {\n      itemRef?.current?.focus();\n    }\n  }, [isCurrent, containsActiveElement]);\n\n  //Item handlers\n  const handlePress = () => {\n    onSelectionChange?.({ value: itemKey as K });\n  };\n\n  //Legacy navlist makes selection on keyDown, but since preact tabbar made selection after keyUp, will do the same\n  //for preact navlist\n  const { pressProps } = usePress(handlePress);\n\n  // We have to update current key if there no initial selection\n  const onFocus = () => {\n    if (currentKey === undefined) {\n      onCurrentKeyChange({ value: itemKey as K });\n    }\n  };\n\n  const onFocusProps = { onFocus };\n\n  return {\n    itemHandlers: mergeProps(interactionProps, pressProps, onFocusProps),\n    itemClasses: classNames([listItemClasses, ITEM_STYLE_CLASS]),\n    isItemFocusable:\n      isCurrent || (firstItemRenderedKey?.current === itemKey && currentKey === undefined)\n        ? true\n        : false,\n    isSelected,\n    labelContainerClasses: classNames([labelContainerClasses, labelContainerFlexItemClasses]),\n    labelContainerStyle: labelContainerFlexItemStyle\n  };\n}\n","import { useState, useCallback, MutableRef, useRef } from 'preact/hooks';\n\nimport { keyExtractor, getPrevNextKey } from '../utils/PRIVATE_collectionUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { ITEM_SELECTOR } from './useNavigationListItem';\n\nimport { NavigationListContextProps } from './NavigationListContext';\n\n/**\n * type for payload of current key change event handler\n */\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/*TODO: JET-58534. Create a hook to share some logic between navlist and tabbar. Hook will be used inside this one. */\nexport function useNavigationList<K extends string | number>({\n  containerRef,\n  selection\n}: {\n  containerRef: MutableRef<HTMLUListElement>;\n  selection?: K;\n}) {\n  //Ref used to track if the first item was already rendered\n  const firstItemRenderedKey = useRef<K>();\n  const [currentKey, setCurrentKey] = useState<K | undefined>(selection);\n\n  const onCurrentKeyChange = useCallback(({ value }: CurrentKeyDetail<K | undefined>) => {\n    setCurrentKey(value);\n  }, []) as NavigationListContextProps<K>['onCurrentKeyChange'];\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    false,\n    getPrevNextKey(containerRef.current, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKey(containerRef.current, currentKey, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(\n    (elem: Element | null) => {\n      return !!containerRef.current?.contains(elem);\n    },\n    ['ArrowUp', 'ArrowDown']\n  );\n\n  const containsActiveElement = useCallback(() => {\n    return !!containerRef?.current?.contains(document.activeElement);\n  }, []);\n\n  return {\n    firstItemRenderedKey,\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    containsActiveElement,\n    containerHandlers: mergeProps(focusRingProps, currentKeyProps)\n  };\n}\n","import { ComponentChildren } from 'preact';\nimport { MutableRef, useRef } from 'preact/hooks';\n\nimport { NavigationListContext } from './NavigationListContext';\nimport { navigationListStyles } from './themes/NavigationListStyles.css';\nimport { useNavigationList } from './useNavigationList';\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\nexport type NavigationListProps<K extends string | number> = {\n  /**\n   * A set of NavigationListItem(s) that NavigationList will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when selection has changed\n   */\n  onSelectionChange?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Specifies some screen reader text. Set it to create an accesible navigationList.\n   */\n  'aria-label'?: string;\n\n  /**\n   * Specifies some a relation between navigationList and other element. Based on this specifies some\n   * screen reader text. Set it to create an accesible navigationList.\n   */\n  'aria-labelledby'?: string;\n};\n\nexport function NavigationList<K extends string | number>({\n  children,\n  selection,\n  onSelectionChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelLedBy\n}: NavigationListProps<K>) {\n  const containerRef = useRef<HTMLUListElement>(null);\n\n  const {\n    firstItemRenderedKey,\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    containsActiveElement,\n    containerHandlers\n  } = useNavigationList({\n    containerRef: containerRef as MutableRef<HTMLUListElement>,\n    selection\n  });\n\n  return (\n    <ul\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelLedBy}\n      role=\"listbox\"\n      ref={containerRef}\n      tabIndex={children ? -1 : 0}\n      {...containerHandlers}\n      class={navigationListStyles.uListStyle}>\n      <NavigationListContext.Provider\n        value={{\n          selection,\n          onSelectionChange,\n          onCurrentKeyChange,\n          currentKey,\n          showFocusRing,\n          containsActiveElement,\n          firstItemRenderedKey\n        }}>\n        {children}\n      </NavigationListContext.Provider>\n    </ul>\n  );\n}\n","import { useRef, MutableRef } from 'preact/hooks';\n\nimport { Text } from '../UNSAFE_Text';\n\nimport { useNavigationListItem } from './useNavigationListItem';\n\nexport type NavigationListItemProps<K extends string | number> = {\n  /**\n   * Key of the NavigationListItem\n   */\n  itemKey: K;\n  /**\n   * Label of the NavigationListItem\n   */\n  label?: string;\n};\n\n/*TODO: JET-58535. Add ripple effect when touching navigationListItem. */\nexport function NavigationListItem<K extends string | number>({\n  itemKey,\n  label\n}: NavigationListItemProps<K>) {\n  const itemRef = useRef<HTMLLIElement | null>(null);\n\n  //Logic of the component handled here\n  const {\n    isItemFocusable,\n    itemHandlers,\n    itemClasses,\n    isSelected,\n    labelContainerClasses,\n    labelContainerStyle\n  } = useNavigationListItem({\n    itemRef: itemRef as MutableRef<HTMLLIElement>,\n    itemKey\n  });\n\n  return (\n    <li\n      role=\"option\"\n      {...itemHandlers}\n      data-oj-key={itemKey}\n      class={itemClasses}\n      tabIndex={isItemFocusable ? 0 : -1}\n      aria-selected={isSelected}\n      ref={itemRef}>\n      {label && (\n        <span class={labelContainerClasses} style={labelContainerStyle}>\n          <Text size=\"inherit\" weight=\"inherit\" variant=\"inherit\">\n            {label}\n          </Text>\n        </span>\n      )}\n    </li>\n  );\n}\n"],"names":["createContext","useContext","useRef","mergeInterpolations","flexitemInterpolations","useInteractionStyle","useComponentTheme","NavigationListItemRedwoodTheme","useLayoutEffect","usePress","mergeProps","classNames","useState","useCallback","useCurrentKey","keyExtractor","getPrevNextKey","useCollectionFocusRing","_jsx","navigationListStyles","Text"],"mappings":"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"}