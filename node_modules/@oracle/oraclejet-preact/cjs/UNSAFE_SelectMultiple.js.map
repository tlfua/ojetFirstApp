{"version":3,"file":"UNSAFE_SelectMultiple.js","sources":["../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_RedwoodIcons/NavLeft/NavLeft.tsx","../../src/UNSAFE_RedwoodIcons/NavLeft/index.ts","../../src/UNSAFE_RedwoodIcons/CancelS/CancelS.tsx","../../src/UNSAFE_RedwoodIcons/CancelS/index.ts","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/TextTag.tsx","../../src/UNSAFE_SelectMultiple/TextTagList.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileFieldInput.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx","../../src/UNSAFE_SelectMultiple/index.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgNavLeft = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path\n        d=\"m9.414 12 7.293-7.293-1.414-1.414L6.586 12l8.707 8.707 1.414-1.414L9.414 12z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgNavLeft as NavLeft };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { NavLeft } from './NavLeft';\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgCancelS = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm3.498 5L12 10.498 8.502 7 7 8.502 10.498 12 7 15.498 8.502 17 12 13.502 15.498 17 17 15.498 13.502 12 17 8.502z\"\n      fill=\"currentcolor\"\n      fillRule=\"evenodd\"\n    />\n  </Icon>\n);\nexport { SvgCancelS as CancelS };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { CancelS } from './CancelS';\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = Pick<\n  TextFieldProps,\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseDown'\n  | 'statusVariant'\n  | 'styleVariant'\n>;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      variant=\"borderless\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  );\n\n  const clearButton = (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      variant=\"borderless\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  );\n  const dropdownArrow = (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      onClick={onDropdownArrowClick}\n    />\n  );\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useId, useRef } from 'preact/hooks';\nimport { preventDefault } from '../PRIVATE_SelectCommon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { Text } from '../UNSAFE_Text';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { isBackspaceOrDelete } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textTagStyles } from './themes/TextTagStyles.css';\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = {\n  /**\n   * The label for the text tag\n   */\n  children: string;\n\n  /**\n   * Specifies whether to show the remove icon\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * Indicates whether the component is focused\n   */\n  isFocused?: boolean;\n\n  /**\n   * Specifies if the TextTag component is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Callback to be invoked when Delete/Backspace is pressed\n   */\n  onRemoveAction?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when clicking on the text tag\n   */\n  onSelect?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when the remove icon is clicked\n   */\n  onRemoveIconClick?: (value: V) => void;\n\n  /**\n   * The value of the text tag\n   */\n  value: V;\n};\n\n/**\n * The component for rendering selectable/removable TextTag\n *\n * @param param0 The props for the TextTag component\n */\nexport function TextTag<V>({\n  children,\n  removeIcon = 'never',\n  isSelected = false,\n  onRemoveAction,\n  onSelect,\n  onRemoveIconClick,\n  isFocused,\n  value\n}: Props<V>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const navigationTextId = useId();\n\n  const rootClasses = classNames([textTagStyles.base, isSelected && textTagStyles.selected]);\n\n  const onRemoveActionCallback = useCallback(() => {\n    onRemoveAction?.(value);\n  }, [value, onRemoveAction]);\n  const onSelectCallback = useCallback(() => {\n    onSelect?.(value);\n  }, [value, onSelect]);\n  const onRemoveIconClickCallback = useCallback(() => {\n    onRemoveIconClick?.(value);\n  }, [value, onRemoveIconClick]);\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isBackspaceOrDelete(event)) {\n        onRemoveActionCallback();\n        return;\n      }\n    },\n    [onRemoveActionCallback]\n  );\n\n  useEffect(() => {\n    if (isFocused && isSelected) {\n      spanRef.current?.focus();\n      spanRef.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocused, isSelected]);\n\n  return (\n    <>\n      <span\n        ref={spanRef}\n        class={rootClasses}\n        tabIndex={-1}\n        onClick={onSelectCallback}\n        onKeyUp={onKeyUp}\n        // Kill mouse down event to prevent focus transfer done by the parent container.\n        // We will programmatically take back focus in response to the onClick event.\n        onMouseDown={preventDefault}\n        role=\"option\"\n        aria-describedby={navigationTextId}\n        aria-selected={isSelected ? 'true' : 'false'}>\n        <Text size=\"md\" variant=\"inherit\">\n          {children}\n        </Text>\n        {removeIcon === 'always' && (\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <IconButton size=\"xs\" variant=\"ghost\" onAction={onRemoveIconClickCallback}>\n              <CloseIcon />\n            </IconButton>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n      <HiddenAccessible id={navigationTextId}>\n        {translations.selectMultiple_removeSelectedTagInstructionText()}\n      </HiddenAccessible>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = stringLiteralArray(['maxWidth']);\ntype SupportedDimensions = typeof supportedDimensions[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // \n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n","import { ComponentProps, Ref } from 'preact';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </>\n  );\n}\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '../utils/UNSAFE_attributeUtils';\nimport { TextProps, textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldInputVariantOptions } from '../UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { selectMultipleMobileFieldInputStyles } from './themes/SelectMultipleMobileFieldInputStyles.css';\nimport { isInputPlaceholderShown } from '../UNSAFE_TextField/TextFieldUtils';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Text } from '../UNSAFE_Text';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { TextFieldInputRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ntype EventProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onBlur' | 'onFocus'>;\n\ntype Props = AriaProps &\n  EventProps &\n  TextProps & {\n    displayValue?: string;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    isRequired?: boolean;\n    placeholder?: string;\n    variant?: 'default' | 'embedded';\n  };\n\nconst interpolations = [...Object.values(textInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * This component is used for rendering the main field in mobile phones. This is a bit different from the\n * normal main field (SelectMultipleFieldInput) that we use for desktop & tablet devices in the way that\n * a user will not be able to edit the value of this field. But, one can still have other functionalities\n * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.\n *\n * This also differs from ReadonlyTextFieldInput in the following ways:\n * 1. This will be rendered as div as well, but has a role of combobox set on it\n * 2. This will not be read as readonly input by the screen readers\n * 3. This has the stylings much similar to the TextFieldInput component\n * 4. This supports the use of placeholder and shows it when there is no value present\n * 5. This supports having the variant property and styles accordingly\n *\n * As such, this is very similar to the TextFieldInput except that this does not allow user input.\n * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the\n * behavior we need, it will make the field as readonly and screen readers read the same about this\n * field. This will be an incorrect representation contextually as one can still edit the value by opening\n * the dropdown and changing the selection.\n */\nexport const SelectMultipleMobileFieldInput = forwardRef(\n  (\n    {\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': ariaExpanded,\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      displayValue,\n      hasEmptyLabel,\n      hasInsideLabel = false,\n      isRequired,\n      onBlur,\n      onFocus,\n      placeholder,\n      textAlign,\n      variant = 'default'\n    }: Props,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    // consume required contexts\n    const { isDisabled, isFocused, hasValue = false } = useFormFieldContext();\n    const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n    // setup properties\n    const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n      ? placeholder\n      : undefined;\n\n    // Add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n    // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n    // kinds of labels, this helps to ensure we don't override a meaningful label.\n    const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n    const mergedAriaLabelledBy = hasEmptyLabel\n      ? merge([ariaLabelledBy, UNSAFE_ariaLabelledBy])\n      : ariaLabelledBy;\n\n    // setup style classes\n    const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n    const { classes: themeClasses } = useComponentTheme<TextFieldInputVariantOptions>(\n      TextFieldInputRedwoodTheme,\n      {\n        type: 'notPassword',\n        styleVariant: variant,\n        textarea: 'notTextArea',\n        input: 'isInput',\n        prefix: 'noPrefix',\n        suffix: 'noSuffix',\n        startContent: 'noStartContent',\n        endContent: 'hasEndContent',\n        insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n        value: hasValue ? 'hasValue' : 'noValue',\n        focused: isFocused ? 'isFocused' : 'notFocused',\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n      }\n    );\n    const rootDivStyleClasses = classNames([\n      selectMultipleMobileFieldInputStyles.base,\n      styleInterpolationClasses,\n      themeClasses\n    ]);\n\n    return (\n      <div\n        aria-autocomplete=\"list\"\n        aria-controls={ariaControls}\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-invalid={ariaInvalid}\n        aria-label={ariaLabel}\n        aria-labelledby={mergedAriaLabelledBy}\n        aria-required={isRequired ? 'true' : undefined}\n        class={rootDivStyleClasses}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={ref}\n        role=\"combobox\"\n        {...(isTabbable && tabbableModeProps)}>\n        <div class={selectMultipleMobileFieldInputStyles.content}>\n          <Text variant={displayValue ? 'inherit' : 'secondary'}>\n            {displayValue || myPlaceholder}\n          </Text>\n        </div>\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo, useRef } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n  // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n\n  // ref for the static set of value items we want to show in the selected only view\n  const selectedOnlyValueItemsRef = useRef(valueItems);\n  // ref for the previous value of isDropdownSelectedOnlyView\n  const prevIsDropdownSelectedOnlyViewRef = useRef(isDropdownSelectedOnlyView);\n  // if the value of isDropdownSelectedOnlyView has changed, store the new static set of\n  // value items to show in selected only view, otherwise leave it the same\n  selectedOnlyValueItemsRef.current =\n    prevIsDropdownSelectedOnlyViewRef.current !== isDropdownSelectedOnlyView\n      ? valueItems\n      : selectedOnlyValueItemsRef.current;\n  // update the ref for the previous value of isDropdownSelectedOnlyView AFTER using it to\n  // update the ref for the static set of value items\n  prevIsDropdownSelectedOnlyViewRef.current = isDropdownSelectedOnlyView;\n\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView ||\n      !selectedOnlyValueItemsRef.current ||\n      selectedOnlyValueItemsRef.current.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: selectedOnlyValueItemsRef.current.length ?? 0,\n          sizePrecision: 'exact',\n          data: selectedOnlyValueItemsRef.current.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","import { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { equals } from 'ramda';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: Ref<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n  onLoadRange: UseSelectMultipleProps<K, D>['onLoadRange'];\n};\n\nexport function useMobileDropdown<K extends string | number, D>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems = [],\n  onCommit,\n  onLoadRange,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(keysFromValueItems(valueItems));\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData, onLoadRange: selectedOnlyOnLoadRange } = useSelectedOnlyData<\n    K,\n    D\n  >({\n    isDropdownSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, newKeys);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(new Set(valueItems.map((v) => v.key)));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: keysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // if it was open before, then this is a valueItems change, so no action\n      if (wasDropdownOpen.current) return;\n\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n      wasDropdownOpen.current = true;\n      return;\n    }\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n      const nextDropdownSelectedKeys = keysFromValueItems(valueItems);\n      // since valueItems can be a different array with the same values and keysFromValueItems\n      // will create a new set every time, compare the value and update the set only if the\n      // values have changed\n      return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n        ? prevDropdownSelectedKeys\n        : nextDropdownSelectedKeys;\n    });\n    wasDropdownOpen.current = false;\n  }, [isDropdownOpen, valueItems]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data: isDropdownSelectedOnlyView ? selectedOnlyData : data,\n      selectedKeys: dropdownSelectedKeys,\n      onCurrentKeyChange,\n      onLoadRange: isDropdownSelectedOnlyView ? selectedOnlyOnLoadRange : onLoadRange,\n      onSelectionChange\n    },\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView,\n      isSelectedValuesCountShown: dropdownSelectedKeys.size > 0 || isDropdownSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys.size,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nconst keysFromValueItems = <K, D>(valueItems: Item<K, D>[]) =>\n  new Set(valueItems.map((i) => i.key));\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useId, useMemo, useRef, useState } from 'preact/hooks';\nimport { KEYS, isControlOrFunctionKey, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useEffectEvent } from '../hooks/PRIVATE_useEffectEvent';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'aria-describedby' | 'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowArg: typeof currentRow): currentRowArg is Required<typeof currentRow> => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowArg.rowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, inputRef, isDropdownOpen, removeDropdown]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRow)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRow.rowKey);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRow,\n      direction,\n      hasSelectedValuesCount,\n      inputRef,\n      isDropdownOpen,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [setSelectedKeys, valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen, setCurrentRow]);\n\n  // We need to highlight the first result whenever the data changes\n  const STABLE_onDataChange = useEffectEvent((newData: typeof data) => {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = newData?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: isEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n  });\n  useEffect(() => {\n    STABLE_onDataChange(data);\n  }, [STABLE_onDataChange, data]);\n\n  return {\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data,\n      onCurrentKeyChange,\n      onSelectionChange,\n      onLoadRange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textTagListProps,\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  SelectMobileDropdown,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '../PRIVATE_SelectCommon';\nimport { DataState, ListItemContext, Metadata } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { View } from '../UNSAFE_View';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileFieldInput } from './SelectMultipleMobileFieldInput';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useMobileDropdown } from './useMobileDropdown';\nimport { useSelectMultiple } from './useSelectMultiple';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype SelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  /**\n   * Metadata for the item.\n   */\n  metadata: ItemRendererMetadata<K>;\n  /**\n   * User-entered search text.\n   */\n  searchText?: string;\n  /**\n   * The selected keys in the dropdown\n   */\n  selectedKeys?: Set<K>;\n  /**\n   * Callback function to trigger when the selection changes\n   *\n   * @param detail The selection change details\n   */\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      ariaProps,\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    const {\n      collectionProps: mobileDropdownCollectionProps,\n      footerProps: mobileDropdownFooterProps,\n      selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n      selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps\n    } = useMobileDropdown<K, D>({\n      data,\n      inputRef: enabledElementRef,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      itemText,\n      textTagListRef: textTagListProps.textTagListRef,\n      userInput,\n      valueItems,\n      onCommit,\n      onLoadRange: propOnLoadRange,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n    // for dropdown field\n    const {\n      formFieldContext: mobileDropdownFormFieldContext,\n      inputProps: mobileDropdownInputProps,\n      labelProps: mobileDropdownLabelProps,\n      textFieldProps: mobileDropdownTextFieldProps,\n      userAssistanceProps: mobileDropdownUserAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n    mobileDropdownFormFieldContext.hasValue =\n      propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp = (\n      <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n        {label}\n      </Label>\n    );\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const mobileDropdownFieldLabelProps = {\n      label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n      labelEdge: 'inside' as const\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={mainFieldRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDropdownAbove &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n          {...(isPhone() ? mobileDropdownUserAssistanceProps : {})}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...(isPhone() ? mobileDropdownCollectionProps : collectionProps)}\n        aria-label={label ?? ''}\n        currentItemVariant=\"highlight\"\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        searchText={\n          isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n        }\n        selectionMode=\"multiple\"\n      />\n    );\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    const defaultMainFieldInput = (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    );\n    const phoneMainFieldInput = (\n      <SelectMultipleMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            selectedValuesCount={valueItems?.length}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {\n              // Use the mobile field if the component is being rendered in a phone\n              // and it is not disabled.\n              isPhone() && !isDisabled ? phoneMainFieldInput : defaultMainFieldInput\n            }\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {isPhone() ? (\n          <SelectMobileDropdown\n            header={\n              <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n                <View>\n                  <SelectMultipleField\n                    fieldLabel={label}\n                    onBlur={focusProps.onfocusout}\n                    onFocus={focusProps.onfocusin}\n                    onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n                    onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n                    onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n                    onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n                    onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n                    {...mobileDropdownFieldLabelProps}\n                    {...mobileDropdownTextFieldProps}\n                    {...mobileDropdownSelectMultipleFieldProps}>\n                    <SelectMultipleFieldInput\n                      aria-controls={dropdownId}\n                      aria-expanded={isDropdownOpen}\n                      aria-label={ariaLabel}\n                      isRequired={isRequired}\n                      liveRegionText={liveRegionText}\n                      placeholder={placeholder}\n                      selectedValuesDescriptionId={selectedValuesDescriptionId}\n                      textAlign={textAlign}\n                      virtualKeyboard={virtualKeyboard}\n                      {...inputEventHandlers}\n                      {...mobileDropdownInputProps}\n                      {...mobileDropdownSelectMultipleFieldInputProps}\n                    />\n                  </SelectMultipleField>\n                </View>\n                {dropdownInlineUserAssistance}\n              </FormFieldContext.Provider>\n            }\n            footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}>\n            <DropdownList hasBottomGap={true} isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n          </SelectMobileDropdown>\n        ) : (\n          <Dropdown\n            dropdownRef={dropdownRef}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}\n            anchorRef={mainFieldRef}\n            {...dropdownEventHandlers}>\n            <DropdownList\n              hasBottomGap={dropdownInlineUserAssistance === undefined}\n              isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n            {dropdownInlineUserAssistance}\n          </Dropdown>\n        )}\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { SelectMultiple } from './SelectMultiple';\n"],"names":["useTranslationBundle","_jsx","mobileDropdownFooterStyles","Button","rootStyles","SelectedValuesCount","ariaLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","translations","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","valuesSelectedText","selectMultiple_valuesSelected","class","children","Chip","label","Icon","useFormFieldContext","IconButton","NavLeft","CancelS","DropdownArrow","_jsxs","Flex","TextField","useRef","useId","classNames","textTagStyles","useCallback","isBackspaceOrDelete","useEffect","preventDefault","Text","TabbableModeContext","CloseIcon","HiddenAccessible","stringLiteralArray","dimensionInterpolations","styleInterpolations","mergeInterpolations","useState","useUser","isSelectAll","useFocusWithin","useImperativeHandle","textTagListStyles","forwardRef","_Fragment","TextFieldInput","LiveRegion","textInterpolations","useTabbableMode","isInputPlaceholderShown","useAccessibleContext","merge","useComponentTheme","TextFieldInputRedwoodTheme","selectMultipleMobileFieldInputStyles","useMemo","renderItemText","equals","isEmptyOrUndefined","useSelectCommon","KEYS","isControlOrFunctionKey","mergeProps","useEffectEvent","useFormContext","useFocusableTextField","useLoadingIndicatorTimer","useTextField","Label","isPhone","InlineUserAssistance","CompactUserAssistance","FormFieldContext","ReadonlyTextField","ReadonlyTextFieldInput","isBeforeDataFetch","DropdownUserAssistance","EmptyResults","DefaultList","isTablet","Fragment","SelectMobileDropdown","View","DropdownList","Dropdown"],"mappings":"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"}