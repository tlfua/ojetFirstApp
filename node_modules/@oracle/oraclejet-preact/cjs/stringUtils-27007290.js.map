{"version":3,"file":"stringUtils-27007290.js","sources":["../../src/utils/UNSAFE_stringUtils/stringUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * String utilities.\n */\n\nconst _TRIM_ALL_RE = /^\\s*|\\s*$/g;\n\n/**\n * Returns true if the value is null or if the trimmed value is of zero length.\n *\n * @param {Object|string|null} value\n * @returns true if the string or Object (e.g., Array) is of zero length.\n */\nexport function isEmpty(value: object | string | null) {\n  if (value === null) {\n    return true;\n  }\n\n  const trimValue = trim(value);\n\n  if (trimValue?.hasOwnProperty('length')) {\n    return (trimValue as any).length === 0;\n  }\n\n  return true;\n}\n\n/**\n * Returns true if the value is null, undefined or if the trimmed value is of zero length.\n *\n * @param {Object|string|null=} value\n * @returns true if the string or Object (e.g., Array) is of zero length.\n */\nexport function isEmptyOrUndefined(value?: object | string | null) {\n  if (value === undefined || isEmpty(value)) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Test if an object is a string (either a string constant or a string object)\n * @param {Object|string|null} obj object to test\n * @return true if a string constant or string object\n */\nexport function isString(obj: object | string | null) {\n  return obj !== null && (typeof obj === 'string' || obj instanceof String);\n}\n\n/**\n * Remove leading and trailing whitespace\n * @param {Object|string|null} data to trim\n * @returns trimmed input\n */\nexport function trim(data: object | string | null) {\n  if (isString(data)) {\n    return (data as string).replace(_TRIM_ALL_RE, '');\n  }\n\n  return data;\n}\n\n/**\n * Port of the Java String.hashCode method.\n * http://erlycoder.com/49/javascript-hash-functions-to-convert-string-into-integer-hash-\n *\n * @param {string} str\n * @returns The hashCode of the string\n */\nexport function hashCode(str: string) {\n  let hash = 0;\n  if (str.length === 0) {\n    return hash;\n  }\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    // eslint-disable-next-line no-bitwise\n    hash = (hash << 5) - hash + c;\n    // eslint-disable-next-line no-bitwise\n    hash &= hash;\n  }\n  return hash;\n}\n\n/**\n * converts camelCase to kebab-case string.\n *\n * @param {string} str\n * @returns returns a kebab-case version of string\n */\nexport const kebabCase = (str: string) =>\n  str.replace(/(?!^)([A-Z\\u00C0-\\u00D6])/g, (match) => '-' + match.toLowerCase());\n\n/**\n * gets the base name from CSS var\n *\n * @param {string} variable\n * @returns returns unwrapped css var\n */\nexport const getVarName = (variable: string) => {\n  const matches = variable.match(/^var\\((.*)\\)$/);\n\n  if (matches) {\n    return matches[1];\n  }\n\n  return variable;\n};\n\n/**\n * Merge multiple strings into a single string using the separator provided.\n * This filters out falsy values when doing the merge.\n *\n * @param stringArray An array of strings to be merged\n * @param separator Separator that will be used for merging the string.\n * @returns The space separated list of strings or undefined if there are no valid strings in the array\n */\nexport function merge(stringArray: (string | boolean | undefined)[], separator = ' ') {\n  return stringArray.filter(Boolean).join(separator) || undefined;\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;AAMG;AAEH;;AAEG;AAEH,MAAM,YAAY,GAAG,YAAY,CAAC;AAElC;;;;;AAKG;AACG,SAAU,OAAO,CAAC,KAA6B,EAAA;IACnD,IAAI,KAAK,KAAK,IAAI,EAAE;AAClB,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;AAE9B,IAAA,IAAI,SAAS,EAAE,cAAc,CAAC,QAAQ,CAAC,EAAE;AACvC,QAAA,OAAQ,SAAiB,CAAC,MAAM,KAAK,CAAC,CAAC;AACxC,KAAA;AAED,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;AAKG;AACG,SAAU,kBAAkB,CAAC,KAA8B,EAAA;IAC/D,IAAI,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;AACzC,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;AAIG;AACG,SAAU,QAAQ,CAAC,GAA2B,EAAA;AAClD,IAAA,OAAO,GAAG,KAAK,IAAI,KAAK,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,YAAY,MAAM,CAAC,CAAC;AAC5E,CAAC;AAED;;;;AAIG;AACG,SAAU,IAAI,CAAC,IAA4B,EAAA;AAC/C,IAAA,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClB,OAAQ,IAAe,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AACnD,KAAA;AAED,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;AAMG;AACG,SAAU,QAAQ,CAAC,GAAW,EAAA;IAClC,IAAI,IAAI,GAAG,CAAC,CAAC;AACb,IAAA,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AACpB,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;;QAE5B,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC;;QAE9B,IAAI,IAAI,IAAI,CAAC;AACd,KAAA;AACD,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;AAKG;AACU,MAAA,SAAS,GAAG,CAAC,GAAW,KACnC,GAAG,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC,KAAK,KAAK,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,EAAE;AAElF;;;;;AAKG;AACU,MAAA,UAAU,GAAG,CAAC,QAAgB,KAAI;IAC7C,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAEhD,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;AACnB,KAAA;AAED,IAAA,OAAO,QAAQ,CAAC;AAClB,EAAE;AAEF;;;;;;;AAOG;SACa,KAAK,CAAC,WAA6C,EAAE,SAAS,GAAG,GAAG,EAAA;AAClF,IAAA,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;AAClE;;;;;;;;;;;"}