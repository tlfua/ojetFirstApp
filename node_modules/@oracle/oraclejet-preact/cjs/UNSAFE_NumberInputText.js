/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var compat = require('preact/compat');
var hooks = require('preact/hooks');
var hooks_UNSAFE_useFocusableTextField = require('./hooks/UNSAFE_useFocusableTextField.js');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useHover = require('./hooks/UNSAFE_useHover.js');
var hooks_UNSAFE_useTextField = require('./hooks/UNSAFE_useTextField.js');
require('./UNSAFE_Label.js');
var hooks_UNSAFE_usePrefixSuffix = require('./hooks/UNSAFE_usePrefixSuffix.js');
var UNSAFE_TextField = require('./UNSAFE_TextField.js');
var UNSAFE_UserAssistance = require('./UNSAFE_UserAssistance.js');
require('./utils/PRIVATE_clientHints.js');
var hooks_UNSAFE_useSpinning = require('./hooks/UNSAFE_useSpinning.js');
require('./UNSAFE_IconButton.js');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var IconButton = require('./IconButton-bc45151b.js');
var UNSAFE_Grid = require('./UNSAFE_Grid.js');
require('./PRIVATE_ThemedIcons/IncrementIcon.js');
require('./PRIVATE_ThemedIcons/DecrementIcon.js');
var PRIVATE_ThemedIcons_MinusIcon = require('./PRIVATE_ThemedIcons/MinusIcon.js');
var PRIVATE_ThemedIcons_PlusIcon = require('./PRIVATE_ThemedIcons/PlusIcon.js');
var index = require('./index-b134efda.js');
var index$1 = require('./index-818953bc.js');
var hooks_UNSAFE_useCurrentValueReducer = require('./hooks/UNSAFE_useCurrentValueReducer.js');
var Label = require('./Label-bb9ff3c9.js');
var ReadonlyTextFieldInput = require('./ReadonlyTextFieldInput-df771dd2.js');
var TextFieldInput = require('./TextFieldInput-28035e98.js');
var clientHints = require('./clientHints-b9e7be1e.js');
require('./hooks/UNSAFE_useFocusWithin.js');
require('./useFocusWithin-3c76895a.js');
require('preact');
require('./hooks/UNSAFE_useToggle.js');
require('./hooks/PRIVATE_useMessageSeverity.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-27007290.js');
require('./hooks/UNSAFE_useFormFieldContextProps.js');
require('./hooks/UNSAFE_useId.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-d619a292.js');
require('./hooks/UNSAFE_useComponentTheme.js');
require('./utils/UNSAFE_logger.js');
require('./_curry1-6e9511bf.js');
require('./_curry2-53a902bf.js');
require('./InlineHelpSource-ecc4f96f.js');
require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js');
require('./UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js');

require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js');

require('./UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js');
require('./vanilla-extract-recipes-createRuntimeFn.esm-8a4b93e4.js');
require('./index-c3ee789d.js');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('./UNSAFE_ComponentMessage.js');
require('./ComponentMessage-12850cb4.js');
require('./PRIVATE_Message.js');
require('./UNSAFE_Flex.js');
require('./Flex-2eb09dad.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./UNSAFE_Theme.js');
require('./utils-b9f57550.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-ad2313fd.js');
require('./_has-aa203696.js');

require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-65201aa4.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-8cd3009d.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-939ec1ef.js');
require('./utils/PRIVATE_timer.js');
require('./PRIVATE_Message/themes/MessageStyles.css.js');

require('./MessageCloseButton-64c284a2.js');
require('./PRIVATE_ThemedIcons/CloseIcon.js');
require('./UNSAFE_Icon.js');
require('./Icon-e47442ad.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./UNSAFE_Floating.js');
require('./Floating-3415cf36.js');
require('./index-0a166c9e.js');
require('./hooks/UNSAFE_useUser.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./UNSAFE_Floating/themes/redwood/FloatingTheme.js');
require('./UNSAFE_Floating/themes/FloatingStyles.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js');

require('./UNSAFE_Floating/themes/redwood/FloatingVariants.css.js');
require('./vanilla-extract-dynamic.esm-4bc33829.js');
require('./UNSAFE_Floating/themes/FloatingContract.css.js');
require('./UNSAFE_Layer.js');
require('./useThemeInterpolations-ee4e7934.js');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./utils/UNSAFE_mergeProps.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-802f3cdb.js');
require('./hooks/UNSAFE_useThemeInterpolations.js');
require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js');
require('./hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js');

require('./hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js');

require('./UNSAFE_Icon/themes/IconStyle.css.js');

require('./MessageDetail-dce2aadd.js');
require('./MessageFormattingUtils-3cf76724.js');
require('./utils/UNSAFE_getLocale.js');
require('./Message.types-20efdde7.js');
require('./MessageStartIcon-8a59b0b6.js');
require('./PRIVATE_ThemedIcons/MessageConfirmationIcon.js');
require('./PRIVATE_ThemedIcons/MessageErrorIcon.js');
require('./PRIVATE_ThemedIcons/MessageInfoIcon.js');
require('./PRIVATE_ThemedIcons/MessageWarningIcon.js');
require('./MessageSummary-5d0c793a.js');
require('./MessageTimestamp-eab05143.js');
require('./MessageUtils-ff85758f.js');
require('./utils/UNSAFE_soundUtils.js');
require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js');
require('./UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js');

require('./UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js');

require('./MessagesManager-411c2e38.js');
require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useMessagesContext.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-934b844e.js');
require('./hooks/UNSAFE_usePress.js');
require('./hooks/UNSAFE_useActive.js');
require('./UNSAFE_ButtonLayout.js');
require('./ButtonLayout-648ecbd5.js');
require('./UNSAFE_Text.js');
require('./Text-4f1f698a.js');
require('./UNSAFE_Text/themes/TextStyles.css.js');

require('./UNSAFE_HiddenAccessible.js');
require('./HiddenAccessible-c4ad96e7.js');
require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js');
require('./UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js');

require('./UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js');
require('./ComponentMessageContainer-93be9be1.js');
require('./hooks/UNSAFE_useInputGroupContext.js');
require('./UNSAFE_Popup.js');
require('./utils/PRIVATE_tabbableUtils.js');
require('./_arity-353457ba.js');
require('./UNSAFE_FocusTrap.js');
require('./FocusTrap-2209a89f.js');
require('./hooks/PRIVATE_useAnimationStatus.js');
require('./UNSAFE_Popup/themes/PopupContract.css.js');
require('./UNSAFE_Popup/themes/redwood/PopupTheme.js');
require('./UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js');

require('./UNSAFE_Popup/themes/redwood/PopupVariants.css.js');

require('./UNSAFE_Divider.js');
require('./Divider-ef0eee24.js');
require('./UNSAFE_Divider/themes/DividerStyles.css.js');

require('./CompactHelpSource-c5fd0d41.js');
require('./PRIVATE_ThemedIcons/HelpIcon.js');
require('./UNSAFE_Label/themes/redwood/LabelTheme.js');
require('./UNSAFE_Label/themes/LabelStyles.css.js');

require('./UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js');

require('./UNSAFE_Label/themes/redwood/LabelVariants.css.js');
require('./UNSAFE_TextField/themes/redwood/TextFieldTheme.js');
require('./UNSAFE_TextField/themes/TextFieldStyles.css.js');



require('./UNSAFE_TextField/themes/redwood/TextFieldBaseTheme.css.js');

require('./UNSAFE_TextField/themes/redwood/TextFieldVariants.css.js');

require('./UNSAFE_PrefixSuffix.js');
require('./UNSAFE_PrefixSuffix/themes/PrefixSuffixStyles.css.js');

require('./UNSAFE_LabelValueLayout.js');

require('./UNSAFE_Radio/themes/redwood/RadioTheme.js');
require('./UNSAFE_Radio/themes/RadioStyles.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioBaseTheme.css.js');

require('./UNSAFE_Radio/themes/redwood/RadioVariants.css.js');
require('./UNSAFE_TextField/themes/redwood/FormLayoutTheme.js');
require('./UNSAFE_TextField/themes/FormLayoutStyles.css.js');
require('./UNSAFE_TextField/themes/redwood/FormLayoutBaseTheme.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldTheme.js');
require('./UNSAFE_TextField/themes/ReadonlyTextFieldStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldVariants.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js');
require('./UNSAFE_Skeleton/themes/SkeletonStyles.css.js');
require('./UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js');

require('./UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js');
require('./hooks/UNSAFE_useDebounce.js');
require('./UNSAFE_LiveRegion.js');
require('./hooks/UNSAFE_useAccessibleContext.js');
require('./utils/UNSAFE_interpolations/text.js');
require('./index-8a92ac2f.js');
require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputTheme.js');
require('./UNSAFE_TextField/themes/ReadonlyTextFieldInputStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputVariants.css.js');
require('./hooks/UNSAFE_useTextFieldInputHandlers.js');
require('./UNSAFE_TextField/themes/redwood/TextFieldInputTheme.js');
require('./UNSAFE_TextField/themes/TextFieldInputStyles.css.js');

require('./UNSAFE_TextField/themes/redwood/TextFieldInputVariants.css.js');
require('./utils/UNSAFE_interpolations/grid.js');

/**
 * A StepButton is used to request a "step up" or "step down" to a value in NumberInputText.
 * @param direction The direction of the step
 * @param isDisabled Whether the button should be disabled
 * @param onStep Handler called when the button is clicked
 * @param variant Represents different visual variants for the button
 */
function StepButton({ direction, isDisabled, onStep, children }) {
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    const labelIncrease = translations.inputNumber_increase();
    const labelDecrease = translations.inputNumber_decrease();
    const label = direction === 'increase' ? labelIncrease : labelDecrease;
    const handleClick = hooks.useCallback(() => {
        onStep?.({ direction });
    }, [onStep, direction]);
    return (jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, { value: { isTabbable: false }, children: jsxRuntime.jsx(IconButton.IconButton, { isDisabled: isDisabled, tooltip: label, onAction: handleClick, variant: "borderless", children: children }) }));
}

// TODO: Replace Steppers with Buttonset when it becomes available
function Steppers({ children }) {
    return (jsxRuntime.jsx(UNSAFE_Grid.Grid, { align: "center", gap: "1x", gridTemplateColumns: "1fr 1fr", children: children }));
}

/**
 * A hook for using stepping functionality with NumberInputText. Stepping can
 * be accomplished using the step up or down buttons or by pressing the arrow
 * up or arrow down keys. Holding down the buttons or keys produces continuous
 * step events.
 *
 * The hook returns a JSX element containing the step buttons, which can be
 * placed in the endContent of NumberInputText. It also returns
 * stepHandlerProps which should be spread onto the component to handle
 * keyboard stepping.
 *
 * @param hasSteppers Controls whether the step buttons are shown
 * @param stepperVariant Variant style of step buttons.
 * @param inputRef A ref to the input element
 * @param isStepDownDisabled Controls whether stepping down is disabled
 * @param isStepUpDisabled Controls whether stepping up is disabled
 * @param onSpin Called when a continuous step (aka spin) is requested
 * @param onSpinComplete Called when spinning is complete
 * @param onStep Called when a single step is requested
 * @returns An object containing the steppers and stepHandlerProps
 */
const useSteppers = ({ hasSteppers, stepperVariant, inputRef, isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep }) => {
    const { keyboardHandlerProps, pointerIncreaseHandlerProps, pointerDecreaseHandlerProps } = hooks_UNSAFE_useSpinning.useSpinning({ isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep });
    const handleClick = hooks.useCallback(() => {
        // When a step button is clicked, set focus to the input.
        // Don't need to call onStep because it's already called from onPointerDown.
        // Button only calls its onAction handler after the mouse is released.
        // If the button is disabled while stepping or spinning and you hit the min/max, the
        // button handler is not called for this reason. Work around this by adding onClick
        // to the outer div (when enabled, Button handles clicks and calls stopPropagation).
        inputRef.current?.focus();
    }, [inputRef]);
    // when stepperVariant is directional, both buttons are wrapped in Steppers and placed in the endContent slot
    // if it equals quantitative, only the increase button is placed in the endContent slot
    const endContent = hasSteppers ? (stepperVariant === 'directional' ? (jsxRuntime.jsxs(Steppers, { children: [jsxRuntime.jsx("div", { "aria-hidden": "true", ...pointerDecreaseHandlerProps, children: jsxRuntime.jsx(StepButton, { direction: "decrease", isDisabled: isStepDownDisabled, onStep: handleClick, children: jsxRuntime.jsx(index.SvgChevronDown, {}) }) }), jsxRuntime.jsx("div", { "aria-hidden": "true", ...pointerIncreaseHandlerProps, children: jsxRuntime.jsx(StepButton, { direction: "increase", isDisabled: isStepUpDisabled, onStep: handleClick, children: jsxRuntime.jsx(index$1.SvgChevronUp, {}) }) })] })) : (jsxRuntime.jsx("div", { "aria-hidden": "true", ...pointerIncreaseHandlerProps, children: jsxRuntime.jsx(StepButton, { direction: "increase", isDisabled: isStepUpDisabled, onStep: handleClick, children: jsxRuntime.jsx(PRIVATE_ThemedIcons_PlusIcon.PlusIcon, {}) }) }))) : undefined;
    // when stepperVariant is quantitative, the decrease button is placed in the startContent slot
    const startContent = hasSteppers && stepperVariant === 'quantitative' ? (jsxRuntime.jsx("div", { "aria-hidden": "true", ...pointerDecreaseHandlerProps, children: jsxRuntime.jsx(StepButton, { direction: "decrease", isDisabled: isStepDownDisabled, onStep: handleClick, children: jsxRuntime.jsx(PRIVATE_ThemedIcons_MinusIcon.MinusIcon, {}) }) })) : undefined;
    // stepHandlerProps will be spread onto the parent to handle
    // stepping functionality via the arrow up or down keys.
    const stepHandlerProps = hasSteppers ? keyboardHandlerProps : {};
    return { startContent, endContent, stepHandlerProps };
};

const NumberInputText = compat.forwardRef(({ 'aria-describedby': ariaDescribedBy, 'aria-valuemax': ariaValueMax, 'aria-valuemin': ariaValueMin, 'aria-valuenow': ariaValueNow, 'aria-valuetext': ariaValueText, assistiveText, autoComplete = 'off', autoFocus = false, helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isReadonly: propIsReadonly, isRequired = false, isRequiredShown, isStepDownDisabled: propIsStepDownDisabled, isStepUpDisabled: propIsStepUpDisabled, hasSteppers = false, stepperVariant = 'directional', label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, messages, placeholder, prefix, suffix, textAlign: propTextAlign, userAssistanceDensity: propUserAssistanceDensity, value, variant = 'default', virtualKeyboard, onInput, onCommit, onSpin, onSpinComplete, onStep }, ref) => {
    const { currentCommitValue, dispatch } = hooks_UNSAFE_useCurrentValueReducer.useCurrentValueReducer({ value });
    const onInputAndDispatch = hooks.useCallback((detail) => {
        dispatch({ type: 'input', payload: detail.value });
        onInput?.(detail);
    }, [onInput, dispatch]);
    const onCommitAndDispatch = hooks.useCallback((detail) => {
        dispatch({ type: 'commit', payload: detail.value });
        onCommit?.(detail);
    }, [onCommit, dispatch]);
    const { isDisabled: isFormDisabled, isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, textAlign: formTextAlign, userAssistanceDensity: formUserAssistanceDensity } = hooks_UNSAFE_useFormContext.useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled ?? isFormDisabled;
    const isReadonly = propIsReadonly ?? isFormReadonly;
    const labelEdge = propLabelEdge ?? formLabelEdge;
    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;
    const textAlign = propTextAlign ?? formTextAlign;
    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;
    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = hooks_UNSAFE_useFocusableTextField.useFocusableTextField({ isDisabled, isReadonly, ref });
    const { hoverProps } = hooks_UNSAFE_useHover.useHover({ isDisabled: isReadonly || isDisabled || false });
    const { baseId, formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } = hooks_UNSAFE_useTextField.useTextField({
        ariaDescribedBy,
        helpSourceLink,
        helpSourceText,
        isDisabled,
        isFocused,
        isReadonly,
        isRequiredShown,
        labelEdge,
        messages,
        styleVariant: variant,
        userAssistanceDensity,
        value
    });
    // Disable the steppers if the number input is disabled.
    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;
    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;
    // stepHandlerProps contains keyup and keydown handlers
    // for stepping using the arrow up and down keys.
    const { startContent, endContent, stepHandlerProps } = useSteppers({
        hasSteppers,
        stepperVariant,
        inputRef: enabledElementRef,
        isStepDownDisabled,
        isStepUpDisabled,
        onSpin,
        onSpinComplete,
        onStep
    });
    const { renderedPrefix, renderedSuffix, text: valuePrefixSuffix, ariaLabelledBy } = hooks_UNSAFE_usePrefixSuffix.usePrefixSuffix({
        baseId,
        hasEndContent: endContent !== undefined,
        hasInsideLabel: label !== undefined && labelEdge === 'inside',
        hasStartContent: startContent !== undefined,
        hasValue: formFieldContext.hasValue,
        isDisabled,
        isFocused,
        labelId: labelProps.id,
        prefix,
        suffix,
        value
    });
    const labelComp = labelEdge !== 'none' ? jsxRuntime.jsx(Label.Label, { ...labelProps, children: label }) : undefined;
    const fieldLabelProps = {
        label: labelEdge !== 'none' ? labelComp : undefined,
        labelEdge: labelEdge !== 'none' ? labelEdge : undefined,
        labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined
    };
    const ariaLabel = labelEdge === 'none' ? label : undefined;
    const isInlineDensity = userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';
    const inlineUserAssistance = isInlineDensity ? (isDisabled || isReadonly ? (
    // save space for user assistance if density is 'efficient', even though we don't
    // render user assistance for disabled or readonly fields
    userAssistanceDensity !== 'efficient' ? undefined : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, { userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, { assistiveText: assistiveText, fieldLabel: label, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, messages: messages, isRequiredShown: isRequiredShown, userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : undefined;
    const anchorRef = hooks.useRef(null);
    const compactUserAssistance = userAssistanceDensity === 'compact' ? (jsxRuntime.jsx(UNSAFE_UserAssistance.CompactUserAssistance, { anchorRef: anchorRef, messages: messages, assistiveText: assistiveText, ...userAssistanceProps })) : undefined;
    if (isReadonly) {
        return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, { value: formFieldContext, children: jsxRuntime.jsx(UNSAFE_TextField.ReadonlyTextField, { role: "presentation", compactUserAssistance: compactUserAssistance, inlineUserAssistance: inlineUserAssistance, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, ref: anchorRef, ...fieldLabelProps, children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { "aria-describedby": inputProps['aria-describedby'], "aria-label": ariaLabel, "aria-labelledby": labelProps.id, as: "div", autoFocus: autoFocus, elementRef: readonlyElementRef, textAlign: textAlign, value: valuePrefixSuffix, hasEmptyLabel: label === '' && labelEdge === 'none', hasInsideLabel: label !== undefined && labelEdge === 'inside' }) }) }));
    }
    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.
    const valueText = ariaValueNow === undefined
        ? ariaValueText
        : ariaValueNow.toString() !== ariaValueText
            ? ariaValueText
            : undefined;
    const mainContent = (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [renderedPrefix, jsxRuntime.jsx(TextFieldInput.TextFieldInput, { "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, "aria-valuemax": ariaValueMax, "aria-valuemin": ariaValueMin, "aria-valuenow": ariaValueNow, "aria-valuetext": valueText, autoComplete: autoComplete, autoFocus: autoFocus, currentCommitValue: currentCommitValue, hasEmptyLabel: label === '' && labelEdge === 'none', hasEndContent: endContent !== undefined, hasInsideLabel: labelComp !== undefined && labelEdge === 'inside', hasPrefix: renderedPrefix !== undefined, hasStartContent: startContent !== undefined, hasSuffix: renderedSuffix !== undefined, inputRef: enabledElementRef, isRequired: isRequired, placeholder: placeholder, role: hasSteppers ? 'spinbutton' : undefined, textAlign: textAlign, type: isMobile() ? virtualKeyboard : undefined, value: isDisabled ? valuePrefixSuffix : value, onCommit: onCommitAndDispatch, onInput: onInputAndDispatch, ...inputProps, ...stepHandlerProps }), renderedSuffix] }));
    return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, { value: formFieldContext, children: jsxRuntime.jsx(UNSAFE_TextField.TextField, { startContent: startContent, endContent: endContent, compactUserAssistance: compactUserAssistance, inlineUserAssistance: inlineUserAssistance, mainContent: mainContent, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, mainFieldRef: anchorRef, hasZeroStartMargin: hasSteppers && stepperVariant === 'quantitative', ...textFieldProps, ...fieldLabelProps, ...hoverProps }) }));
});
/**
 * Helper function to determine whether the current device is a mobile device
 * @returns true if running on a mobile device, false otherwise
 */
function isMobile() {
    const deviceType = clientHints.getClientHints().deviceType;
    return deviceType === 'phone' || deviceType === 'tablet';
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.NumberInputText = NumberInputText;
//# sourceMappingURL=UNSAFE_NumberInputText.js.map
