/* @oracle/oraclejet-preact: 15.1.2 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks_UNSAFE_useActionable = require('./hooks/UNSAFE_useActionable.js');
var hooks = require('preact/hooks');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var UNSAFE_Chip_themes_ChipStyles_css = require('./UNSAFE_Chip/themes/ChipStyles.css.js');
var hooks_UNSAFE_useInteractionStyle = require('./hooks/UNSAFE_useInteractionStyle.js');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');

function Chip({ isSelected, isDisabled, 'aria-label': accessibleLabel, children, onToggle }) {
    const handleAction = hooks.useCallback(() => {
        onToggle?.({ previousValue: isSelected, value: !isSelected });
    }, [isSelected, onToggle]);
    const { actionableProps } = hooks_UNSAFE_useActionable.useActionable(handleAction);
    const { interactionProps, applyActiveStyle, applyHoverStyle, applyPseudoHoverStyle } = hooks_UNSAFE_useInteractionStyle.useInteractionStyle();
    const mergedProps = utils_UNSAFE_mergeProps.mergeProps(actionableProps, interactionProps);
    const classes = UNSAFE_Chip_themes_ChipStyles_css.multiVariantStyles({
        disabled: isDisabled ? 'isDisabled' : 'notDisabled',
        hover: applyHoverStyle && !isDisabled && !isSelected ? 'isHover' : 'notHover',
        pseudoHover: applyPseudoHoverStyle && !isDisabled && !isSelected ? 'isPseudoHover' : 'notPseudoHover',
        active: isSelected || applyActiveStyle ? 'isActive' : 'notActive'
    });
    const { isTabbable } = hooks_UNSAFE_useTabbableMode.useTabbableMode();
    return isDisabled ? (jsxRuntime.jsx("div", { class: classes, children: children })) : (jsxRuntime.jsx("div", { ...mergedProps, class: classes, tabIndex: isTabbable ? 0 : -1, "aria-label": accessibleLabel, role: "switch", "aria-checked": isSelected ? 'true' : 'false', children: children }));
}

exports.Chip = Chip;
//# sourceMappingURL=Chip-61eaa3fe.js.map
