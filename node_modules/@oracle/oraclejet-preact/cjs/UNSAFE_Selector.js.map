{"version":3,"file":"UNSAFE_Selector.js","sources":["../../src/UNSAFE_Selector/Selector.tsx","../../src/UNSAFE_Selector/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Keys, containsKey } from '../utils/UNSAFE_keys';\nimport { useSelection } from '../hooks/PRIVATE_useSelection';\nimport { SelectionDetail } from '../UNSAFE_Collection';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { CheckboxOffIcon } from '../PRIVATE_ThemedIcons/CheckboxOffIcon';\nimport { CheckboxOnIcon } from '../PRIVATE_ThemedIcons/CheckboxOnIcon';\nimport { CheckboxMixedIcon } from '../PRIVATE_ThemedIcons/CheckboxMixedIcon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { multiVariantStyles, styles } from './themes/SelectorStyles.css';\nimport { RadioStyles } from '../UNSAFE_Radio/themes/RadioStyles.css';\nimport { RadioIconVariantOptions } from '../UNSAFE_Radio/themes/RadioIconStyles.css';\nimport { RadioIconRedwoodTheme } from '../UNSAFE_Radio/themes/redwood/RadioIconTheme';\n/**\n * Props for the Selector Component\n */\nexport type Props<K> = {\n  /**\n   * The key associated with the Selector.\n   */\n  rowKey: K;\n  /**\n   * The selected keys.\n   */\n  selectedKeys: Keys<K>;\n  /**\n   * aria-label for this selector\n   */\n  'aria-label'?: string;\n  /**\n   * Determine whether to show the visual partial icon when selector is checked. If the\n   * selector is checked and isPartial is set to true, the selector would show a partially\n   * checked icon.\n   */\n  isPartial?: boolean;\n  /**\n   * Specifies the selection mode. For selection mode 'all', please refer to SelectorAll component.\n   */\n  selectionMode?: 'multiple' | 'single';\n  /**\n   * Callback function to invoke when the selected keys has changed when\n   * the checkbox is toggled.\n   */\n  onChange?: (detail: SelectionDetail<K>) => void;\n};\n\n// internal component to use in place of the real Checkbox\nexport function Checkbox(props: {\n  checked: boolean;\n  'aria-label'?: string;\n  isPartial?: boolean;\n  onClick?: (event: MouseEvent) => void;\n}) {\n  const { isTabbable } = useTabbableMode();\n\n  const { interactionProps, applyActiveStyle } = useInteractionStyle();\n\n  // because Checkbox components reference Radio scoped vars, we need to bring in the Radio base theme\n  // to pick up the scoped var definitions.\n  const { classes: radioClassess } = useComponentTheme<RadioIconVariantOptions, RadioStyles>(\n    RadioIconRedwoodTheme,\n    { iconSize: '4xUnits' }\n  );\n  const variantClasses = multiVariantStyles({\n    checked: props.checked ? (props.isPartial ? 'isPartiallyChecked' : 'isChecked') : 'notChecked',\n    active: applyActiveStyle ? 'isActive' : 'notActive'\n  });\n  const classes = classNames([radioClassess, styles.checkbox, variantClasses]);\n\n  const ariaChecked = props.checked ? (props.isPartial ? 'mixed' : 'true') : 'false';\n\n  return (\n    <div\n      {...interactionProps}\n      class={classes}\n      tabIndex={isTabbable ? 0 : -1}\n      role=\"checkbox\"\n      aria-label={props['aria-label']}\n      aria-checked={ariaChecked}\n      onClick={props.onClick}>\n      {props.checked ? (\n        props.isPartial ? (\n          <CheckboxMixedIcon />\n        ) : (\n          <CheckboxOnIcon />\n        )\n      ) : (\n        <CheckboxOffIcon />\n      )}\n    </div>\n  );\n}\n\n// click event handler used by Selector\nconst handleClick = (event: Event) => {\n  // we don't want container component like ListView to process it\n  event.stopPropagation();\n};\n\n// update selectionProps onClick event to call event.stopPropagation()\nconst updateSelectionProps = (selectionProps: any) => {\n  // click event handler return from useSelection\n  const onClick = selectionProps.onClick;\n  if (onClick) {\n    // click event handler used by Selector\n    selectionProps.onClick = (event: MouseEvent) => {\n      onClick(event);\n      handleClick(event);\n    };\n    return selectionProps;\n  }\n  return { onClick: handleClick };\n};\n\n/**\n * The Selector component renders checkboxes in collections to support selection.\n */\nexport function Selector<K>({\n  'aria-label': ariaLabel,\n  rowKey,\n  selectedKeys,\n  isPartial,\n  selectionMode = 'multiple',\n  onChange\n}: Props<K>) {\n  const { selectionProps } = useSelection(\n    () => rowKey,\n    selectedKeys,\n    selectionMode,\n    false,\n    'toggle',\n    false,\n    onChange\n  );\n\n  // TODO: replace internal with Preact checkbox component once it is available\n  return (\n    <div class={styles.container} {...updateSelectionProps(selectionProps)}>\n      <div class={styles.base}>\n        <Flex align=\"center\" justify=\"center\" width=\"11x\" height=\"11x\">\n          <Checkbox\n            checked={containsKey(selectedKeys, rowKey)}\n            aria-label={ariaLabel}\n            isPartial={isPartial}\n          />\n        </Flex>\n      </div>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { Selector, Checkbox } from './Selector';\n"],"names":["useTabbableMode","useInteractionStyle","useComponentTheme","RadioIconRedwoodTheme","multiVariantStyles","classNames","styles","_jsx","CheckboxMixedIcon","CheckboxOnIcon","CheckboxOffIcon","useSelection","Flex","containsKey"],"mappings":"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"}