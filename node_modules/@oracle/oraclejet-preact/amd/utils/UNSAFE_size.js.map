{"version":3,"file":"UNSAFE_size.js","sources":["../../../src/utils/UNSAFE_size/size.ts"],"sourcesContent":["import { xUnits } from '../../UNSAFE_Theme';\n// The Size type is used for gap and dimensions (e.g., width/height) and padding and similar\n// properties. Using the size function below we transform the property of this type into\n// something that is usable in a css style property.\n// `${number}x` gives an error for '25px' which is what we want.\nexport type Size = 0 | `--${string}` | `${number}%` | `${number}x` | `calc(${string})`;\n\nconst isStringZero = (v: string) => parseFloat(v) === 0;\nconst isPercent = (v: string) => v.endsWith('%');\nconst isCalcExpression = (v: string) => v.startsWith('calc(') && v.endsWith(')');\nconst isCssVar = (v: string) => v.startsWith('--');\nconst isXUnit = (v: string) => v.endsWith('x');\n\n/**\n * This transforms a number + 'x' to a css calc.\n * E.g., if v is '1.2x' this method returns `calc(1.2 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x))`\n * @param {string } v - a value to transform\n * @returns {string | 0}\n */\nconst xToCSS = (v: string) => {\n  // parse out the 'x'\n  const nStr = v.slice(0, v.length - 1);\n  // nStr should now only contain characters that could be part of a floating number.\n  // I don't want a string with random characters in it to be ignored as it would with\n  // parseFloat, so I'm using Number here. parseFloat('1.2p') -> 1.2. whereas\n  // Number('1.2p') returns NaN.\n  const num = Number(nStr);\n  if (isNaN(num)) return 0;\n\n  // Note: 1x is equal to about 4px\n  return xUnits(num);\n};\n\n/**\n * Given a value that is of type Size, transform the value into\n * something that is usable in a css style property.\n * @param {string | 0 } v - a value to transform\n * @returns {string | 0}\n */\nexport const sizeToCSS = (v: Size) => {\n  return v === 0 || isStringZero(v) // We want 0, '0%' and '0x' to return 0\n    ? 0\n    : isCalcExpression(v) || isPercent(v)\n    ? v\n    : isCssVar(v)\n    ? `var(${v})`\n    : isXUnit(v)\n    ? xToCSS(v)\n    : 0; // return 0 for any invalid v.\n};\n"],"names":["v","parseFloat","isStringZero","startsWith","endsWith","isCalcExpression","isPercent","isCssVar","isXUnit","nStr","slice","length","num","Number","isNaN","xUnits","xToCSS"],"mappings":"0IAuC0BA,GACX,IAANA,GAjCY,CAACA,GAAgC,IAAlBC,WAAWD,GAiC3BE,CAAaF,GAC3B,EAhCmB,CAACA,GAAcA,EAAEG,WAAW,UAAYH,EAAEI,SAAS,KAiCtEC,CAAiBL,IAlCL,CAACA,GAAcA,EAAEI,SAAS,KAkCfE,CAAUN,GACjCA,EAjCW,CAACA,GAAcA,EAAEG,WAAW,MAkCvCI,CAASP,GACT,OAAOA,KAlCG,CAACA,GAAcA,EAAEI,SAAS,KAmCpCI,CAAQR,GA3BC,CAACA,IAEd,MAAMS,EAAOT,EAAEU,MAAM,EAAGV,EAAEW,OAAS,GAK7BC,EAAMC,OAAOJ,GACnB,OAAIK,MAAMF,GAAa,EAGhBG,EAAAA,OAAOH,EAAI,EAiBdI,CAAOhB,GACP"}