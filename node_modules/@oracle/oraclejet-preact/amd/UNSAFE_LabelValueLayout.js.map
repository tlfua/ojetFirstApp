{"version":3,"file":"UNSAFE_LabelValueLayout.js","sources":["../../src/UNSAFE_LabelValueLayout/LabelValueLayout.tsx"],"sourcesContent":["import { classNames } from '../utils/UNSAFE_classNames';\nimport { ComponentChildren, JSX } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { sizeToCSS, Size } from '../utils/UNSAFE_size';\nimport { labelSlotStyles, labelInnerStyles, valueSlotStyles } from './LabelValueLayoutStyles.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldTheme';\nimport { RadioRedwoodTheme } from '../UNSAFE_Radio/themes/redwood/RadioTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/FormLayoutTheme';\n\ntype Props = {\n  /**\n   * Label content of the layout\n   */\n  label?: ComponentChildren;\n  /**\n   * Defines how the label is going to be positioned\n   */\n  labelEdge?: 'start' | 'top';\n  /**\n   * Defines the label width for labelEdge 'start' ('top' is always 100%)\n   */\n  labelStartWidth?: Size;\n  /**\n   * Value content of the layout\n   */\n  children: ComponentChildren;\n\n  parentComponentVariant?: 'textField' | 'radioGroup';\n\n  hasTopUserAssistance?: boolean;\n};\n\nexport const LabelValueLayout = ({\n  label,\n  labelEdge,\n  children,\n  labelStartWidth = '33%',\n  parentComponentVariant = 'textField',\n  hasTopUserAssistance = false\n}: Props) => {\n  const { baseTheme: textFieldTheme } = useComponentTheme(TextFieldRedwoodTheme);\n  const { baseTheme: radioTheme } = useComponentTheme(RadioRedwoodTheme);\n  const { baseTheme: labelTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n\n  const width = sizeToCSS(labelStartWidth);\n  const valueWidth = `calc(100% - ${width})`;\n  const labelStyles: JSX.CSSProperties =\n    labelEdge === 'start' ? { flexBasis: width, width: width, maxWidth: width } : {};\n  const valueStyles: JSX.CSSProperties =\n    labelEdge === 'start' ? { flexBasis: valueWidth, width: valueWidth, maxWidth: valueWidth } : {};\n\n  const { isFormLayout, isReadonly: isFormReadonly, labelWrapping } = useFormContext();\n  const { isReadonly } = useFormFieldContext();\n  const isPureReadonly = (isFormLayout && isFormReadonly) || (!isFormLayout && isReadonly);\n  const labelStyleClasses = classNames([\n    formLayoutTheme,\n    labelSlotStyles.base,\n    labelEdge === 'start' && labelSlotStyles.start,\n    // labelEdge === 'start' && isPureReadonly && labelSlotStyles.startReadonly,\n    // labelEdge === 'start' && !isPureReadonly && labelSlotStyles.startNotPureReadonly,\n    labelEdge === 'top' && labelSlotStyles.top,\n    labelEdge === 'top' && isPureReadonly && labelSlotStyles.topPureReadonly\n  ]);\n  const labelInnerClasses = classNames([\n    parentComponentVariant === 'textField' && textFieldTheme,\n    parentComponentVariant === 'radioGroup' && radioTheme,\n    parentComponentVariant === 'radioGroup' && labelTheme,\n\n    formLayoutTheme,\n    labelInnerStyles.base,\n    labelEdge === 'start' && labelInnerStyles.start,\n\n    parentComponentVariant === 'textField' &&\n      labelEdge === 'start' &&\n      !isPureReadonly &&\n      labelInnerStyles.startNotPureReadonly,\n\n    parentComponentVariant === 'radioGroup' &&\n      labelEdge === 'start' &&\n      !hasTopUserAssistance &&\n      labelInnerStyles.startWithNoTopRadioGroupUA,\n\n    labelWrapping === 'truncate' && labelInnerStyles.noWrap\n  ]);\n\n  return (\n    <Flex wrap=\"wrap\" align=\"start\">\n      <div class={labelStyleClasses} style={labelStyles}>\n        <div class={labelInnerClasses}>{label}</div>\n      </div>\n      <div class={valueSlotStyles} style={valueStyles}>\n        {children}\n      </div>\n    </Flex>\n  );\n};\n"],"names":["label","labelEdge","children","labelStartWidth","parentComponentVariant","hasTopUserAssistance","baseTheme","textFieldTheme","useComponentTheme","TextFieldRedwoodTheme","radioTheme","RadioRedwoodTheme","labelTheme","LabelRedwoodTheme","formLayoutTheme","FormLayoutRedwoodTheme","width","sizeToCSS","valueWidth","labelStyles","flexBasis","maxWidth","valueStyles","isFormLayout","isReadonly","isFormReadonly","labelWrapping","useFormContext","useFormFieldContext","isPureReadonly","labelStyleClasses","classNames","labelSlotStyles","labelInnerClasses","labelInnerStyles","_jsxs","Flex","wrap","align","_jsx","class","style"],"mappings":"wtFAoCgC,EAC9BA,QACAC,YACAC,WACAC,kBAAkB,MAClBC,yBAAyB,YACzBC,wBAAuB,MAEvB,MAAQC,UAAWC,GAAmBC,EAAiBA,kBAACC,EAAqBA,wBACrEH,UAAWI,GAAeF,EAAiBA,kBAACG,EAAiBA,oBAC7DL,UAAWM,GAAeJ,EAAiBA,kBAACK,EAAiBA,oBAC7DP,UAAWQ,GAAoBN,EAAiBA,kBAACO,EAAsBA,wBAEzEC,EAAQC,YAAUd,GAClBe,EAAa,eAAeF,KAC5BG,EACU,UAAdlB,EAAwB,CAAEmB,UAAWJ,EAAOA,MAAOA,EAAOK,SAAUL,GAAU,CAAA,EAC1EM,EACU,UAAdrB,EAAwB,CAAEmB,UAAWF,EAAYF,MAAOE,EAAYG,SAAUH,GAAe,CAAA,GAEzFK,aAAEA,EAAcC,WAAYC,EAAcC,cAAEA,GAAkBC,EAAAA,kBAC9DH,WAAEA,GAAeI,EAAAA,sBACjBC,EAAkBN,GAAgBE,IAAqBF,GAAgBC,EACvEM,EAAoBC,EAAAA,WAAW,CACnCjB,EACAkB,GACc,UAAd/B,GAAyB+B,GAGX,QAAd/B,GAAuB+B,GACT,QAAd/B,GAAuB4B,GAAkBG,KAErCC,EAAoBF,EAAAA,WAAW,CACR,cAA3B3B,GAA0CG,EACf,eAA3BH,GAA2CM,EAChB,eAA3BN,GAA2CQ,EAE3CE,EACAoB,GACc,UAAdjC,GAAyBiC,GAEE,cAA3B9B,GACgB,UAAdH,IACC4B,GACDK,GAEyB,eAA3B9B,GACgB,UAAdH,IACCI,GACD6B,GAEgB,aAAlBR,GAAgCQ,KAGlC,OACEC,EAAAA,KAACC,EAAAA,MAAKC,KAAK,OAAOC,MAAM,QAAOpC,SAAA,CAC7BqC,EAAAA,WAAKC,MAAOV,EAAmBW,MAAOtB,EAAWjB,SAC/CqC,aAAKC,MAAOP,EAAoB/B,SAAAF,MAElCuC,EAAAA,WAAKC,wDAAwBC,MAAOnB,EAAWpB,SAC5CA,MAGL"}