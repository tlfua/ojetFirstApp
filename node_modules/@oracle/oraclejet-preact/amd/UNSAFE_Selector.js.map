{"version":3,"file":"UNSAFE_Selector.js","sources":["../../src/UNSAFE_Selector/Selector.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Keys, containsKey } from '../utils/UNSAFE_keys';\nimport { useSelection } from '../hooks/PRIVATE_useSelection';\nimport { SelectionDetail } from '../UNSAFE_Collection';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { CheckboxOffIcon } from '../PRIVATE_ThemedIcons/CheckboxOffIcon';\nimport { CheckboxOnIcon } from '../PRIVATE_ThemedIcons/CheckboxOnIcon';\nimport { CheckboxMixedIcon } from '../PRIVATE_ThemedIcons/CheckboxMixedIcon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { multiVariantStyles, styles } from './themes/SelectorStyles.css';\nimport { RadioStyles } from '../UNSAFE_Radio/themes/RadioStyles.css';\nimport { RadioIconVariantOptions } from '../UNSAFE_Radio/themes/RadioIconStyles.css';\nimport { RadioIconRedwoodTheme } from '../UNSAFE_Radio/themes/redwood/RadioIconTheme';\n/**\n * Props for the Selector Component\n */\nexport type Props<K> = {\n  /**\n   * The key associated with the Selector.\n   */\n  rowKey: K;\n  /**\n   * The selected keys.\n   */\n  selectedKeys: Keys<K>;\n  /**\n   * aria-label for this selector\n   */\n  'aria-label'?: string;\n  /**\n   * Determine whether to show the visual partial icon when selector is checked. If the\n   * selector is checked and isPartial is set to true, the selector would show a partially\n   * checked icon.\n   */\n  isPartial?: boolean;\n  /**\n   * Specifies the selection mode. For selection mode 'all', please refer to SelectorAll component.\n   */\n  selectionMode?: 'multiple' | 'single';\n  /**\n   * Callback function to invoke when the selected keys has changed when\n   * the checkbox is toggled.\n   */\n  onChange?: (detail: SelectionDetail<K>) => void;\n};\n\n// internal component to use in place of the real Checkbox\nexport function Checkbox(props: {\n  checked: boolean;\n  'aria-label'?: string;\n  isPartial?: boolean;\n  onClick?: (event: MouseEvent) => void;\n}) {\n  const { isTabbable } = useTabbableMode();\n\n  const { interactionProps, applyActiveStyle } = useInteractionStyle();\n\n  // because Checkbox components reference Radio scoped vars, we need to bring in the Radio base theme\n  // to pick up the scoped var definitions.\n  const { classes: radioClassess } = useComponentTheme<RadioIconVariantOptions, RadioStyles>(\n    RadioIconRedwoodTheme,\n    { iconSize: '4xUnits' }\n  );\n  const variantClasses = multiVariantStyles({\n    checked: props.checked ? (props.isPartial ? 'isPartiallyChecked' : 'isChecked') : 'notChecked',\n    active: applyActiveStyle ? 'isActive' : 'notActive'\n  });\n  const classes = classNames([radioClassess, styles.checkbox, variantClasses]);\n\n  const ariaChecked = props.checked ? (props.isPartial ? 'mixed' : 'true') : 'false';\n\n  return (\n    <div\n      {...interactionProps}\n      class={classes}\n      tabIndex={isTabbable ? 0 : -1}\n      role=\"checkbox\"\n      aria-label={props['aria-label']}\n      aria-checked={ariaChecked}\n      onClick={props.onClick}>\n      {props.checked ? (\n        props.isPartial ? (\n          <CheckboxMixedIcon />\n        ) : (\n          <CheckboxOnIcon />\n        )\n      ) : (\n        <CheckboxOffIcon />\n      )}\n    </div>\n  );\n}\n\n// click event handler used by Selector\nconst handleClick = (event: Event) => {\n  // we don't want container component like ListView to process it\n  event.stopPropagation();\n};\n\n// update selectionProps onClick event to call event.stopPropagation()\nconst updateSelectionProps = (selectionProps: any) => {\n  // click event handler return from useSelection\n  const onClick = selectionProps.onClick;\n  if (onClick) {\n    // click event handler used by Selector\n    selectionProps.onClick = (event: MouseEvent) => {\n      onClick(event);\n      handleClick(event);\n    };\n    return selectionProps;\n  }\n  return { onClick: handleClick };\n};\n\n/**\n * The Selector component renders checkboxes in collections to support selection.\n */\nexport function Selector<K>({\n  'aria-label': ariaLabel,\n  rowKey,\n  selectedKeys,\n  isPartial,\n  selectionMode = 'multiple',\n  onChange\n}: Props<K>) {\n  const { selectionProps } = useSelection(\n    () => rowKey,\n    selectedKeys,\n    selectionMode,\n    false,\n    'toggle',\n    false,\n    onChange\n  );\n\n  // TODO: replace internal with Preact checkbox component once it is available\n  return (\n    <div class={styles.container} {...updateSelectionProps(selectionProps)}>\n      <div class={styles.base}>\n        <Flex align=\"center\" justify=\"center\" width=\"11x\" height=\"11x\">\n          <Checkbox\n            checked={containsKey(selectedKeys, rowKey)}\n            aria-label={ariaLabel}\n            isPartial={isPartial}\n          />\n        </Flex>\n      </div>\n    </div>\n  );\n}\n"],"names":["Checkbox","props","isTabbable","useTabbableMode","interactionProps","applyActiveStyle","useInteractionStyle","classes","radioClassess","useComponentTheme","RadioIconRedwoodTheme","iconSize","variantClasses","multiVariantStyles","checked","isPartial","active","classNames","styles","checkbox","ariaChecked","_jsx","jsx","class","tabIndex","role","onClick","children","CheckboxMixedIcon","CheckboxOnIcon","CheckboxOffIcon","handleClick","event","stopPropagation","updateSelectionProps","selectionProps","ariaLabel","rowKey","selectedKeys","selectionMode","onChange","useSelection","container","base","Flex","align","justify","width","height","containsKey"],"mappings":"84GAwDM,SAAUA,GAASC,GAMvB,MAAMC,WAAEA,GAAeC,EAAAA,mBAEjBC,iBAAEA,EAAgBC,iBAAEA,GAAqBC,EAAmBA,uBAI1DC,QAASC,GAAkBC,EAAAA,kBACjCC,EAAAA,sBACA,CAAEC,SAAU,YAERC,EAAiBC,EAAAA,mBAAmB,CACxCC,QAASb,EAAMa,QAAWb,EAAMc,UAAY,qBAAuB,YAAe,aAClFC,OAAQX,EAAmB,WAAa,cAEpCE,EAAUU,EAAAA,WAAW,CAACT,EAAeU,EAAAA,OAAOC,SAAUP,IAEtDQ,EAAcnB,EAAMa,QAAWb,EAAMc,UAAY,QAAU,OAAU,QAE3E,OACEM,EAAAC,IAAA,MAAA,IACMlB,EACJmB,MAAOhB,EACPiB,SAAUtB,EAAa,GAAK,EAC5BuB,KAAK,wBACOxB,EAAM,6BACJmB,EACdM,QAASzB,EAAMyB,QACdC,SAAA1B,EAAMa,QACLb,EAAMc,UACJM,EAACC,IAAAM,oBAEDP,MAACQ,EAAAA,WAAiB,CAAA,GAGpBR,MAACS,cAAe,CAAA,IAIxB,CAGA,MAAMC,GAAeC,IAEnBA,EAAMC,iBAAiB,EAInBC,GAAwBC,IAE5B,MAAMT,EAAUS,EAAeT,QAC/B,OAAIA,GAEFS,EAAeT,QAAWM,IACxBN,EAAQM,GACRD,GAAYC,EAAM,EAEbG,GAEF,CAAET,QAASK,GAAa,qCAO/B,aAAcK,EAASC,OACvBA,EAAMC,aACNA,EAAYvB,UACZA,EAASwB,cACTA,EAAgB,WAAUC,SAC1BA,IAEA,MAAML,eAAEA,GAAmBM,EAAYA,cACrC,IAAMJ,GACNC,EACAC,GACA,EACA,UACA,EACAC,GAIF,OACEnB,EAAAC,IAAA,MAAA,CAAKC,MAAOL,EAAAA,OAAOwB,aAAeR,GAAqBC,GACrDR,SAAAN,EAAAC,IAAA,MAAA,CAAKC,MAAOL,EAAAA,OAAOyB,KAAIhB,SACrBN,MAACuB,EAAAA,KAAK,CAAAC,MAAM,SAASC,QAAQ,SAASC,MAAM,MAAMC,OAAO,MACvDrB,SAAAN,EAAAC,IAACtB,GAAQ,CACPc,QAASmC,EAAAA,YAAYX,EAAcD,GACvB,aAAAD,EACZrB,UAAWA,SAMvB"}