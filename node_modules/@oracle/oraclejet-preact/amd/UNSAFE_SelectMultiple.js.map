{"version":3,"file":"UNSAFE_SelectMultiple.js","sources":["../../src/UNSAFE_SelectMultiple/MobileDropdownFooter.tsx","../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_RedwoodIcons/NavLeft/NavLeft.tsx","../../src/UNSAFE_RedwoodIcons/CancelS/CancelS.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleField.tsx","../../src/UNSAFE_SelectMultiple/TextTag.tsx","../../src/UNSAFE_SelectMultiple/TextTagList.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleFieldInput.tsx","../../src/UNSAFE_SelectMultiple/SelectMultipleMobileFieldInput.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useMobileDropdown.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { mobileDropdownFooterStyles } from './themes/MobileDropdownFooterStyles.css';\n\ntype ButtonProps = ComponentProps<typeof Button>;\ntype Props = {\n  onApply?: ButtonProps['onAction'];\n};\n\nexport function MobileDropdownFooter({ onApply }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <div class={mobileDropdownFooterStyles.base}>\n      <Button\n        display=\"label\"\n        edge=\"bottom\"\n        label={translations.selectMultiple_apply()}\n        size=\"sm\"\n        variant=\"callToAction\"\n        onAction={onApply}\n      />\n    </div>\n  );\n}\n","import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'aria-label' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  'aria-label': ariaLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = ariaLabel ? `${ariaLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip aria-label={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgNavLeft = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <g fill=\"none\">\n      <path\n        d=\"m9.414 12 7.293-7.293-1.414-1.414L6.586 12l8.707 8.707 1.414-1.414L9.414 12z\"\n        fill=\"currentcolor\"\n      />\n    </g>\n  </Icon>\n);\nexport { SvgNavLeft as NavLeft };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n// DO NOT MODIFY THIS FILE MANUALLY!\n// This file is automatically generated based on the corresponding SVG image in\n// the packages/oraclejet-preact/resources/icons folder.\nimport { ComponentProps } from 'preact';\nimport { Icon } from '../../UNSAFE_Icon';\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\nconst SvgCancelS = (props: Props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm3.498 5L12 10.498 8.502 7 7 8.502 10.498 12 7 15.498 8.502 17 12 13.502 15.498 17 17 15.498 13.502 12 17 8.502z\"\n      fill=\"currentcolor\"\n      fillRule=\"evenodd\"\n    />\n  </Icon>\n);\nexport { SvgCancelS as CancelS };\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { DropdownArrow } from '../PRIVATE_SelectCommon';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextField } from '../UNSAFE_TextField';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { NavLeft } from '../UNSAFE_RedwoodIcons/NavLeft';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { CancelS } from '../UNSAFE_RedwoodIcons/CancelS';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype PassThroughTextFieldProps = Pick<\n  TextFieldProps,\n  | 'compactUserAssistance'\n  | 'contentVariant'\n  | 'id'\n  | 'inlineUserAssistance'\n  | 'label'\n  | 'labelEdge'\n  | 'labelStartWidth'\n  | 'mainFieldRef'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseDown'\n  | 'statusVariant'\n  | 'styleVariant'\n>;\n\ntype DropdownArrowProps = ComponentProps<typeof DropdownArrow>;\ntype IconButtonProps = ComponentProps<typeof IconButton>;\ntype SelectedValuesCountProps = ComponentProps<typeof SelectedValuesCount>;\n\ntype Props = PassThroughTextFieldProps & {\n  children?: ComponentChildren;\n  fieldLabel?: string;\n  hasInsideLabel?: boolean;\n  isBackButtonShown?: boolean;\n  isClearButtonShown?: boolean;\n  isDropdownArrowShown?: boolean;\n  isDropdownSelectedOnlyView?: boolean;\n  isSelectedValuesCountShown?: boolean;\n  selectedValuesCount?: number;\n  onBackButtonClick?: IconButtonProps['onAction'];\n  onClearButtonClick?: IconButtonProps['onAction'];\n  onDropdownArrowClick?: DropdownArrowProps['onClick'];\n  onSelectedValuesCountKeyDown?: SelectedValuesCountProps['onKeyDown'];\n  onSelectedValuesCountKeyUp?: SelectedValuesCountProps['onKeyUp'];\n  onSelectedValuesCountMouseDown?: SelectedValuesCountProps['onMouseDown'];\n  onSelectedValuesCountToggle?: SelectedValuesCountProps['onToggle'];\n};\n\nexport function SelectMultipleField({\n  children,\n  fieldLabel,\n  hasInsideLabel,\n  isBackButtonShown,\n  isClearButtonShown,\n  isDropdownArrowShown,\n  isDropdownSelectedOnlyView,\n  isSelectedValuesCountShown,\n  selectedValuesCount,\n  onBackButtonClick,\n  onClearButtonClick,\n  onDropdownArrowClick,\n  onSelectedValuesCountKeyDown,\n  onSelectedValuesCountKeyUp,\n  onSelectedValuesCountMouseDown,\n  onSelectedValuesCountToggle,\n  ...passThroughTextFieldProps\n}: Props) {\n  const { isDisabled, isLoading } = useFormFieldContext();\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  const backButton = (\n    <IconButton\n      aria-label={translations.selectMultiple_back()}\n      variant=\"borderless\"\n      onAction={onBackButtonClick}>\n      <NavLeft />\n    </IconButton>\n  );\n\n  const clearButton = (\n    <IconButton\n      aria-label={translations.formControl_clear()}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      variant=\"borderless\"\n      onAction={onClearButtonClick}>\n      <CancelS />\n    </IconButton>\n  );\n  const dropdownArrow = (\n    <DropdownArrow\n      isDisabled={isDisabled}\n      size={hasInsideLabel ? 'md' : 'sm'}\n      onClick={onDropdownArrowClick}\n    />\n  );\n\n  const endContent = isLoading ? undefined : !isSelectedValuesCountShown ? (\n    <>\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </>\n  ) : (\n    <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n      <SelectedValuesCount\n        aria-label={fieldLabel}\n        count={selectedValuesCount}\n        isDisabled={isDisabled}\n        isSelected={isDropdownSelectedOnlyView}\n        onKeyDown={onSelectedValuesCountKeyDown}\n        onKeyUp={onSelectedValuesCountKeyUp}\n        onMouseDown={onSelectedValuesCountMouseDown}\n        onToggle={onSelectedValuesCountToggle}\n      />\n      {isClearButtonShown && clearButton}\n      {isDropdownArrowShown && dropdownArrow}\n    </Flex>\n  );\n\n  return (\n    <TextField\n      startContent={isBackButtonShown && backButton}\n      mainContent={children}\n      endContent={endContent}\n      {...passThroughTextFieldProps}\n    />\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useId, useRef } from 'preact/hooks';\nimport { preventDefault } from '../PRIVATE_SelectCommon';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { Text } from '../UNSAFE_Text';\nimport { CloseIcon } from '../PRIVATE_ThemedIcons/CloseIcon';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { isBackspaceOrDelete } from '../utils/PRIVATE_keyboardUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textTagStyles } from './themes/TextTagStyles.css';\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = {\n  /**\n   * The label for the text tag\n   */\n  children: string;\n\n  /**\n   * Specifies whether to show the remove icon\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * Indicates whether the component is focused\n   */\n  isFocused?: boolean;\n\n  /**\n   * Specifies if the TextTag component is selected\n   */\n  isSelected?: boolean;\n\n  /**\n   * Callback to be invoked when Delete/Backspace is pressed\n   */\n  onRemoveAction?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when clicking on the text tag\n   */\n  onSelect?: (value: V) => void;\n\n  /**\n   * Callback to be invoked when the remove icon is clicked\n   */\n  onRemoveIconClick?: (value: V) => void;\n\n  /**\n   * The value of the text tag\n   */\n  value: V;\n};\n\n/**\n * The component for rendering selectable/removable TextTag\n *\n * @param param0 The props for the TextTag component\n */\nexport function TextTag<V>({\n  children,\n  removeIcon = 'never',\n  isSelected = false,\n  onRemoveAction,\n  onSelect,\n  onRemoveIconClick,\n  isFocused,\n  value\n}: Props<V>) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const navigationTextId = useId();\n\n  const rootClasses = classNames([textTagStyles.base, isSelected && textTagStyles.selected]);\n\n  const onRemoveActionCallback = useCallback(() => {\n    onRemoveAction?.(value);\n  }, [value, onRemoveAction]);\n  const onSelectCallback = useCallback(() => {\n    onSelect?.(value);\n  }, [value, onSelect]);\n  const onRemoveIconClickCallback = useCallback(() => {\n    onRemoveIconClick?.(value);\n  }, [value, onRemoveIconClick]);\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isBackspaceOrDelete(event)) {\n        onRemoveActionCallback();\n        return;\n      }\n    },\n    [onRemoveActionCallback]\n  );\n\n  useEffect(() => {\n    if (isFocused && isSelected) {\n      spanRef.current?.focus();\n      spanRef.current?.scrollIntoView({ block: 'nearest' });\n    }\n  }, [isFocused, isSelected]);\n\n  return (\n    <>\n      <span\n        ref={spanRef}\n        class={rootClasses}\n        tabIndex={-1}\n        onClick={onSelectCallback}\n        onKeyUp={onKeyUp}\n        // Kill mouse down event to prevent focus transfer done by the parent container.\n        // We will programmatically take back focus in response to the onClick event.\n        onMouseDown={preventDefault}\n        role=\"option\"\n        aria-describedby={navigationTextId}\n        aria-selected={isSelected ? 'true' : 'false'}>\n        <Text size=\"md\" variant=\"inherit\">\n          {children}\n        </Text>\n        {removeIcon === 'always' && (\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <IconButton size=\"xs\" variant=\"ghost\" onAction={onRemoveIconClickCallback}>\n              <CloseIcon />\n            </IconButton>\n          </TabbableModeContext.Provider>\n        )}\n      </span>\n      <HiddenAccessible id={navigationTextId}>\n        {translations.selectMultiple_removeSelectedTagInstructionText()}\n      </HiddenAccessible>\n    </>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useFocusWithin } from '../hooks/UNSAFE_useFocusWithin';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { isSelectAll } from '../utils/PRIVATE_keyboardUtils';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { DimensionProps, dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { TextTag } from './TextTag';\nimport { textTagListStyles } from './themes/TextTagListStyles.css';\n\n/**\n * Data structure of the text tag item\n */\ntype TextTagItem<V> = {\n  label: string;\n  value: V;\n};\n\n/**\n * Type of the ref handle of the component\n */\ntype TextTagListHandle = {\n  /**\n   * Focuses the text tag container\n   */\n  focus: () => void;\n\n  /**\n   * Blurs the text tag container\n   */\n  blur: () => void;\n};\n\n/**\n * Supported style props\n */\nconst supportedDimensions = stringLiteralArray(['maxWidth']);\ntype SupportedDimensions = typeof supportedDimensions[number];\ntype StyleProps = Pick<DimensionProps, SupportedDimensions>;\n\n/**\n * Props for the TextTag component\n */\ntype Props<V> = StyleProps & {\n  /**\n   * Specifies accessible screen reader text.\n   */\n  'aria-label'?: string;\n\n  /**\n   * An array of objects which is used to stamp out the TextTag components\n   */\n  data: TextTagItem<V>[];\n\n  /**\n   * Flag to indicate if the label is inside the container\n   * TODO: Handle this in a more generic way if/when we make this component generic\n   */\n  hasInsideLabel?: boolean;\n\n  /**\n   * Specifies whether to show the remove icon in the TextTag components\n   */\n  removeIcon?: 'always' | 'never';\n\n  /**\n   * A callback function to be invoked when the component wants to exit the navigation.\n   * This happens when one presses Right arrow after reaching the end of the list (or Left\n   * arrow in RTL mode).\n   */\n  onExitNavigation?: () => void;\n\n  /**\n   * A callback function to be invoked when one or more text tags are removed\n   */\n  onRemove?: (items: V[]) => void;\n};\n\n/**\n * Setting up interpolations\n */\nconst supportedInterpolations = Array.from(supportedDimensions, (x) => dimensionInterpolations[x]);\nconst styleInterpolations = mergeInterpolations<StyleProps>(supportedInterpolations);\n\n/**\n * TextTagList component for rendering the collection of TextTags as well\n * as managing the navigation.\n *\n * @param param0 The props for the TextTagList component\n * @param ref The ref for the component\n */\nfunction _TextTagList<V>(props: Props<V>, ref: Ref<TextTagListHandle> = () => {}) {\n  // destructure props\n  const {\n    'aria-label': ariaLabel,\n    data,\n    hasInsideLabel = false,\n    removeIcon = 'never',\n    onExitNavigation,\n    onRemove\n  } = props;\n\n  // ref for setting the scroll position for the div\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // Internal state for storing the current selected tags\n  const [selectedTags, setSelectedTags] = useState<V[]>([]);\n\n  // The navigation of focus will depend on the reading direction, so we need to\n  // get the current reading direction\n  const { direction } = useUser();\n\n  // Create a ref for maintaining the current selected tag. This is used for\n  // determining which tag needs to be selected next when pressing ArrowLeft or\n  // ArrowRight.\n  const currentSelectedTagIndex = useRef(-1);\n  // Create a ref that holds the last tag which is needed when receiving focus\n  // programmatically.\n  const lastTag = data.at(-1)?.value;\n  const lastTagMeta = useRef({ value: lastTag, index: data.length - 1 });\n  lastTagMeta.current = { value: lastTag, index: data.length - 1 };\n\n  // A function to select the tag at the given index\n  const selectTagAtIndex = useCallback(\n    (index: number) => {\n      const key = data.at(index)?.value;\n      if (key == null) return;\n      setSelectedTags([key]);\n    },\n    [data] // setSelectedTags is stable and not needed in dep array\n  );\n  // A function to clear the selection\n  const clearSelection = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      currentSelectedTagIndex.current = -1;\n      return previousSelectedTags.length ? [] : previousSelectedTags;\n    });\n  }, []); // setSelectedTags is stable and not needed in dep array\n\n  // Handle the remove & delete events from the tags\n  const onTagRemoveIconClick = useCallback(\n    (value: V) => {\n      // on remove icon click we only need to remove the tag that\n      // invoked the event\n      onRemove?.([value]);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [clearSelection, onExitNavigation, onRemove]\n  );\n  const onTagRemoveAction = useCallback(\n    (value: V) => {\n      // on delete action we need to remove the tag that invoked the delete action\n      // as well as the selected tags.\n      const valuesToRemove = [...selectedTags];\n      if (!selectedTags.includes(value)) {\n        valuesToRemove.push(value);\n      }\n      onRemove?.(valuesToRemove);\n      onExitNavigation?.();\n      // Firefox & Safari are not calling onBlur when focusing out of the\n      // tag list through onExitNavigation, so clear the selections explicitly\n      // here.\n      clearSelection();\n    },\n    [selectedTags, clearSelection, onExitNavigation, onRemove]\n  );\n\n  // Handle the select event from the tags\n  const onTagSelect = useCallback(\n    (value: V) => {\n      setSelectedTags([value]);\n      currentSelectedTagIndex.current = data.findIndex((tag) => tag.value === value);\n    },\n    [data, setSelectedTags]\n  );\n\n  // Handle keyDown event on the tags container\n  const onTagKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (data.length === 0) return;\n      // Move towards the beginning of the list when pressing\n      // Left arrow (or Right arrow in rtl).\n      if (\n        (direction === 'ltr' && event.code === 'ArrowLeft') ||\n        (direction === 'rtl' && event.code === 'ArrowRight')\n      ) {\n        if (currentSelectedTagIndex.current === 0) return;\n        currentSelectedTagIndex.current -= 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // Move towards the end of the list when pressing\n      // Right arrow (or Left arrow in rtl). If at the end,\n      // invoke onExitNavigation.\n      if (\n        (direction === 'ltr' && event.code === 'ArrowRight') ||\n        (direction === 'rtl' && event.code === 'ArrowLeft')\n      ) {\n        if (currentSelectedTagIndex.current === data.length - 1) {\n          // We have reached the end, so exit navigation\n          onExitNavigation?.();\n          return;\n        }\n        currentSelectedTagIndex.current += 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the Home key, move the focus to the first tag\n      if (event.code === 'Home') {\n        currentSelectedTagIndex.current = 0;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // When pressing the End key, move the focus to the last tag\n      if (event.code === 'End') {\n        currentSelectedTagIndex.current = data.length - 1;\n        selectTagAtIndex(currentSelectedTagIndex.current);\n        return;\n      }\n\n      // If it is a Select All event, then select all the tags and do\n      // not move the focus\n      if (isSelectAll(event)) {\n        setSelectedTags(data.map((tag) => tag.value));\n        // prevent default to prevent selection of the whole screen\n        event.preventDefault();\n        return;\n      }\n    },\n    [data, direction, onExitNavigation, selectTagAtIndex, setSelectedTags]\n  );\n\n  const handleOnFocus = useCallback(() => {\n    setSelectedTags((previousSelectedTags) => {\n      // select the tag only if there are no current selected tags\n      // and there is data\n      if (previousSelectedTags.length || lastTagMeta.current.value === undefined)\n        return previousSelectedTags;\n\n      currentSelectedTagIndex.current = lastTagMeta.current.index;\n      return [lastTagMeta.current.value];\n    });\n  }, []); // setSelectedTags is stable and not needed in the dep array\n  const handleOnBlur = useCallback(() => {\n    clearSelection();\n  }, [clearSelection]);\n\n  // When blurring out of the component, remove all selections\n  const { focusProps } = useFocusWithin({\n    onBlurWithin: handleOnBlur\n  });\n\n  // Update the ref to include the handler methods\n  useImperativeHandle(\n    ref,\n    () => ({\n      blur: handleOnBlur,\n      focus: handleOnFocus\n    }),\n    [handleOnBlur, handleOnFocus]\n  );\n\n  useEffect(() => {\n    // every time the data is changed, scroll to the end of the list to show the latest added\n    // pill\n    // In ltr we need to scroll to the right, so positive value should be passed and in rtl we\n    // need to scroll to the left, so negative value should be passed\n    divRef.current?.scrollTo({\n      left: divRef.current.scrollWidth * (direction === 'ltr' ? 1 : -1)\n    });\n  }, [data, direction]);\n\n  // the styles for the component\n  const styles = styleInterpolations(props);\n  // TODO: use theming and multi-variant styles\n  // \n  const rootClasses = classNames([\n    textTagListStyles.textTagListBase,\n    hasInsideLabel && textTagListStyles.textTagListInsideLabel\n  ]);\n\n  return (\n    <div\n      class={rootClasses}\n      ref={divRef}\n      tabIndex={-1}\n      onKeyDown={onTagKeyDown}\n      role=\"listbox\"\n      aria-label={ariaLabel}\n      aria-multiselectable=\"true\"\n      style={styles}\n      {...focusProps}>\n      {data.map((tag, index) => (\n        <TextTag\n          isFocused={currentSelectedTagIndex.current === index}\n          isSelected={selectedTags.includes(tag.value)}\n          key={tag.value}\n          onRemoveAction={onTagRemoveAction}\n          onSelect={onTagSelect}\n          onRemoveIconClick={onTagRemoveIconClick}\n          removeIcon={removeIcon}\n          value={tag.value}>\n          {tag.label}\n        </TextTag>\n      ))}\n    </div>\n  );\n}\n\nexport const TextTagList = forwardRef<TextTagListHandle, Props<any>>(_TextTagList);\n","import { ComponentProps, Ref } from 'preact';\nimport { TextTagList } from './TextTagList';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TextFieldInput } from '../UNSAFE_TextField';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { HiddenAccessible } from '../UNSAFE_HiddenAccessible';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype TextTagListProps = ComponentProps<typeof TextTagList>;\n\ntype PassThroughTextFieldInputProps = Pick<\n  TextFieldInputProps,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'autoFocus'\n  | 'hasEmptyLabel'\n  | 'hasInsideLabel'\n  | 'id'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onInput'\n  | 'onKeyDown'\n  | 'onKeyUp'\n  | 'isRequired'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n> & {\n  inputRef?: Ref<HTMLInputElement>;\n};\ntype PassThroughTextTagListProps = Pick<\n  TextTagListProps,\n  'onExitNavigation' | 'onRemove' | 'removeIcon'\n>;\n\ntype Props = PassThroughTextFieldInputProps &\n  PassThroughTextTagListProps & {\n    displayValue?: string;\n    isTextTagListShown?: boolean;\n    isUserFiltering?: boolean;\n    liveRegionText?: string;\n    selectedValuesDescriptionId?: string;\n    textTagListData: TextTagListProps['data'];\n    textTagListRef?: TextTagListProps['ref'];\n    userInput?: string;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\nexport function SelectMultipleFieldInput({\n  displayValue,\n  isTextTagListShown,\n  isUserFiltering,\n  liveRegionText,\n  onExitNavigation,\n  onRemove,\n  removeIcon,\n  selectedValuesDescriptionId,\n  textTagListData,\n  textTagListRef,\n  userInput,\n  virtualKeyboard,\n  ...passThroughTextFieldInputProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  return (\n    <>\n      {isTextTagListShown && (\n        <TextTagList\n          aria-label={translations.selectMultiple_selectedValues()}\n          data={textTagListData}\n          hasInsideLabel={passThroughTextFieldInputProps.hasInsideLabel}\n          maxWidth=\"50%\"\n          onExitNavigation={onExitNavigation}\n          onRemove={onRemove}\n          ref={textTagListRef}\n          removeIcon={removeIcon}\n        />\n      )}\n      <Flex flex={1}>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          autoComplete=\"off\"\n          // When focused, we show the tag list, which can be treated as having prefix\n          hasPrefix={isTextTagListShown}\n          role=\"combobox\"\n          spellcheck={false}\n          type={virtualKeyboard === 'auto' ? 'search' : virtualKeyboard}\n          value={isUserFiltering || isTextTagListShown ? userInput : displayValue}\n          {...passThroughTextFieldInputProps}\n        />\n      </Flex>\n      {\n        // Show description text when focused as we will not be\n        // showing display text in the input.\n        isTextTagListShown && (\n          <HiddenAccessible\n            id={selectedValuesDescriptionId}\n            // We want the content to be hidden for screen readers too by default.\n            // But, it will be overridden when we link the aria-describedby attribute.\n            // Otherwise, the content here will be read twice.\n            isHidden={true}>\n            {displayValue}\n          </HiddenAccessible>\n        )\n      }\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </>\n  );\n}\n","import { Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  AriaAttributesSignalExcluded,\n  HTMLAttributesSignalExcluded\n} from '../utils/UNSAFE_attributeUtils';\nimport { TextProps, textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldInputVariantOptions } from '../UNSAFE_TextField/themes/TextFieldInputStyles.css';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { selectMultipleMobileFieldInputStyles } from './themes/SelectMultipleMobileFieldInputStyles.css';\nimport { isInputPlaceholderShown } from '../UNSAFE_TextField/TextFieldUtils';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Text } from '../UNSAFE_Text';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { TextFieldInputRedwoodTheme } from '../UNSAFE_TextField/themes/redwood/TextFieldInputTheme';\n\ntype AriaProps = Pick<\n  AriaAttributesSignalExcluded,\n  | 'aria-controls'\n  | 'aria-describedby'\n  | 'aria-expanded'\n  | 'aria-invalid'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ntype EventProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onBlur' | 'onFocus'>;\n\ntype Props = AriaProps &\n  EventProps &\n  TextProps & {\n    displayValue?: string;\n    hasEmptyLabel?: boolean;\n    hasInsideLabel?: boolean;\n    isRequired?: boolean;\n    placeholder?: string;\n    variant?: 'default' | 'embedded';\n  };\n\nconst interpolations = [...Object.values(textInterpolations)];\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\n/**\n * This component is used for rendering the main field in mobile phones. This is a bit different from the\n * normal main field (SelectMultipleFieldInput) that we use for desktop & tablet devices in the way that\n * a user will not be able to edit the value of this field. But, one can still have other functionalities\n * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.\n *\n * This also differs from ReadonlyTextFieldInput in the following ways:\n * 1. This will be rendered as div as well, but has a role of combobox set on it\n * 2. This will not be read as readonly input by the screen readers\n * 3. This has the stylings much similar to the TextFieldInput component\n * 4. This supports the use of placeholder and shows it when there is no value present\n * 5. This supports having the variant property and styles accordingly\n *\n * As such, this is very similar to the TextFieldInput except that this does not allow user input.\n * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the\n * behavior we need, it will make the field as readonly and screen readers read the same about this\n * field. This will be an incorrect representation contextually as one can still edit the value by opening\n * the dropdown and changing the selection.\n */\nexport const SelectMultipleMobileFieldInput = forwardRef(\n  (\n    {\n      'aria-controls': ariaControls,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': ariaExpanded,\n      'aria-invalid': ariaInvalid,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      displayValue,\n      hasEmptyLabel,\n      hasInsideLabel = false,\n      isRequired,\n      onBlur,\n      onFocus,\n      placeholder,\n      textAlign,\n      variant = 'default'\n    }: Props,\n    ref?: Ref<HTMLDivElement>\n  ) => {\n    // consume required contexts\n    const { isDisabled, isFocused, hasValue = false } = useFormFieldContext();\n    const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n    // setup properties\n    const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused)\n      ? placeholder\n      : undefined;\n\n    // Add unsafe API for specifying an external label which is added to ariaLabelledBy on the input,\n    // only when labelEdge is 'none' and label is ''. Since ariaLabelledBy takes precedence over all other\n    // kinds of labels, this helps to ensure we don't override a meaningful label.\n    const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n    const mergedAriaLabelledBy = hasEmptyLabel\n      ? merge([ariaLabelledBy, UNSAFE_ariaLabelledBy])\n      : ariaLabelledBy;\n\n    // setup style classes\n    const { class: styleInterpolationClasses } = styleInterpolations({ textAlign });\n    const { classes: themeClasses } = useComponentTheme<TextFieldInputVariantOptions>(\n      TextFieldInputRedwoodTheme,\n      {\n        type: 'notPassword',\n        styleVariant: variant,\n        textarea: 'notTextArea',\n        input: 'isInput',\n        prefix: 'noPrefix',\n        suffix: 'noSuffix',\n        startContent: 'noStartContent',\n        endContent: 'hasEndContent',\n        insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n        value: hasValue ? 'hasValue' : 'noValue',\n        focused: isFocused ? 'isFocused' : 'notFocused',\n        disabled: isDisabled ? 'isDisabled' : 'notDisabled'\n      }\n    );\n    const rootDivStyleClasses = classNames([\n      selectMultipleMobileFieldInputStyles.base,\n      styleInterpolationClasses,\n      themeClasses\n    ]);\n\n    return (\n      <div\n        aria-autocomplete=\"list\"\n        aria-controls={ariaControls}\n        aria-describedby={ariaDescribedBy}\n        aria-expanded={ariaExpanded}\n        aria-invalid={ariaInvalid}\n        aria-label={ariaLabel}\n        aria-labelledby={mergedAriaLabelledBy}\n        aria-required={isRequired ? 'true' : undefined}\n        class={rootDivStyleClasses}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        ref={ref}\n        role=\"combobox\"\n        {...(isTabbable && tabbableModeProps)}>\n        <div class={selectMultipleMobileFieldInputStyles.content}>\n          <Text variant={displayValue ? 'inherit' : 'secondary'}>\n            {displayValue || myPlaceholder}\n          </Text>\n        </div>\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(itemText: ItemTextType<K, D>, valueItems?: Item<K, D>[]) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = createDisplayValues(itemText, valueItems);\n    const concatenatedDisplayValues = concatDisplayValues(displayValues, separator);\n    return concatenatedDisplayValues;\n  }, [itemText, separator, valueItems]);\n\n  // create the text tags to display when the component is focused\n  const textTags = useMemo(\n    () => (valueItems === undefined ? [] : createTextTags(itemText, valueItems)),\n    [itemText, valueItems]\n  );\n\n  return {\n    displayValue: concatenatedDisplayValues,\n    textTags\n  };\n}\n\nfunction concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n\nfunction createTextTags<K, D>(itemText: ItemTextType<K, D>, selectedItems: Item<K, D>[] = []) {\n  return selectedItems.map((item) => ({\n    label: renderItemText(item, itemText) ?? '',\n    value: item.key\n  }));\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo, useRef } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * While the component is showing only selected values in the dropdown, that list of values should\n * not change as the user deselects items within it.  For example, if the list initially shows\n * selected items \"Item A\" and \"Item B\", and the user deselects \"Item B\", we do not want to remove\n * \"Item B\" from the list.  The reason is that the user may want to reselect it again.  So the\n * list should remain static as of the time the user toggled the selected-only view on.\n * If isDropdownSelectedOnlyView is false, then the data returned from this hook will be undefined.\n * If isDropdownSelectedOnlyView is true, then the data returned from this hook will consist of\n * all of the valueItems that were selected at the time isDropdownSelectedOnlyView was set to true.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so that dependent code in SelectMultiple and\n  // useSelectMultiple doesn't show a type error related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n\n  // ref for the static set of value items we want to show in the selected only view\n  const selectedOnlyValueItemsRef = useRef(valueItems);\n  // ref for the previous value of isDropdownSelectedOnlyView\n  const prevIsDropdownSelectedOnlyViewRef = useRef(isDropdownSelectedOnlyView);\n  // if the value of isDropdownSelectedOnlyView has changed, store the new static set of\n  // value items to show in selected only view, otherwise leave it the same\n  selectedOnlyValueItemsRef.current =\n    prevIsDropdownSelectedOnlyViewRef.current !== isDropdownSelectedOnlyView\n      ? valueItems\n      : selectedOnlyValueItemsRef.current;\n  // update the ref for the previous value of isDropdownSelectedOnlyView AFTER using it to\n  // update the ref for the static set of value items\n  prevIsDropdownSelectedOnlyViewRef.current = isDropdownSelectedOnlyView;\n\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView ||\n      !selectedOnlyValueItemsRef.current ||\n      selectedOnlyValueItemsRef.current.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: selectedOnlyValueItemsRef.current.length ?? 0,\n          sizePrecision: 'exact',\n          data: selectedOnlyValueItemsRef.current.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","import { Ref, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useDisplayValues } from './useDisplayValues';\nimport type { UseSelectMultipleProps, useSelectMultiple } from './useSelectMultiple';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { equals } from 'ramda';\n\ntype UseSelectMultipleReturn = ReturnType<typeof useSelectMultiple>;\ntype PickedPropsFromUseSelectMultiple = Pick<\n  UseSelectMultipleReturn,\n  | 'isDropdownOpen'\n  | 'isDropdownSelectedOnlyView'\n  | 'setDropdownOpen'\n  | 'setUserInput'\n  | 'stopFiltering'\n  | 'userInput'\n>;\nexport type UseMobileDropdownProps<K, D> = PickedPropsFromUseSelectMultiple & {\n  data: UseSelectMultipleProps<K, D>['data'];\n  inputRef: Ref<HTMLElement>;\n  itemText: ItemTextType<K, D>;\n  textTagListRef: UseSelectMultipleReturn['textTagListProps']['textTagListRef'];\n  valueItems: UseSelectMultipleProps<K, D>['valueItems'];\n  onCommit: UseSelectMultipleProps<K, D>['onCommit'];\n  onLoadRange: UseSelectMultipleProps<K, D>['onLoadRange'];\n};\n\nexport function useMobileDropdown<K extends string | number, D>({\n  data,\n  inputRef,\n  isDropdownOpen,\n  isDropdownSelectedOnlyView,\n  itemText,\n  textTagListRef,\n  userInput,\n  valueItems = [],\n  onCommit,\n  onLoadRange,\n  setDropdownOpen,\n  setUserInput,\n  stopFiltering\n}: UseMobileDropdownProps<K, D>) {\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [dropdownSelectedKeys, setDropdownSelectedKeys] = useState(keysFromValueItems(valueItems));\n  const dataCache = useRef(new Map<K, Item<K, D>>());\n  const currentValueItems = useMemo(() => {\n    const items: Item<K, D>[] = [];\n    dropdownSelectedKeys.forEach((key) => {\n      // Initially check if they are in valueItems\n      const item = valueItems.find((item) => item.key === key);\n      if (item) {\n        items.push(item);\n        return;\n      }\n\n      // otherwise check if it is available in the dataCache\n      if (dataCache.current.has(key)) {\n        items.push(dataCache.current.get(key)!);\n      }\n    });\n    return items;\n  }, [dropdownSelectedKeys, valueItems]);\n  const { textTags, displayValue } = useDisplayValues(itemText, currentValueItems);\n\n  // Create a ref for the input in the dropdown\n  const dropdownInputRef = useRef<HTMLInputElement>(null);\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const { data: selectedOnlyData, onLoadRange: selectedOnlyOnLoadRange } = useSelectedOnlyData<\n    K,\n    D\n  >({\n    isDropdownSelectedOnlyView,\n    valueItems: currentValueItems\n  });\n\n  const onCurrentKeyChange = useCallback(\n    (detail: CurrentKeyDetail<K>) => {\n      setCurrentRow({ rowKey: detail.value });\n    },\n    [setCurrentRow]\n  );\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the dropdownSelectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setDropdownSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // update the data cache on each selection if data is present\n      if (data) {\n        updateCache(dataCache.current, data, newKeys);\n      }\n    },\n    [data, setDropdownSelectedKeys, setUserInput]\n  );\n\n  const closeDropdown = useCallback(() => {\n    // reset dropdownSelectedKeys as you close the dropdown so that\n    // the next time the dropdown is opened, it will have the actual component's valueItems\n    setDropdownSelectedKeys(new Set(valueItems.map((v) => v.key)));\n    // Empty the cached map\n    dataCache.current.clear();\n    setDropdownOpen(false);\n    // stop filtering before closing the dropdown\n    stopFiltering();\n    // revert the focus back to the main field\n    inputRef.current?.focus();\n  }, [inputRef, setDropdownOpen, stopFiltering, valueItems]);\n\n  const onApply = useCallback(() => {\n    // Commit the current value items and close the dropdown\n    onCommit({\n      previousValue: keysFromValueItems(valueItems),\n      value: dropdownSelectedKeys\n    });\n    closeDropdown();\n  }, [dropdownSelectedKeys, valueItems, closeDropdown, onCommit]);\n\n  const onBackButtonClick = useCallback(() => {\n    closeDropdown();\n  }, [closeDropdown]);\n\n  const onClearButtonClick = useCallback(() => {\n    setDropdownSelectedKeys(new Set());\n    stopFiltering();\n  }, [stopFiltering]);\n\n  const onTextTagRemove = useCallback(\n    (keys: K[]) => {\n      const newSelectedKeys = new Set(dropdownSelectedKeys);\n      keys.forEach((key) => newSelectedKeys.delete(key));\n      setDropdownSelectedKeys(newSelectedKeys);\n    },\n    [dropdownSelectedKeys]\n  );\n\n  const onTextTagExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => dropdownInputRef.current?.focus(), 0);\n  }, []);\n\n  const wasDropdownOpen = useRef(isDropdownOpen);\n  useEffect(() => {\n    // if the dropdown is open, ignore any valueItems update\n    if (isDropdownOpen) {\n      // if it was open before, then this is a valueItems change, so no action\n      if (wasDropdownOpen.current) return;\n\n      // otherwise this dropdown is opened now, so set the focus on the input field\n      setTimeout(() => dropdownInputRef.current?.focus(), 0);\n      wasDropdownOpen.current = true;\n      return;\n    }\n    // if dropdown is closed, keep the valueItems in sync with the dropdown selected keys\n    setDropdownSelectedKeys((prevDropdownSelectedKeys) => {\n      const nextDropdownSelectedKeys = keysFromValueItems(valueItems);\n      // since valueItems can be a different array with the same values and keysFromValueItems\n      // will create a new set every time, compare the value and update the set only if the\n      // values have changed\n      return equals(prevDropdownSelectedKeys, nextDropdownSelectedKeys)\n        ? prevDropdownSelectedKeys\n        : nextDropdownSelectedKeys;\n    });\n    wasDropdownOpen.current = false;\n  }, [isDropdownOpen, valueItems]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data: isDropdownSelectedOnlyView ? selectedOnlyData : data,\n      selectedKeys: dropdownSelectedKeys,\n      onCurrentKeyChange,\n      onLoadRange: isDropdownSelectedOnlyView ? selectedOnlyOnLoadRange : onLoadRange,\n      onSelectionChange\n    },\n    footerProps: {\n      onApply\n    },\n    selectMultipleFieldInputProps: {\n      displayValue,\n      hasEmptyLabel: false,\n      hasInsideLabel: true,\n      inputRef: dropdownInputRef,\n      isTextTagListShown: textTags.length > 0,\n      isUserFiltering: true,\n      removeIcon: 'always' as const,\n      userInput,\n      textTagListData: textTags,\n      textTagListRef: textTagListRef,\n      onExitNavigation: onTextTagExitNavigation,\n      onRemove: onTextTagRemove\n    },\n    selectMultipleFieldProps: {\n      hasInsideLabel: true,\n      isBackButtonShown: true,\n      isClearButtonShown: !isEmptyOrUndefined(userInput) || textTags.length !== 0,\n      isDropdownArrowShown: false,\n      isDropdownSelectedOnlyView,\n      isSelectedValuesCountShown: dropdownSelectedKeys.size > 0 || isDropdownSelectedOnlyView,\n      selectedValuesCount: dropdownSelectedKeys.size,\n      styleVariant: 'embedded' as const,\n      onBackButtonClick,\n      onClearButtonClick\n    }\n  };\n}\n\n/**\n * A function to cache the data for the current set of keys from the current data state\n * and current set of keys.\n *\n * The idea is that, the data state might not contain all the selected keys. However, as\n * a key is selected, if we update the cache, it will always contain the data for the selected\n * keys. Reason is that, when a key is selected, at that moment it will be in the current data\n * state. We will fetch that information and store it. While the current data state might not\n * contain information about all the selected keys, it will always have the information about\n * current selected key.\n *\n * @param cache The data cache\n * @param data The current data state\n * @param keys The current set of keys\n */\nconst updateCache = <K, D>(cache: Map<K, Item<K, D>>, data: DataState<K, D>, keys: Set<K>) =>\n  // iterate through the data and if a selected key's match is found, update the cache\n  data.data.forEach((item) => {\n    if (!keys.has(item.metadata.key)) return;\n\n    cache.set(item.metadata.key, {\n      data: item.data,\n      key: item.metadata.key,\n      metadata: item.metadata\n    });\n  });\n\n/**\n * Extract keys from a value items array.\n *\n * @param valueItems The value items from which the keys are to be extracted\n * @returns The set of keys\n */\nconst keysFromValueItems = <K, D>(valueItems: Item<K, D>[]) =>\n  new Set(valueItems.map((i) => i.key));\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  SelectMobileDropdown,\n  isBeforeDataFetch,\n  isPhone,\n  isTablet\n} from '../PRIVATE_SelectCommon';\nimport { DataState, ListItemContext, Metadata } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { ReadonlyTextField, ReadonlyTextFieldInput, TextFieldInput } from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { View } from '../UNSAFE_View';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MobileDropdownFooter } from './MobileDropdownFooter';\nimport { SelectMultipleField } from './SelectMultipleField';\nimport { SelectMultipleFieldInput } from './SelectMultipleFieldInput';\nimport { SelectMultipleMobileFieldInput } from './SelectMultipleMobileFieldInput';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useMobileDropdown } from './useMobileDropdown';\nimport { useSelectMultiple } from './useSelectMultiple';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\ntype SelectMultipleFieldInputProps = ComponentProps<typeof SelectMultipleFieldInput>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype SelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  /**\n   * Metadata for the item.\n   */\n  metadata: ItemRendererMetadata<K>;\n  /**\n   * User-entered search text.\n   */\n  searchText?: string;\n  /**\n   * The selected keys in the dropdown\n   */\n  selectedKeys?: Set<K>;\n  /**\n   * Callback function to trigger when the selection changes\n   *\n   * @param detail The selection change details\n   */\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Render function for an item in the default list in the dropdown.\n   */\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: SelectMultipleFieldInputProps['virtualKeyboard'];\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      'aria-describedby': propAriaDescribedBy,\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemRenderer,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      ariaProps,\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      selectedValuesCountProps,\n      selectedValuesDescriptionId,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering,\n      textTagListProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      ariaDescribedBy: propAriaDescribedBy,\n      data: propData,\n      inputRef: enabledElementRef,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    const {\n      collectionProps: mobileDropdownCollectionProps,\n      footerProps: mobileDropdownFooterProps,\n      selectMultipleFieldInputProps: mobileDropdownSelectMultipleFieldInputProps,\n      selectMultipleFieldProps: mobileDropdownSelectMultipleFieldProps\n    } = useMobileDropdown<K, D>({\n      data,\n      inputRef: enabledElementRef,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      itemText,\n      textTagListRef: textTagListProps.textTagListRef,\n      userInput,\n      valueItems,\n      onCommit,\n      onLoadRange: propOnLoadRange,\n      setDropdownOpen,\n      setUserInput,\n      stopFiltering\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n    // for dropdown field\n    const {\n      formFieldContext: mobileDropdownFormFieldContext,\n      inputProps: mobileDropdownInputProps,\n      labelProps: mobileDropdownLabelProps,\n      textFieldProps: mobileDropdownTextFieldProps,\n      userAssistanceProps: mobileDropdownUserAssistanceProps\n    } = useTextField({\n      ariaDescribedBy: ariaProps.ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: false,\n      isFocused,\n      isLoading,\n      isReadonly: false,\n      isRequiredShown: false,\n      labelEdge: 'inside',\n      styleVariant: 'default',\n      value: mobileDropdownSelectMultipleFieldProps.selectedValuesCount > 0 ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n    mobileDropdownFormFieldContext.hasValue =\n      propIsLoading || mobileDropdownFormFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const { displayValue, textTags } = useDisplayValues(itemText, valueItems);\n\n    // Do not set a forId in phone as we will be using aria-labelledby instead.\n    // This is because we will using a div and not input when rendering in a phone.\n    const labelComp = (\n      <Label {...labelProps} {...(isPhone() ? { forId: undefined } : {})}>\n        {label}\n      </Label>\n    );\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const mobileDropdownFieldLabelProps = {\n      label: <Label {...mobileDropdownLabelProps}>{label}</Label>,\n      labelEdge: 'inside' as const\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={mainFieldRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDropdownAbove &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n          {...(isPhone() ? mobileDropdownUserAssistanceProps : {})}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...(isPhone() ? mobileDropdownCollectionProps : collectionProps)}\n        aria-label={label ?? ''}\n        currentItemVariant=\"highlight\"\n        itemRenderer={itemRenderer}\n        itemText={itemText}\n        searchText={\n          isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n        }\n        selectionMode=\"multiple\"\n      />\n    );\n    const shouldShowDropdown =\n      isDropdownOpen &&\n      data !== undefined &&\n      (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults);\n\n    const hasEmptyLabel = label === '' && labelEdge === 'none';\n\n    const defaultMainFieldInput = (\n      <SelectMultipleFieldInput\n        aria-controls={dropdownId}\n        aria-expanded={isDropdownOpen}\n        aria-label={ariaLabel}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        inputRef={enabledElementRef as Ref<HTMLInputElement>}\n        isRequired={isRequired}\n        isTextTagListShown={isFocused && textTags.length !== 0}\n        isUserFiltering={isUserFiltering}\n        liveRegionText={liveRegionText}\n        placeholder={placeholder}\n        // we only want the remove icon in the main field for tablets\n        removeIcon={isTablet() ? 'always' : 'never'}\n        selectedValuesDescriptionId={selectedValuesDescriptionId}\n        textAlign={textAlign}\n        textTagListData={textTags}\n        userInput={userInput}\n        // In tablet, we would want to show the virtual keyboard\n        virtualKeyboard={isTablet() ? virtualKeyboard : undefined}\n        {...inputEventHandlers}\n        {...inputProps}\n        {...textTagListProps}\n      />\n    );\n    const phoneMainFieldInput = (\n      <SelectMultipleMobileFieldInput\n        aria-controls={dropdownId}\n        aria-describedby={inputProps['aria-describedby']}\n        aria-expanded={isDropdownOpen}\n        aria-invalid={inputProps['aria-invalid']}\n        aria-label={ariaLabel}\n        aria-labelledby={labelProps.id}\n        displayValue={displayValue}\n        hasEmptyLabel={hasEmptyLabel}\n        hasInsideLabel={hasInsideLabel}\n        isRequired={isRequired}\n        onBlur={inputProps.onBlur}\n        onFocus={inputProps.onFocus}\n        placeholder={placeholder}\n        ref={enabledElementRef as Ref<HTMLDivElement>}\n        textAlign={textAlign}\n        variant={inputProps.variant}\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <SelectMultipleField\n            compactUserAssistance={compactUserAssistance}\n            fieldLabel={label}\n            hasInsideLabel={hasInsideLabel}\n            inlineUserAssistance={inlineUserAssistance}\n            isDropdownArrowShown={true}\n            isDropdownSelectedOnlyView={isDropdownSelectedOnlyView}\n            isSelectedValuesCountShown={hasSelectedValuesCount}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n            onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n            onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n            onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n            onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n            selectedValuesCount={valueItems?.length}\n            {...fieldLabelProps}\n            {...mouseProps}\n            {...textFieldProps}>\n            {\n              // Use the mobile field if the component is being rendered in a phone\n              // and it is not disabled.\n              isPhone() && !isDisabled ? phoneMainFieldInput : defaultMainFieldInput\n            }\n          </SelectMultipleField>\n        </FormFieldContext.Provider>\n        {isPhone() ? (\n          <SelectMobileDropdown\n            header={\n              <FormFieldContext.Provider value={mobileDropdownFormFieldContext}>\n                <View>\n                  <SelectMultipleField\n                    fieldLabel={label}\n                    onBlur={focusProps.onfocusout}\n                    onFocus={focusProps.onfocusin}\n                    onDropdownArrowClick={dropdownArrowEventHandlers.onClick}\n                    onSelectedValuesCountKeyDown={selectedValuesCountProps.onKeyDown}\n                    onSelectedValuesCountKeyUp={selectedValuesCountProps.onKeyUp}\n                    onSelectedValuesCountMouseDown={selectedValuesCountProps.onMouseDown}\n                    onSelectedValuesCountToggle={selectedValuesCountProps.onToggle}\n                    {...mobileDropdownFieldLabelProps}\n                    {...mobileDropdownTextFieldProps}\n                    {...mobileDropdownSelectMultipleFieldProps}>\n                    <SelectMultipleFieldInput\n                      aria-controls={dropdownId}\n                      aria-expanded={isDropdownOpen}\n                      aria-label={ariaLabel}\n                      isRequired={isRequired}\n                      liveRegionText={liveRegionText}\n                      placeholder={placeholder}\n                      selectedValuesDescriptionId={selectedValuesDescriptionId}\n                      textAlign={textAlign}\n                      virtualKeyboard={virtualKeyboard}\n                      {...inputEventHandlers}\n                      {...mobileDropdownInputProps}\n                      {...mobileDropdownSelectMultipleFieldInputProps}\n                    />\n                  </SelectMultipleField>\n                </View>\n                {dropdownInlineUserAssistance}\n              </FormFieldContext.Provider>\n            }\n            footer={<MobileDropdownFooter {...mobileDropdownFooterProps} />}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}>\n            <DropdownList hasBottomGap={true} isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n          </SelectMobileDropdown>\n        ) : (\n          <Dropdown\n            dropdownRef={dropdownRef}\n            id={dropdownId}\n            isOpen={shouldShowDropdown}\n            anchorRef={mainFieldRef}\n            {...dropdownEventHandlers}>\n            <DropdownList\n              hasBottomGap={dropdownInlineUserAssistance === undefined}\n              isLoading={data === null}>\n              {dropdownListContent}\n            </DropdownList>\n            {dropdownInlineUserAssistance}\n          </Dropdown>\n        )}\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { Ref, useCallback, useEffect, useId, useMemo, useRef, useState } from 'preact/hooks';\nimport { KEYS, isControlOrFunctionKey, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { Handle } from '../utils/UNSAFE_typeUtils';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { TextTagList } from './TextTagList';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { useEffectEvent } from '../hooks/PRIVATE_useEffectEvent';\n\ntype TextTagListHandle = Handle<typeof TextTagList, 'ref'>;\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'aria-describedby' | 'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype RenamedPropsFromSelectMultiple = Omit<PickedPropsFromSelectMultiple, 'aria-describedby'> & {\n  ariaDescribedBy: PickedPropsFromSelectMultiple['aria-describedby'];\n};\nexport type UseSelectMultipleProps<K, D> = RenamedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param ariaDescribedBy Specifies the ID of elements that describe the input.\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element (this can be an input in desktop and a div in mobile).\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  ariaDescribedBy,\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n  const handleOnFilter = useCallback<NonNullable<typeof onFilter>>(\n    (args) => {\n      // when the user is filtering, we need to toggle out from selected only view\n      // we consider it filtering only if there is a non-empty filter text is present\n      if (!isEmptyOrUndefined(args.searchText)) {\n        setDropdownSelectedOnlyView(false);\n      }\n      onFilter?.(args);\n    },\n    [onFilter]\n  ); // setDropdownSelectedOnlyView is stable so not needed in dep array\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    setUserInput,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter: handleOnFilter\n  });\n  const textTagListRef = useRef<TextTagListHandle>(null);\n  const { direction } = useUser();\n  const selectedValuesDescriptionId = useId();\n  const combinedAriaDescribedBy = merge([\n    // when focused, we will show the text tag list.\n    // so, we need the screen readers to read them when focusing on the input.\n    isFocused && selectedValuesDescriptionId,\n    ariaDescribedBy\n  ]);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, [dropdownRef]);\n\n  const shouldSelectCurrentRow = useCallback(\n    (currentRowArg: typeof currentRow): currentRowArg is Required<typeof currentRow> => {\n      // current row needs to be selected if all the conditions below are satisfied\n      // 1. user is filtering\n      // 2. dropdown is open\n      // 3. user has entered a search text\n      // 4. current data state has data\n      // 5. currentRow exists\n\n      return (\n        isUserFiltering &&\n        isDropdownOpen &&\n        !isEmptyOrUndefined(userInput) &&\n        (data?.data.length ?? 0) > 0 &&\n        currentRowArg.rowKey !== undefined\n      );\n    },\n    [data, isDropdownOpen, isUserFiltering, userInput]\n  );\n\n  const selectRow = useCallback(\n    (key: K) => {\n      // If the key is already selected, do nothing\n      if (selectedKeys?.has(key)) return;\n      // If it is not already selected, add it to the selection\n      const newValue =\n        selectedKeys === undefined ? new Set([key]) : new Set([...selectedKeys.values(), key]);\n      onCommit({ previousValue: selectedKeys, value: newValue });\n      setSelectedKeys(newValue);\n    },\n    [onCommit, selectedKeys, setSelectedKeys]\n  );\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, inputRef, isDropdownOpen, removeDropdown]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.LEFT:\n          // Move focus to the text tag if we are in LTR and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'ltr' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.RIGHT:\n          // Move focus to the text tag if we are in RTL and the cursor is at the\n          // beginning of the text (and there is no selection)\n          if (\n            direction === 'rtl' &&\n            inputRef.current instanceof HTMLInputElement &&\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0\n          ) {\n            textTagListRef.current?.focus();\n          }\n          break;\n\n        case KEYS.ENTER:\n        case KEYS.NUMPAD_ENTER:\n          // if there is a currentRow in the dropdown (meaning a highlighted item that would\n          // have keyboard focus if the dropdown list had physical focus, which may be different\n          // from the currently selected item), select it and commit it;\n          if (shouldSelectCurrentRow(currentRow)) {\n            setDropdownOpen(false);\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n            selectRow(currentRow.rowKey);\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      currentRow,\n      direction,\n      hasSelectedValuesCount,\n      inputRef,\n      isDropdownOpen,\n      removeDropdown,\n      selectRow,\n      setDropdownOpen,\n      shouldSelectCurrentRow,\n      stopFiltering\n    ]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [setSelectedKeys, valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current?.querySelector\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly, mainFieldRef]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen, removeDropdown, setDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n      // on the chip before switching to show only the selected values on mouseup when the click\n      // is handled\n      event.preventDefault();\n      // explicitly focus the input because it won't happen naturally due to preventDefault()\n      inputRef.current?.focus();\n    },\n    [inputRef]\n  );\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n\n        // if the selected only toggle is enabled, we need to stop user filtering\n        if (value) {\n          stopFiltering();\n        }\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView, setDropdownOpen, stopFiltering]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n\n      // clear the filter text typed by the user, but do NOT clear the actual filter criterion\n      // or highlighting in the list\n      setUserInput('');\n\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys, setSelectedKeys, setUserInput]\n  );\n\n  const onTextTagListExitNavigation = useCallback(() => {\n    // Focus the input on the next tick. Doing it in the same event cycle will\n    // trigger the key press on the input element which makes the caret move by\n    // one character.\n    setTimeout(() => inputRef.current?.focus(), 0);\n  }, [inputRef]);\n\n  const onTextTagListRemove = useCallback(\n    (keys: K[]) => {\n      const previousValue = selectedKeys;\n      const value = new Set(selectedKeys);\n      keys.forEach((key) => value.delete(key));\n      onCommit?.({ previousValue, value });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  const textTagListProps = useMemo(\n    () => ({\n      textTagListRef,\n      onExitNavigation: onTextTagListExitNavigation,\n      onRemove: onTextTagListRemove\n    }),\n    [onTextTagListExitNavigation, onTextTagListRemove]\n  );\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen, setCurrentRow]);\n\n  // We need to highlight the first result whenever the data changes\n  const STABLE_onDataChange = useEffectEvent((newData: typeof data) => {\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    const firstResultKey = newData?.data[0]?.metadata.key;\n    if (isDropdownOpen && isUserFiltering && firstResultKey != null && data?.offset === 0) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey: isEmptyOrUndefined(searchText) ? undefined : firstResultKey\n      });\n    }\n  });\n  useEffect(() => {\n    STABLE_onDataChange(data);\n  }, [STABLE_onDataChange, data]);\n\n  return {\n    ariaProps: {\n      ariaDescribedBy: combinedAriaDescribedBy\n    },\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      data,\n      onCurrentKeyChange,\n      onSelectionChange,\n      onLoadRange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    selectedValuesDescriptionId,\n    setDropdownOpen,\n    setUserInput,\n    stopFiltering,\n    textTagListProps,\n    userInput\n  };\n}\n"],"names":["MobileDropdownFooter","onApply","translations","useTranslationBundle","_jsx","class","mobileDropdownFooterStyles","base","children","Button","display","edge","label","selectMultiple_apply","size","variant","onAction","rootStyles","SelectedValuesCount","ariaLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","selectMultiple_valuesSelected","jsx","Chip","SvgNavLeft","props","Icon","viewBox","fill","d","SvgCancelS","fillRule","SelectMultipleField","fieldLabel","hasInsideLabel","isBackButtonShown","isClearButtonShown","isDropdownArrowShown","isDropdownSelectedOnlyView","isSelectedValuesCountShown","selectedValuesCount","onBackButtonClick","onClearButtonClick","onDropdownArrowClick","onSelectedValuesCountKeyDown","onSelectedValuesCountKeyUp","onSelectedValuesCountMouseDown","onSelectedValuesCountToggle","passThroughTextFieldProps","isDisabled","isLoading","useFormFieldContext","backButton","IconButton","selectMultiple_back","NavLeft","clearButton","formControl_clear","CancelS","dropdownArrow","DropdownArrow","onClick","endContent","undefined","_jsxs","Flex","align","justify","gap","isSelected","onToggle","TextField","startContent","mainContent","TextTag","removeIcon","onRemoveAction","onSelect","onRemoveIconClick","isFocused","value","spanRef","useRef","navigationTextId","useId","rootClasses","classNames","textTagStyles","selected","onRemoveActionCallback","useCallback","onSelectCallback","onRemoveIconClickCallback","event","isBackspaceOrDelete","useEffect","current","focus","scrollIntoView","block","jsxs","ref","tabIndex","preventDefault","role","Text","TabbableModeContext","Provider","isTabbable","CloseIcon","HiddenAccessible","id","selectMultiple_removeSelectedTagInstructionText","supportedDimensions","stringLiteralArray","supportedInterpolations","Array","from","x","dimensionInterpolations","styleInterpolations","mergeInterpolations","TextTagList","forwardRef","data","onExitNavigation","onRemove","divRef","selectedTags","setSelectedTags","useState","direction","useUser","currentSelectedTagIndex","lastTag","at","lastTagMeta","index","length","selectTagAtIndex","key","clearSelection","previousSelectedTags","onTagRemoveIconClick","onTagRemoveAction","valuesToRemove","includes","push","onTagSelect","findIndex","tag","onTagKeyDown","code","isSelectAll","map","handleOnFocus","handleOnBlur","focusProps","useFocusWithin","onBlurWithin","useImperativeHandle","blur","scrollTo","left","scrollWidth","styles","textTagListStyles","textTagListBase","textTagListInsideLabel","style","SelectMultipleFieldInput","displayValue","isTextTagListShown","isUserFiltering","liveRegionText","selectedValuesDescriptionId","textTagListData","textTagListRef","userInput","virtualKeyboard","passThroughTextFieldInputProps","_Fragment","Fragment","selectMultiple_selectedValues","maxWidth","flex","TextFieldInput","autoComplete","hasPrefix","spellcheck","type","isHidden","LiveRegion","interpolations","Object","values","textInterpolations","SelectMultipleMobileFieldInput","ariaControls","ariaDescribedBy","ariaExpanded","ariaInvalid","ariaLabelledBy","hasEmptyLabel","isRequired","onBlur","onFocus","placeholder","textAlign","hasValue","tabbableModeProps","useTabbableMode","myPlaceholder","isInputPlaceholderShown","UNSAFE_ariaLabelledBy","useAccessibleContext","mergedAriaLabelledBy","merge","styleInterpolationClasses","classes","themeClasses","useComponentTheme","TextFieldInputRedwoodTheme","styleVariant","textarea","input","prefix","suffix","insideLabel","focused","disabled","rootDivStyleClasses","selectMultipleMobileFieldInputStyles","content","useDisplayValues","itemText","valueItems","separator","plural_separator","useMemo","displayValues","selectedItems","arValues","mapFunc","itemContext","renderItemText","mappedArray","Set","createDisplayValues","concatenatedDisplayValues","join","concatDisplayValues","textTags","item","createTextTags","useSelectedOnlyData","selectedOnlyValueItemsRef","prevIsDropdownSelectedOnlyViewRef","offset","totalSize","sizePrecision","valueItem","metadata","onLoadRange","updateCache","cache","keys","forEach","has","set","keysFromValueItems","i","SelectMultiple","propAriaDescribedBy","assistiveText","propData","helpSourceLink","helpSourceText","propIsDisabled","propIsLoading","isReadonly","propIsReadonly","isRequiredShown","itemRenderer","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","propOnLoadRange","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","origIsFocused","readonlyElementRef","useFocusableTextField","ariaProps","collectionProps","dropdownArrowEventHandlers","dropdownEventHandlers","dropdownRef","hasSelectedValuesCount","inputEventHandlers","isDropdownAbove","isDropdownOpen","mainFieldRef","mouseProps","searchText","selectedValuesCountProps","setDropdownOpen","setUserInput","stopFiltering","textTagListProps","inputRef","propIsFocused","setDropdownSelectedOnlyView","selectedOnlyDataProps","handleOnFilter","args","isEmptyOrUndefined","currentRow","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","handleUpDownArrowKeys","onCurrentKeyChange","selectedKeys","setCurrentRow","setSelectedKeys","useSelectCommon","combinedAriaDescribedBy","removeDropdown","parentElement","removeChild","shouldSelectCurrentRow","currentRowArg","rowKey","selectRow","newValue","previousValue","myHandleDropdownAutoDismiss","keyboardEvent","KEYS","TAB","shiftKey","chipRef","myHandleMainFieldKeyDown","isControlOrFunctionKey","stopPropagation","LEFT","HTMLInputElement","selectionStart","selectionEnd","RIGHT","ENTER","NUMPAD_ENTER","reduce","accumKeys","currentItem","add","querySelector","handleSelectedValuesCountKeyDown","UP","DOWN","ESC","handleSelectedValuesCountKeyUp","handleSelectedValuesCountMouseDown","handleSelectedValuesCountToggle","detail","onSelectionChange","newKeys","onTextTagListExitNavigation","setTimeout","onTextTagListRemove","delete","mergeProps","onAutoDismiss","onPosition","onInput","STABLE_onDataChange","useEffectEvent","newData","firstResultKey","currentKey","useSelectMultiple","mobileDropdownCollectionProps","footerProps","mobileDropdownFooterProps","selectMultipleFieldInputProps","mobileDropdownSelectMultipleFieldInputProps","selectMultipleFieldProps","mobileDropdownSelectMultipleFieldProps","dropdownSelectedKeys","setDropdownSelectedKeys","dataCache","Map","currentValueItems","items","find","get","dropdownInputRef","selectedOnlyData","selectedOnlyOnLoadRange","closeDropdown","v","clear","onTextTagRemove","newSelectedKeys","onTextTagExitNavigation","wasDropdownOpen","prevDropdownSelectedKeys","nextDropdownSelectedKeys","equals","useMobileDropdown","useLoadingIndicatorTimer","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","mobileDropdownFormFieldContext","mobileDropdownInputProps","mobileDropdownLabelProps","mobileDropdownTextFieldProps","mobileDropdownUserAssistanceProps","dropdownId","labelComp","Label","isPhone","forId","fieldLabelProps","mobileDropdownFieldLabelProps","inlineUserAssistance","InlineUserAssistance","compactUserAssistance","CompactUserAssistance","anchorRef","FormFieldContext","ReadonlyTextField","onfocusout","onfocusin","ReadonlyTextFieldInput","as","elementRef","isDataFetched","isBeforeDataFetch","select_noMatchesFound","select_oneMatchFound","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","dropdownInlineUserAssistance","DropdownUserAssistance","isEmptyResults","dropdownListContent","EmptyResults","DefaultList","currentItemVariant","selectionMode","shouldShowDropdown","defaultMainFieldInput","isTablet","phoneMainFieldInput","SelectMobileDropdown","header","View","footer","isOpen","DropdownList","hasBottomGap","Dropdown"],"mappings":"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"}