{"version":3,"file":"PRIVATE_CheckboxRadioField.js","sources":["../../src/PRIVATE_CheckboxRadioField/CheckboxRadioField.tsx","../../src/PRIVATE_CheckboxRadioField/useCheckboxRadioField.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { forwardRef, useImperativeHandle, useRef } from 'preact/compat';\n\nimport { FocusableHandle } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { FlexboxProps } from '../utils/UNSAFE_interpolations/flexbox';\nimport { Size } from '../utils/UNSAFE_size';\n\nimport { Flex } from '../UNSAFE_Flex';\nimport { Label } from '../UNSAFE_Label';\n\nimport {\n  InlineHelp,\n  InlineUserAssistance,\n  InlineUserAssistanceContainer,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { useCheckboxRadioField } from './useCheckboxRadioField';\n\nimport { xUnits } from '../UNSAFE_Theme';\n\nimport { topUAContainerStyles } from './CheckboxRadioFieldStyles.css';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { CheckboxRadioContext } from './CheckboxRadioContext';\n\n// FIXME: \ntype CalcType = `calc(${string})`;\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: string;\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * baseId, used to generate other element IDs.\n   */\n  baseId: string;\n  /**\n   * <RadioOption /> or <Checkbox />\n   */\n  children: ComponentChildren;\n  /**\n   * layout direction of the children elements\n   */\n  direction?: FlexboxProps['direction'];\n  /**\n   * Value of the radio option.\n   */\n  hasValue?: boolean;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies if the radio group is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies if the radio group is read-only.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies whether the radio group requires a selection to be made.\n   */\n  isRequired?: boolean;\n  /**\n   * Label text for the group of radio buttons.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'none' | 'top' | 'start' | 'inside';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  // TODO: future work: extend this to support checkbox usage too\n  role?: 'radiogroup';\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n\n  parentComponentVariant: 'radioGroup';\n};\n\nexport const CheckboxRadioField = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      baseId,\n      direction = 'column',\n      hasValue,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isReadonly,\n      isRequired,\n      label,\n      labelEdge,\n      labelStartWidth = '33%',\n      parentComponentVariant,\n      messages,\n      userAssistanceDensity,\n      role,\n      children\n    }: Props,\n    ref: Ref<FocusableHandle> = null\n  ) => {\n    const hasTopUserAssistance = !!assistiveText || (!!helpSourceLink && !!helpSourceText);\n    const hasBottomUserAssistance = !isDisabled && !isReadonly;\n    const groupRef = useRef<HTMLDivElement>(null);\n\n    const { groupProps, labelProps, topUserAssistanceProps, bottomUserAssistanceProps } =\n      useCheckboxRadioField({\n        ariaDescribedBy,\n        baseId,\n        isRequired,\n        isReadonly,\n        label,\n        labelEdge,\n        messages,\n        hasValue,\n        hasTopUserAssistance,\n        hasBottomUserAssistance\n      });\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (!isDisabled) {\n          const inputChildren = groupRef.current?.querySelectorAll<HTMLInputElement>('input') ?? [];\n          const selectedChild = Array.from(inputChildren).find((child) => child.checked);\n\n          if (selectedChild) {\n            selectedChild.focus();\n          } else {\n            inputChildren[0].focus();\n          }\n        }\n      },\n      blur: () => {\n        if (groupRef.current?.contains(document.activeElement)) {\n          (document.activeElement as HTMLElement).blur();\n        }\n      }\n    }));\n\n    const [isFocusRingShown, focusRingProps] = useCollectionFocusRing(\n      (elem: Element | null) => {\n        return !!groupRef.current?.contains(elem);\n      },\n      ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft']\n    );\n\n    const content = (\n      <>\n        {hasTopUserAssistance && (\n          <div\n            id={`${baseId}-top-ua-container`}\n            class={labelEdge === 'start' ? topUAContainerStyles.start : topUAContainerStyles.top}>\n            <InlineUserAssistanceContainer {...topUserAssistanceProps}>\n              <InlineHelp\n                assistiveText={assistiveText}\n                sourceLink={helpSourceLink}\n                sourceText={helpSourceText}\n              />\n            </InlineUserAssistanceContainer>\n          </div>\n        )}\n        <Flex direction={direction} {...(direction === 'row' && { gap: xUnits(8) as CalcType })}>\n          {children}\n        </Flex>\n        {hasBottomUserAssistance && !isReadonly && (\n          <InlineUserAssistance\n            {...bottomUserAssistanceProps}\n            requiredAlignment=\"start\"\n            messages={messages}\n            userAssistanceDensity={\n              userAssistanceDensity === 'reflow' ? userAssistanceDensity : 'efficient'\n            }\n            id={`${baseId}-bottom-ua-container`}\n          />\n        )}\n      </>\n    );\n\n    // TODO: spacing under label when labelEdge === 'top' and hasTopUA.\n    return (\n      <div role={role} ref={groupRef} {...groupProps} {...focusRingProps}>\n        {labelEdge === 'none' && content}\n        {labelEdge !== 'none' && (\n          <LabelValueLayout\n            parentComponentVariant={parentComponentVariant}\n            hasTopUserAssistance={hasTopUserAssistance}\n            label={\n              <Label\n                {...labelProps}\n                variant={labelEdge}\n                userAssistanceDensity=\"efficient\"\n                parentComponentVariant={parentComponentVariant}>\n                {label}\n              </Label>\n            }\n            labelEdge={labelEdge === 'inside' ? 'top' : labelEdge}\n            labelStartWidth={labelStartWidth}>\n            <CheckboxRadioContext.Provider value={{ isFocusRingShown }}>\n              {content}\n            </CheckboxRadioContext.Provider>\n          </LabelValueLayout>\n        )}\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useMessageSeverity } from '../hooks/PRIVATE_useMessageSeverity';\nimport { useAccessibleContext } from '../hooks/UNSAFE_useAccessibleContext';\nimport { merge } from '../utils/UNSAFE_stringUtils';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\n\ntype UseCheckboxRadioFieldProps = {\n  ariaDescribedBy?: string;\n  baseId: string;\n  hasValue?: boolean;\n  hasTopUserAssistance?: boolean;\n  hasBottomUserAssistance?: boolean;\n  isFocused?: boolean; // TODO: check if this is needed\n  isReadonly?: boolean;\n  isRequired?: boolean;\n  label: string;\n  labelEdge?: 'none' | 'top' | 'start' | 'inside';\n  styleVariant?: 'default' | 'embedded'; // TODO: check if this is needed\n  messages?: ComponentProps<typeof InlineUserAssistance>['messages'];\n};\n\ntype GroupProps = {\n  groupProps: {\n    'aria-describedby'?: string;\n    'aria-labelledby'?: string;\n    'aria-required'?: boolean;\n    'aria-invalid'?: boolean;\n    id: string;\n    readonly?: boolean;\n  };\n  labelProps: {\n    forId: string;\n    id: string;\n    isRequiredShown?: boolean;\n  };\n  topUserAssistanceProps?: {\n    id: string;\n    variant: 'reflow';\n  };\n  bottomUserAssistanceProps?: {\n    id: string;\n    isRequiredShown: boolean;\n  };\n};\n\nexport function useCheckboxRadioField({\n  ariaDescribedBy,\n  baseId,\n  hasValue,\n  hasTopUserAssistance,\n  hasBottomUserAssistance,\n  isReadonly,\n  isRequired = false,\n  label,\n  labelEdge,\n  messages\n}: UseCheckboxRadioFieldProps): GroupProps {\n  const optionsGroupId = `${baseId}-group`;\n  const labelId = `${baseId}-label`;\n  const topUaId = hasTopUserAssistance ? `${baseId}-top-ua` : undefined;\n  const bottomUaId = hasBottomUserAssistance ? `${baseId}-bottom-ua` : undefined;\n\n  const { UNSAFE_ariaLabelledBy } = useAccessibleContext();\n  const ariaLabelledBy = label === '' && labelEdge === 'none' ? UNSAFE_ariaLabelledBy : labelId;\n\n  const highestMessageSeverity = useMessageSeverity(messages);\n  const hasErrorMessage = highestMessageSeverity === 'error';\n\n  return {\n    groupProps: {\n      'aria-describedby': merge([topUaId, bottomUaId, ariaDescribedBy]),\n      'aria-labelledby': ariaLabelledBy,\n      'aria-required': isRequired,\n      ...(isReadonly && { readonly: true }),\n      ...(hasErrorMessage && { 'aria-invalid': true }),\n      id: optionsGroupId\n      // TODO: ariaInvalid when one of message is error type?\n    },\n    labelProps: {\n      forId: optionsGroupId,\n      id: labelId\n    },\n    // TOP UA is assistive text and help link/text\n    ...(hasTopUserAssistance && {\n      topUserAssistanceProps: {\n        id: topUaId as string,\n        // Use reflow variant so that top UA doesn't have min height\n        variant: 'reflow'\n      }\n    }),\n    // Bottom UA is required indicator or messages\n    ...(hasBottomUserAssistance && {\n      bottomUserAssistanceProps: {\n        id: bottomUaId as string,\n        isRequiredShown: !!isRequired && !hasValue\n      }\n    })\n  };\n}\n"],"names":["CheckboxRadioField","forwardRef","ariaDescribedBy","assistiveText","baseId","direction","hasValue","helpSourceLink","helpSourceText","isDisabled","isReadonly","isRequired","label","labelEdge","labelStartWidth","parentComponentVariant","messages","userAssistanceDensity","role","children","ref","hasTopUserAssistance","hasBottomUserAssistance","groupRef","useRef","groupProps","labelProps","topUserAssistanceProps","bottomUserAssistanceProps","optionsGroupId","labelId","topUaId","undefined","bottomUaId","UNSAFE_ariaLabelledBy","useAccessibleContext","ariaLabelledBy","hasErrorMessage","useMessageSeverity","merge","readonly","id","forId","variant","isRequiredShown","useCheckboxRadioField","useImperativeHandle","focus","inputChildren","current","querySelectorAll","selectedChild","Array","from","find","child","checked","blur","contains","document","activeElement","isFocusRingShown","focusRingProps","useCollectionFocusRing","elem","content","_jsxs","_Fragment","Fragment","_jsx","class","topUAContainerStyles","InlineUserAssistanceContainer","InlineHelp","sourceLink","sourceText","Flex","gap","xUnits","InlineUserAssistance","requiredAlignment","LabelValueLayout","Label","CheckboxRadioContext","Provider","value"],"mappings":"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"}