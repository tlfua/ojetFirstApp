{"version":3,"file":"NavigationListItem-c818d33a.js","sources":["../../src/UNSAFE_NavigationList/NavigationListContext.ts","../../src/UNSAFE_NavigationList/useNavigationListItem.ts","../../src/UNSAFE_NavigationList/useNavigationListContext.ts","../../src/UNSAFE_NavigationList/NavigationList.tsx","../../src/UNSAFE_NavigationList/useNavigationList.ts","../../src/UNSAFE_NavigationList/NavigationListItem.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { NavigationListProps } from './NavigationList';\nimport { MutableRefObject } from 'preact/compat';\n\nexport type NavigationListContextProps<K extends string | number> = Pick<\n  NavigationListProps<K>,\n  'selection' | 'onSelectionChange'\n> & {\n  currentKey?: K;\n  showFocusRing: boolean;\n  containsActiveElement: () => boolean;\n  firstItemRenderedKey?: MutableRefObject<K | undefined>;\n  onCurrentKeyChange: Required<NavigationListProps<K>>['onSelectionChange'];\n};\n\n/**\n * Context used to pass navlist information without having to pass it to navlist children props.\n * We want to communicate information down to any interested navlist item children.\n */\n\nconst NavigationListContext = createContext<NavigationListContextProps<string | number>>(null!);\n\nexport { NavigationListContext };\n","import { useLayoutEffect, MutableRef, useRef } from 'preact/hooks';\n\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useNavigationListContext } from './useNavigationListContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\n\nimport {\n  NavigationListItemStyles,\n  NavigationListItemVariantOptions\n} from './themes/NavigationListItemStyles.css';\nimport { NavigationListItemRedwoodTheme } from './themes/redwood/NavigationListItemTheme';\n\n//Little hook to run some function before first render\nexport const useWillMount = (callback: () => void) => {\n  const willMount = useRef(true);\n\n  if (willMount.current) {\n    willMount.current = false;\n    callback();\n  }\n};\n\nconst flexItemStyleInterpolations = mergeInterpolations<FlexitemProps>([\n  ...Object.values(flexitemInterpolations)\n]);\nconst { class: labelContainerFlexItemClasses, ...labelContainerFlexItemStyle } =\n  flexItemStyleInterpolations({\n    alignSelf: 'center'\n  });\n\n// default style class for items in NavigationList\nexport const ITEM_STYLE_CLASS = 'oj-c-navigationlist-item';\nexport const ITEM_SELECTOR = '.' + ITEM_STYLE_CLASS;\n\nexport function useNavigationListItem<K extends string | number>({\n  itemRef,\n  itemKey\n}: {\n  itemRef: MutableRef<HTMLLIElement>;\n  itemKey: K;\n}) {\n  const {\n    onSelectionChange,\n    selection,\n    currentKey,\n    showFocusRing,\n    containsActiveElement,\n    firstItemRenderedKey,\n    onCurrentKeyChange\n  } = useNavigationListContext();\n\n  //Selection and focus state\n  const isCurrent = currentKey === itemKey;\n\n  useWillMount(() => {\n    if (\n      currentKey === undefined &&\n      firstItemRenderedKey &&\n      firstItemRenderedKey.current === undefined\n    ) {\n      firstItemRenderedKey.current = itemKey;\n    }\n  });\n\n  const isSelected = selection === itemKey;\n\n  //Styling\n  const { interactionProps, applyPseudoHoverStyle, applyHoverStyle, applyActiveStyle } =\n    useInteractionStyle();\n\n  const {\n    classes: listItemClasses,\n    styles: { labelContainerClasses }\n  } = useComponentTheme<NavigationListItemVariantOptions, NavigationListItemStyles>(\n    NavigationListItemRedwoodTheme,\n    {\n      focusRing: showFocusRing ? 'isFocusRing' : 'notFocusRing',\n      current: isCurrent ? 'isCurrent' : 'notCurrtent',\n      selected: isSelected ? 'isSelected' : 'notSelected',\n      hybridHover: applyHoverStyle ? 'isHybridHover' : 'notHybridHover',\n      pseudoHover: applyPseudoHoverStyle ? 'isPseudoHover' : 'notPseudoHover',\n      active: applyActiveStyle ? 'isActive' : 'notActive'\n    }\n  );\n\n  useLayoutEffect(() => {\n    //We just focus the item if the container is the active element\n    if (containsActiveElement?.() && isCurrent) {\n      itemRef?.current?.focus();\n    }\n  }, [isCurrent, containsActiveElement]);\n\n  //Item handlers\n  const handlePress = () => {\n    onSelectionChange?.({ value: itemKey as K });\n  };\n\n  //Legacy navlist makes selection on keyDown, but since preact tabbar made selection after keyUp, will do the same\n  //for preact navlist\n  const { pressProps } = usePress(handlePress);\n\n  // We have to update current key if there no initial selection\n  const onFocus = () => {\n    if (currentKey === undefined) {\n      onCurrentKeyChange({ value: itemKey as K });\n    }\n  };\n\n  const onFocusProps = { onFocus };\n\n  return {\n    itemHandlers: mergeProps(interactionProps, pressProps, onFocusProps),\n    itemClasses: classNames([listItemClasses, ITEM_STYLE_CLASS]),\n    isItemFocusable:\n      isCurrent || (firstItemRenderedKey?.current === itemKey && currentKey === undefined)\n        ? true\n        : false,\n    isSelected,\n    labelContainerClasses: classNames([labelContainerClasses, labelContainerFlexItemClasses]),\n    labelContainerStyle: labelContainerFlexItemStyle\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\nimport { NavigationListContext } from './NavigationListContext';\n\n/**\n * Utility hook for consuming the NavigationListContext\n *\n * @returns The value of NavigationListContext provider\n */\nfunction useNavigationListContext() {\n  return useContext(NavigationListContext);\n}\n\nexport { useNavigationListContext };\n","import { ComponentChildren } from 'preact';\nimport { MutableRef, useRef } from 'preact/hooks';\n\nimport { NavigationListContext } from './NavigationListContext';\nimport { navigationListStyles } from './themes/NavigationListStyles.css';\nimport { useNavigationList } from './useNavigationList';\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\nexport type NavigationListProps<K extends string | number> = {\n  /**\n   * A set of NavigationListItem(s) that NavigationList will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when selection has changed\n   */\n  onSelectionChange?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n  /**\n   * Specifies some screen reader text. Set it to create an accesible navigationList.\n   */\n  'aria-label'?: string;\n\n  /**\n   * Specifies some a relation between navigationList and other element. Based on this specifies some\n   * screen reader text. Set it to create an accesible navigationList.\n   */\n  'aria-labelledby'?: string;\n};\n\nexport function NavigationList<K extends string | number>({\n  children,\n  selection,\n  onSelectionChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelLedBy\n}: NavigationListProps<K>) {\n  const containerRef = useRef<HTMLUListElement>(null);\n\n  const {\n    firstItemRenderedKey,\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    containsActiveElement,\n    containerHandlers\n  } = useNavigationList({\n    containerRef: containerRef as MutableRef<HTMLUListElement>,\n    selection\n  });\n\n  return (\n    <ul\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelLedBy}\n      role=\"listbox\"\n      ref={containerRef}\n      tabIndex={children ? -1 : 0}\n      {...containerHandlers}\n      class={navigationListStyles.uListStyle}>\n      <NavigationListContext.Provider\n        value={{\n          selection,\n          onSelectionChange,\n          onCurrentKeyChange,\n          currentKey,\n          showFocusRing,\n          containsActiveElement,\n          firstItemRenderedKey\n        }}>\n        {children}\n      </NavigationListContext.Provider>\n    </ul>\n  );\n}\n","import { useState, useCallback, MutableRef, useRef } from 'preact/hooks';\n\nimport { keyExtractor, getPrevNextKey } from '../utils/PRIVATE_collectionUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { ITEM_SELECTOR } from './useNavigationListItem';\n\nimport { NavigationListContextProps } from './NavigationListContext';\n\n/**\n * type for payload of current key change event handler\n */\ntype CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/*TODO: JET-58534. Create a hook to share some logic between navlist and tabbar. Hook will be used inside this one. */\nexport function useNavigationList<K extends string | number>({\n  containerRef,\n  selection\n}: {\n  containerRef: MutableRef<HTMLUListElement>;\n  selection?: K;\n}) {\n  //Ref used to track if the first item was already rendered\n  const firstItemRenderedKey = useRef<K>();\n  const [currentKey, setCurrentKey] = useState<K | undefined>(selection);\n\n  const onCurrentKeyChange = useCallback(({ value }: CurrentKeyDetail<K | undefined>) => {\n    setCurrentKey(value);\n  }, []) as NavigationListContextProps<K>['onCurrentKeyChange'];\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    false,\n    getPrevNextKey(containerRef.current, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKey(containerRef.current, currentKey, false, ITEM_SELECTOR),\n    undefined,\n    undefined,\n    currentKey,\n    onCurrentKeyChange\n  );\n\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(\n    (elem: Element | null) => {\n      return !!containerRef.current?.contains(elem);\n    },\n    ['ArrowUp', 'ArrowDown']\n  );\n\n  const containsActiveElement = useCallback(() => {\n    return !!containerRef?.current?.contains(document.activeElement);\n  }, []);\n\n  return {\n    firstItemRenderedKey,\n    showFocusRing,\n    currentKey,\n    onCurrentKeyChange,\n    containsActiveElement,\n    containerHandlers: mergeProps(focusRingProps, currentKeyProps)\n  };\n}\n","import { useRef, MutableRef } from 'preact/hooks';\n\nimport { Text } from '../UNSAFE_Text';\n\nimport { useNavigationListItem } from './useNavigationListItem';\n\nexport type NavigationListItemProps<K extends string | number> = {\n  /**\n   * Key of the NavigationListItem\n   */\n  itemKey: K;\n  /**\n   * Label of the NavigationListItem\n   */\n  label?: string;\n};\n\n/*TODO: JET-58535. Add ripple effect when touching navigationListItem. */\nexport function NavigationListItem<K extends string | number>({\n  itemKey,\n  label\n}: NavigationListItemProps<K>) {\n  const itemRef = useRef<HTMLLIElement | null>(null);\n\n  //Logic of the component handled here\n  const {\n    isItemFocusable,\n    itemHandlers,\n    itemClasses,\n    isSelected,\n    labelContainerClasses,\n    labelContainerStyle\n  } = useNavigationListItem({\n    itemRef: itemRef as MutableRef<HTMLLIElement>,\n    itemKey\n  });\n\n  return (\n    <li\n      role=\"option\"\n      {...itemHandlers}\n      data-oj-key={itemKey}\n      class={itemClasses}\n      tabIndex={isItemFocusable ? 0 : -1}\n      aria-selected={isSelected}\n      ref={itemRef}>\n      {label && (\n        <span class={labelContainerClasses} style={labelContainerStyle}>\n          <Text size=\"inherit\" weight=\"inherit\" variant=\"inherit\">\n            {label}\n          </Text>\n        </span>\n      )}\n    </li>\n  );\n}\n"],"names":["NavigationListContext","createContext","useWillMount","callback","willMount","useRef","current","flexItemStyleInterpolations","mergeInterpolations","Object","values","flexitemInterpolations","class","labelContainerFlexItemClasses","labelContainerFlexItemStyle","alignSelf","ITEM_STYLE_CLASS","ITEM_SELECTOR","useNavigationListItem","itemRef","itemKey","onSelectionChange","selection","currentKey","showFocusRing","containsActiveElement","firstItemRenderedKey","onCurrentKeyChange","useContext","isCurrent","undefined","isSelected","interactionProps","applyPseudoHoverStyle","applyHoverStyle","applyActiveStyle","useInteractionStyle","classes","listItemClasses","styles","labelContainerClasses","useComponentTheme","NavigationListItemRedwoodTheme","focusRing","selected","hybridHover","pseudoHover","active","useLayoutEffect","focus","pressProps","usePress","value","onFocusProps","onFocus","itemHandlers","mergeProps","itemClasses","classNames","isItemFocusable","labelContainerStyle","children","ariaLabel","ariaLabelLedBy","containerRef","containerHandlers","setCurrentKey","useState","useCallback","currentKeyProps","useCurrentKey","element","keyExtractor","getPrevNextKey","focusRingProps","useCollectionFocusRing","elem","contains","document","activeElement","useNavigationList","_jsx","role","ref","tabIndex","navigationListStyles","uListStyle","Provider","label","jsx","style","Text","size","weight","variant"],"mappings":"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"}