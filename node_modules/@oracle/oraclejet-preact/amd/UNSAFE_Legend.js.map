{"version":3,"file":"UNSAFE_Legend.js","sources":["../../src/UNSAFE_Legend/LegendImageMarker.tsx","../../src/UNSAFE_Legend/LegendSymbol.tsx","../../src/UNSAFE_Legend/LegendText.tsx","../../src/UNSAFE_Legend/BaseLegendItem.tsx","../../src/UNSAFE_Legend/LegendUtils.ts","../../src/UNSAFE_Legend/BaseLegend.tsx","../../src/UNSAFE_Legend/useEvents.ts","../../src/UNSAFE_Legend/LegendNavUtils.ts","../../src/UNSAFE_Legend/useLegendTooltip.ts","../../src/UNSAFE_Legend/useItemFocus.ts","../../src/UNSAFE_Legend/useLegendLayout.ts","../../src/UNSAFE_Legend/SectionalLegendNavUtils.ts","../../src/UNSAFE_Legend/Legend.tsx","../../src/UNSAFE_Legend/SectionalLegend.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { styles } from './themes/LegendStyles.css';\n\ntype ImageMarkerProps = {\n  source: string;\n};\n\nexport function ImageMarker(props: ImageMarkerProps) {\n  const { imageMarkerStyle } = styles;\n  return <img class={imageMarkerStyle} src={props.source} />;\n}\n","import { SvgSymbol } from '../UNSAFE_SvgShapes';\nimport { SymbolProps } from './Legend.type';\nimport { ImageMarker } from './LegendImageMarker';\nimport { Property } from 'csstype';\nimport { styles } from './themes/LegendStyles.css';\n\ntype LegendSymbolProps = {\n  isHidden?: boolean;\n  lineLength?: number;\n  width?: Property.Width;\n  height?: Property.Height;\n  borderColor?: Property.Color;\n} & SymbolProps;\n\nexport const LegendSymbol = ({\n  // The default color is not in the redwood pallete.\n  // TODO: replace default legend color with UX approved pallete color when available.\n  markerColor = '#a6acb1',\n  lineColor = '#a6acb1',\n  markerShape = 'square',\n  isHidden = false,\n  lineStyle = 'none',\n  ...props\n}: LegendSymbolProps) => {\n  const { legendSymbolBaseStyle } = styles;\n  const dimensionsNotSet = props.width == null && props.height == null;\n  const setAspectRatioNone =\n    !dimensionsNotSet && (markerShape === 'rectangle' || markerShape === 'ellipse');\n  const defaultLineWidth = lineStyle != 'none' && markerShape != 'none' ? 2 : 3;\n  return (\n    <div className={legendSymbolBaseStyle} style={{ width: props.width, height: props.height }}>\n      {props.source ? (\n        <ImageMarker source={props.source} />\n      ) : (\n        <SvgSymbol\n          setAspectRatioNone={setAspectRatioNone}\n          markerShape={isHidden ? 'square' : markerShape}\n          lineStyle={isHidden ? 'none' : lineStyle}\n          lineColor={lineColor}\n          lineLength={props.lineLength}\n          lineWidth={props.lineWidth != null ? props.lineWidth : defaultLineWidth}\n          markerColor={isHidden ? 'transparent' : markerColor}\n          borderColor={isHidden ? markerColor || lineColor : props.borderColor}\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Text } from '../UNSAFE_Text';\nimport { Property } from 'csstype';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\n\ntype LegendTextProps = {\n  text: string;\n  type: 'label' | 'title';\n  fontStyle?: Property.FontStyle;\n  fontSize?: Property.FontSize;\n  fontWeight?: Property.FontWeight;\n  textDecoration?: Property.TextDecoration;\n  color?: Property.Color;\n  fontFamily?: Property.FontFamily;\n  id?: string;\n  align?: 'start' | 'center' | 'end';\n};\n\n/**\n * Returns the legend text component.\n */\nexport const LegendText = ({\n  text,\n  type = 'label',\n  id,\n  align = 'start',\n  ...props\n}: LegendTextProps) => {\n  const {\n    legendTextBaseStyle,\n    legendTextTitle,\n    legendTitleStartAlign,\n    legendTitleCenterAlign,\n    legendTitleEndAlign\n  } = styles;\n  const isTitle = type === 'title';\n  return (\n    <div\n      class={classNames([\n        legendTextBaseStyle,\n        isTitle ? legendTextTitle : '',\n        isTitle && align === 'start' ? legendTitleStartAlign : '',\n        isTitle && align === 'center' ? legendTitleCenterAlign : '',\n        isTitle && align === 'end' ? legendTitleEndAlign : ''\n      ])}\n      style={{\n        ...props\n      }}>\n      <Text size=\"inherit\" variant=\"inherit\" weight=\"inherit\" truncation={'ellipsis'} id={id}>\n        {text}\n      </Text>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { LegendSymbol } from './LegendSymbol';\nimport { LegendText } from './LegendText';\nimport { SymbolProps, TextStylesProps } from './Legend.type';\nimport { ForwardedRef, forwardRef } from 'preact/compat';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { styles } from './themes/LegendStyles.css';\n\ntype BaseLegendItemProps = {\n  text: string;\n  itemIdx: number;\n  sectionIdx: number;\n  isCurrent: boolean;\n  isFocused: boolean;\n  isHighlighted?: boolean;\n  isHidden?: boolean;\n  symbolWidth?: number;\n  symbolHeight?: number;\n  labelledBy?: string;\n  id?: string;\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  class?: string;\n  minWidth?: number;\n  gridCol?: number;\n  gridRow?: number;\n} & SymbolProps &\n  TextStylesProps;\n\nexport const BaseLegendItem = forwardRef(\n  (\n    {\n      id,\n      text,\n      sectionIdx,\n      itemIdx,\n      isHighlighted,\n      symbolHeight,\n      symbolWidth,\n      isFocused,\n      isCurrent,\n      isHidden,\n      ...props\n    }: BaseLegendItemProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const textStyles = {\n      fontFamily: props.textFontFamily,\n      fontSize: props.textFontSize,\n      color: props.textColor,\n      fontStyle: props.textFontStyle,\n      fontWeight: props.textFontWeight,\n      textDecoration: props.textTextDecoration\n    };\n\n    const symbolProps = {\n      lineStyle: props.lineStyle,\n      lineWidth: props.lineWidth,\n      markerShape: props.markerShape,\n      markerColor: props.markerColor,\n      source: props.source,\n      borderColor: props.borderColor,\n      lineColor: props.lineColor\n    };\n\n    const isNotDimmed = isHighlighted || isHighlighted == null;\n    const { legendItemBaseStyle, legendItemIsCurrent, legendItemOpacity, legendItemFocusRing } =\n      styles;\n    return (\n      <div\n        class={classNames([\n          legendItemBaseStyle,\n          isCurrent && isHighlighted == null ? legendItemIsCurrent : '',\n          !isNotDimmed ? legendItemOpacity : '',\n          isFocused ? legendItemFocusRing : '',\n          props.class\n        ])}\n        style={{\n          gridRow: props.gridRow,\n          gridColumn: props.gridCol,\n          minWidth: props.minWidth !== undefined ? `${props.minWidth}px` : undefined\n        }}\n        id={id}\n        ref={ref}\n        data-oj-section={sectionIdx}\n        data-oj-item={itemIdx}\n        aria-labelledby={props.labelledBy}\n        role={isHidden != null ? 'menuitemcheckbox' : 'img'}\n        aria-checked={isHidden != null ? !isHidden : undefined}\n        aria-label={props['aria-label'] || text}>\n        <LegendSymbol\n          {...symbolProps}\n          isHidden={isHidden}\n          lineLength={symbolWidth}\n          width={symbolWidth != null ? `${symbolWidth}px` : undefined}\n          height={symbolHeight != null ? `${symbolHeight}px` : undefined}\n        />\n        <LegendText {...textStyles} text={text} type=\"label\" />\n      </div>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { ItemInfo, LegendItem, LegendSection } from './Legend.type';\nimport { LayoutInfo } from './useLegendLayout';\n\n/**\n * Returns the value of the data-oj-item-index attribute for a given element.\n * @param element The HTML element.\n * @returns\n */\nexport const getItemInfo = (element: HTMLElement) => {\n  const item = element.dataset['ojItem'];\n  const section = element.dataset['ojSection'];\n\n  if (item == null || section == null) {\n    return;\n  }\n  return {\n    itemIdx: Number(item),\n    sectionIdx: Number(section)\n  };\n};\n\n/**\n * Checks if the item is highlighted.\n * @param id Id of the item\n * @param highlighted The set of highlighted item\n */\nexport function isItemHighlighted<K>(id: K, highlighted?: K[]) {\n  if (!highlighted) {\n    return;\n  }\n  if (highlighted.length === 0) {\n    return true;\n  }\n  return new Set(highlighted).has(id);\n}\n\n/**\n * Checks if the item is hidden.\n * @param id Id of the item.\n * @param hiddenIds The set of hidden items.\n * @returns\n */\nexport function isItemHidden<K>(id: K, hiddenIds?: K[]) {\n  if (!hiddenIds) {\n    return;\n  }\n  return new Set(hiddenIds).has(id);\n}\n/**\n * Checks if the item is the currentItem and if the focus ring\n * is visible.\n * @param itemInfo ItemInfo\n * @param itemIdx Item index\n * @param sectionIdx Section index\n */\nexport const hasFocusRing = (itemInfo: ItemInfo, itemIdx: number, sectionIdx?: number) => {\n  if (!itemInfo.isFocusVisible) return false;\n  const { itemIdx: item, sectionIdx: section } = itemInfo;\n\n  if (sectionIdx == null) {\n    return item === itemIdx;\n  }\n  return item === itemIdx && section === sectionIdx;\n};\n\n/**\n * Returns the text for the legend datatip.\n * @param items The legend items data.\n * @param itemInfoRef The item currently hovered.\n * @param currentItem The item that is currently keyboard focused.\n */\nexport function getDatatipText<K>(\n  items: LegendItem<K>[] | LegendSection<K>[],\n  getItem: (\n    itemInfo: ItemInfo,\n    items: LegendItem<K>[] | LegendSection<K>[]\n  ) => LegendItem<K> | undefined,\n  focusedItem: ItemInfo,\n  hoveredItem?: ItemInfo\n) {\n  const isPointerActive = hoveredItem?.isCurrent;\n\n  if (isPointerActive && hoveredItem.itemIdx != null) {\n    return getItem(hoveredItem, items)?.datatip;\n  }\n  if (focusedItem && focusedItem.isCurrent) {\n    return getItem(focusedItem, items)?.datatip;\n  }\n  return;\n}\n\n/**\n * Returns the aria properties for the legend.\n * @param isReadOnly { boolean } If the legend is readonly.\n * @param ariaLabel { string } The aria-label set by the app.\n * @returns The aria props.\n */\nexport function getAriaProps<K>(\n  isReadOnly?: boolean,\n  ariaLabel?: string,\n  hiddenIds?: K[]\n): {\n  'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];\n  'aria-disabled'?: HTMLAttributesSignalExcluded['aria-disabled'];\n  role?: HTMLAttributesSignalExcluded['role'];\n} {\n  const hideAndShow = hiddenIds && !isReadOnly;\n  return {\n    'aria-label': ariaLabel,\n    'aria-disabled': isReadOnly,\n    role: hideAndShow ? 'menu' : 'application'\n  };\n}\n\n/**\n * Gererates randomId used for aria-activedescendant.\n * @returns\n */\nexport function getRandomId() {\n  return `_${Math.random().toString(36).slice(2)}`; //@RandomNumberOK\n}\n\n/**\n * Returns the item props for BaseLegendItem.\n * @param item The legend item.\n * @param itemIdx The item index of the item.\n * @param sectionIdx The section index of section of the item.\n * @param focusedItem The info of currently focused item.\n * @param isReadOnly Whether the legend is readonly.\n * @param hoveredItem The info of the currently hovered item.\n * @param hiddenIds The hidden ids.\n * @param highlightedIds The highlighted ids.\n */\nexport function getItemProps<K>(\n  item: LegendItem<K>,\n  itemIdx: number,\n  sectionIdx: number | undefined,\n  focusedItem: ItemInfo,\n  isReadOnly?: boolean,\n  hoveredItem?: ItemInfo,\n  hiddenIds?: K[],\n  highlightedIds?: K[]\n) {\n  let isCurrent = false;\n  if (!isReadOnly) {\n    const isFocusedItem = itemIdx === focusedItem.itemIdx && sectionIdx === focusedItem.sectionIdx;\n    const isHoveredItem =\n      itemIdx === hoveredItem?.itemIdx && sectionIdx === hoveredItem?.sectionIdx;\n    isCurrent = !!(\n      (isFocusedItem && focusedItem.isCurrent) ||\n      (isHoveredItem && hoveredItem?.isCurrent)\n    );\n  }\n\n  return {\n    isCurrent,\n    isHighlighted: isItemHighlighted(item.id, highlightedIds),\n    isHidden: isItemHidden(item.id, hiddenIds),\n    isFocused: hasFocusRing(focusedItem, itemIdx, sectionIdx),\n    key: item.id,\n    ...item\n  };\n}\n\n/**\n * Compares if two ItemInfo are equal\n * @param item1\n * @param item2\n * @returns\n */\nexport const isEqualItem = (item1?: ItemInfo, item2?: ItemInfo) => {\n  return item1?.itemIdx === item2?.itemIdx && item1?.sectionIdx === item2?.sectionIdx;\n};\n\n/**\n * Returns the num of cols and rows for the legend.\n */\nexport const getGridNums = (numItems: number, layoutInfo?: LayoutInfo) => {\n  let itemsPerRow;\n  let itemsPerCol;\n\n  if (layoutInfo?.isWrapped) {\n    itemsPerRow = layoutInfo.itemsPerRow;\n    itemsPerCol = Math.ceil(numItems / itemsPerRow);\n    itemsPerRow = Math.ceil(numItems / itemsPerCol);\n  }\n\n  return { itemsPerRow, itemsPerCol };\n};\n\n/**\n * Returns the grid row and column for given item.\n * @param noOfItems The number of items in the section.\n * @param index The index of the item.\n * @param itemsPerRow The num of items per row in the grid.\n * @param itemsPerCol The num of items per col in the grid.\n * @returns\n */\nexport function getGridCellIndices(\n  noOfItems: number,\n  index: number,\n  itemsPerRow?: number,\n  itemsPerCol?: number\n) {\n  let gridRow;\n  let gridCol;\n\n  if (itemsPerRow && itemsPerCol && noOfItems > itemsPerRow) {\n    gridRow = (index % itemsPerCol) + 1;\n    gridCol = Math.floor(index / itemsPerCol) + 1;\n  }\n  return { gridRow, gridCol };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { BaseLegendProps, LegendItem } from './Legend.type';\nimport { BaseLegendItem } from './BaseLegendItem';\nimport { getItemProps, getGridCellIndices } from './LegendUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { styles } from './themes/LegendStyles.css';\n\n/**\n * The controlled legend reponsible only for rendering the legend items.\n */\nexport const BaseLegend = <K,>({\n  orientation = 'horizontal',\n  highlightedIds,\n  hiddenIds,\n  focusedItemInfo,\n  hoveredItemInfo,\n  sectionIdx,\n  activeId,\n  isReadOnly,\n  items,\n  symbolHeight,\n  symbolWidth,\n  ...props\n}: BaseLegendProps<K>) => {\n  const isHoriz = orientation === 'horizontal';\n  const isColumnDefined = props.isColumnWidthValidRef.current;\n  const columTemplates =\n    isColumnDefined && isHoriz ? `repeat(${props.itemsPerRow}, ${props.itemWidth})` : undefined;\n  props.isColumnWidthValidRef.current = false;\n  const {\n    baseLegendStyles,\n    baseLegendHorizontal,\n    baseLegendVertical,\n    baseLegendVerticalItem,\n    baseLegendPaddingBottom,\n    baseLegendPaddingTop,\n    baseLegendPaddingEnd\n  } = styles;\n\n  return (\n    <div\n      className={classNames([\n        baseLegendStyles,\n        isHoriz ? baseLegendHorizontal : baseLegendVertical\n      ])}\n      style={{\n        gridTemplateColumns: columTemplates,\n        // set maxWidth to 100% on second render for text truncation to work.\n        maxWidth: isColumnDefined ? '100%' : ''\n      }}>\n      {items.map((item: LegendItem<K>, index: number) => {\n        const itemProps = getItemProps(\n          item,\n          index,\n          sectionIdx,\n          focusedItemInfo,\n          isReadOnly,\n          hoveredItemInfo,\n          hiddenIds,\n          highlightedIds\n        );\n        const isFocusedItem =\n          focusedItemInfo.sectionIdx === sectionIdx && focusedItemInfo.itemIdx === index;\n        const { gridRow, gridCol } = getGridCellIndices(\n          items.length,\n          index,\n          props.itemsPerRow,\n          props.itemsPerCol\n        );\n        const needsBottomSpace = gridRow != null && gridRow != props.itemsPerCol;\n        const needsTopSpace = gridRow != null && gridRow != 1;\n        return (\n          <BaseLegendItem\n            ref={isFocusedItem ? props.focusedItemRef : undefined}\n            itemIdx={index}\n            sectionIdx={sectionIdx}\n            symbolHeight={symbolHeight}\n            symbolWidth={symbolWidth}\n            {...props}\n            {...itemProps}\n            gridRow={gridRow}\n            gridCol={gridCol}\n            minWidth={props.itemWidth}\n            id={itemProps.isCurrent ? activeId : ''}\n            class={classNames([\n              isHoriz ? '' : baseLegendVerticalItem,\n              needsTopSpace ? baseLegendPaddingTop : '',\n              needsBottomSpace ? baseLegendPaddingBottom : '',\n              baseLegendPaddingEnd\n            ])}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useState } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ItemActionDetail, InputDetail, ItemInfo } from './Legend.type';\nimport { getItemInfo, getRandomId, isEqualItem } from './LegendUtils';\n\nexport function useEvents<K>(\n  isInteractive: boolean,\n  isHideShow: boolean,\n  getDetailFromInfo: (info?: ItemInfo) => InputDetail<K>,\n  getPrevItemInfo: (info: ItemInfo) => ItemInfo,\n  getNextItemInfo: (info: ItemInfo) => ItemInfo,\n  onItemAction?: (detail: ItemActionDetail<K>) => void,\n  onInput?: (detail: InputDetail<K>) => void\n) {\n  const [focusedItemInfo, setfocusedItemInfo] = useState<ItemInfo>({\n    itemIdx: 0,\n    sectionIdx: 0\n  });\n  const [hoveredItemInfo, sethoveredItemInfo] = useState<ItemInfo>();\n  const activeId = useRef<string>();\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (!isEqualItem(itemInfo, hoveredItemInfo)) {\n      sethoveredItemInfo(itemInfo && { ...itemInfo, isCurrent: true });\n      activeId.current = getRandomId();\n      if (isInteractive) {\n        focusedItemInfo ? setfocusedItemInfo({ ...focusedItemInfo, isCurrent: false }) : '';\n        onInput?.(getDetailFromInfo(itemInfo));\n      }\n    }\n  };\n\n  const pointerLeaveHandler = () => {\n    sethoveredItemInfo(undefined);\n    activeId.current = undefined;\n    if (isInteractive) {\n      onInput?.(getDetailFromInfo());\n    }\n  };\n\n  if (!isInteractive) {\n    return {\n      focusedItemInfo,\n      hoveredItemInfo,\n      // include pointer leave and pointer move for datatip\n      onPointerLeave: pointerLeaveHandler,\n      onPointerMove: hoverHandler\n    };\n  }\n\n  const updatefocusedItemInfo = (itemInfo: ItemInfo) => {\n    onInput?.(getDetailFromInfo(itemInfo));\n    activeId.current = getRandomId();\n    setfocusedItemInfo(itemInfo);\n  };\n\n  const handleKeyboardInput = (item: ItemInfo) => {\n    if (!isEqualItem(item, focusedItemInfo)) {\n      item.isCurrent = true;\n      item.isFocusVisible = true;\n      if (hoveredItemInfo) {\n        sethoveredItemInfo({ ...hoveredItemInfo, isCurrent: false });\n      }\n      updatefocusedItemInfo(item);\n    }\n  };\n\n  const triggerOnAction = () => {\n    const { sectionId, itemId } = getDetailFromInfo(focusedItemInfo);\n    if (itemId != null) {\n      onItemAction?.({ sectionId, itemId });\n      activeId.current = getRandomId();\n    }\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const itemInfo = getItemInfo(event.target as HTMLElement);\n    if (itemInfo != null) {\n      setfocusedItemInfo(itemInfo);\n      const { sectionId, itemId } = getDetailFromInfo(itemInfo);\n      if (itemId != null) {\n        onItemAction?.({ sectionId, itemId });\n        activeId.current = getRandomId();\n      }\n    }\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown': {\n        const nextItemInfo = getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowUp': {\n        const nextItemInfo = getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowRight': {\n        const nextItemInfo = isRtl\n          ? getPrevItemInfo(focusedItemInfo)\n          : getNextItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n      case 'ArrowLeft': {\n        const nextItemInfo = isRtl\n          ? getNextItemInfo(focusedItemInfo)\n          : getPrevItemInfo(focusedItemInfo);\n        handleKeyboardInput(nextItemInfo);\n        break;\n      }\n    }\n    cancelEvent(event);\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.code;\n    switch (key) {\n      case 'Space': {\n        if (isHideShow) {\n          triggerOnAction();\n        }\n        break;\n      }\n      case 'Enter': {\n        triggerOnAction();\n        break;\n      }\n      case 'Home': {\n        updatefocusedItemInfo({\n          itemIdx: 0,\n          sectionIdx: 0,\n          isFocusVisible: true,\n          isCurrent: true\n        });\n        break;\n      }\n      case 'End': {\n        updatefocusedItemInfo({\n          itemIdx: -1,\n          sectionIdx: -1,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n      case 'Tab': {\n        updatefocusedItemInfo({\n          ...focusedItemInfo,\n          isCurrent: true,\n          isFocusVisible: true\n        });\n        break;\n      }\n    }\n  };\n\n  const blurHandler = () => {\n    const itemInfo = { ...focusedItemInfo, isCurrent: false, isFocusVisible: false };\n    if (hoveredItemInfo != null || focusedItemInfo.isCurrent) {\n      onInput?.(getDetailFromInfo(undefined));\n    }\n    setfocusedItemInfo(itemInfo);\n  };\n\n  return {\n    focusedItemInfo,\n    hoveredItemInfo,\n    'aria-activedescendant': activeId.current,\n    onPointerUp: pointerUpHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyUpHandler,\n    onKeyDown: keyDownHandler,\n    onPointerLeave: pointerLeaveHandler,\n    onBlur: blurHandler\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { InputDetail, ItemInfo, LegendItem } from './Legend.type';\n\nfunction getItem<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  const { itemIdx } = itemInfo;\n\n  if (itemIdx == -1) {\n    return items[items.length - 1];\n  }\n  return items[itemIdx];\n}\n\nfunction getNextItemInfo<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemInfo.itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.min(items.length - 1, itemIdx + 1);\n\n  return { sectionIdx: 0, itemIdx };\n}\n\nfunction getPrevItemInfo<K>(itemInfo: ItemInfo, items: LegendItem<K>[]) {\n  let itemIdx = itemInfo.itemIdx;\n\n  if (itemInfo.itemIdx == -1) {\n    itemIdx = items.length - 1;\n  }\n\n  itemIdx = Math.max(0, itemIdx - 1);\n  return { sectionIdx: 0, itemIdx };\n}\n\n/**\n * Returns utils functions for navigation in simple legend.\n * @param items\n * @returns\n */\nexport function getLegendNavUtils<K>(items: LegendItem<K>[]) {\n  return {\n    getItem: (itemInfo: ItemInfo) => {\n      return getItem(itemInfo, items);\n    },\n    getDetailFromInfo: (itemInfo?: ItemInfo): InputDetail<K> => {\n      if (!itemInfo) {\n        return { itemId: undefined };\n      }\n      const item = getItem(itemInfo, items);\n      return { itemId: item.id };\n    },\n    getPrevItemInfo: (itemInfo: ItemInfo) => {\n      return getPrevItemInfo(itemInfo, items);\n    },\n    getNextItemInfo: (itemInfo: ItemInfo) => {\n      return getNextItemInfo(itemInfo, items);\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { MutableRef, Ref, useLayoutEffect, useState } from 'preact/hooks';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\nimport { ItemInfo } from './Legend.type';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype props = {\n  text?: string;\n  rootDimsRef: MutableRef<DOMRect | undefined>;\n  focusedItemRef: Ref<HTMLDivElement>;\n  focusedItemInfo: ItemInfo;\n};\n\nconst DEFAULT_OFFSET = 8;\n\n/**\n * Calculate the datatip offset for datatip when keyboard focus is active.\n * @param focusedItemRef The ref for currentItem node.\n * @param rootRef The ref for root of the legend.\n * @param currentItem The ItemInfo of the current keyboard focused item.\n * @returns\n */\nconst calculateOffset = (\n  focusedItemRef: Ref<HTMLDivElement>,\n  rootDimsRef: MutableRef<DOMRect | undefined>,\n  currentItem: ItemInfo,\n  isRtl: boolean\n) => {\n  let crossAxis = 0;\n  let mainAxisOffset = DEFAULT_OFFSET;\n  if (focusedItemRef.current && currentItem.isCurrent && rootDimsRef.current) {\n    const rootDim = rootDimsRef.current;\n    const itemDim = focusedItemRef.current.getBoundingClientRect();\n    crossAxis = itemDim.x + itemDim.width / 2 - (rootDim.x + rootDim.width / 2);\n    crossAxis = isRtl ? -1 * crossAxis : crossAxis;\n    mainAxisOffset += rootDim.y - itemDim.y;\n    mainAxisOffset = Math.min(\n      DEFAULT_OFFSET,\n      Math.max(mainAxisOffset, itemDim.height - rootDim.height + DEFAULT_OFFSET)\n    );\n  }\n  return { crossAxis, mainAxis: mainAxisOffset };\n};\n\nexport const useLegendTooltip = ({ text, rootDimsRef, focusedItemRef, focusedItemInfo }: props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const [offset, setOffset] = useState<{ mainAxis?: number; crossAxis?: number }>(\n    calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl)\n  );\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  useLayoutEffect(() => {\n    setOffset(calculateOffset(focusedItemRef, rootDimsRef, focusedItemInfo, isRtl));\n  }, [focusedItemInfo]);\n\n  const anchor = focusedItemInfo?.isCurrent ? 'element' : 'pointer';\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text: text,\n    position: 'top',\n    isDisabled: false,\n    variant: 'datatip',\n    anchor: { x: anchor, y: anchor },\n    offset: offset,\n    isOpen,\n    onToggle: ({ value }) => setIsOpen(value)\n  });\n\n  return { tooltipContent, tooltipProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useEffect, useRef } from 'preact/hooks';\nimport { ItemInfo } from './Legend.type';\n\n/**\n * Hook to track focus item ref and ensure focus item is always\n * in view.\n */\nexport function useItemFocus(focusedItem: ItemInfo) {\n  const focusedItemRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (focusedItem.isFocusVisible) {\n      focusedItemRef.current?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  }, [focusedItem]);\n\n  return { focusedItemRef };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { RefObject } from 'preact';\nimport { LegendItem, LegendSection } from './Legend.type';\nimport { useLayoutEffect, useRef, useState } from 'preact/hooks';\n\n/**\n * Checks if two layout infos are equal.\n */\nconst areEqualLayoutInfo = function (info1: LayoutInfo[], info2: LayoutInfo[]) {\n  return (\n    info1.length === info2.length &&\n    info1.every(\n      (value, index) =>\n        value.isWrapped === info2[index].isWrapped &&\n        value.maxItemWidth === info2[index].maxItemWidth &&\n        info1[index].itemsPerRow === info2[index].itemsPerRow\n    )\n  );\n};\n\ntype Props<K> = {\n  items: LegendItem<K>[] | LegendSection<K>[];\n  rootRef: RefObject<HTMLDivElement>;\n  rootDimsRef: RefObject<DOMRect | undefined>;\n  isSectional?: boolean;\n  orientation?: 'vertical' | 'horizontal';\n};\n\nexport type LayoutInfo = {\n  isWrapped: boolean;\n  maxItemWidth: number;\n  itemsPerRow: number;\n};\n\n/**\n * Returns maximum of the width among the items section of legend.\n * @param legend BaseLegend element\n * @returns\n */\nconst getMaxWidth = (baseLegend: HTMLElement) => {\n  let maxItemWidth = 0;\n  [...baseLegend.children].forEach((e) => {\n    const item = e as HTMLElement;\n    maxItemWidth = Math.max(maxItemWidth, Math.ceil(item.getBoundingClientRect().width));\n  });\n\n  return maxItemWidth;\n};\n\nexport function useLegendLayout<K>({\n  items,\n  rootRef,\n  rootDimsRef,\n  isSectional = false,\n  orientation\n}: Props<K>) {\n  const [layoutInfo, setLayoutInfo] = useState<LayoutInfo[]>([]);\n  const isColumnWidthValidRef = useRef(false);\n  const previousOrientationRef = useRef(orientation);\n  useLayoutEffect(() => {\n    if (!rootRef.current) {\n      return;\n    }\n    // recalculate rootDims everytime items change.\n    rootDimsRef.current = rootRef.current.getBoundingClientRect();\n    previousOrientationRef.current = orientation;\n    const legendLayoutInfo: LayoutInfo[] = [];\n    const rootElement = isSectional ? rootRef.current.children[0] : rootRef.current;\n    [...rootElement.children].forEach((section: Element) => {\n      const sectionWidth = (section as HTMLElement).getBoundingClientRect().width;\n      const baseLegend = isSectional ? section.children[section.childElementCount - 1] : section;\n      let isWrapped = sectionWidth > rootDimsRef.current?.width!;\n      if (baseLegend.childElementCount > 0 && sectionWidth === rootDimsRef.current?.width!) {\n        // If text is trucated, sectionwidth and rootWidth are equal but legend section could still be wrapped.\n        // compare offsetTop with last item to determine wrapping. For sectional legend, check the section div (title + baselegend)\n        // offsetTop with the offsetTop of the last element to determine if they are not in the same level (i.e wrapped)\n        isWrapped =\n          (!isSectional &&\n            (baseLegend.children[baseLegend.childElementCount - 1] as HTMLElement).offsetTop >\n              (baseLegend.children[0] as HTMLElement).offsetTop) ||\n          (isSectional &&\n            (baseLegend.children[baseLegend.childElementCount - 1] as HTMLElement).offsetTop >\n              (section as HTMLElement).offsetTop);\n      }\n      const maxItemWidth = getMaxWidth(baseLegend as HTMLElement);\n      legendLayoutInfo.push({\n        maxItemWidth: Math.min(maxItemWidth, rootDimsRef.current?.width!),\n        itemsPerRow: Math.max(1, Math.floor(rootDimsRef.current?.width! / maxItemWidth)),\n        isWrapped\n      });\n    });\n\n    if (!areEqualLayoutInfo(layoutInfo, legendLayoutInfo)) {\n      isColumnWidthValidRef.current = true;\n      setLayoutInfo(legendLayoutInfo);\n    }\n  }, [items, orientation]);\n\n  return {\n    layoutInfo: previousOrientationRef.current != orientation ? [] : layoutInfo,\n    isColumnWidthValidRef\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { InputDetail, ItemInfo, LegendSection } from './Legend.type';\n\nfunction getItem<K>(itemInfo: ItemInfo, sections: LegendSection<K>[]) {\n  const { sectionIdx, itemIdx } = itemInfo;\n\n  if (sectionIdx == -1 && itemIdx == -1) {\n    const itemsLength = sections[sections.length - 1].items.length;\n    return sections[sections.length - 1].items[itemsLength - 1];\n  }\n\n  return sections[sectionIdx].items[itemIdx];\n}\n\nfunction getNextItemInfo<K>(itemInfo: ItemInfo, sections: LegendSection<K>[]) {\n  let { itemIdx, sectionIdx } = itemInfo;\n\n  if (sectionIdx == -1 && itemIdx == -1) {\n    return {\n      itemIdx: sections[sections.length - 1].items.length - 1,\n      sectionIdx: sections.length - 1\n    };\n  }\n\n  itemIdx += 1;\n  const itemsLength = sections[sectionIdx].items.length;\n  if (itemIdx >= itemsLength) {\n    if (sectionIdx === sections.length - 1) {\n      itemIdx = itemInfo.itemIdx;\n    } else {\n      sectionIdx += 1;\n      itemIdx = 0;\n    }\n  }\n  return { itemIdx, sectionIdx };\n}\n\nfunction getPrevItemInfo<K>(itemInfo: ItemInfo, sections: LegendSection<K>[]) {\n  let { itemIdx, sectionIdx } = itemInfo;\n\n  if (sectionIdx == -1 && itemIdx == -1) {\n    (itemIdx = sections[sections.length - 1].items.length - 1), (sectionIdx = sections.length - 1);\n  }\n  itemIdx -= 1;\n\n  if (itemIdx < 0) {\n    if (sectionIdx === 0) {\n      itemIdx = 0;\n    } else {\n      itemIdx = sections[sectionIdx - 1].items.length - 1;\n      sectionIdx -= 1;\n    }\n  }\n  return { itemIdx, sectionIdx };\n}\n\n/**\n * Returns utils functions for navigation in simple sectional legend.\n * @param items\n * @returns\n */\nexport function getSectionalNavUtils<K>(sections: LegendSection<K>[]) {\n  return {\n    getItem: (itemInfo: ItemInfo) => {\n      return getItem(itemInfo, sections);\n    },\n    getDetailFromInfo: (itemInfo?: ItemInfo): InputDetail<K> => {\n      if (!itemInfo) {\n        return { itemId: undefined, sectionId: undefined };\n      }\n      const item = getItem(itemInfo, sections);\n      const sectionId = sections[itemInfo.sectionIdx].id;\n      return { itemId: item.id, sectionId: sectionId };\n    },\n    getPrevItemInfo: (itemInfo: ItemInfo) => {\n      return getPrevItemInfo(itemInfo, sections);\n    },\n    getNextItemInfo: (itemInfo: ItemInfo) => {\n      return getNextItemInfo(itemInfo, sections);\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport { BaseLegend } from './BaseLegend';\nimport { useEvents } from './useEvents';\nimport { LegendProps } from './Legend.type';\nimport { getLegendNavUtils } from './LegendNavUtils';\nimport { getAriaProps, getDatatipText, getGridNums } from './LegendUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useLegendTooltip } from './useLegendTooltip';\nimport { useItemFocus } from './useItemFocus';\nimport { useLegendLayout } from './useLegendLayout';\nimport { styles } from './themes/LegendStyles.css';\n\n/**\n * A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.\n */\nexport function Legend<K extends string | number>({\n  orientation = 'horizontal',\n  items,\n  isReadOnly = true,\n  onItemAction,\n  onInput,\n  ...props\n}: LegendProps<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const rootDimsRef = useRef<DOMRect>();\n\n  const { getItem, getDetailFromInfo, getPrevItemInfo, getNextItemInfo } = getLegendNavUtils(items);\n\n  const { layoutInfo, isColumnWidthValidRef } = useLegendLayout({\n    rootRef,\n    rootDimsRef,\n    items,\n    orientation\n  });\n\n  const { hoveredItemInfo, focusedItemInfo, ...eventsProps } = useEvents<K>(\n    !isReadOnly,\n    props.hiddenIds != null,\n    getDetailFromInfo,\n    getPrevItemInfo,\n    getNextItemInfo,\n    onItemAction,\n    onInput\n  );\n\n  const { focusedItemRef } = useItemFocus(focusedItemInfo);\n  const datatipText = getDatatipText(items, getItem, focusedItemInfo, hoveredItemInfo);\n  const { tooltipContent, tooltipProps } = useLegendTooltip({\n    text: datatipText,\n    rootDimsRef,\n    focusedItemInfo,\n    focusedItemRef\n  });\n\n  const ariaProps = getAriaProps(isReadOnly, props['aria-label'], props.hiddenIds);\n  const mergedProps = mergeProps(eventsProps, tooltipProps);\n  const { itemsPerCol, itemsPerRow } = getGridNums(items.length, layoutInfo[0]);\n  const { legendStyle } = styles;\n\n  return (\n    <div\n      ref={rootRef}\n      tabIndex={isReadOnly ? undefined : 0}\n      class={legendStyle}\n      {...ariaProps}\n      {...mergedProps}>\n      <BaseLegend\n        {...props}\n        focusedItemRef={focusedItemRef}\n        items={items}\n        isReadOnly={isReadOnly}\n        orientation={orientation}\n        sectionIdx={0}\n        itemsPerRow={itemsPerRow}\n        isColumnWidthValidRef={isColumnWidthValidRef}\n        itemsPerCol={itemsPerCol}\n        itemWidth={layoutInfo[0]?.isWrapped ? layoutInfo[0]?.maxItemWidth : undefined}\n        focusedItemInfo={focusedItemInfo}\n        hoveredItemInfo={hoveredItemInfo}\n        activeId={eventsProps['aria-activedescendant']}\n      />\n      {tooltipContent}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport { BaseLegend } from './BaseLegend';\nimport { useEvents } from './useEvents';\nimport { LegendSection, SectionalLegendProps } from './Legend.type';\nimport { getSectionalNavUtils } from './SectionalLegendNavUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { getDatatipText, getAriaProps, getRandomId, getGridNums } from './LegendUtils';\nimport { useLegendTooltip } from './useLegendTooltip';\nimport { LegendText } from './LegendText';\nimport { useItemFocus } from './useItemFocus';\nimport { useLegendLayout } from './useLegendLayout';\nimport { Flex } from '../UNSAFE_Flex';\nimport { styles } from './themes/LegendStyles.css';\n\n/**\n * A Sectional Legend allows grouping of legend items in sections with a specific title.\n */\nexport function SectionalLegend<K extends string | number>({\n  orientation = 'horizontal',\n  sectionTitleHAlign = 'start',\n  sections,\n  isReadOnly = true,\n  onItemAction,\n  onInput,\n  ...props\n}: SectionalLegendProps<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const rootDimsRef = useRef<DOMRect>();\n\n  const { getItem, getDetailFromInfo, getPrevItemInfo, getNextItemInfo } =\n    getSectionalNavUtils(sections);\n\n  const { layoutInfo, isColumnWidthValidRef } = useLegendLayout({\n    rootRef,\n    rootDimsRef,\n    items: sections,\n    isSectional: true,\n    orientation\n  });\n  const { focusedItemInfo, hoveredItemInfo, ...eventsProps } = useEvents(\n    !isReadOnly,\n    props.hiddenIds != null,\n    getDetailFromInfo,\n    getPrevItemInfo,\n    getNextItemInfo,\n    onItemAction,\n    onInput\n  );\n\n  const { focusedItemRef } = useItemFocus(focusedItemInfo);\n  const text = getDatatipText(sections, getItem, focusedItemInfo, hoveredItemInfo);\n  const { tooltipContent, tooltipProps } = useLegendTooltip({\n    text,\n    rootDimsRef,\n    focusedItemInfo,\n    focusedItemRef\n  });\n  const ariaProps = getAriaProps(isReadOnly, props['aria-label'], props.hiddenIds);\n  const mergedProps = mergeProps(eventsProps, tooltipProps);\n  const titleStyle = {\n    fontFamily: props.sectionTitleFontFamily,\n    fontSize: props.sectionTitleFontSize,\n    color: props.sectionTitleColor,\n    fontStyle: props.sectionTitleFontStyle,\n    fontWeight: props.sectionTitleFontWeight,\n    textDecoration: props.sectionTitleTextDecoration\n  };\n  const { sectionalLegendBaseStyles } = styles;\n  const isHoriz = orientation === 'horizontal';\n\n  return (\n    <div\n      ref={rootRef}\n      tabIndex={isReadOnly ? undefined : 0}\n      class={sectionalLegendBaseStyles}\n      {...ariaProps}\n      {...mergedProps}>\n      <Flex direction={isHoriz ? 'row' : 'column'} wrap={'wrap'} gap={'2.3x'}>\n        {sections.map((section: LegendSection<K>, index: number) => {\n          const labelledById = !isReadOnly ? getRandomId() : '';\n          const isWrappedSection = layoutInfo[index]?.isWrapped;\n          const flexDirection = !isHoriz || isWrappedSection ? 'column' : 'row';\n          const alignItems = !isHoriz || isWrappedSection ? 'start' : 'center';\n          const { itemsPerCol, itemsPerRow } = getGridNums(section.items.length, layoutInfo[index]);\n          return (\n            <Flex\n              align={alignItems}\n              direction={flexDirection}\n              maxWidth={'100%'}\n              justify={'start'}\n              wrap=\"wrap\">\n              <LegendText\n                text={section.title}\n                {...titleStyle}\n                type=\"title\"\n                id={labelledById}\n                align={sectionTitleHAlign}\n              />\n              <BaseLegend\n                {...props}\n                isColumnWidthValidRef={isColumnWidthValidRef}\n                focusedItemRef={focusedItemRef}\n                labelledBy={labelledById}\n                sectionIdx={index}\n                items={section.items}\n                orientation={orientation}\n                itemsPerRow={itemsPerRow}\n                itemsPerCol={itemsPerCol}\n                itemWidth={\n                  layoutInfo[index]?.isWrapped ? layoutInfo[index]?.maxItemWidth : undefined\n                }\n                isReadOnly={isReadOnly}\n                focusedItemInfo={focusedItemInfo}\n                hoveredItemInfo={hoveredItemInfo}\n                activeId={eventsProps['aria-activedescendant']}\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n      {tooltipContent}\n    </div>\n  );\n}\n"],"names":["ImageMarker","props","imageMarkerStyle","styles","_jsx","jsx","class","src","source","LegendSymbol","markerColor","lineColor","markerShape","isHidden","lineStyle","legendSymbolBaseStyle","setAspectRatioNone","width","height","defaultLineWidth","className","style","children","SvgSymbol","lineLength","lineWidth","borderColor","LegendText","text","type","id","align","legendTextBaseStyle","legendTextTitle","legendTitleStartAlign","legendTitleCenterAlign","legendTitleEndAlign","isTitle","classNames","Text","size","variant","weight","truncation","BaseLegendItem","forwardRef","sectionIdx","itemIdx","isHighlighted","symbolHeight","symbolWidth","isFocused","isCurrent","ref","textStyles","fontFamily","textFontFamily","fontSize","textFontSize","color","textColor","fontStyle","textFontStyle","fontWeight","textFontWeight","textDecoration","textTextDecoration","symbolProps","isNotDimmed","legendItemBaseStyle","legendItemIsCurrent","legendItemOpacity","legendItemFocusRing","_jsxs","gridRow","gridColumn","gridCol","minWidth","undefined","labelledBy","role","getItemInfo","element","item","dataset","section","Number","isItemHighlighted","highlighted","length","Set","has","isItemHidden","hiddenIds","hasFocusRing","itemInfo","isFocusVisible","getDatatipText","items","getItem","focusedItem","hoveredItem","isPointerActive","datatip","getAriaProps","isReadOnly","ariaLabel","getRandomId","Math","random","toString","slice","isEqualItem","item1","item2","getGridNums","numItems","layoutInfo","itemsPerRow","itemsPerCol","isWrapped","ceil","BaseLegend","orientation","highlightedIds","focusedItemInfo","hoveredItemInfo","activeId","isHoriz","isColumnDefined","isColumnWidthValidRef","current","columTemplates","itemWidth","baseLegendStyles","baseLegendHorizontal","baseLegendVertical","baseLegendVerticalItem","baseLegendPaddingBottom","baseLegendPaddingTop","baseLegendPaddingEnd","gridTemplateColumns","maxWidth","map","index","itemProps","isFocusedItem","isHoveredItem","key","getItemProps","noOfItems","floor","getGridCellIndices","needsBottomSpace","needsTopSpace","focusedItemRef","useEvents","isInteractive","isHideShow","getDetailFromInfo","getPrevItemInfo","getNextItemInfo","onItemAction","onInput","setfocusedItemInfo","useState","sethoveredItemInfo","useRef","direction","useUser","isRtl","hoverHandler","event","target","pointerLeaveHandler","onPointerLeave","onPointerMove","updatefocusedItemInfo","handleKeyboardInput","triggerOnAction","sectionId","itemId","onPointerUp","onKeyUp","code","onKeyDown","nextItemInfo","preventDefault","stopPropagation","cancelEvent","onBlur","getLegendNavUtils","max","min","calculateOffset","rootDimsRef","currentItem","crossAxis","mainAxisOffset","rootDim","itemDim","getBoundingClientRect","x","y","mainAxis","useLegendTooltip","offset","setOffset","isOpen","setIsOpen","useLayoutEffect","anchor","tooltipContent","tooltipProps","useTooltipControlled","position","isDisabled","onToggle","value","useItemFocus","useEffect","scrollIntoView","behavior","block","inline","areEqualLayoutInfo","info1","info2","every","maxItemWidth","getMaxWidth","baseLegend","forEach","e","useLegendLayout","rootRef","isSectional","setLayoutInfo","previousOrientationRef","legendLayoutInfo","sectionWidth","childElementCount","offsetTop","push","sections","itemsLength","getSectionalNavUtils","eventsProps","datatipText","ariaProps","mergedProps","mergeProps","legendStyle","tabIndex","sectionTitleHAlign","titleStyle","sectionTitleFontFamily","sectionTitleFontSize","sectionTitleColor","sectionTitleFontStyle","sectionTitleFontWeight","sectionTitleTextDecoration","sectionalLegendBaseStyles","Flex","wrap","gap","labelledById","isWrappedSection","flexDirection","alignItems","justify","title"],"mappings":"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"}