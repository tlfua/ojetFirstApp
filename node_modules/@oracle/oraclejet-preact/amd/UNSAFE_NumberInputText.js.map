{"version":3,"file":"UNSAFE_NumberInputText.js","sources":["../../src/UNSAFE_NumberInputText/StepButton.tsx","../../src/UNSAFE_NumberInputText/Steppers.tsx","../../src/UNSAFE_NumberInputText/useSteppers.tsx","../../src/UNSAFE_NumberInputText/NumberInputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { useCallback } from 'preact/hooks';\n\nimport { IconButton } from '../UNSAFE_IconButton';\nimport { BundleType } from '../resources/nls/bundle';\nimport { StepDirection, StepEvent } from './useSteppers';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\n\ntype Props = {\n  /**\n   * The direction of the step.\n   */\n  direction: StepDirection;\n\n  /**\n   * Whether the button is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when a step request is made by clicking the button.\n   */\n  onStep?: (event: StepEvent) => void;\n\n  /**\n   * The children are Icons for the button.\n   */\n  children: ComponentChildren;\n};\n\n/**\n * A StepButton is used to request a \"step up\" or \"step down\" to a value in NumberInputText.\n * @param direction The direction of the step\n * @param isDisabled Whether the button should be disabled\n * @param onStep Handler called when the button is clicked\n * @param variant Represents different visual variants for the button\n */\nexport function StepButton({ direction, isDisabled, onStep, children }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const labelIncrease = translations.inputNumber_increase();\n  const labelDecrease = translations.inputNumber_decrease();\n  const label = direction === 'increase' ? labelIncrease : labelDecrease;\n\n  const handleClick = useCallback(() => {\n    onStep?.({ direction });\n  }, [onStep, direction]);\n\n  return (\n    <TabbableModeContext.Provider value={{ isTabbable: false }}>\n      <IconButton\n        isDisabled={isDisabled}\n        tooltip={label}\n        onAction={handleClick}\n        variant=\"borderless\">\n        {children}\n      </IconButton>\n    </TabbableModeContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { Grid } from '../UNSAFE_Grid';\n\nexport type Props = {\n  /**\n   *The children are StepButtons.\n   */\n  children: ComponentChildren;\n};\n\n// TODO: Replace Steppers with Buttonset when it becomes available\nexport function Steppers({ children }: Props) {\n  return (\n    <Grid align=\"center\" gap=\"1x\" gridTemplateColumns=\"1fr 1fr\">\n      {children}\n    </Grid>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useCallback } from 'preact/hooks';\nimport { useSpinning, StepProps } from '../hooks/UNSAFE_useSpinning';\nimport { StepButton } from './StepButton';\nimport { Steppers } from './Steppers';\nimport { IncrementIcon } from '../PRIVATE_ThemedIcons/IncrementIcon';\nimport { DecrementIcon } from '../PRIVATE_ThemedIcons/DecrementIcon';\nimport { MinusIcon } from '../PRIVATE_ThemedIcons/MinusIcon';\nimport { PlusIcon } from '../PRIVATE_ThemedIcons/PlusIcon';\n\nexport { StepDirection, StepEvent } from '../hooks/UNSAFE_useSpinning';\n\ntype Props = StepProps & {\n  /**\n   * Controls whether the step buttons are shown.\n   */\n  hasSteppers?: boolean;\n\n  /**\n   * Variant style of step buttons.\n   * @default directional\n   */\n  stepperVariant?: 'directional' | 'quantitative';\n\n  /**\n   * A ref to the input element.\n   */\n  inputRef: Ref<HTMLInputElement>;\n};\n\n/**\n * A hook for using stepping functionality with NumberInputText. Stepping can\n * be accomplished using the step up or down buttons or by pressing the arrow\n * up or arrow down keys. Holding down the buttons or keys produces continuous\n * step events.\n *\n * The hook returns a JSX element containing the step buttons, which can be\n * placed in the endContent of NumberInputText. It also returns\n * stepHandlerProps which should be spread onto the component to handle\n * keyboard stepping.\n *\n * @param hasSteppers Controls whether the step buttons are shown\n * @param stepperVariant Variant style of step buttons.\n * @param inputRef A ref to the input element\n * @param isStepDownDisabled Controls whether stepping down is disabled\n * @param isStepUpDisabled Controls whether stepping up is disabled\n * @param onSpin Called when a continuous step (aka spin) is requested\n * @param onSpinComplete Called when spinning is complete\n * @param onStep Called when a single step is requested\n * @returns An object containing the steppers and stepHandlerProps\n */\nexport const useSteppers = ({\n  hasSteppers,\n  stepperVariant,\n  inputRef,\n  isStepDownDisabled,\n  isStepUpDisabled,\n  onSpin,\n  onSpinComplete,\n  onStep\n}: Props) => {\n  const { keyboardHandlerProps, pointerIncreaseHandlerProps, pointerDecreaseHandlerProps } =\n    useSpinning({ isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep });\n\n  const handleClick = useCallback(() => {\n    // When a step button is clicked, set focus to the input.\n    // Don't need to call onStep because it's already called from onPointerDown.\n    // Button only calls its onAction handler after the mouse is released.\n    // If the button is disabled while stepping or spinning and you hit the min/max, the\n    // button handler is not called for this reason. Work around this by adding onClick\n    // to the outer div (when enabled, Button handles clicks and calls stopPropagation).\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  // when stepperVariant is directional, both buttons are wrapped in Steppers and placed in the endContent slot\n  // if it equals quantitative, only the increase button is placed in the endContent slot\n  const endContent = hasSteppers ? (\n    stepperVariant === 'directional' ? (\n      <Steppers>\n        <div aria-hidden=\"true\" {...pointerDecreaseHandlerProps}>\n          <StepButton direction=\"decrease\" isDisabled={isStepDownDisabled} onStep={handleClick}>\n            <DecrementIcon />\n          </StepButton>\n        </div>\n\n        <div aria-hidden=\"true\" {...pointerIncreaseHandlerProps}>\n          <StepButton direction=\"increase\" isDisabled={isStepUpDisabled} onStep={handleClick}>\n            <IncrementIcon />\n          </StepButton>\n        </div>\n      </Steppers>\n    ) : (\n      <div aria-hidden=\"true\" {...pointerIncreaseHandlerProps}>\n        <StepButton direction=\"increase\" isDisabled={isStepUpDisabled} onStep={handleClick}>\n          <PlusIcon />\n        </StepButton>\n      </div>\n    )\n  ) : undefined;\n\n  // when stepperVariant is quantitative, the decrease button is placed in the startContent slot\n  const startContent =\n    hasSteppers && stepperVariant === 'quantitative' ? (\n      <div aria-hidden=\"true\" {...pointerDecreaseHandlerProps}>\n        <StepButton direction=\"decrease\" isDisabled={isStepDownDisabled} onStep={handleClick}>\n          <MinusIcon />\n        </StepButton>\n      </div>\n    ) : undefined;\n\n  // stepHandlerProps will be spread onto the parent to handle\n  // stepping functionality via the arrow up or down keys.\n  const stepHandlerProps = hasSteppers ? keyboardHandlerProps : {};\n\n  return { startContent, endContent, stepHandlerProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  InlineUserAssistance,\n  CompactUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { Size } from '../utils/UNSAFE_size';\nimport { StepEvent, useSteppers } from './useSteppers';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype StepperProps = Parameters<typeof useSteppers>[0];\n\ntype NumberInputTextProps = {\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\ntype Props = NumberInputTextProps &\n  Pick<StepperProps, 'stepperVariant' | 'hasSteppers'> & {\n    /**+\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the input.\n     */\n    'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n    /**\n     * The maximum allowed value. Used for the aria-valuemax attribute.\n     */\n    'aria-valuemax'?: TextFieldInputProps['aria-valuemax'];\n\n    /**\n     * The minimum allowed value. Used for the aria-valuemin attribute.\n     */\n    'aria-valuemin'?: TextFieldInputProps['aria-valuemin'];\n\n    /**\n     * The number value of the component. Used for the aria-valuenow attribute.\n     */\n    'aria-valuenow'?: TextFieldInputProps['aria-valuenow'];\n\n    /**\n     * The formatted value of the component. Used for the aria-valueText\n     * attribute to provide a more human readable text alternative for\n     * aria-valuenow.\n     */\n    'aria-valuetext'?: TextFieldInputProps['aria-valuetext'];\n\n    /**\n     * Text to provide guidance to help the user understand what data to enter.\n     */\n    assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n    /**\n     * Dictates component's autocomplete state.\n     * This attribute indicates whether the value of the control can be automatically completed by the browser.\n     * The common values are \"on\" and \"off\".\n     */\n    autoComplete?: TextFieldInputProps['autoComplete'];\n\n    /**\n     * Autofocus specifies whether the component will get focus when the page is loaded.\n     * If it is set to true then the associated component will get input focus when the page is loaded.\n     * Setting this property doesn't set the focus to the component: it tells the browser to focus\n     * to it when the element is inserted in the document.\n     */\n    autoFocus?: TextFieldInputProps['autoFocus'];\n\n    /**\n     * Help source URL associated with the component.\n     */\n    helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n    /**\n     * Custom text to be rendered for the <code>helpSourceLink</code>.\n     */\n    helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n    /**\n     * Specifies whether the component is disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies whether the component is readonly.\n     */\n    isReadonly?: boolean;\n\n    /**\n     * Specifies for accessibility purposes whether a value is required.\n     *\n     * Setting this property to <code>false</code> means that a value is not required to be\n     * committed by the user. Setting this property to <code>true</code> means that a value\n     * is required to be committed by the user.\n     */\n    isRequired?: TextFieldInputProps['isRequired'];\n\n    /**\n     * Specifies whether to show an indicator on screen that a value is required, for example\n     * before the user has committed a value.\n     */\n    isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n    /**\n     * Specifies the label associated with the field.\n     */\n    label: string;\n\n    /**\n     * Specifies where the label is positioned relative to the field.\n     */\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n    /**\n     * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n     */\n    labelStartWidth?: Size;\n\n    /**\n     * Messages to show on screen that are associated with the component.\n     */\n    messages?: InlineUserAssistanceProps['messages'];\n\n    /**\n     * A short hint to display before the user enters a value.\n     */\n    placeholder?: TextFieldInputProps['placeholder'];\n\n    /**\n     * The prefix displays as regular text before the input text, and inline with it.\n     * The prefix is not editable or focusable.\n     */\n    prefix?: string;\n\n    /**\n     * The suffix displays as regular text after the input text, and inline with it.\n     * The suffix is not editable or focusable.\n     */\n    suffix?: string;\n\n    /**\n     * Specifies how to align text within the field.\n     */\n    textAlign?: TextFieldInputProps['textAlign'];\n\n    /**\n     * Specifies the density of the user assistance presentation. It can be set to:\n     * <ul>\n     * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n     * assistance text is displayed.</li>\n     * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n     * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n     * </ul>\n     */\n    userAssistanceDensity?: UserAssistanceDensityType;\n\n    /**\n     * The current possibly formatted display value of the component.\n     */\n    value?: TextFieldInputProps['value'];\n\n    /**\n     * The style variant of the component.\n     */\n    variant?: TextFieldInputProps['variant'];\n\n    /**\n     * The type of virtual keyboard to display for entering a value on mobile browsers.\n     * This property has no effect on desktop browsers.\n     */\n    virtualKeyboard?: 'auto' | 'number' | 'text';\n\n    /**\n     * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n     */\n    onCommit?: TextFieldInputProps['onCommit'];\n\n    /**\n     * Callback invoked each time the user changes the value of the field. For example, if the user\n     * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n     * respectively.\n     */\n    onInput: TextFieldInputProps['onInput'];\n  };\n\nexport const NumberInputText = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      'aria-valuemax': ariaValueMax,\n      'aria-valuemin': ariaValueMin,\n      'aria-valuenow': ariaValueNow,\n      'aria-valuetext': ariaValueText,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      isStepDownDisabled: propIsStepDownDisabled,\n      isStepUpDisabled: propIsStepUpDisabled,\n      hasSteppers = false,\n      stepperVariant = 'directional',\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      prefix,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      onSpin,\n      onSpinComplete,\n      onStep\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const { hoverProps } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value\n    });\n    // Disable the steppers if the number input is disabled.\n    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;\n    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;\n\n    // stepHandlerProps contains keyup and keydown handlers\n    // for stepping using the arrow up and down keys.\n    const { startContent, endContent, stepHandlerProps } = useSteppers({\n      hasSteppers,\n      stepperVariant,\n      inputRef: enabledElementRef,\n      isStepDownDisabled,\n      isStepUpDisabled,\n      onSpin,\n      onSpinComplete,\n      onStep\n    });\n\n    const {\n      renderedPrefix,\n      renderedSuffix,\n      text: valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: endContent !== undefined,\n      hasInsideLabel: label !== undefined && labelEdge === 'inside',\n      hasStartContent: startContent !== undefined,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={anchorRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              value={valuePrefixSuffix}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.\n    const valueText =\n      ariaValueNow === undefined\n        ? ariaValueText\n        : ariaValueNow.toString() !== ariaValueText\n        ? ariaValueText\n        : undefined;\n\n    const mainContent = (\n      <>\n        {renderedPrefix}\n        <TextFieldInput\n          aria-labelledby={ariaLabelledBy}\n          aria-label={ariaLabel}\n          aria-valuemax={ariaValueMax}\n          aria-valuemin={ariaValueMin}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={valueText}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasEndContent={endContent !== undefined}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={startContent !== undefined}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={hasSteppers ? 'spinbutton' : undefined}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onInputAndDispatch}\n          {...inputProps}\n          {...stepHandlerProps}\n        />\n        {renderedSuffix}\n      </>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          startContent={startContent}\n          endContent={endContent}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          mainFieldRef={anchorRef}\n          hasZeroStartMargin={hasSteppers && stepperVariant === 'quantitative'}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n"],"names":["StepButton","direction","isDisabled","onStep","children","translations","useTranslationBundle","labelIncrease","inputNumber_increase","labelDecrease","inputNumber_decrease","label","handleClick","useCallback","_jsx","TabbableModeContext","Provider","value","isTabbable","IconButton","tooltip","onAction","variant","Steppers","Grid","align","gap","gridTemplateColumns","NumberInputText","forwardRef","ariaDescribedBy","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","isStepDownDisabled","propIsStepDownDisabled","isStepUpDisabled","propIsStepUpDisabled","hasSteppers","stepperVariant","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","placeholder","prefix","suffix","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","virtualKeyboard","onInput","onCommit","onSpin","onSpinComplete","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","hoverProps","useHover","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","startContent","endContent","stepHandlerProps","inputRef","keyboardHandlerProps","pointerIncreaseHandlerProps","pointerDecreaseHandlerProps","useSpinning","current","focus","_jsxs","jsx","DecrementIcon","SvgChevronDown","IncrementIcon","SvgChevronUp","PlusIcon","undefined","MinusIcon","useSteppers","renderedPrefix","renderedSuffix","text","valuePrefixSuffix","ariaLabelledBy","usePrefixSuffix","hasEndContent","hasInsideLabel","hasStartContent","hasValue","labelId","id","labelComp","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","useRef","compactUserAssistance","CompactUserAssistance","FormFieldContext","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","as","elementRef","hasEmptyLabel","valueText","toString","mainContent","jsxs","_Fragment","TextFieldInput","hasPrefix","hasSuffix","isMobile","TextField","mainFieldRef","hasZeroStartMargin","deviceType","getClientHints"],"mappings":"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"}