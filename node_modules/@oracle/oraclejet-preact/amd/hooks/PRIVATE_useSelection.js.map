{"version":3,"file":"PRIVATE_useSelection.js","sources":["../../../src/hooks/PRIVATE_useSelection/useSelection.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { stringLiteralArray } from '../../utils/UNSAFE_arrayUtils';\nimport { Keys, containsKey, isKeyDefined, addKey, removeKey } from '../../utils/UNSAFE_keys';\nimport { SelectionDetail, SelectionMode } from '../../UNSAFE_Collection';\nimport { useUser } from '../UNSAFE_useUser';\nimport { isMobile } from '../../utils/PRIVATE_collectionUtils';\n\n/**\n * Type for selection behavior.  See useMultipleSelection hook for details.\n */\nexport const behaviors = stringLiteralArray(['toggle', 'replace']);\nexport type SelectionBehavior = typeof behaviors[number];\n\n/**\n * Type for payload of selection range change event handler\n */\nexport type SelectionRangeDetail<K> = {\n  value: { start: K; end: K };\n};\n\nconst isShiftModeSupported = <K>(\n  anchorKey: K,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior\n) => {\n  return (\n    selectionMode === 'multiple' &&\n    selectionBehavior !== 'toggle' &&\n    containsKey(selectedKeys, anchorKey)\n  );\n};\n\nconst handleSelect = <K>(\n  event: MouseEvent | KeyboardEvent,\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior,\n  isSelectionRequired: boolean,\n  keyboardCursorRef: RefObject<K | undefined>,\n  anchorKey?: K,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (itemKey == null) {\n    return;\n  }\n\n  // handle shift key selection\n  if (\n    event.shiftKey &&\n    anchorKey !== undefined &&\n    onRangeChange &&\n    isShiftModeSupported(anchorKey, selectedKeys, selectionMode, selectionBehavior)\n  ) {\n    onRangeChange({ value: { start: anchorKey, end: itemKey } });\n    // set keyboard selection cursor in case user extends with SHIFT+ARROW\n    if (keyboardCursorRef) {\n      keyboardCursorRef.current = itemKey;\n    }\n    return;\n  }\n\n  const selected = containsKey(selectedKeys, itemKey);\n  let keySet = selectedKeys;\n  if (!selected) {\n    if (\n      selectionMode === 'single' ||\n      (event as KeyboardEvent).key === 'Enter' ||\n      (selectionBehavior === 'replace' && !(event.ctrlKey || event.metaKey))\n    ) {\n      // should only contains this item key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    } else {\n      // add to existing selected keys\n      keySet = addKey(selectedKeys, itemKey);\n    }\n  } else if ((event as KeyboardEvent).key !== 'Enter') {\n    // no de-select for enter key\n    if (\n      selectionBehavior === 'toggle' ||\n      event.ctrlKey ||\n      event.metaKey ||\n      (event as KeyboardEvent).key === ' '\n    ) {\n      // de-select only when ctrl/meta key is pressed or selectionBehavior is\n      // explicitly set to toggle\n      keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n    } else if (selectionMode === 'multiple' && (selectedKeys.all || selectedKeys.keys.size > 1)) {\n      // in this case everything should be de-selected except for this key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    }\n  }\n\n  // only invoke callback if there is really a change\n  // note onSelectionChange should never be null here\n  if (selectedKeys != keySet && onChange) {\n    onChange({ value: keySet, target: event.target });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n\n/**\n * Hook for handling various selection mode.  This can be reuse by all Collection components.\n * @param keyExtractor function to extract the key based on provided element\n * @param selectedKeys the currently selected keys\n * @param selectionMode the selection mode\n * @param isSelectionRequired true if empty selected key is not allowed, false otherwise\n * @param selectionBehavior the selection behavior.  If the value is 'toggle', then the key is\n *                          added/removed from the current selected keys.  If the value is 'replace',\n *                          then the current selected keys are cleared first before the key is added\n *                          unless the ctrl/shift/meta key is pressed.\n * @param allowEnterKey whether enter key can be use to change selection.\n * @param onChange callback function that is invoked when selection has changed.\n * @param anchorKey the anchor key.  Usually this is the same as current key except when shift key is pressed.\n * @param currentKey the current key\n * @param getVerticalPrevNextKey function to get the previous/next key in the vertical direction based on the current key\n * @param getHorizontalPrevNextKey function to get the previous/next key in the horizontal direction based on the current key\n * @param scrollToKey function to scroll the item with the key to be visible\n * @param onRangeChange callback function that is invoked when the selection range has changed.\n * @returns an event map that the consumer can register as event listeners\n */\nexport function useSelection<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isSelectionRequired: boolean,\n  selectionBehavior: SelectionBehavior,\n  allowEnterKey: boolean,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  anchorKey?: K,\n  currentKey?: K | undefined,\n  getVerticalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  getHorizontalPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  scrollToKey?: (key: K) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) {\n  // ref to track the cursor for the SHIFT+ARROW keyboard selection separately than the anchor of the selection.\n  const keyboardSelectionCursor = useRef<K>();\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      handleSelect(\n        event,\n        keyExtractor,\n        selectedKeys,\n        selectionMode,\n        isMobile() ? 'toggle' : selectionBehavior,\n        isSelectionRequired,\n        keyboardSelectionCursor,\n        anchorKey,\n        onChange,\n        onRangeChange\n      );\n      if (!event.shiftKey) {\n        // reset keyboard cursor when using mouse to select\n        keyboardSelectionCursor.current = undefined;\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      keyboardSelectionCursor,\n      anchorKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  // general keyboard events listen to keyUp for a11y\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // older browser that we don't support returns 'Spacebar' for space key\n      if (event.key === ' ' || (event.key === 'Enter' && allowEnterKey)) {\n        handleSelect(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          anchorKey,\n          onChange,\n          event.shiftKey && event.key === ' ' ? onRangeChange : undefined\n        );\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      anchorKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  // arrowKey events listen to keyDown so they can support holding them down\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // prevent default (propagation) for keyDown to space bar causing container to scroll\n      if (event.key === ' ') {\n        event.preventDefault();\n        return;\n      }\n\n      const key = keyboardSelectionCursor.current || currentKey;\n      const keyHandlers: Record<string, (() => K | null) | undefined> = {\n        ArrowUp: getVerticalPrevNextKey?.(key, true),\n        ArrowDown: getVerticalPrevNextKey?.(key, false),\n        ArrowLeft: getHorizontalPrevNextKey?.(key, !isRtl),\n        ArrowRight: getHorizontalPrevNextKey?.(key, isRtl)\n      };\n      const isBothDirections = getVerticalPrevNextKey && getHorizontalPrevNextKey;\n      if (Object.keys(keyHandlers).includes(event.key)) {\n        if (event.shiftKey && scrollToKey && selectionMode === 'multiple') {\n          let keySet = selectedKeys;\n          // on first selection event, set keyboard cursor to start at currentKey\n          if (!keyboardSelectionCursor.current && isKeyDefined(currentKey)) {\n            keySet = { all: false, keys: new Set([currentKey as K]) };\n          }\n          const newAnchorKey = keyHandlers[event.key];\n          const cursorKey = newAnchorKey?.();\n          if (cursorKey != null) {\n            // keep visible\n            scrollToKey(cursorKey);\n\n            // if in 2D, use range selection to extend or subtract\n            if (isBothDirections) {\n              if (onRangeChange && currentKey != null) {\n                onRangeChange({ value: { start: currentKey, end: cursorKey } });\n              }\n            } else {\n              // extend selection\n              if (!containsKey(keySet, cursorKey)) {\n                keySet = addKey(keySet, cursorKey);\n                // subtract from selection\n              } else if (\n                keyboardSelectionCursor.current != null &&\n                keyboardSelectionCursor.current !== cursorKey\n              ) {\n                keySet = removeKey(keySet, keyboardSelectionCursor.current, isSelectionRequired);\n              }\n              if (selectedKeys != keySet && onChange) {\n                onChange({ value: keySet, target: event.target });\n              }\n            }\n            // update selection cursor\n            keyboardSelectionCursor.current = cursorKey;\n          }\n        } else {\n          // reset keyBoard on non-shifted arrow use as this interrupts the extend mode (and would make for messy logic that doesn't align with current Jet behavior)\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [\n      selectedKeys,\n      isSelectionRequired,\n      onChange,\n      currentKey,\n      getVerticalPrevNextKey,\n      getHorizontalPrevNextKey,\n      scrollToKey\n    ]\n  );\n\n  const selectionProps =\n    selectionMode === 'none' || onChange == null ? {} : { onClick, onKeyDown, onKeyUp };\n  return { selectionProps };\n}\n"],"names":["stringLiteralArray","handleSelect","event","keyExtractor","selectedKeys","selectionMode","selectionBehavior","isSelectionRequired","keyboardCursorRef","anchorKey","onChange","onRangeChange","itemKey","target","shiftKey","undefined","containsKey","isShiftModeSupported","value","start","end","current","keySet","key","ctrlKey","metaKey","removeKey","all","keys","size","Set","addKey","type","stopPropagation","allowEnterKey","currentKey","getVerticalPrevNextKey","getHorizontalPrevNextKey","scrollToKey","keyboardSelectionCursor","useRef","onClick","useCallback","isMobile","onKeyUp","direction","useUser","isRtl","onKeyDown","preventDefault","keyHandlers","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","isBothDirections","Object","includes","isKeyDefined","newAnchorKey","cursorKey","selectionProps"],"mappings":"oaAkByBA,EAAAA,mBAAmB,CAAC,SAAU,YAAhD,MAuBDC,EAAe,CACnBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAUT,EAAaD,EAAMW,QACnC,GAAe,MAAXD,EACF,OAIF,GACEV,EAAMY,eACQC,IAAdN,GACAE,GAlCyB,EAC3BF,EACAL,EACAC,EACAC,IAGoB,aAAlBD,GACsB,WAAtBC,GACAU,cAAYZ,EAAcK,GA0B1BQ,CAAqBR,EAAWL,EAAcC,EAAeC,GAO7D,OALAK,EAAc,CAAEO,MAAO,CAAEC,MAAOV,EAAWW,IAAKR,UAE5CJ,IACFA,EAAkBa,QAAUT,IAMhC,IAAIU,EAASlB,EADIY,EAAAA,YAAYZ,EAAcQ,GAcC,UAAhCV,EAAwBqB,MAGV,WAAtBjB,GACAJ,EAAMsB,SACNtB,EAAMuB,SAC2B,MAAhCvB,EAAwBqB,IAIzBD,EAASI,EAAAA,UAAUtB,EAAcQ,EAASL,GACf,aAAlBF,IAAiCD,EAAauB,KAAOvB,EAAawB,KAAKC,KAAO,KAEvFP,EAAS,CAAEK,KAAK,EAAOC,KAAM,IAAIE,IAAI,CAAClB,OAlBtCU,EALkB,WAAlBjB,GACiC,UAAhCH,EAAwBqB,KACF,YAAtBjB,IAAqCJ,EAAMsB,UAAWtB,EAAMuB,QAGpD,CAAEE,KAAK,EAAOC,KAAM,IAAIE,IAAI,CAAClB,KAG7BmB,EAAMA,OAAC3B,EAAcQ,GAqB9BR,GAAgBkB,GAAUZ,IAC5BA,EAAS,CAAEQ,MAAOI,EAAQT,OAAQX,EAAMW,SACrB,UAAfX,EAAM8B,MACR9B,EAAM+B,kBAET,iBAuBG,SACJ9B,EACAC,EACAC,EACAE,EACAD,EACA4B,EACAxB,EACAD,EACA0B,EACAC,EACAC,EACAC,EACA3B,GAGA,MAAM4B,EAA0BC,EAAAA,SAE1BC,EAAUC,eACbxC,IACCD,EACEC,EACAC,EACAC,EACAC,EACAsC,EAAAA,WAAa,SAAWrC,EACxBC,EACAgC,EACA9B,EACAC,EACAC,GAEGT,EAAMY,WAETyB,EAAwBlB,aAAUN,EACnC,GAEH,CACEZ,EACAC,EACAC,EACAC,EACAC,EACAgC,EACA9B,EACAC,EACAC,IAKEiC,EAAUF,eACbxC,KAEmB,MAAdA,EAAMqB,KAA8B,UAAdrB,EAAMqB,KAAmBW,IACjDjC,EACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAgC,EACA9B,EACAC,EACAR,EAAMY,UAA0B,MAAdZ,EAAMqB,IAAcZ,OAAgBI,EAEzD,GAEH,CACEZ,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,KAIEkC,UAAEA,GAAcC,EAAAA,UAChBC,EAAsB,QAAdF,EAGRG,EAAYN,eACfxC,IAEC,GAAkB,MAAdA,EAAMqB,IAER,YADArB,EAAM+C,iBAIR,MAAM1B,EAAMgB,EAAwBlB,SAAWc,EACzCe,EAA4D,CAChEC,QAASf,IAAyBb,GAAK,GACvC6B,UAAWhB,IAAyBb,GAAK,GACzC8B,UAAWhB,IAA2Bd,GAAMwB,GAC5CO,WAAYjB,IAA2Bd,EAAKwB,IAExCQ,EAAmBnB,GAA0BC,EACnD,GAAImB,OAAO5B,KAAKsB,GAAaO,SAASvD,EAAMqB,KAC1C,GAAIrB,EAAMY,UAAYwB,GAAiC,aAAlBjC,EAA8B,CACjE,IAAIiB,EAASlB,GAERmC,EAAwBlB,SAAWqC,EAAYA,aAACvB,KACnDb,EAAS,CAAEK,KAAK,EAAOC,KAAM,IAAIE,IAAI,CAACK,MAExC,MAAMwB,EAAeT,EAAYhD,EAAMqB,KACjCqC,EAAYD,MACD,MAAbC,IAEFtB,EAAYsB,GAGRL,EACE5C,GAA+B,MAAdwB,GACnBxB,EAAc,CAAEO,MAAO,CAAEC,MAAOgB,EAAYf,IAAKwC,MAI9C5C,EAAWA,YAACM,EAAQsC,GAIY,MAAnCrB,EAAwBlB,SACxBkB,EAAwBlB,UAAYuC,IAEpCtC,EAASI,EAASA,UAACJ,EAAQiB,EAAwBlB,QAASd,IAN5De,EAASS,EAAMA,OAACT,EAAQsC,GAQtBxD,GAAgBkB,GAAUZ,GAC5BA,EAAS,CAAEQ,MAAOI,EAAQT,OAAQX,EAAMW,UAI5C0B,EAAwBlB,QAAUuC,EAErC,MAECrB,EAAwBlB,aAAUN,CAErC,GAEH,CACEX,EACAG,EACAG,EACAyB,EACAC,EACAC,EACAC,IAMJ,MAAO,CAAEuB,eADW,SAAlBxD,GAAwC,MAAZK,EAAmB,CAAE,EAAG,CAAE+B,UAASO,YAAWJ,WAE9E"}