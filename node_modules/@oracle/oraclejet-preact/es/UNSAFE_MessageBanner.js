/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import { useRef, useState, useCallback, useImperativeHandle, useEffect } from 'preact/hooks';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import './utils/UNSAFE_classNames.js';
import { useMessageFocusManager } from './hooks/PRIVATE_useMessagesFocusManager.js';
import { Message } from './PRIVATE_Message.js';
import './UNSAFE_Flex.js';
import { LiveRegion } from './UNSAFE_LiveRegion.js';
import { MessageBannerRedwoodTheme } from './UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js';
import { c as classNames } from './classNames-f414daad.js';
import { F as Flex } from './Flex-46adb0e4.js';
import { M as MessagesManager } from './MessagesManager-6e35eea0.js';
import { g as getRenderer } from './MessageUtils-7e2e288a.js';
import './utils/UNSAFE_logger.js';
import './_curry1-7629ff3f.js';
import './_curry2-820ed778.js';
import './utils/PRIVATE_timer.js';
import './PRIVATE_Message/themes/MessageStyles.css.js';
import './MessageStyles.styles.css';
import './MessageCloseButton-b3e6b568.js';
import './UNSAFE_IconButton.js';
import './IconButton-d6cc2f62.js';
import 'preact';
import './UNSAFE_BaseButton.js';
import './BaseButton-06d74a34.js';
import './hooks/UNSAFE_usePress.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import 'preact/compat';

import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './Common/themes/themeContract.css.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_has-057b6f90.js';
import './utils/PRIVATE_clientHints.js';
import './clientHints-26cce6ec.js';
import './hooks/UNSAFE_useTabbableMode.js';
import './utils/UNSAFE_mergeProps.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-8ea4b106.js';
import './UNSAFE_Text.js';
import './Text-0dad47bb.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './hooks/UNSAFE_useTooltip.js';
import './hooks/UNSAFE_useId.js';
import './UNSAFE_Floating.js';
import './Floating-2d909840.js';
import './index-326d7a5f.js';
import './hooks/UNSAFE_useUser.js';
import './index-f26154f2.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-33365337.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './PRIVATE_ThemedIcons/CloseIcon.js';
import './UNSAFE_Icon.js';
import './Icon-e04c1503.js';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './MessageDetail-558fff70.js';
import './MessageFormattingUtils-5a95e8e9.js';
import './utils/UNSAFE_getLocale.js';
import './utils/UNSAFE_stringUtils.js';
import './stringUtils-5f2d2e94.js';
import './Message.types-06b5fdd0.js';
import './MessageStartIcon-a9a1a453.js';
import './PRIVATE_ThemedIcons/MessageConfirmationIcon.js';
import './PRIVATE_ThemedIcons/MessageErrorIcon.js';
import './PRIVATE_ThemedIcons/MessageInfoIcon.js';
import './PRIVATE_ThemedIcons/MessageWarningIcon.js';
import './MessageSummary-29c1f7ef.js';
import './MessageTimestamp-d46daaa0.js';
import './utils/UNSAFE_interpolations/boxalignment.js';
import './keys-f766c992.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-645317db.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-89d8a00a.js';
import './utils/UNSAFE_soundUtils.js';
import './UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js';
import './MessageBannerStyles.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js';
import './MessageBannerVariants.styles.css';
import './PRIVATE_TransitionGroup.js';
import './hooks/UNSAFE_useMessagesContext.js';

/**
 * Animation states for banner messages
 * TODO: Get this from theme context provider
 */
const animationStates = {
    entering: (node) => ({
        to: {
            maxHeight: `${node.scrollHeight}px`,
            overflow: 'hidden'
        },
        options: {
            duration: 250
        },
        end: {
            maxHeight: 'none',
            overflow: 'initial'
        }
    }),
    exiting: (node) => ({
        ...(node.style.maxHeight === 'none' && {
            from: {
                maxHeight: `${node.scrollHeight}px`,
                overflow: 'hidden'
            }
        }),
        to: {
            maxHeight: 0,
            overflow: 'hidden'
        },
        end: {
            maxHeight: 0,
            overflow: 'hidden'
        },
        options: {
            duration: 250
        }
    })
};
const initialAnimationStyles = {
    maxHeight: 0,
    overflow: 'hidden'
};
/**
 * Renders individual messages based on the provided data
 */
function MessageBanner({ closeButtonRenderer, detailRendererKey, data, onClose, renderers, translations, type = 'section' }) {
    // Keyboard Navigation and Focus Management
    const messagesRef = useRef(new Map());
    const containerDivRef = useRef(null);
    const focusHandleRef = useRef(null);
    const [liveRegionText, setLiveRegionText] = useState();
    const [shouldRender, setShouldRender] = useState(data.length > 0);
    // We need a ref that holds the current & previous data length, as the exiting
    // node will always call handleNextFocus with previous data.
    // As in TransitionGroup, when an item is removed from the data, a new vnode
    // will not be created instead previous vnode will be used. So, the new handleNextFocus
    // will not be called when the old vnode exits. Thus, we will be using a ref
    // to always get the correct current data length.
    const dataLengthRef = useRef(data.length);
    const prevDataLengthRef = useRef(0);
    // Update the data length ref
    dataLengthRef.current = data.length;
    // We will be using a function based ref to store the refs in the Map
    const setMessageRef = useCallback(
    // TODO: use ramda.curry here (currently it is throwing ts error when used with generics)
    (key) => {
        return (ref) => messagesRef.current.set(key, ref);
    }, []);
    // Update the focusHandleRef
    useImperativeHandle(focusHandleRef, () => ({
        focus: () => {
            // Only trigger focus if the component is rendering messages
            if (data.length) {
                const firstItemKey = data[0].key;
                messagesRef.current.get(firstItemKey)?.focus();
                return true;
            }
            return false;
        },
        contains: (element) => {
            // Only invoke method if the component is rendering messages
            if (data.length && element) {
                return containerDivRef.current?.contains(element) ?? false;
            }
            return false;
        }
    }), [data]);
    // Register handlers for focus management
    const { controller, handlers } = useMessageFocusManager(focusHandleRef, {
        onFocus: useCallback(() => {
            setLiveRegionText(translations?.navigationFromMessagesRegion);
        }, [setLiveRegionText, translations])
    });
    /**
     * Emits onClose event for the provided message.
     * @param item The message which the user tried to close
     */
    const handleClose = useCallback((item) => {
        onClose?.(item);
    }, [onClose]);
    /**
     * Handles focus when a message is closed and animated away from the DOM
     * @param key The key of the message
     * @param index The index of the message
     */
    const handleNextFocus = useCallback((_key, index, closedMessageNode) => {
        const isClosedMessageFocused = closedMessageNode?.contains(document.activeElement);
        // If there are no messages, do not render anything. As the old messages
        // are still in the DOM, use the data count to determine what to do next as it
        // represents the next state.
        if (dataLengthRef.current === 0) {
            setShouldRender(false);
            // If the current message holds focus, then restore previous focus
            if (isClosedMessageFocused) {
                controller.restorePriorFocus();
            }
            return;
        }
        // In TransitionGroup, when an item is removed from the data, a new vnode
        // will not be created instead previous vnode will be used. So, the new handleNextFocus
        // will not be called when the old vnode exits. Thus, all the deps will not be pointing to
        // the current references, rather they will be pointing to the ones where this vnode
        // last existed in the data.
        // This means, the data will contain the closing message as well. But, all the ref objects
        // still point to the most up-to-date values. With that in mind, we will be evaluating the
        // following values.
        const renderedMessagesCount = data.length;
        // Now that this message is closed, focus the next message that will take this index. If no
        // message will take this message's index, then it means that this is the last message. If
        // that is the case, focus the message at the previous index.
        // Use the count of the messages that are currently shown in the UI (current state including
        // the message that will be removed). This way we can get the correct item from the data
        // as it will contain the closing message as well.
        const nextMessageIndexToFocus = index + 1 < renderedMessagesCount ? index + 1 : index - 1;
        // if next message is available then transfer the focus to the next element
        if (nextMessageIndexToFocus > -1 && isClosedMessageFocused) {
            const nextMessageKey = data[nextMessageIndexToFocus].key;
            messagesRef.current.get(nextMessageKey)?.focus();
        }
    }, [controller, data]);
    // Prioritize this component whenever the data changes and
    // the new data has at least one message
    useEffect(() => {
        if (data.length) {
            // set state to render content whenever the data is not empty
            setShouldRender(true);
            if (data.length > prevDataLengthRef.current) {
                // Only when having a new message, update the aria-live area with the
                // text to indicate how to get the focus to the new message.
                setLiveRegionText(translations?.navigationToMessagesRegion);
            }
            controller.prioritize();
        }
        else {
            // When there are no messages, clear the live region so that
            // the navigation text will be read when a new message appear
            setLiveRegionText('');
        }
        prevDataLengthRef.current = data.length;
    }, [controller, data, translations]);
    // When both shouldRender flag is false and no data to render, do not render
    // anything
    if (!shouldRender && data.length === 0) {
        return null;
    }
    const { classes } = useComponentTheme(MessageBannerRedwoodTheme);
    return (jsx("div", { ref: containerDivRef, class: classNames(['oj-c-messagebanner', classes]), tabIndex: -1, ...handlers, children: jsxs(Flex, { direction: "column", gap: type === 'section' ? '1x' : undefined, children: [jsx(MessagesManager, { animationStates: animationStates, initialAnimationStyles: initialAnimationStyles, data: data, onMessageWillRemove: handleNextFocus, children: ({ index, item }) => (jsx(Message, { messageRef: setMessageRef(item.key), item: item, closeButtonRenderer: closeButtonRenderer, detailRenderer: getRenderer(item, detailRendererKey, renderers), index: index, variant: type === 'page' ? 'pageBanner' : 'sectionBanner', onClose: handleClose, translations: translations }, item.key)) }), jsx(LiveRegion, { children: liveRegionText })] }) }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { MessageBanner };
//# sourceMappingURL=UNSAFE_MessageBanner.js.map
