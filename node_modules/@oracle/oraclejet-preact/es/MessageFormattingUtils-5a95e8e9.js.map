{"version":3,"file":"MessageFormattingUtils-5a95e8e9.js","sources":["../../src/PRIVATE_Message/MessageFormattingUtils.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { getLocale } from '../utils/UNSAFE_getLocale';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { severities } from './Message.types';\n\n// Types of properties that can be formatted\ntype PropFormat = 'severity' | 'string' | 'timestamp';\n\n/**\n * Options for creating an Intl.DateTimeFormat instance.\n */\nconst DATE_FORMAT_OPTIONS = Object.freeze({\n  TODAY: {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  },\n  DEFAULT: {\n    day: '2-digit',\n    month: '2-digit',\n    year: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  }\n});\n\n/**\n * Regex for validating ISO timestamp\n */\nconst ISO_DATE_REGEX =\n  /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/;\n\n/**\n * Checks if the provided date is today\n *\n * @param isoDate Date to be tested for today\n *\n * @returns boolean indicating if the provided date is today\n */\nfunction isDateToday(isoDate: string) {\n  const today = new Date();\n  const provided = new Date(isoDate);\n\n  return (\n    today.getUTCFullYear() === provided.getUTCFullYear() &&\n    today.getUTCMonth() === provided.getUTCMonth() &&\n    today.getUTCDate() === provided.getUTCDate()\n  );\n}\n\n/**\n * Creates an instance of Intl.DateTimeFormat\n *\n * @param isToday A boolean to indicate whether a formatter is needed for the date\n *                that is the current day.\n *\n * @returns the formatter instance\n */\nfunction getDateTimeFormatter(isToday: boolean) {\n  const locale = getLocale();\n  const { DateTimeFormat } = Intl;\n  if (isToday) {\n    return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.TODAY as Intl.DateTimeFormatOptions);\n  }\n\n  return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.DEFAULT as Intl.DateTimeFormatOptions);\n}\n\n/**\n * Checks if the provided value is valid for the prop specified.\n * By default, this method just checks for the value to be a valid string.\n *\n * @param value The value to be checked\n * @param prop The property for which the value needs to be evaluated\n *\n * @returns the result of the validation\n */\nfunction isValidValueForProp<T>(\n  value: T | null | undefined,\n  prop: PropFormat = 'string'\n): value is T {\n  switch (prop) {\n    case 'severity':\n      // Should be one of the allowed severity\n      return typeof value === 'string' && severities.includes(value as any);\n\n    case 'timestamp':\n      // Should be a valid ISO Datetime string\n      return typeof value === 'string' && ISO_DATE_REGEX.test(value);\n\n    case 'string':\n    default:\n      // anything other than null, undefined and '' is a valid string\n      return typeof value === 'string' && !isEmptyOrUndefined(value);\n  }\n}\n\n/**\n * Formats the timestamp in the required format based on the current\n * locale.\n *\n * @param isoTime Timestamp in ISO format\n */\nfunction formatTimestamp(isoTime: string) {\n  const isToday = isDateToday(isoTime);\n  const formatter = getDateTimeFormatter(isToday);\n\n  return formatter.format(new Date(isoTime));\n}\n\nexport { formatTimestamp, isValidValueForProp };\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAMG;AAQH;;AAEG;AACH,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC;AACxC,IAAA,KAAK,EAAE;AACL,QAAA,IAAI,EAAE,SAAS;AACf,QAAA,MAAM,EAAE,SAAS;AACjB,QAAA,MAAM,EAAE,IAAI;AACb,KAAA;AACD,IAAA,OAAO,EAAE;AACP,QAAA,GAAG,EAAE,SAAS;AACd,QAAA,KAAK,EAAE,SAAS;AAChB,QAAA,IAAI,EAAE,SAAS;AACf,QAAA,IAAI,EAAE,SAAS;AACf,QAAA,MAAM,EAAE,SAAS;AACjB,QAAA,MAAM,EAAE,IAAI;AACb,KAAA;AACF,CAAA,CAAC,CAAC;AAEH;;AAEG;AACH,MAAM,cAAc,GAClB,oIAAoI,CAAC;AAEvI;;;;;;AAMG;AACH,SAAS,WAAW,CAAC,OAAe,EAAA;AAClC,IAAA,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;AACzB,IAAA,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAEnC,QACE,KAAK,CAAC,cAAc,EAAE,KAAK,QAAQ,CAAC,cAAc,EAAE;AACpD,QAAA,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,WAAW,EAAE;QAC9C,KAAK,CAAC,UAAU,EAAE,KAAK,QAAQ,CAAC,UAAU,EAAE,EAC5C;AACJ,CAAC;AAED;;;;;;;AAOG;AACH,SAAS,oBAAoB,CAAC,OAAgB,EAAA;AAC5C,IAAA,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;AAC3B,IAAA,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;AAChC,IAAA,IAAI,OAAO,EAAE;QACX,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,mBAAmB,CAAC,KAAmC,CAAC,CAAC;AAC5F,KAAA;IAED,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,mBAAmB,CAAC,OAAqC,CAAC,CAAC;AAC/F,CAAC;AAED;;;;;;;;AAQG;AACH,SAAS,mBAAmB,CAC1B,KAA2B,EAC3B,OAAmB,QAAQ,EAAA;AAE3B,IAAA,QAAQ,IAAI;AACV,QAAA,KAAK,UAAU;;YAEb,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAY,CAAC,CAAC;AAExE,QAAA,KAAK,WAAW;;YAEd,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAEjE,QAAA,KAAK,QAAQ,CAAC;AACd,QAAA;;YAEE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAClE,KAAA;AACH,CAAC;AAED;;;;;AAKG;AACH,SAAS,eAAe,CAAC,OAAe,EAAA;AACtC,IAAA,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;AACrC,IAAA,MAAM,SAAS,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;IAEhD,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7C;;;;"}