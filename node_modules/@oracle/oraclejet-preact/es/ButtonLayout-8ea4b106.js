/* @oracle/oraclejet-preact: 15.1.2 */
import { jsxs, jsx } from 'preact/jsx-runtime';

import './utils/UNSAFE_classNames.js';
import './UNSAFE_Text.js';
import { c as classNames } from './classNames-f414daad.js';
import { T as Text } from './Text-0dad47bb.js';

const compStyles = {
  text: "h7qjwx",
  suffix: "_1qyiji1",
  icon: "e24vgy",
  startText: "st79mn",
  endText: "_1nifr8u",
  startIcon: "_22rhpk",
  startIconWhenBothIconsOnly: "ktkaor",
  endIcon: "_1yyxgc4",
  label: "w3h70t"
};
const isNullOrUndefined = value => {
  return value === null || value === undefined;
};
function ButtonLayout({
  size = 'md',
  display = 'all',
  styling = 'default',
  ...props
}) {
  const showIcons = display === 'all' || display === 'icons';
  const showText = display === 'all' || display === 'label';
  const labelClass = compStyles.label;
  const isOnlyIcon = props.startIcon && (display === 'icons' || !props.children) && !props.endIcon;
  const isEmbedded = styling === 'embedded';
  const textStartIcon = !isNullOrUndefined(props.startIcon) && display === 'all';
  const textEndIcon = !isNullOrUndefined(props.endIcon) && display === 'all';
  const isTwoIcons = !isNullOrUndefined(props.startIcon) && !isNullOrUndefined(props.endIcon);
  const isTwoIconsOnly = isTwoIcons && display === 'icons';
  const endIconClass = `${compStyles.icon} oj-c-button-layout-${size} ${compStyles.endIcon}`;
  const startIconStyles = classNames([compStyles.icon, isEmbedded ? `oj-c-button-layout-embedded-${size}` : `oj-c-button-layout-${size}`, !isOnlyIcon && compStyles.startIcon, isTwoIconsOnly && compStyles.startIconWhenBothIconsOnly]);
  const textStyles = classNames([compStyles.text, textStartIcon && !props.suffix && !isTwoIcons && compStyles.endText, textEndIcon && !isTwoIcons && compStyles.startText]);
  const suffixStyles = classNames([compStyles.suffix, textStartIcon && !isTwoIcons && compStyles.endText]);
  return jsxs("span", {
    class: labelClass,
    children: [showIcons && props.startIcon && jsx("span", {
      class: startIconStyles,
      children: props.startIcon
    }), showText && props.children && jsxs("span", {
      class: textStyles,
      children: [" ", props.children, " "]
    }), showText && props.suffix && jsx("span", {
      class: suffixStyles,
      children: jsx(Text, {
        truncation: 'ellipsis',
        weight: 'inherit',
        children: props.suffix
      })
    }), showIcons && props.endIcon && jsx("span", {
      class: endIconClass,
      children: props.endIcon
    })]
  });
}

export { ButtonLayout as B };
//# sourceMappingURL=ButtonLayout-8ea4b106.js.map
