/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import { useCallback, useRef, useEffect } from 'preact/hooks';
import './UNSAFE_Flex.js';
import { Timer } from './utils/PRIVATE_timer.js';
import './utils/UNSAFE_classNames.js';
import { messageStartIconStyles, messageHeaderStyles, messageStyles } from './PRIVATE_Message/themes/MessageStyles.css.js';
import { M as MessageCloseButton } from './MessageCloseButton-b3e6b568.js';
export { M as MessageCloseButton } from './MessageCloseButton-b3e6b568.js';
import { c as classNames } from './classNames-f414daad.js';
import { M as MessageDetail } from './MessageDetail-558fff70.js';
export { M as MessageDetail } from './MessageDetail-558fff70.js';
import { i as isValidValueForProp } from './MessageFormattingUtils-5a95e8e9.js';
export { f as formatTimestamp, i as isValidValueForProp } from './MessageFormattingUtils-5a95e8e9.js';
import { M as MessageStartIcon } from './MessageStartIcon-a9a1a453.js';
export { M as MessageStartIcon } from './MessageStartIcon-a9a1a453.js';
import { M as MessageSummary } from './MessageSummary-29c1f7ef.js';
export { M as MessageSummary } from './MessageSummary-29c1f7ef.js';
import { M as MessageTimestamp } from './MessageTimestamp-d46daaa0.js';
export { M as MessageTimestamp } from './MessageTimestamp-d46daaa0.js';
import { p as playSound, s as severityBasedStyleClass } from './MessageUtils-7e2e288a.js';
export { g as getRenderer, a as getRendererWithoutIndex, i as isSeverityIconNeeded, p as playSound, s as severityBasedStyleClass, t as throwError } from './MessageUtils-7e2e288a.js';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import { MessageBannerRedwoodTheme } from './UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js';
import { F as Flex } from './Flex-46adb0e4.js';
export { M as MessagesManager } from './MessagesManager-6e35eea0.js';
export { s as severities } from './Message.types-06b5fdd0.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './Common/themes/themeContract.css.js';
import './_curry1-7629ff3f.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_curry2-820ed778.js';
import './_has-057b6f90.js';

import './utils/UNSAFE_interpolations/boxalignment.js';
import './keys-f766c992.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-645317db.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-89d8a00a.js';
import './MessageStyles.styles.css';
import './UNSAFE_IconButton.js';
import './IconButton-d6cc2f62.js';
import 'preact';
import './UNSAFE_BaseButton.js';
import './BaseButton-06d74a34.js';
import './hooks/UNSAFE_usePress.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import 'preact/compat';
import './utils/PRIVATE_clientHints.js';
import './clientHints-26cce6ec.js';
import './hooks/UNSAFE_useTabbableMode.js';
import './utils/UNSAFE_mergeProps.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-8ea4b106.js';
import './UNSAFE_Text.js';
import './Text-0dad47bb.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './hooks/UNSAFE_useTooltip.js';
import './hooks/UNSAFE_useId.js';
import './UNSAFE_Floating.js';
import './Floating-2d909840.js';
import './index-326d7a5f.js';
import './hooks/UNSAFE_useUser.js';
import './index-f26154f2.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-33365337.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './utils/UNSAFE_logger.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './PRIVATE_ThemedIcons/CloseIcon.js';
import './UNSAFE_Icon.js';
import './Icon-e04c1503.js';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './utils/UNSAFE_getLocale.js';
import './utils/UNSAFE_stringUtils.js';
import './stringUtils-5f2d2e94.js';
import './PRIVATE_ThemedIcons/MessageConfirmationIcon.js';
import './PRIVATE_ThemedIcons/MessageErrorIcon.js';
import './PRIVATE_ThemedIcons/MessageInfoIcon.js';
import './PRIVATE_ThemedIcons/MessageWarningIcon.js';
import './utils/UNSAFE_soundUtils.js';
import './UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js';
import './MessageBannerStyles.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js';
import './MessageBannerVariants.styles.css';
import './PRIVATE_TransitionGroup.js';
import './hooks/UNSAFE_useMessagesContext.js';

/**
 * Component for rendering custom icon/content for start icon in Message
 */
function MessageCustomStartIcon({ item, renderer }) {
    // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.
    const classes = classNames([
        messageStartIconStyles.base,
        // for now only toast has support for custom icon
        messageStartIconStyles.toast,
        messageStartIconStyles.customToast
    ]);
    return (jsx("div", { class: classes, role: "presentation", "data-oj-message-custom-icon": "", children: renderer(item) }));
}

/**
 * A component that styles the header for the message component
 * @param param0 Props
 * @returns MessageHeader component instance
 */
function MessageHeader({ children, variant = 'banner' }) {
    const rootClasses = classNames([messageHeaderStyles.base, messageHeaderStyles[variant]]);
    return (jsx("div", { role: "presentation", class: rootClasses, children: children }));
}

/**
 * Determines the base variant of the message - banner or toast
 *
 * @param variant The message variant
 * @returns The base variant
 */
function getBaseVariant(variant) {
    if (variant === 'pageBanner' || variant === 'sectionBanner') {
        return 'banner';
    }
    return 'toast';
}
/**
 * Determines if a severity icon is needed based on the component severity
 *
 * @param severity The component severity
 * @returns Whether or not to render the severity icon
 */
function isSeverityIconNeeded(severity) {
    const isValidSeverity = isValidValueForProp(severity, 'severity');
    return isValidSeverity && severity !== 'none';
}
/**
 * Default timeout duration for autoTimeout in milliseconds
 */
const MIN_SECONDS = 5;
const DEFAULT_TIMEOUT = MIN_SECONDS * 1000;
/**
 * Component that renders an individual message
 */
function Message({ closeButtonRenderer, detailRenderer, iconRenderer, index = -1, item, onClose, messageRef = () => { }, variant = 'pageBanner', translations }) {
    const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;
    const { autoTimeout = 'off' } = item.data;
    const baseVariant = getBaseVariant(variant);
    /**
     * Handles clicking on the close icon of the message
     */
    const handleClose = useCallback(() => {
        onClose?.(item);
    }, [item, onClose]);
    /**
     * Handles closing the message on pressing Esc
     */
    const handleCloseOnEsc = useCallback((event) => {
        // Close the message only when closeAffordance is on
        if (event.key === 'Escape' && closeAffordance === 'on') {
            onClose?.(item);
        }
    }, [closeAffordance, item, onClose]);
    /**
     * Set auto timeout for toast messages
     */
    const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';
    const currentTimerRef = useRef();
    const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;
    const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;
    const startTimer = useCallback(() => {
        if (currentTimerRef.current)
            return;
        currentTimerRef.current = new Timer(handleClose, timeoutDuration);
    }, [handleClose, timeoutDuration]);
    const clearTimer = useCallback(() => {
        if (!currentTimerRef.current)
            return;
        currentTimerRef.current.clear();
        currentTimerRef.current = undefined;
    }, []);
    const pauseTimer = useCallback(() => {
        currentTimerRef.current?.pause();
    }, []);
    const resumeTimer = useCallback(() => {
        currentTimerRef.current?.resume();
    }, []);
    useEffect(() => {
        if (isValidValueForProp(sound)) {
            // It is sufficient to check for the value to be a
            // non-empty string. The playSound method takes care of the rest.
            playSound(sound);
        }
        // on mount, start timer for toast messages if needed
        if (shouldTimeout) {
            startTimer();
        }
        return () => {
            // clear out any pending timer
            clearTimer();
        };
        // eslint-disable-next-line
    }, []); // No deps to run this only on mount
    const { variantClasses } = useComponentTheme(MessageBannerRedwoodTheme, {
        severity
    });
    // TODO:  Refactor to utilize useComponentTheme and multiVariantStyles.
    const rootClasses = classNames([
        baseVariant === 'banner' && variantClasses,
        messageStyles.base[baseVariant],
        // for now, we do not have severity based styling on toast. So, we ignore this class for toasts
        variant !== 'toast' && severityBasedStyleClass(severity, baseVariant),
        variant === 'sectionBanner' && messageStyles.section
    ]);
    const contentClasses = classNames([messageStyles.content.base, messageStyles.content[baseVariant]]);
    // We will be animating the root div, so add padding to an inner wrapper div so that
    // when animating height looks smooth. If padding were to be added to the root
    // div, the animation will not be smooth as height will never reach 0 due to the
    // padding.
    return (jsx("div", { ref: messageRef, class: rootClasses, role: "alert", "aria-atomic": "true", "data-oj-key": `${typeof item.key}-${item.key}`, tabIndex: 0, onKeyUp: handleCloseOnEsc, onfocusin: pauseTimer, onfocusout: resumeTimer, children: jsxs("div", { class: contentClasses, children: [iconRenderer ? (jsx(MessageCustomStartIcon, { item: { ...item, index }, renderer: iconRenderer })) : isSeverityIconNeeded(severity) ? (jsx(MessageStartIcon, { severity: severity, variant: baseVariant, translations: translations })) : null, jsxs(Flex, { direction: "column", flex: "1", gap: "--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x", children: [jsxs(MessageHeader, { variant: baseVariant, children: [jsx(MessageSummary, { variant: baseVariant, text: summary }), isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && (jsx(MessageTimestamp, { variant: baseVariant, value: timestamp }))] }), jsx(MessageDetail, { variant: baseVariant, item: { ...item, index }, renderer: detailRenderer })] }), closeAffordance === 'on' && (jsx(MessageCloseButton, { buttonRenderer: closeButtonRenderer, title: translations?.close, variant: baseVariant, onAction: handleClose }))] }) }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { Message };
//# sourceMappingURL=PRIVATE_Message.js.map
