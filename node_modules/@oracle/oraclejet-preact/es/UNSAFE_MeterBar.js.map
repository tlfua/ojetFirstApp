{"version":3,"file":"UNSAFE_MeterBar.js","sources":["../../src/UNSAFE_MeterBar/MeterUtils.ts","../../src/UNSAFE_MeterBar/ReferenceLines.tsx","../../src/UNSAFE_MeterBar/ThresholdBar.tsx","../../src/UNSAFE_MeterBar/MeterBar.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport { ReferenceLine } from '../utils/UNSAFE_meterTypes';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n};\n\n/**\n * Returns the metric value of the clicked point.\n * @param event The PointerEvent\n * @param dimensionsRef Ref to stored dimensions of the meter bar.\n * @param min The minimum value of the meter bar.\n * @param max The maximum value of the meter bar.\n * @param step The step value of the meter bar.\n * @param orientation The orientation of the meter bar.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The metric value of the clicked point.\n */\nexport function getValue(\n  event: PointerEvent,\n  dimensionsRef: Ref<Dimensions>,\n  min: number,\n  max: number,\n  step: number,\n  orientation?: 'horizontal' | 'vertical',\n  isRtl?: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims || dims.width === 0) {\n    return undefined;\n  }\n\n  let val;\n\n  if (orientation === 'horizontal') {\n    const width = event.offsetX;\n    val = min + ((max - min) * (isRtl ? dims.width - width : width)) / dims.width;\n  } else {\n    const height = dims.height - event.offsetY;\n    val = min + ((max - min) * height) / dims.height;\n  }\n  val = Math.round(val / step) * step;\n  return Math.max(min, Math.min(max, val));\n}\n\n/**\n * Returns the true dimension of the meter bar after first render. All dimensions are 0 for initial render.\n * @param element The meter bar track HTML element\n * @returns The dimension of the meter bar.\n */\nexport function getDimensions(element: HTMLElement | null): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const trackDims = element.getBoundingClientRect();\n\n  return {\n    width: trackDims.width,\n    height: trackDims.height\n  };\n}\n\n/**\n * Returns object with 'start' and 'end' keys. Value for each key will be true if at least one ref line with correposnding position is present in meter bar.\n * @param lines The array of reference lines.\n * @returns Returns object with start and end keys.\n */\nexport function getRefLinesInfo(lines?: ReferenceLine[]): { start: boolean; end: boolean } {\n  let refLineInfo = { start: false, end: false };\n  if (lines) {\n    refLineInfo = lines.reduce((acc, cur) => {\n      acc.start = acc.start || cur.position === 'start';\n      acc.end = acc.end || cur.position === 'end' || cur.position == null;\n      return acc;\n    }, refLineInfo);\n  }\n  return refLineInfo;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { DvtThresholdsColors, getDvtThresholdColor } from '../utils/UNSAFE_dvtCommonUtils';\nimport { styles } from './themes/MeterBarStyles.css';\n\ntype ReferenceLineProps = {\n  orientation: 'horizontal' | 'vertical';\n  percentage: string;\n  position?: 'start' | 'end';\n  color?: ColorProps['color'] | DvtThresholdsColors;\n};\n\nexport function ReferenceLineBar({ orientation, percentage, color, position }: ReferenceLineProps) {\n  const isHoriz = orientation === 'horizontal';\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const isStartPos = position === 'start';\n\n  return (\n    <div\n      class={classNames([\n        styles.referenceLinesBaseStyle,\n        isHoriz ? styles.referenceLinesHorizontalStyle : styles.referenceLinesVerticalStyle,\n        isStartPos\n          ? isHoriz\n            ? styles.referenceLinesHoriontalStartStyle\n            : isRtl\n            ? styles.referenceLinesVerticalStartRtlStyle\n            : styles.referenceLinesVerticalStartLtrStyle\n          : ''\n      ])}\n      style={{\n        left: isHoriz && !isRtl ? percentage : undefined,\n        right: isHoriz && isRtl ? percentage : undefined,\n        bottom: isHoriz ? undefined : percentage,\n        backgroundColor: getDvtThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { DvtThresholdsColors, getDvtThresholdColor } from '../utils/UNSAFE_dvtCommonUtils';\nimport { styles } from './themes/MeterBarStyles.css';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'class'>;\ntype ThresholdBarProps = IntrinsicProps & {\n  color?: ColorProps['color'] | DvtThresholdsColors;\n  length: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport function ThresholdBar({ color, length, orientation, ...otherProps }: ThresholdBarProps) {\n  const { direction } = useUser();\n  const isHoriz = orientation === 'horizontal';\n  const isRtl = direction === 'rtl';\n\n  return (\n    <div\n      class={classNames([\n        styles.thresholdBarBaseStyle,\n        isHoriz\n          ? isRtl\n            ? styles.thresholdBarHorizontalBarTrackSectionRtlStyle\n            : styles.thresholdBarHorizontalBarTrackSectionLtrStyle\n          : styles.thresholdBarVerticalBarTrackSectionStyle,\n        otherProps.class\n      ])}\n      style={{\n        width: isHoriz ? length : '100%',\n        height: isHoriz ? '100%' : length,\n        backgroundColor: getDvtThresholdColor(color)\n      }}></div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { sizeToCSS } from '../utils/UNSAFE_size';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useDvtMeterEvents';\n\nimport {\n  getMeterAriaProps,\n  validateRange,\n  getTrackAndIndicatorColor\n} from '../utils/PRIVATE_meterUtils';\n\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { BarTrack, BarValue } from '../PRIVATE_Meter';\nimport { getDimensions, getRefLinesInfo, getValue } from './MeterUtils';\nimport { ReferenceLineBar } from './ReferenceLines';\nimport { ThresholdBar } from './ThresholdBar';\nimport { MeterBarProps } from './MeterBar.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MeterBarStyles, MeterBarVariantOptions } from './themes/MeterBarStyles.css';\nimport { MeterBarRedwoodTheme } from './themes/redwood/MeterBarTheme';\n\n/**\n * A Meter bar displays information graphically in a rectangular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterBar({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  length = '100%',\n  size,\n  orientation = 'horizontal',\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  ...props\n}: MeterBarProps) {\n  validateRange(min, max, value, step);\n  const currentInputRef = useRef<number>();\n\n  const isHoriz = orientation === 'horizontal';\n  const barTrackRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput) {\n      dimensionsRef.current = getDimensions(barTrackRef.current);\n    }\n  }, [size, length, orientation, props.onCommit, props.onInput]);\n\n  const getValueFromEvent = (event: PointerEvent): number | undefined => {\n    // only evaluate value from bar track\n    if (event.target == barTrackRef.current) {\n      return getValue(event, dimensionsRef, min, max, step, orientation, isRtl);\n    }\n    return;\n  };\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    barTrackRef,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    currentInputRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    props.datatip,\n    props['aria-describedby']\n  );\n\n  const ariaLabelProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds\n  );\n  const mergedProps = mergeProps(\n    pointerEventsProps,\n    keyboardEventsProps,\n    datatipProps,\n    ariaLabelProps\n  );\n\n  const validIndicatorSize = Math.max(0, Math.min(1, indicatorSize));\n  const valueBarLength = `${((value - min) * 100) / (max - min)}%`;\n  const valueBarSize = `${validIndicatorSize * 100}%`;\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const sizeStyle = getRefLinesInfo(props.referenceLines);\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n\n  const {\n    classes,\n    styles: {\n      interactiveStyle,\n\n      barValueBaseStyle,\n      barValueVerticalStyle,\n      barValueHorizontalStyle,\n\n      barTrackBaseStyle,\n\n      barTrackHorizontalSizeStyle,\n      barTrackVerticalSizeStyle,\n\n      barTrackMarginTopStyle,\n      barTrackMarginStartStyle,\n      barTrackMarginBottomStyle,\n      barTrackMarginEndStyle,\n\n      trackSectionHorizontalFirstStyle,\n      trackSectionHorizontalLastStyle,\n\n      trackSectionVerticalFirstStyle,\n      trackSectionVerticalLastStyle,\n\n      trackSectionRoundedCornersStyle\n    }\n  } = useComponentTheme<MeterBarVariantOptions, MeterBarStyles>(MeterBarRedwoodTheme, {\n    size,\n    orientation\n  });\n\n  return (\n    <>\n      <div\n        tabIndex={!isTabbable ? -1 : 0}\n        {...mergedProps}\n        style={{\n          width: isHoriz ? sizeToCSS(length) : undefined,\n          height: isHoriz ? undefined : sizeToCSS(length)\n        }}\n        class={classNames([classes])}>\n        <BarTrack\n          ref={barTrackRef}\n          orientation={orientation}\n          color={\n            !isTrackRendered || (thresholdDisplay === 'all' && props.thresholds)\n              ? 'transparent'\n              : trackColor\n          }\n          class={classNames([\n            barTrackBaseStyle,\n            isInteractive ? interactiveStyle : '',\n            isHoriz ? barTrackHorizontalSizeStyle : barTrackVerticalSizeStyle,\n            ...getMarginClass(\n              sizeStyle,\n              isHoriz,\n              barTrackMarginTopStyle,\n              barTrackMarginStartStyle,\n              barTrackMarginBottomStyle,\n              barTrackMarginEndStyle\n            )\n          ])}>\n          {thresholdDisplay === 'all' &&\n            props.thresholds\n              ?.filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n              .sort((a, b) => a.max - b.max)\n              .map((threshold: Threshold, index, thresholds) => {\n                const diff =\n                  index === 0 ? threshold.max - min : threshold.max - thresholds[index - 1].max;\n                const trackSectionLastStyle = isHoriz\n                  ? trackSectionHorizontalLastStyle\n                  : trackSectionVerticalLastStyle;\n                let trackSectionStyleClass =\n                  index === 0\n                    ? isHoriz\n                      ? trackSectionHorizontalFirstStyle\n                      : trackSectionVerticalFirstStyle\n                    : '';\n                if (threshold.max === max)\n                  trackSectionStyleClass =\n                    index === 0\n                      ? trackSectionRoundedCornersStyle // Single threshold from min to max\n                      : trackSectionLastStyle;\n                return (\n                  <>\n                    <ThresholdBar\n                      class={trackSectionStyleClass}\n                      orientation={orientation}\n                      length={`${(diff * 100) / (max - min)}%`}\n                      color={threshold.color}\n                    />\n                    {isTrackRendered && index === thresholds.length - 1 && threshold.max < max ? (\n                      <ThresholdBar\n                        class={trackSectionLastStyle}\n                        color={trackColor}\n                        orientation={orientation}\n                        length={`${((max - thresholds[index].max) * 100) / (max - min)}%`}\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                );\n              })}\n          <BarValue\n            length={valueBarLength}\n            size={valueBarSize}\n            orientation={orientation}\n            class={classNames([\n              barValueBaseStyle,\n              isHoriz ? barValueHorizontalStyle : barValueVerticalStyle\n            ])}\n            color={indicatorColor}\n          />\n          {props.referenceLines?.map((item) => (\n            <ReferenceLineBar\n              color={item.color}\n              orientation={orientation}\n              percentage={`${((item.value - min) * 100) / (max - min)}%`}\n              position={item.position}\n            />\n          ))}\n        </BarTrack>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n\nconst getMarginClass = function (\n  info: { start: boolean; end: boolean },\n  isHoriz: boolean,\n  barTrackMarginTopStyle: string,\n  barTrackMarginStartStyle: string,\n  barTrackMarginBottomStyle: string,\n  barTrackMarginEndStyle: string\n) {\n  const className = [];\n\n  if (info.start) {\n    className.push(isHoriz ? barTrackMarginTopStyle : barTrackMarginStartStyle);\n  }\n\n  if (info.end) {\n    className.push(isHoriz ? barTrackMarginBottomStyle : barTrackMarginEndStyle);\n  }\n  return className;\n};\n"],"names":["_jsx","_jsxs"],"mappings":"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"}