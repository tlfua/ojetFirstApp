{"version":3,"file":"TextAreaAutosize-52a4db8f.js","sources":["../../src/UNSAFE_TextAreaAutosize/ScrollHeightUtils.tsx","../../src/UNSAFE_TextAreaAutosize/useTextAreaAutosizing.tsx","../../src/UNSAFE_TextAreaAutosize/TextAreaAutosize.tsx"],"sourcesContent":["// returns the lineHeight as a number of pixels.\nexport const calculateLineHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = window.getComputedStyle(textarea);\n  const computedlineHeight = computedStyle.lineHeight;\n  if (computedlineHeight === 'normal') {\n    // We get 'normal' for values 'initial', 'inherit', 'unset' and 'normal'\n    // TODO: Unclear if we need this.\n    // getComputedStyle always return fontSize in pixels.  Not likely a float, but since it's legal\n    // we use parseFloat()\n    const fontSize = parseFloat(computedStyle.fontSize);\n    return 1.2 * fontSize;\n  }\n  return parseFloat(computedlineHeight);\n};\nexport const getStylingHeight = (textarea: HTMLTextAreaElement) => {\n  const cssStyle = window.getComputedStyle(textarea);\n  const paddingTop = parseFloat(cssStyle.paddingTop);\n  const paddingBottom = parseFloat(cssStyle.paddingBottom);\n  const borderTop = parseFloat(cssStyle.borderTop);\n  const borderBottom = parseFloat(cssStyle.borderBottom);\n  return { paddingHeight: paddingTop + paddingBottom, borderHeight: borderTop + borderBottom };\n};\n","import { ComponentProps } from 'preact';\nimport { useLayoutEffect, Ref } from 'preact/hooks';\nimport { calculateLineHeight, getStylingHeight } from './ScrollHeightUtils';\nimport { TextAreaAutosize } from './TextAreaAutosize';\n\ntype PickedPropsFromTextAreaAutosize = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'minRows' | 'maxRows' | 'value'\n>;\ntype Props = PickedPropsFromTextAreaAutosize & {\n  isReadonly?: boolean;\n  enabledElementRef: Ref<HTMLTextAreaElement>;\n  readonlyElementRef: Ref<HTMLTextAreaElement | HTMLDivElement>;\n};\n\n// TODO: Make this fire when the container resizes - JET-50840\nexport const useTextAreaAutosizing = ({\n  isReadonly,\n  enabledElementRef,\n  readonlyElementRef,\n  minRows = 2,\n  maxRows,\n  value\n}: Props) => {\n  useLayoutEffect(() => {\n    const textareaRef = isReadonly ? readonlyElementRef : enabledElementRef;\n    if (textareaRef.current === null) return;\n    if (textareaRef.current instanceof HTMLDivElement) return; // We don't need to do anything if the readonlyElement is a DIV.\n    const textarea = textareaRef.current;\n    const lineHeight = calculateLineHeight(textarea);\n    textarea.style.height = '0';\n    const { paddingHeight, borderHeight } = getStylingHeight(textarea);\n    const heightForMinRows = lineHeight * minRows + paddingHeight + borderHeight;\n    const scrollHeight = textarea.scrollHeight + borderHeight;\n    let resizedHeight = 0;\n    // if maxRows is -1 the textarea will grow or shrink to fit all the content.\n    // it won't shrink any less than rows.\n    if (maxRows === undefined) {\n      // we want to fit the entire scrollHeight, but we don't want\n      // to shrink smaller than the height for rows.\n      if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else if (maxRows > minRows) {\n      // if maxRows is positive and greater than rows, the textarea will grow to fit the content\n      // up to maxrows, or shrink to fit the content and down to rows.\n      const heightForMaxRows = lineHeight * maxRows + paddingHeight + borderHeight;\n      if (scrollHeight > heightForMaxRows) {\n        resizedHeight = heightForMaxRows;\n      } else if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else {\n      resizedHeight = heightForMinRows;\n    }\n    // The 0.5 gaurantees that the clientHeight will be bigger than the scrollHeight, so no scrollbar appears.\n    textarea.style.height = resizedHeight + 0.5 + 'px';\n  }, [value, minRows, maxRows, isReadonly]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback, useRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { useTextAreaAutosizing } from './useTextAreaAutosizing';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { MaxLengthCounter } from '../UNSAFE_TextArea';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Specifies the maximum number of rows that the TextAreaAutosize is allowed to grow to.\n   * If maxRows is less than minRows, it is ignored.\n   */\n  maxRows?: number;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * Specifies the minimum number of rows that the TextAreaAutosize is allowed to shrink to.\n   */\n  minRows?: number;\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked when the user inputs a value.\n   *\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\nexport const TextAreaAutosize = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      maxRows,\n      messages,\n      minRows = 2,\n      placeholder,\n      role,\n      //TODO: Add counter to show the length remaining - JET-50752\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement | HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        contentVariant: 'textarea',\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    useTextAreaAutosizing({\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      minRows,\n      maxRows,\n      value\n    });\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            ref={anchorRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              elementRef={readonlyElementRef}\n              {...(maxRows ? { as: 'textarea', rows: minRows } : { as: 'div' })}\n              autoFocus={autoFocus}\n              textAlign={textAlign}\n              value={value}\n              variant=\"textarea\"\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, []);\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          aria-label={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={minRows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && maxLength !== undefined && (\n          <MaxLengthCounter\n            {...{ maxLength, valueLength, parentHasFocus: isFocused, onClick: onClickCounter }}\n          />\n        )}\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          mainFieldRef={anchorRef}\n          {...textFieldProps}\n          {...fieldLabelProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["_jsx","_jsxs"],"mappings":"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"}