{"version":3,"file":"UNSAFE_IntlDateTime.js","sources":["../../src/UNSAFE_IntlDateTime/CalendarUtils.ts","../../src/UNSAFE_IntlDateTime/ISODateTimezoneOffset.ts","../../src/UNSAFE_IntlDateTime/NativeDateTimeConstants.ts","../../src/UNSAFE_IntlDateTime/dateTimeUtils.ts","../../src/UNSAFE_IntlDateTime/NativeParserImpl.ts","../../src/UNSAFE_IntlDateTime/formatParse.ts","../../../../node_modules/ramda/src/internal/_curryN.js","../../../../node_modules/ramda/src/curryN.js","../../src/UNSAFE_IntlDateTime/getFormatParse.ts","../../src/UNSAFE_IntlDateTime/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n// This class fills in the localeElements by using the data from Intl.DateTimeFormat.\n// This data is used for parsing.\n\ntype WidthOptions = 'short' | 'narrow' | 'long';\ntype CalendarWidthNames = 'abbreviated' | 'narrow' | 'wide';\n\ntype WeekdayNames = 'sun' | 'mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat';\n\ntype MonthType = {\n  '1': string;\n  '2': string;\n  '3': string;\n  '4': string;\n  '5': string;\n  '6': string;\n  '7': string;\n  '8': string;\n  '9': string;\n  '10': string;\n  '11': string;\n  '12': string;\n};\n\ntype DayType = {\n  sun: string;\n  mon: string;\n  tue: string;\n  wed: string;\n  thu: string;\n  fri: string;\n  sat: string;\n};\ntype DayPeriodType = {\n  am: string;\n  pm: string;\n};\ntype ErasWidthType = {\n  '0': string;\n  '1': string;\n};\ntype MonthWidthType = {\n  abbreviated: MonthType;\n  narrow: MonthType;\n  wide: MonthType;\n};\ntype DayWidthType = {\n  abbreviated: DayType;\n  narrow: DayType;\n  wide: DayType;\n};\ntype MonthsNodeType = {\n  format: MonthWidthType;\n  'stand-alone': MonthWidthType;\n};\ntype DaysNodeType = {\n  format: DayWidthType;\n  'stand-alone': DayWidthType;\n};\n\ntype DayPeriodFormatWidthType = {\n  wide: DayPeriodType;\n};\ntype DayPeriodsNodeType = {\n  format: DayPeriodFormatWidthType;\n};\ntype ErasType = {\n  eraNarrow: ErasWidthType;\n  eraAbbr: ErasWidthType;\n  eraName: ErasWidthType;\n};\nexport type CalendarNodeType = {\n  months: MonthsNodeType;\n  days: DaysNodeType;\n  dayPeriods: DayPeriodsNodeType;\n  eras: ErasType;\n  locale: string;\n};\n\ntype EraDesc = Array<{ era: string; start: string }>;\n\nexport class CalendarUtils {\n  // calendars[locale][calendarname]\n  public static calendars: Record<string, Record<string, CalendarNodeType>> | undefined;\n\n  private static readonly _monthNamesFormatMap = {\n    short: 'abbreviated',\n    narrow: 'narrow',\n    long: 'wide'\n  } as const;\n  private static readonly _weekdaysFormatMap = {\n    1: 'sun',\n    2: 'mon',\n    3: 'tue',\n    4: 'wed',\n    5: 'thu',\n    6: 'fri',\n    7: 'sat'\n  } as const;\n\n  // The following locales have month name like '1<literal>' (where literal is the lang's character for 'month')\n  // if we pass in the options\n  // month:'long' or month:'short' the corresponding pattern in CLDR is 'M<literal>'\n  // which is month numeric followed by the <literal>. As a result formatToParts\n  // will return {type: month, value:1} followed by {type: literal, value:<literal>}.\n  // These locales have same names for stand-alone and format month names.\n  // As a work around we will get the format month names for these\n  // locales using the stand-alone option instead of formatToParts.\n  // For example: in ja-JP locale we have:\n  // \"months\": {\n  //   \"format\": {\n  //       \"abbreviated\": {\n  //           \"1\": \"1\\u6708\",\n  //  }\n  // but the corresponding pattern is \"yMMMd\": \"y\\u5e74M\\u6708d\\u65e5\"\n  // so formatToParts will return\n  // {type: month, value:1} followed by {type: literal, value:'\\u6708d'}\n  // As a result we get '1' as month name in the calendar data instead of '1\\u6708'\n\n  private static exceptionLocales = [\n    'ja',\n    'ja-JP',\n    'zh',\n    'zh-Hans',\n    'zh-Hans-CN',\n    'zh-Hans-HK',\n    'zh-Hans-MO',\n    'zh-Hans-SG',\n    'zh-Hant',\n    'zh-Hant-HK',\n    'zh-Hant-MO',\n    'zh-Hant-TW'\n  ];\n  // Uses the Intl.DateTimeFormat formatToParts to get the day periods.\n  // Returns this object\n  // \"dayPeriods\": {\n  //  \"format\": {\n  //    \"wide\": {\n  //      \"am\": \"AM\",\n  //      \"pm\": \"PM\"\n  //    }}}\n  private static _getDayPeriods(locale: string, calendar: string) {\n    const date = new Date(2019, 0, 1, 0, 0, 0);\n\n    function getDayPeriodsFromFormatToParts(formatter: Intl.DateTimeFormat) {\n      const formatParts = formatter.formatToParts(date);\n      const eraPart = formatParts.find((value) => value.type === 'dayPeriod');\n      // TODO Era is failing for chinese calendar. Need to fix it\n      if (eraPart) {\n        return eraPart.value;\n      }\n      return '';\n    }\n    const options: {\n      hour: Intl.DateTimeFormatOptions['hour'];\n      hour12: Intl.DateTimeFormatOptions['hour12'];\n    } = { hour: 'numeric', hour12: true };\n    const formatterLocale = CalendarUtils.getFormatterLocale(locale, calendar);\n    const formatter = new Intl.DateTimeFormat(formatterLocale, options);\n    const amValue = getDayPeriodsFromFormatToParts(formatter);\n    date.setHours(20);\n    const pmValue = getDayPeriodsFromFormatToParts(formatter);\n    return { format: { wide: { am: amValue, pm: pmValue } } };\n  }\n\n  private static getFormatterLocale(locale: string, calendar: string) {\n    return locale + '-u-ca-' + calendar;\n  }\n\n  // Example of an eras from localeElements is this, but this fn gets all the data, not just eraAbbr.\n  // \"eras\": {\n  //   \"eraAbbr\": {\n  //     \"0\": \"BC\",\n  //     \"1\": \"AD\"\n  //   }\n  // },\n  private static _getEras(locale: string, calendar: string) {\n    const eras: EraDesc = [{ era: '0', start: '2000-02-11T00:00:00' }];\n    const cal: ErasType = {\n      eraNarrow: { '0': '', '1': '' },\n      eraAbbr: { '0': '', '1': '' },\n      eraName: { '0': '', '1': '' }\n    };\n\n    function getEraFromFormatToParts(formatter: Intl.DateTimeFormat, date: Date) {\n      const formatParts = formatter.formatToParts(date);\n      const eraPart = formatParts.find((value) => value.type === 'era');\n      if (eraPart) {\n        return eraPart.value;\n      }\n      return '';\n    }\n\n    const eraLenArray: Array<NonNullable<Intl.DateTimeFormatOptions['era']>> = [\n      'narrow',\n      'short',\n      'long'\n    ];\n    const formatterLocale = CalendarUtils.getFormatterLocale(locale, calendar);\n    // get the erra name for narrow, short, long.\n    // e.g., A, AD, Anno Domini\n    // this is used to map the era option value from Intl.DateTimeFormat to\n    // what we want to short in our CalendarNode\n    const eraMap = {\n      narrow: 'eraNarrow',\n      short: 'eraAbbr',\n      long: 'eraName'\n    };\n\n    for (let i = 0; i < eras.length; i++) {\n      const date = new Date(eras[i].start);\n      for (let j = 0; j < eraLenArray.length; j++) {\n        const eraLenName = eraLenArray[j];\n        const options: {\n          year: Intl.DateTimeFormatOptions['year'];\n          month: Intl.DateTimeFormatOptions['month'];\n          day: Intl.DateTimeFormatOptions['day'];\n          era: Intl.DateTimeFormatOptions['era'];\n        } = { year: 'numeric', month: 'numeric', day: 'numeric', era: eraLenName };\n        const formatter = new Intl.DateTimeFormat(formatterLocale, options);\n        const eraForLength = getEraFromFormatToParts(formatter, date);\n        const eraNameForNode = eraMap[eraLenName] as keyof ErasType;\n        const eraObj = { '0': eraForLength, '1': eraForLength };\n        cal[eraNameForNode] = eraObj;\n      }\n    }\n    return cal;\n  }\n\n  private static _fillMonthAndDays(\n    locale: string,\n    calendar: string,\n    widthVal: CalendarWidthNames,\n    options: Intl.DateTimeFormatOptions,\n    isStandAlone: boolean\n  ) {\n    // These date are used to fill in the months and weekdays.\n    // Each date is a different day of week. Like, the first is sun, the second is mon, etc.\n    const dates: Array<Array<number>> = [\n      [2020, 0, 5],\n      [2020, 1, 3],\n      [2020, 2, 3],\n      [2020, 3, 1],\n      [2020, 4, 7],\n      [2020, 5, 5],\n      [2020, 6, 4],\n      [2020, 7, 1],\n      [2020, 8, 1],\n      [2020, 9, 1],\n      [2020, 10, 1],\n      [2020, 11, 1]\n    ];\n\n    function getMonthFromFormatToParts(formatParts: Intl.DateTimeFormatPart[]) {\n      const monthPart = formatParts.find((value) => value.type === 'month');\n      if (monthPart) {\n        return monthPart.value;\n      }\n      return null;\n    }\n\n    function getWeekdayFromFormatToParts(formatParts: Intl.DateTimeFormatPart[]) {\n      const weekdayPart = formatParts.find((value) => value.type === 'weekday');\n      if (weekdayPart) {\n        return weekdayPart.value;\n      }\n      return null;\n    }\n\n    const formatterLocale = CalendarUtils.getFormatterLocale(locale, calendar);\n    const formatter = new Intl.DateTimeFormat(formatterLocale, options);\n\n    type MonthFormatType = {\n      abbreviated?: Partial<MonthType>;\n      narrow?: Partial<MonthType>;\n      wide?: Partial<MonthType>;\n    };\n    type DayFormatType = {\n      abbreviated?: Partial<DayType>;\n      narrow?: Partial<DayType>;\n      wide?: Partial<DayType>;\n    };\n    const calMonthFormat: MonthFormatType = {};\n    const calDayFormat: DayFormatType = {};\n\n    // It loops from 0 to 12, dates is for each month. [0] is the year, [1] is the month, [2] is the day\n    // create a new date with year, month, day. each date[j] is a different month of the year, and it also has a different weekday.\n    for (let j = 0; j < dates.length; j++) {\n      const index = j + 1; // 1 to 12\n      const dayIndexVal: WeekdayNames =\n        CalendarUtils._weekdaysFormatMap[index as keyof typeof CalendarUtils._weekdaysFormatMap];\n      const date = new Date(dates[j][0], dates[j][1], dates[j][2]);\n      const formatParts = formatter.formatToParts(date);\n      let month;\n      let weekday;\n      // for stand-alone (e.g., {month: 'short'}), there is only one entry, so we can just get the\n      // value of format. No need for formatToParts to pull out just the month piece.\n      // Note that for ja format gives you the month kanji character too and formatToParts month is only the number. The kanji character is in the literal.\n      if (isStandAlone) {\n        month = formatter.format(date);\n        weekday = formatter.format(date);\n      } else {\n        month = getMonthFromFormatToParts(formatParts);\n        weekday = getWeekdayFromFormatToParts(formatParts);\n      }\n      // store the month and weekday in the obj; only fill in weekday if (index <= 7)\n      if (calMonthFormat[widthVal] === undefined) {\n        calMonthFormat[widthVal] = {};\n      }\n      // @ts-ignore\n      calMonthFormat[widthVal][index] = month;\n      if (index <= 7) {\n        if (calDayFormat[widthVal] === undefined) {\n          calDayFormat[widthVal] = {};\n        }\n        // @ts-ignore\n        calDayFormat[widthVal][dayIndexVal] = weekday;\n      }\n    }\n    return {\n      monthFormat: calMonthFormat, // This will be an object like {'abbreviated': Partial<MonthType}\n      dayFormat: calDayFormat\n    };\n  }\n\n  private static _getFormatMonthAndDays(locale: string, calendar: string) {\n    const calMonths = [];\n    const calDays = [];\n    // Intl.DateTimeFormat's month can take: \"numeric\" (e.g., 3)\"2-digit\" (e.g., 03)\"long\" (e.g., March)\"short\" (e.g., Mar) \"narrow\" (e.g., M).\n    const types: Array<WidthOptions> = ['short', 'narrow', 'long'];\n    for (let i = 0; i < types.length; i++) {\n      const options: Intl.DateTimeFormatOptions = {\n        month: types[i],\n        weekday: types[i],\n        year: 'numeric',\n        day: 'numeric'\n      };\n      // types get mapped to short: 'abbreviated', narrow: 'narrow', long: 'wide'\n      const widthVal = CalendarUtils._monthNamesFormatMap[types[i]]; // get alternate names for 'narrow', 'short', 'long'\n      const monthDayObjForWidth = CalendarUtils._fillMonthAndDays(\n        locale,\n        calendar,\n        widthVal,\n        options,\n        false\n      );\n\n      calMonths[i] = monthDayObjForWidth.monthFormat;\n      calDays[i] = monthDayObjForWidth.dayFormat;\n    }\n\n    const myMonthObj = Object.assign({}, ...calMonths);\n    const myDayObj = Object.assign({}, ...calDays);\n\n    const myMonthFormatObj: Partial<MonthsNodeType> = {};\n    myMonthFormatObj.format = myMonthObj;\n    const myDayFormatObj: Partial<DaysNodeType> = {};\n    myDayFormatObj.format = myDayObj;\n\n    myMonthFormatObj['stand-alone'] = myMonthFormatObj.format;\n    myDayFormatObj['stand-alone'] = myDayFormatObj.format;\n\n    return {\n      monthsNode: myMonthFormatObj as MonthsNodeType,\n      daysNode: myDayFormatObj as DaysNodeType\n    };\n  }\n\n  private static _getStandAloneDays(locale: string, calendar: string) {\n    const calDays = [];\n    // Intl.DateTimeFormat's weekday can take: \"long\" (e.g., Monday)\"short\" (e.g., Mon) \"narrow\" (e.g., M).\n    // stand-alone weekday is displayed when the options conatin only one attribute weekday: options = {weekday:'long'}\n    const types: Array<WidthOptions> = ['short', 'narrow', 'long'];\n    for (let i = 0; i < types.length; i++) {\n      const options: Intl.DateTimeFormatOptions = {\n        weekday: types[i]\n      };\n      // types get mapped to short: 'abbreviated', narrow: 'narrow', long: 'wide'\n      const widthVal = CalendarUtils._monthNamesFormatMap[types[i]]; // get alternate names for 'narrow', 'short', 'long'\n      const dayObjForWidth = CalendarUtils._fillMonthAndDays(\n        locale,\n        calendar,\n        widthVal,\n        options,\n        true\n      );\n      calDays[i] = dayObjForWidth.dayFormat;\n    }\n    const myDayObj = Object.assign({}, ...calDays);\n    const myDayStandAloneObj = { 'stand-alone': {} };\n    myDayStandAloneObj['stand-alone'] = myDayObj;\n    return {\n      daysNode: myDayStandAloneObj as DaysNodeType\n    };\n  }\n\n  private static _getStandAloneMonths(locale: string, calendar: string) {\n    const calMonths = [];\n    // Intl.DateTimeFormat's month can take: \"numeric\" (e.g., 3)\"2-digit\" (e.g., 03)\"long\" (e.g., March)\"short\" (e.g., Mar) \"narrow\" (e.g., M).\n    // stand-alone month is displayed when the options conatin only one attribute month: options = {month:'long'}\n    const types: Array<WidthOptions> = ['short', 'narrow', 'long'];\n    for (let i = 0; i < types.length; i++) {\n      const options = {\n        month: types[i]\n      };\n      // types get mapped to short: 'abbreviated', narrow: 'narrow', long: 'wide'\n      const widthVal = CalendarUtils._monthNamesFormatMap[types[i]]; // get alternate names for 'narrow', 'short', 'long'\n      const monthObjForWidth = CalendarUtils._fillMonthAndDays(\n        locale,\n        calendar,\n        widthVal,\n        options,\n        true\n      );\n      calMonths[i] = monthObjForWidth.monthFormat;\n    }\n    const myMonthObj = Object.assign({}, ...calMonths);\n    const myMonthStandAloneObj = { 'stand-alone': {} };\n    myMonthStandAloneObj['stand-alone'] = myMonthObj;\n    return {\n      monthsNode: myMonthStandAloneObj as MonthsNodeType\n    };\n  }\n  /**\n   * Fills in CalendarUtils.calendars[locale][calendar] public static object.\n   * @param locale locale name\n   * @param calendar calendar name\n   */\n  public static getCalendar(locale: string, calendar: string): CalendarNodeType {\n    CalendarUtils.calendars = CalendarUtils.calendars ?? {};\n    CalendarUtils.calendars[locale] = CalendarUtils.calendars[locale] ?? {};\n\n    if (CalendarUtils.calendars[locale][calendar] === undefined) {\n      const dayPeriodsObj = CalendarUtils._getDayPeriods(locale, calendar);\n      const erasObj = CalendarUtils._getEras(locale, calendar);\n      let monthFormat;\n      let dayFormat;\n      const standAloneMonths = CalendarUtils._getStandAloneMonths(locale, calendar);\n      const standAloneDays = CalendarUtils._getStandAloneDays(locale, calendar);\n      const useStandAlone = CalendarUtils.exceptionLocales.includes(locale);\n      // TODO this might only be needed for gregorian calendar. Need to check when\n      // we support other calendars\n      if (useStandAlone) {\n        monthFormat = standAloneMonths.monthsNode['stand-alone'];\n        dayFormat = standAloneDays.daysNode['stand-alone'];\n      } else {\n        const monthsDaysNodeObj = CalendarUtils._getFormatMonthAndDays(locale, calendar);\n        monthFormat = monthsDaysNodeObj.monthsNode.format;\n        dayFormat = monthsDaysNodeObj.daysNode.format;\n      }\n      const monthsNodes: MonthsNodeType = {\n        format: monthFormat,\n        'stand-alone': standAloneMonths.monthsNode['stand-alone']\n      };\n      const daysNodes: DaysNodeType = {\n        format: dayFormat,\n        'stand-alone': standAloneDays.daysNode['stand-alone']\n      };\n      CalendarUtils.calendars[locale][calendar] = {\n        dayPeriods: dayPeriodsObj,\n        months: monthsNodes,\n        days: daysNodes,\n        eras: erasObj,\n        locale: locale\n      };\n    }\n    return CalendarUtils.calendars[locale][calendar];\n  }\n}\n","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport type DateDef = {\n  year: number;\n  month: number; // 1-based!\n  date: number;\n  hours: number;\n  minutes: number;\n};\n// cache the converters\nconst formatterCache: Map<string, Intl.DateTimeFormat> = new Map();\n\nexport function getISODateOffset(date: DateDef, timeZone: string): number {\n  // Get the timezone-adjusted representation of the date parameter interpreted as UTC\n  const d = new Date(Date.UTC(date.year, date.month - 1, date.date, date.hours, date.minutes));\n  const utcDateAtTimezone = _applyTimezoneToDate(d, timeZone);\n  // get the offset of the target timezone (subject to a possible DTS change ajustment)\n  const offset = _getOffset(date, utcDateAtTimezone);\n  let adjustment = 0;\n  d.setTime(d.getTime() - offset * 60000);\n\n  // check whether the offset is correct\n  if (!_compareDates(_applyTimezoneToDate(d, timeZone), date)) {\n    // try to accommodate 'fall back'/move 1 hour west\n    adjustment = -60;\n    d.setTime(d.getTime() + 60 * 60000);\n    if (!_compareDates(_applyTimezoneToDate(d, timeZone), date)) {\n      // spring forward/move 1 hour east\n      // This case should always produce a match unless we are hitting the missing hour during the 'spring forward'\n      // JS Date() favors the DST in this case, so we will remain at the 'spring forward' offset even if _compareDates()\n      // would have returned false\n      adjustment = 60;\n      d.setTime(d.getTime() - 120 * 60000);\n    }\n  }\n  const result = offset + adjustment;\n  return result;\n}\n\nfunction _applyTimezoneToDate(d: Date, timeZone: string): DateDef {\n  const cnv = _getConverter(timeZone);\n  const formattedUTC = cnv.format(d);\n  const [localDate, localTime] = formattedUTC.split(',');\n  const [month, date, year] = localDate.split('/');\n  const [hours, minutes] = localTime.trim().split(':');\n  return {\n    year: parseInt(year),\n    month: parseInt(month),\n    date: parseInt(date),\n    hours: parseInt(hours),\n    minutes: parseInt(minutes)\n  };\n}\n\nfunction _getOffset(original: DateDef, asUTC: DateDef): number {\n  let originalMins = original.hours * 60 + original.minutes;\n  let utcMinutes = asUTC.hours * 60 + asUTC.minutes;\n  // any shift in year, month or day indicates the following day\n  let delta = original.year - asUTC.year;\n  if (delta == 0) {\n    delta = original.month - asUTC.month;\n    if (delta === 0) {\n      delta = original.date - asUTC.date;\n    }\n  }\n  if (delta > 0) {\n    originalMins += 24 * 60;\n  } else if (delta < 0) {\n    utcMinutes += 24 * 60;\n  }\n  return utcMinutes - originalMins;\n}\n\nfunction _compareDates(date1: DateDef, date2: DateDef) {\n  return (\n    date1.year === date2.year &&\n    date1.month === date2.month &&\n    date1.hours === date2.hours &&\n    date1.minutes === date2.minutes\n  );\n}\n\nfunction _getConverter(timezone: string) {\n  let formatter = formatterCache.get(timezone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hourCycle: 'h23',\n      timeZone: timezone\n    });\n    formatterCache.set(timezone, formatter);\n  }\n  return formatter;\n}\n","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport class NativeDateTimeConstants {\n  public static readonly _YEAR_AND_DATE_REGEXP = /(\\d{1,4})\\D+?(\\d{1,4})/g;\n  public static readonly _YMD_REGEXP = /(\\d{1,4})\\D+?(\\d{1,4})\\D+?(\\d{1,4})/g;\n  public static readonly _TIME_REGEXP =\n    /(\\d{1,2})(?:\\D(\\d{1,2}))?(?:\\D(\\d{1,2}))?(?:\\D(\\d{1,3}))?/g;\n  public static readonly _TIME_FORMAT_REGEXP = /h|H|K|k/g;\n\n  public static readonly _YEAR_REGEXP = /y{1,4}/;\n  public static readonly _MONTH_REGEXP = /M{1,5}/;\n  public static readonly _DAY_REGEXP = /d{1,2}/;\n  public static readonly _WEEK_DAY_REGEXP = /E{1,5}/;\n  public static readonly _HOUR_REGEXP = /h{1,2}|k{1,2}/i;\n  public static readonly _MINUTE_REGEXP = /m{1,2}/;\n  public static readonly _SECOND_REGEXP = /s{1,2}/;\n  public static readonly _FRACTIONAL_SECOND_REGEXP = /S{1,3}/;\n  public static readonly _AMPM_REGEXP = /a{1,2}/;\n  public static readonly _WORD_REGEXP = '(\\\\D+?\\\\s*)';\n\n  // This eslint disable require to make eacs happy\n  // eslint-disable-next-line no-useless-escape\n  public static readonly _ESCAPE_REGEXP = /([\\^$.*+?|\\[\\](){}])/g;\n\n  public static readonly _TOKEN_REGEXP =\n    /ccccc|cccc|ccc|cc|c|EEEEE|EEEE|EEE|EE|E|dd|d|MMMMM|MMMM|MMM|MM|M|LLLLL|LLLL|LLL|LL|L|yyyy|yy|y|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|aa|a|SSS|SS|S|zzzz|zzz|zz|z|v|ZZZ|ZZ|Z|XXX|XX|X|VV|GGGGG|GGGG|GGG|GG|G/g;\n  public static readonly _ZULU = 'zulu';\n  public static readonly _LOCAL = 'local';\n  public static readonly _AUTO = 'auto';\n  public static readonly _INVARIANT = 'invariant';\n  public static readonly _OFFSET = 'offset';\n  public static readonly _ALNUM_REGEXP = '(\\\\D+|\\\\d\\\\d?\\\\D|\\\\d\\\\d?|\\\\D+\\\\d\\\\d?)';\n  public static readonly _NON_DIGIT_REGEXP = '(\\\\D+|\\\\D+\\\\d\\\\d?)';\n  public static readonly _NON_DIGIT_OPT_REGEXP = '(\\\\D*)';\n  public static readonly _STR_REGEXP = '(.+?)';\n  public static readonly _TWO_DIGITS_REGEXP = '(\\\\d\\\\d?)';\n  public static readonly _THREE_DIGITS_REGEXP = '(\\\\d{1,3})';\n  public static readonly _FOUR_DIGITS_REGEXP = '(\\\\d{1,4})';\n  public static readonly _SLASH_REGEXP = '(\\\\/)';\n\n  public static readonly _PROPERTIES_MAP = {\n    MMM: {\n      token: 'months',\n      style: 'format',\n      mLen: 'abbreviated',\n      matchIndex: 0,\n      key: 'month',\n      value: 'short',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    MMMM: {\n      token: 'months',\n      style: 'format',\n      mLen: 'wide',\n      matchIndex: 0,\n      key: 'month',\n      value: 'long',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    MMMMM: {\n      token: 'months',\n      style: 'format',\n      mLen: 'narrow',\n      matchIndex: 0,\n      key: 'month',\n      value: 'narrow',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    LLL: {\n      token: 'months',\n      style: 'stand-alone',\n      mLen: 'abbreviated',\n      matchIndex: 1,\n      key: 'month',\n      value: 'short',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    LLLL: {\n      token: 'months',\n      style: 'stand-alone',\n      mLen: 'wide',\n      matchIndex: 1,\n      key: 'month',\n      value: 'long',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    LLLLL: {\n      token: 'months',\n      style: 'stand-alone',\n      mLen: 'narrow',\n      matchIndex: 1,\n      key: 'month',\n      value: 'narrow',\n      regExp: NativeDateTimeConstants._ALNUM_REGEXP\n    },\n    E: {\n      token: 'days',\n      style: 'format',\n      dLen: 'abbreviated',\n      matchIndex: 0,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    EE: {\n      token: 'days',\n      style: 'format',\n      dLen: 'abbreviated',\n      matchIndex: 0,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    EEE: {\n      token: 'days',\n      style: 'format',\n      dLen: 'abbreviated',\n      matchIndex: 0,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    EEEE: {\n      token: 'days',\n      style: 'format',\n      dLen: 'wide',\n      matchIndex: 0,\n      key: 'weekday',\n      value: 'long',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    EEEEE: {\n      token: 'days',\n      style: 'format',\n      dLen: 'narrow',\n      matchIndex: 0,\n      key: 'weekday',\n      value: 'narrow',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    c: {\n      token: 'days',\n      style: 'stand-alone',\n      dLen: 'abbreviated',\n      matchIndex: 1,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    cc: {\n      token: 'days',\n      style: 'stand-alone',\n      dLen: 'abbreviated',\n      matchIndex: 1,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    ccc: {\n      token: 'days',\n      style: 'stand-alone',\n      dLen: 'abbreviated',\n      matchIndex: 1,\n      key: 'weekday',\n      value: 'short',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    cccc: {\n      token: 'days',\n      style: 'stand-alone',\n      dLen: 'wide',\n      matchIndex: 1,\n      key: 'weekday',\n      value: 'long',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    ccccc: {\n      token: 'days',\n      style: 'stand-alone',\n      dLen: 'narrow',\n      matchIndex: 1,\n      key: 'weekday',\n      value: 'narrow',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    h: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 11,\n      start2: 1,\n      end2: 12,\n      key: 'hour',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    hh: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 11,\n      start2: 1,\n      end2: 12,\n      key: 'hour',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    K: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 12,\n      start2: 0,\n      end2: 12,\n      key: 'hour',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    KK: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 12,\n      start2: 0,\n      end2: 12,\n      key: 'hour',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    H: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 23,\n      start2: 0,\n      end2: 23,\n      key: 'hour',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    HH: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 23,\n      start2: 0,\n      end2: 23,\n      key: 'hour',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    k: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 24,\n      start2: 0,\n      end2: 24,\n      key: 'hour',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    kk: {\n      token: 'time',\n      timePart: 'hour',\n      start1: 0,\n      end1: 24,\n      start2: 0,\n      end2: 24,\n      key: 'hour',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    m: {\n      token: 'time',\n      timePart: 'minute',\n      start1: 0,\n      end1: 59,\n      start2: 0,\n      end2: 59,\n      key: 'minute',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    mm: {\n      token: 'time',\n      timePart: 'minute',\n      start1: 0,\n      end1: 59,\n      start2: 0,\n      end2: 59,\n      key: 'minute',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    s: {\n      token: 'time',\n      timePart: 'second',\n      start1: 0,\n      end1: 59,\n      start2: 0,\n      end2: 59,\n      key: 'second',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    ss: {\n      token: 'time',\n      timePart: 'second',\n      start1: 0,\n      end1: 59,\n      start2: 0,\n      end2: 59,\n      key: 'second',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    S: {\n      token: 'time',\n      timePart: 'millisec',\n      start1: 0,\n      end1: 999,\n      start2: 0,\n      end2: 999,\n      key: 'millisecond',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._THREE_DIGITS_REGEXP\n    },\n    SS: {\n      token: 'time',\n      timePart: 'millisec',\n      start1: 0,\n      end1: 999,\n      start2: 0,\n      end2: 999,\n      key: 'millisecond',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._THREE_DIGITS_REGEXP\n    },\n    SSS: {\n      token: 'time',\n      timePart: 'millisec',\n      start1: 0,\n      end1: 999,\n      start2: 0,\n      end2: 999,\n      key: 'millisecond',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._THREE_DIGITS_REGEXP\n    },\n    d: {\n      token: 'dayOfMonth',\n      key: 'day',\n      value: 'numeric',\n      getPartIdx: 2,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    dd: {\n      token: 'dayOfMonth',\n      key: 'day',\n      value: '2-digit',\n      getPartIdx: 2,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    M: {\n      token: 'monthIndex',\n      key: 'month',\n      value: 'numeric',\n      getPartIdx: 1,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    MM: {\n      token: 'monthIndex',\n      key: 'month',\n      value: '2-digit',\n      getPartIdx: 1,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    L: {\n      token: 'monthIndex',\n      key: 'month',\n      value: 'numeric',\n      getPartIdx: 1,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    LL: {\n      token: 'monthIndex',\n      key: 'month',\n      value: '2-digit',\n      getPartIdx: 1,\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    y: {\n      token: 'year',\n      key: 'year',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._FOUR_DIGITS_REGEXP\n    },\n    yy: {\n      token: 'year',\n      key: 'year',\n      value: '2-digit',\n      regExp: NativeDateTimeConstants._TWO_DIGITS_REGEXP\n    },\n    yyyy: {\n      token: 'year',\n      key: 'year',\n      value: 'numeric',\n      regExp: NativeDateTimeConstants._FOUR_DIGITS_REGEXP\n    },\n    a: {\n      token: 'ampm',\n      key: 'dayPeriod',\n      value: undefined,\n      regExp: NativeDateTimeConstants._WORD_REGEXP\n    },\n    z: {\n      token: 'tzAbbrev',\n      key: 'timeZoneName',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP\n    },\n    v: {\n      token: 'tzAbbrev',\n      key: 'timeZoneName',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP\n    },\n    zz: {\n      token: 'tzAbbrev',\n      key: 'timeZoneName',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP\n    },\n    zzz: {\n      token: 'tzAbbrev',\n      key: 'timeZoneName',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP\n    },\n    zzzz: {\n      token: 'tzFull',\n      key: 'timeZoneName',\n      value: 'long',\n      regExp: NativeDateTimeConstants._STR_REGEXP\n    },\n    Z: {\n      token: 'tzhm',\n      key: 'tzhm',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    ZZ: {\n      token: 'tzhm',\n      key: 'tzhm',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    ZZZ: {\n      token: 'tzhm',\n      key: 'tzhm',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    X: {\n      token: 'tzh',\n      key: 'tzh',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    XX: {\n      token: 'tzhm',\n      key: 'tzhm',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    XXX: {\n      token: 'tzhsepm',\n      key: 'tzhsepm',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    VV: {\n      token: 'tzid',\n      key: 'tzid',\n      value: 'short',\n      regExp: NativeDateTimeConstants._STR_REGEXP,\n      type: 'tzOffset'\n    },\n    G: {\n      token: 'era',\n      key: 'era',\n      value: 'eraAbbr',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    GG: {\n      token: 'era',\n      key: 'era',\n      value: 'eraAbbr',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    GGG: {\n      token: 'era',\n      key: 'era',\n      value: 'eraAbbr',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    GGGG: {\n      token: 'era',\n      key: 'era',\n      value: 'eraName',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    GGGGG: {\n      token: 'era',\n      key: 'era',\n      value: 'eraNarrow',\n      regExp: NativeDateTimeConstants._NON_DIGIT_REGEXP\n    },\n    '/': {\n      token: 'slash',\n      regExp: NativeDateTimeConstants._SLASH_REGEXP\n    }\n  };\n\n  public static readonly FRACTIONAL_SECOND_MAP = {\n    a: {\n      key: 'dayPeriod',\n      token: 'dayPeriod',\n      value: 'narrow'\n    },\n    SSS: {\n      key: 'fractionalSecondDigits',\n      token: 'fractionalSecond',\n      value: 3\n    },\n    SS: {\n      key: 'fractionalSecondDigits',\n      token: 'fractionalSecond',\n      value: 2\n    },\n    S: {\n      key: 'fractionalSecondDigits',\n      token: 'fractionalSecond',\n      value: 1\n    }\n  };\n  // Map between tokens length and options\n  public static readonly _tokenMap = {\n    era: { short: 'GGG', long: 'GGGG', narrow: 'GGGGG' },\n    month: { short: 'MMM', long: 'MMMM', narrow: 'MMMMM', numeric: 'M', '2-digit': 'MM' },\n    weekday: { short: 'EEE', long: 'EEEE', narrow: 'EEEEE' },\n    year: { numeric: 'y', '2-digit': 'yy' },\n    day: { numeric: 'd', '2-digit': 'dd' },\n    hour: { numeric: 'h', '2-digit': 'hh' },\n    minute: { numeric: 'm', '2-digit': 'mm' },\n    second: { numeric: 's', '2-digit': 'ss' },\n    fractionalSecond: { 1: 'S', 2: 'SS', 3: 'SSS' },\n    timeZoneName: { short: 'z', long: 'zzzz' }\n  };\n  // Map between tokens and timeStyle and dateStyle\n  // Always set year to y, hour to h, minute to m, and second to s\n  // We need to get the pattern from the options. It is only needed by parse,\n  // prase does not care of the difference between h an hh, y and yy because\n  // they are all numeric. so 2021/09/01 is equivalent to 21/9/1 because the\n  // pattern is (\\d)+/(\\d)+/(\\(d)+ matches both of inputs\n  public static readonly _dateTimeFormats = {\n    dateStyle: {\n      full: { year: 'y', month_s: 'MM', month_m: 'MMMM', weekday: 'EEEE', day: 'd' },\n      long: { year: 'y', month_s: 'MM', month_m: 'MMMM', day: 'd' },\n      medium: { year: 'y', month_s: 'MM', month_m: 'MMM', day: 'd' },\n      short: { year: 'y', month_s: 'M', month_m: 'MMM', day: 'd' }\n    },\n    timeStyle: {\n      full: { hour: 'h', minute: 'mm', second: 'ss', timeZoneName: 'zzzz' },\n      long: { hour: 'h', minute: 'mm', second: 'ss', timeZoneName: 'z' },\n      medium: { hour: 'h', minute: 'mm', second: 'ss' },\n      short: { hour: 'h', minute: 'mm' }\n    }\n  };\n  // letters a-z and A-Z are reserved for date-time tokens in the pattern\n  // they need to be surrounded by single quote if they are not a token.\n  // for example at should appear as 'at' in the pattern\n  public static readonly _ALPHA_REGEXP = /([a-zA-Z]+)/;\n  public static readonly _HOUR12_REGEXP = /h/g;\n  public static readonly _hourCycleMap = {\n    h12: 'h',\n    h23: 'H',\n    h11: 'K',\n    h24: 'k'\n  };\n  // zh-TW locales have different symbols for pm depending on the time.\n  // The following entries are noon, after noon, and evening\n  public static readonly _zh_tw_locales = ['zh-TW', 'zh-Hant', 'zh-Hant-TW'];\n  public static readonly _zh_tw_pm_symbols = ['\\u4e2d\\u5348', '\\u4e0b\\u5348', '\\u665a\\u4e0a'];\n}\n","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { NativeDateTimeResolvedOptions } from './NativeDateTimeOptions';\n\n/**\n * Date time utilities.\n */\n\nconst regexTrim = /^\\s+|\\s+$|\\u200f|\\u200e/g;\nconst regexTrimNumber = /\\s+|\\u200f|\\u200e/g;\nconst regexTrimRightZeros = /0+$/g;\nconst zeros = ['0', '00', '000'];\n\n// ISO 8601 string accepted values:\n// -date only: YYYY or YYYY-MM or YYYY-MM-dd\n// -time only without timezone: Thh:mm or Thh:mm:ss or Thh:mm:ss.SSS\n// -time only with timezone: any of the time values above followed by any of the following:\n// Z or +/-hh:mm or +/-hhmm or +/-hh\n// -date time: any of the date values followed by any of the time values\nexport const _ISO_DATE_REGEXP =\n  /^[+-]?\\d{4}(?:-\\d{2}(?:-\\d{2})?)?(?:T\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,3})?)?(Z|[+-]\\d{2}(?::?\\d{2})?)?)?$|^T\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d{1,3})?)?(Z|[+-]\\d{2}(?::?\\d{2})?)?$/;\n\nconst _ISO_DATE_ONLY_REGEXP = /^[+-]?\\d{4}-\\d{2}-\\d{2}$/;\n\n/**\n * Returns true if the value represents a date-only ISO string.\n *\n * @param {string} value\n * @returns true if the string represents a date-only ISO string\n */\nexport function isDateOnlyIsoString(value?: string | null) {\n  // If value is undefined/null, returns true.\n  // If value is empty or blank string, returns false.\n  // Otherwise checks value against the regexp.\n  const isValid =\n    value === undefined || value === null\n      ? true\n      : value.trim().length > 0\n      ? _ISO_DATE_ONLY_REGEXP.test(value.trim())\n      : false;\n  return isValid;\n}\n\nexport function startsWith(value: string, pattern: string) {\n  return value.indexOf(pattern) === 0;\n}\n\nexport function trim(value: string) {\n  return (value + '').replace(regexTrim, '');\n}\n\nexport function trimRightZeros(value: string) {\n  return (value + '').replace(regexTrimRightZeros, '');\n}\n\nexport function trimNumber(value: string) {\n  const s = (value + '').replace(regexTrimNumber, '');\n  return s;\n}\n\nexport function toUpper(value: string) {\n  // \"he-IL\" has non-breaking space in weekday names.\n  return value.split('\\u00A0').join(' ').toUpperCase();\n}\n\nexport function padZeros(num: number, c: number) {\n  let s = num + '';\n  let isNegative = false;\n  if (num < 0) {\n    s = s.substr(1);\n    isNegative = true;\n  }\n  if (c > 1 && s.length < c) {\n    s = zeros[c - 2] + s;\n    s = s.substr(s.length - c, c);\n  }\n  if (isNegative) {\n    s = '-' + s;\n  }\n  return s;\n}\n\nexport function zeroPad(str: string, count: number, left: boolean) {\n  let result = '' + str;\n\n  for (let l = result.length; l < count; l += 1) {\n    result = left ? '0' + result : result + '0';\n  }\n  return result;\n}\n\nfunction _throwInvalidISOStringRange(\n  isoStr: string,\n  name: string,\n  displayValue: string | number,\n  displayLow: number,\n  displayHigh: number\n) {\n  const msg =\n    'The string ' +\n    isoStr +\n    ' is not a valid ISO 8601 string: ' +\n    displayValue +\n    ' is out of range.  Enter a value between ' +\n    displayLow +\n    ' and ' +\n    displayHigh +\n    ' for ' +\n    name;\n\n  const errorInfo = {\n    cause: {\n      code: 'isoStringOutOfRange',\n      parameterMap: {\n        isoStr: isoStr,\n        value: displayValue,\n        minValue: displayLow,\n        maxValue: displayHigh,\n        propertyName: name\n      }\n    }\n  };\n\n  const rangeError = new (RangeError as any)(msg, errorInfo);\n  throw rangeError;\n}\n\nfunction _throwInvalidISOStringSyntax(str: string) {\n  const msg = 'The string ' + str + ' is not a valid ISO 8601 string syntax.';\n  const errorInfo = {\n    cause: {\n      code: 'invalidISOString',\n      parameterMap: {\n        isoStr: str\n      }\n    }\n  };\n  const e = new (Error as any)(msg, errorInfo);\n  throw e;\n}\n\n/**\n * <p>Returns a local ISO string provided a Date object.\n * This method can be used to convert a moment in time or a local ISO string into\n * a local ISO string. It can also be used to convert any Date object into local ISO\n * string.</p>\n * Examples below are where the local (user's system) time zone is UTC-06:00<br>\n * dateToLocalIso(new Date('2021-06-04T00:00:00-04:00')); -->'2021-06-03T22:00:00'<br>\n * dateToLocalIso(new Date('2021-06-04T02:30:00Z')); -->'2021-06-03T20:30:00'<br>\n * In this example the input ISO string is local, the output is the same:<br>\n * dateToLocalIso(new Date('2021-06-04T02:30:00')); -->'2021-06-04T02:30:00'<br>\n * In this example we just want to convert a Date object:<br>\n * dateToLocalIso(new Date());<br>\n */\nexport function dateToLocalIso(_date: Date | number) {\n  let date = _date;\n  if (typeof date === 'number') {\n    date = new Date(date);\n  }\n  let isoStr =\n    padZeros(date.getFullYear(), 4) +\n    '-' +\n    padZeros(date.getMonth() + 1, 2) +\n    '-' +\n    padZeros(date.getDate(), 2) +\n    'T' +\n    padZeros(date.getHours(), 2) +\n    ':' +\n    padZeros(date.getMinutes(), 2) +\n    ':' +\n    padZeros(date.getSeconds(), 2);\n  if (date.getMilliseconds() > 0) {\n    isoStr += '.' + trimRightZeros(padZeros(date.getMilliseconds(), 3));\n  }\n  return isoStr;\n}\n\nexport function isLeapYear(y: number) {\n  if (y % 400 === 0) {\n    return true;\n  } else if (y % 100 === 0) {\n    return false;\n  } else if (y % 4 === 0) {\n    return true;\n  }\n  return false;\n}\n\n// Get days in month depending on month and leap year\nexport function getDaysInMonth(y: number, m: number) {\n  switch (m) {\n    case 0:\n    case 2:\n    case 4:\n    case 6:\n    case 7:\n    case 9:\n    case 11:\n      return 31;\n    case 1:\n      if (isLeapYear(y)) {\n        return 29;\n      }\n      return 28;\n    default:\n      return 30;\n  }\n}\n\nexport function IsoStrParts(isoString: string) {\n  const tst = _ISO_DATE_REGEXP.test(isoString);\n  if (tst === false) {\n    _throwInvalidISOStringSyntax(isoString);\n  }\n  const splitted = isoString.split('T');\n  const tIndex = isoString.indexOf('T');\n  const today = new Date();\n  let i;\n  let isBC = false;\n  const datetime = [today.getFullYear(), today.getMonth() + 1, today.getDate(), 0, 0, 0, 0];\n\n  if (splitted[0] !== '') {\n    // contains date portion\n    // test if date is BC, year is negative\n    if (startsWith(splitted[0], '-')) {\n      splitted[0] = splitted[0].slice(1);\n      isBC = true;\n    }\n    const dateSplitted = splitted[0].split('-');\n    for (i = 0; i < dateSplitted.length; i++) {\n      const val = parseInt(dateSplitted[i], 10);\n      // validate month\n      if (i === 1) {\n        if (val < 1 || val > 12) {\n          _throwInvalidISOStringRange(isoString, 'month', val, 1, 12);\n        }\n      }\n      // validate day\n      if (i === 2) {\n        const nbDays = getDaysInMonth(datetime[0], datetime[1] - 1);\n        if (val < 1 || val > nbDays) {\n          _throwInvalidISOStringRange(isoString, 'day', val, 1, nbDays);\n        }\n      }\n      datetime[i] = val;\n    }\n    if (isBC) {\n      datetime[0] = -datetime[0];\n    }\n  }\n\n  if (tIndex !== -1) {\n    const milliSecSplitted = splitted[1].split('.'); // contain millseconds\n    const timeSplitted = milliSecSplitted[0].split(':'); // contain hours, minutes, seconds\n\n    for (i = 0; i < timeSplitted.length; i++) {\n      const tVal = parseInt(timeSplitted[i], 10);\n      // validate hour\n      if (i === 0) {\n        if (tVal < 0 || tVal > 24) {\n          _throwInvalidISOStringRange(isoString, 'hour', tVal, 0, 24);\n        }\n      }\n      // validate minute\n      if (i === 1) {\n        if (tVal < 0 || tVal > 59) {\n          _throwInvalidISOStringRange(isoString, 'minute', tVal, 0, 59);\n        }\n      }\n      // validate second\n      if (i === 2) {\n        if (tVal < 0 || tVal > 59) {\n          _throwInvalidISOStringRange(isoString, 'second', tVal, 0, 59);\n        }\n      }\n      datetime[3 + i] = tVal;\n    }\n\n    if (milliSecSplitted.length === 2 && milliSecSplitted[1]) {\n      datetime[6] = parseInt(zeroPad(milliSecSplitted[1], 3, false), 10);\n    }\n  }\n  return datetime;\n}\n\nfunction _toBoolean(value: any) {\n  if (typeof value === 'string') {\n    const s = value.toLowerCase().trim();\n    switch (s) {\n      case 'true':\n      case '1':\n        return true;\n      case 'false':\n      case '0':\n        return false;\n      default:\n        return value;\n    }\n  }\n  return value;\n}\n\n// Return a function getOption.\n// The getOption function extracts the value of the property named\n// property from the provided options object, converts it to the required type,\n// checks whether it is one of a List of allowed values, and fills in a\n// fallback value if necessary.\nexport function getGetOption(options: NativeDateTimeResolvedOptions, getOptionCaller: string) {\n  if (options === undefined) {\n    throw new Error('Internal ' + getOptionCaller + ' error. Default options missing.');\n  }\n\n  const getOption = function (property: any, type: any, values: any, defaultValue: any) {\n    if ((options as any)[property] !== undefined) {\n      let value = (options as any)[property];\n      switch (type) {\n        case 'boolean':\n          value = _toBoolean(value);\n          break;\n        case 'string':\n          value = String(value);\n          break;\n        case 'number':\n          value = Number(value);\n          break;\n        default:\n          throw new Error('Internal error. Wrong value type.');\n      }\n      if (values !== undefined && values.indexOf(value) === -1) {\n        const expectedValues = [];\n        for (let i = 0; i < values.length; i++) {\n          expectedValues.push(values[i]);\n        }\n        const msg =\n          \"The value '\" +\n          (options as any)[property] +\n          \"' is out of range for '\" +\n          getOptionCaller +\n          \"' options property '\" +\n          property +\n          \"'. Valid values: \" +\n          expectedValues;\n        const rangeError = new RangeError(msg);\n        const errorInfo = {\n          errorCode: 'optionOutOfRange',\n          parameterMap: {\n            propertyName: property,\n            propertyValue: (options as any)[property],\n            propertyValueValid: expectedValues,\n            caller: getOptionCaller\n          }\n        };\n        (rangeError as any).errorInfo = errorInfo;\n        throw rangeError;\n      }\n\n      return value;\n    }\n    return defaultValue;\n  };\n\n  return getOption;\n}\n\nexport function partsToIsoString(parts: any) {\n  let isoStr =\n    padZeros(parts[0], 4) +\n    '-' +\n    padZeros(parts[1], 2) +\n    '-' +\n    padZeros(parts[2], 2) +\n    'T' +\n    padZeros(parts[3], 2) +\n    ':' +\n    padZeros(parts[4], 2) +\n    ':' +\n    padZeros(parts[5], 2);\n  if (parts[6] > 0) {\n    isoStr += '.' + trimRightZeros(padZeros(parts[6], 3));\n  }\n  return isoStr;\n}\n\n/**\n * Returns a local Date object from a local ISO string. This method is only meant\n * to work with local ISO strings. If the input ISO string contain Z or offset,\n * they will be ignored.\n * @param {string} isoString\n * @memberof oj.OraI18nUtils\n * @method isoToLocalDate\n */\nexport function isoToLocalDate(isoString: string) {\n  if (!isoString || typeof isoString !== 'string') {\n    return null;\n  }\n  return _isoToLocalDateIgnoreTimezone(isoString);\n}\n\nfunction _isoToLocalDateIgnoreTimezone(isoString: string) {\n  const datetime = IsoStrParts(isoString);\n  const date = new Date(\n    datetime[0],\n    datetime[1] - 1,\n    datetime[2],\n    datetime[3],\n    datetime[4],\n    datetime[5],\n    datetime[6]\n  );\n  // As per the documentation:\n  // new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);\n  // year - Integer value representing the year and\n  // values from 0 to 99 map to the years 1900 to 1999; all other values are the actual year.\n  // Use Date.prototype.setFullYear to create dates between the years 0 and 99.\n  date.setFullYear(datetime[0]);\n  return date;\n}\n\nexport function getISOStrFormatInfo(isoStr: string) {\n  const res: any = {\n    format: null,\n    dateTime: null,\n    timeZone: '',\n    isoStrParts: null\n  };\n  const exe: any = _ISO_DATE_REGEXP.exec(isoStr);\n\n  if (exe === null) {\n    _throwInvalidISOStringSyntax(isoStr);\n  }\n  if (exe && exe[1] === undefined && exe[2] === undefined) {\n    res.format = 'local';\n    res.dateTime = isoStr;\n    res.isoStrParts = IsoStrParts(res.dateTime);\n    return res;\n  }\n  res.timeZone = exe[1] !== undefined ? exe[1] : exe[2];\n  if (res.timeZone === 'Z') {\n    res.format = 'zulu';\n  } else {\n    res.format = 'offset';\n  }\n  const isoStrLen = isoStr.length;\n  const timeZoneLen = res.timeZone.length;\n  res.dateTime = isoStr.substring(0, isoStrLen - timeZoneLen);\n  res.isoStrParts = IsoStrParts(res.dateTime);\n  return res;\n}\n\nexport function getTimeStringFromOffset(\n  prefix: string,\n  offset: number,\n  reverseSign: boolean,\n  alwaysMinutes: boolean\n) {\n  const isNegative = reverseSign ? offset > 0 : offset < 0;\n  const absOffset = Math.abs(offset);\n  let hours: any = Math.floor(absOffset / 60);\n  const minutes: any = absOffset % 60;\n  const sign = isNegative ? '-' : '+';\n\n  if (alwaysMinutes) {\n    hours = zeroPad(hours, 2, true);\n  }\n  let str = prefix + sign + hours;\n  if (minutes > 0 || alwaysMinutes) {\n    str += ':' + zeroPad(minutes, 2, true);\n  }\n  return str;\n}\n","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { CalendarNodeType } from './CalendarUtils';\nimport { DateDef } from './ISODateTimezoneOffset';\nimport { FormatParseError, FormatParseErrorOptions } from '../UNSAFE_IntlFormatParse';\nimport { getISODateOffset } from './ISODateTimezoneOffset';\n// import { Logger } from '../utils/UNSAFE_logger';\nimport { NativeDateTimeConstants } from './NativeDateTimeConstants';\nimport { NativeDateTimeOptions } from './NativeDateTimeOptions';\nimport { NativeDateTimeResolvedOptions } from './NativeDateTimeOptions';\n\nimport * as LocalOraI18nUtils from './dateTimeUtils';\n\ninterface ParsedObjectType {\n  value: string;\n  warning: string;\n}\n\ninterface RangeType {\n  name: string;\n  value: number;\n  low: number;\n  high: number;\n  displayValue: number;\n  displayLow: number;\n  displayHigh: number;\n}\n// cache locale system time zone\nlet localSystemTimeZone: string | null = null;\n\nexport class NativeParserImpl {\n  public static parseImpl(\n    str: string,\n    pattern: string,\n    resOptions: NativeDateTimeResolvedOptions,\n    cal: CalendarNodeType\n  ): ParsedObjectType {\n    let dtStyle = 0;\n    // First try if str is an iso 8601 string\n    const testIsoStr = LocalOraI18nUtils._ISO_DATE_REGEXP.test(str);\n    let parsedIsoStr = '';\n    let isoStrInfo = null;\n    let res: any;\n    if (testIsoStr === true) {\n      parsedIsoStr = str;\n      dtStyle = this._isoStrDateTimeStyle(str);\n    } else {\n      dtStyle = this._dateTimeStyle(resOptions);\n      res = this._parseExact(str, pattern, resOptions, cal);\n      parsedIsoStr = res.value;\n    }\n    isoStrInfo = LocalOraI18nUtils.getISOStrFormatInfo(parsedIsoStr);\n    if (resOptions.timeZone !== undefined && isoStrInfo.format !== NativeDateTimeConstants._LOCAL) {\n      this._adjustHours(isoStrInfo, resOptions);\n    }\n    parsedIsoStr = this._createParseISOStringFromDate(dtStyle, isoStrInfo, resOptions);\n    if (res === undefined) {\n      res = { value: parsedIsoStr, warning: null };\n    } else {\n      res.value = parsedIsoStr;\n      res.warning = null;\n    }\n    // If the returned ISO string is date-time and isoStrFormat is local,\n    // log a warning saying that local is not supported for date-time iso strings\n    // and return offset instead\n    if (dtStyle === 2 && resOptions.isoStrFormat === NativeDateTimeConstants._LOCAL) {\n      // Disable warning since it causes noise in test runs.\n      // TODO: Re-enable once JET-59083 is fixed.\n      //Logger.warn(\n      //  'isoStrFormat was set to local for date-time ISO string. local was ignored and parse returned an ISO string with offset.'\n      //);\n    }\n    return res;\n  }\n  // appends pre- and post- token match strings while removing escaped\n  // characters.\n  // Returns a single quote count which is used to determine if the\n  // token occurs\n  // in a string literal.\n  private static _appendPreOrPostMatch(preMatch: string, strings: Array<string>): number {\n    let quoteCount = 0;\n    let escaped = false;\n    for (let i = 0, il = preMatch.length; i < il; i++) {\n      const c = preMatch.charAt(i);\n      switch (c) {\n        case \"'\":\n          if (escaped) {\n            strings.push(\"'\");\n          } else {\n            quoteCount += 1;\n          }\n          escaped = false;\n          break;\n        case '\\\\':\n          if (escaped) {\n            strings.push('\\\\');\n          }\n          escaped = !escaped;\n          break;\n        default:\n          strings.push(c);\n          escaped = false;\n          break;\n      }\n    }\n    return quoteCount;\n  }\n\n  private static _validateRange(range: RangeType) {\n    if (range.value < range.low || range.value > range.high) {\n      const msg =\n        range.displayValue +\n        ' is out of range.  Enter a value between ' +\n        range.displayLow +\n        ' and ' +\n        range.displayHigh +\n        ' for ' +\n        range.name;\n\n      const errorInfo: FormatParseErrorOptions = {\n        cause: {\n          code: 'datetimeOutOfRange',\n          parameterMap: {\n            value: range.displayValue,\n            minValue: range.displayLow,\n            maxValue: range.displayHigh,\n            propertyName: range.name\n          }\n        }\n      };\n      const rangeError = new (RangeError as any)(msg, errorInfo);\n      throw rangeError;\n    }\n  }\n\n  // Throw an exception if date-time pattern is invalid\n  private static _throwInvalidDateFormat(\n    format: string,\n    options: NativeDateTimeOptions | NativeDateTimeResolvedOptions,\n    m: string\n  ) {\n    const isDate =\n      options.year !== undefined ||\n      options.month !== undefined ||\n      options.weekday !== undefined ||\n      options.day !== undefined;\n    const isTime =\n      options.hour !== undefined || options.minute !== undefined || options.second !== undefined;\n\n    let samplePattern = '';\n    if (isDate && isTime) {\n      samplePattern = 'MM/dd/yy hh:mm:ss a';\n    } else if (isDate) {\n      samplePattern = 'MM/dd/yy';\n    } else {\n      samplePattern = 'hh:mm:ss a';\n    }\n\n    const msg =\n      'Unexpected character(s) ' +\n      m +\n      ' encountered in the pattern \"' +\n      format +\n      ' An example of a valid pattern is \"' +\n      samplePattern +\n      '\".';\n    const errorInfo: FormatParseErrorOptions = {\n      cause: {\n        code: 'optionValueInvalid',\n        parameterMap: {\n          propertyName: 'pattern',\n          propertyValue: format\n        }\n      }\n    };\n    const error = new (SyntaxError as any)(msg, errorInfo);\n    throw error;\n  }\n  // parse functions\n  private static _throwWeekdayMismatch(weekday: string, day: number) {\n    const msg = 'The weekday ' + weekday + ' does not match the date ' + day;\n    const errorInfo: FormatParseErrorOptions = {\n      cause: {\n        code: 'dateToWeekdayMismatch',\n        parameterMap: {\n          weekday: weekday,\n          date: day\n        }\n      }\n    };\n    const error = new FormatParseError(msg, errorInfo);\n    throw error;\n  }\n\n  private static _throwDateFormatMismatch(value: string, format: string, style: number) {\n    let msg = '';\n    let errorCodeType = '';\n\n    if (style === 2) {\n      msg =\n        'The value \"' + value + '\" does not match the expected date-time format \"' + format + '\"';\n      errorCodeType = 'datetimeFormatMismatch';\n    } else if (style === 0) {\n      msg = 'The value \"' + value + '\" does not match the expected date format \"' + format + '\"';\n      errorCodeType = 'dateFormatMismatch';\n    } else {\n      msg = 'The value \"' + value + '\" does not match the expected time format \"' + format + '\"';\n      errorCodeType = 'timeFormatMismatch';\n    }\n\n    const errorInfo: FormatParseErrorOptions = {\n      cause: {\n        code: errorCodeType,\n        parameterMap: {\n          value: value,\n          format: format\n        }\n      }\n    };\n    const error = new FormatParseError(msg, errorInfo);\n    throw error;\n  }\n\n  private static _parseTimezoneOffset(_offset: string): Array<number> {\n    const parts: Array<string> = _offset.split(':');\n    const offsetParts = new Array<number>(2);\n\n    // offset is +hh:mm\n    if (parts.length === 2) {\n      offsetParts[0] = parseInt(parts[0], 10);\n      offsetParts[1] = parseInt(parts[1], 10);\n    } else if (_offset.length === 2 || _offset.length === 3) {\n      // offset is +hh or +h\n      offsetParts[0] = parseInt(_offset, 10);\n      offsetParts[1] = 0;\n    } else {\n      // offset is +hhmm\n      offsetParts[0] = parseInt(_offset.substr(0, 3), 10);\n      offsetParts[1] = parseInt(_offset.substr(3), 10);\n    }\n    return offsetParts;\n  }\n\n  private static _expandYear(start2DigitYear: number, year: number): number {\n    // expands 2-digit year into 4 digits.\n    year = Number(year);\n    if (year < 100) {\n      const ambiguousTwoDigitYear = start2DigitYear % 100;\n      // eslint-disable-next-line no-param-reassign\n      year += Math.floor(start2DigitYear / 100) * 100 + (year < ambiguousTwoDigitYear ? 100 : 0);\n    }\n    return year;\n  }\n\n  private static _arrayIndexOfMonthOrDay(\n    monthsDaysData: any,\n    userInput: string,\n    type: 'months' | 'days'\n  ): number {\n    const trimUserInput = NativeParserImpl.toUpperTrimmedNoPeriod(userInput);\n    const keys = Object.keys(monthsDaysData);\n    for (let i = 0; i < keys.length; i++) {\n      const valueFromData = monthsDaysData[keys[i]];\n      const trimValueFromData = NativeParserImpl.toUpperTrimmedNoPeriod(valueFromData);\n      // first try an exact match.\n      if (trimUserInput === trimValueFromData) {\n        return i;\n      }\n\n      // Test if user input is a number. We don't use parseInt because we want\n      // to make sure trimUserInput is only number lie '5' and not '5abc'\n      if (type === 'months') {\n        const trimUserInputNumber = Number(trimUserInput);\n        // In some locales the month name is something like 1月. Remove the literal\n        // before compare in case the user enters only 1.\n        const numberPartFromData = parseInt(trimValueFromData);\n        if (Number.isInteger(numberPartFromData) && Number.isInteger(trimUserInputNumber)) {\n          if (numberPartFromData === trimUserInputNumber) {\n            return i;\n          }\n        }\n      }\n    }\n    return -1;\n  }\n\n  private static toUpperTrimmedNoPeriod(value: string) {\n    let trimItem = LocalOraI18nUtils.toUpper(value);\n    trimItem = LocalOraI18nUtils.trim(trimItem);\n    // In some locales the short month name ends with '.', remove it in case\n    // the user does not enter the dot at the end of the month name.\n    trimItem = trimItem.replace(/\\.$/, '');\n    return trimItem;\n  }\n\n  private static _getDayIndex(calNode: CalendarNodeType, value: string) {\n    let ret = 0;\n    let days = [];\n    const calDaysFmt = calNode.days.format;\n    const calDaysStdAlone = calNode.days['stand-alone'];\n    days = [\n      calDaysFmt.abbreviated,\n      calDaysFmt.wide,\n      calDaysStdAlone.abbreviated,\n      calDaysStdAlone.wide\n    ];\n    for (let m = 0; m < days.length; m++) {\n      ret = this._arrayIndexOfMonthOrDay(days[m], value, 'days');\n      if (ret !== -1) {\n        return ret;\n      }\n    }\n    return ret;\n  }\n\n  private static _getMonthIndex(calNode: CalendarNodeType, value: string) {\n    let ret = -1;\n    const calMonthsFmt = calNode.months.format;\n    const calMonthsStdAlone = calNode.months['stand-alone'];\n    const months = [\n      calMonthsFmt.wide,\n      calMonthsFmt.abbreviated,\n      calMonthsStdAlone.wide,\n      calMonthsStdAlone.abbreviated\n    ];\n    for (let m = 0; m < months.length; m++) {\n      ret = this._arrayIndexOfMonthOrDay(months[m], value, 'months');\n      if (ret !== -1) {\n        return ret;\n      }\n    }\n    return ret;\n  }\n\n  // converts a format string into a regular expression with groups that\n  // can be used to extract date fields from a date string.\n  // check for a cached parse regex.\n  private static _getParseRegExp(format: string, options: NativeDateTimeResolvedOptions): any {\n    //let re = {};\n    // expand single digit formats, then escape regular expression\n    //  characters.\n    const expFormat = format.replace(NativeDateTimeConstants._ESCAPE_REGEXP, '\\\\\\\\$1');\n    const regexp = ['^'];\n    const groups = [];\n    let index = 0;\n    let quoteCount = 0;\n    // iterate through each date token found.\n    let match = NativeDateTimeConstants._TOKEN_REGEXP.exec(expFormat);\n    while (match !== null) {\n      const preMatch = expFormat.slice(index, match.index);\n      index = NativeDateTimeConstants._TOKEN_REGEXP.lastIndex;\n\n      // don't replace any matches that occur inside a string literal.\n      quoteCount += this._appendPreOrPostMatch(preMatch, regexp);\n      if (quoteCount % 2) {\n        regexp.push(match[0]);\n      } else {\n        // add a regex group for the token.\n        const m = match[0];\n        let add = '';\n        if ((NativeDateTimeConstants._PROPERTIES_MAP as any)[m] !== undefined) {\n          add = (NativeDateTimeConstants._PROPERTIES_MAP as any)[m].regExp;\n        } else {\n          this._throwInvalidDateFormat(format, options, m);\n        }\n        if (add) {\n          regexp.push(add);\n        }\n        groups.push(match[0]);\n      }\n      match = NativeDateTimeConstants._TOKEN_REGEXP.exec(expFormat);\n    }\n    this._appendPreOrPostMatch(expFormat.slice(index), regexp);\n    regexp.push('$');\n\n    // allow whitespace to differ when matching formats.\n    const regexpStr = regexp.join('').replace(/\\s+/g, '\\\\s+');\n    const parseRegExp = {\n      regExp: regexpStr,\n      groups: groups\n    };\n    // cache the regex for this format.\n    //re[format] = parseRegExp;\n    return parseRegExp;\n  }\n\n  private static _getTokenIndex(arr: Array<any>, token: string): number {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i][token] !== undefined) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  // time lenient parse\n  private static _parseLenienthms(\n    result: Date,\n    timepart: string,\n    format: string,\n    dtype: number,\n    calNode: CalendarNodeType\n  ) {\n    // hour, optional minutes and optional seconds\n    (NativeDateTimeConstants._TIME_REGEXP as any).lastIndex = 0;\n    let hour = 0;\n    let minute = 0;\n    let second = 0;\n    let msec = 0;\n    let idx;\n    let match: any = NativeDateTimeConstants._TIME_REGEXP.exec(timepart);\n    let range: RangeType;\n    if (match === null) {\n      this._throwDateFormatMismatch(timepart, format, dtype);\n    }\n    if (match[1] !== undefined) {\n      hour = parseInt(match[1], 10);\n    }\n    if (match[2] !== undefined) {\n      minute = parseInt(match[2], 10);\n    }\n    if (match[3] !== undefined) {\n      second = parseInt(match[3], 10);\n    }\n    if (match[4] !== undefined) {\n      msec = parseInt(match[4], 10);\n    }\n\n    (NativeDateTimeConstants._TIME_FORMAT_REGEXP as any).lastIndex = 0;\n    match = NativeDateTimeConstants._TIME_FORMAT_REGEXP.exec(format);\n    switch (match[0]) {\n      case 'h':\n        // Hour in am/pm (1-12)\n        if (hour === 12) {\n          hour = 0;\n        }\n        range = {\n          name: 'hour',\n          value: hour,\n          low: 0,\n          high: 11,\n          displayValue: hour,\n          displayLow: 1,\n          displayHigh: 12\n        };\n        this._validateRange(range);\n        idx = this._matchPMSymbol(calNode, timepart);\n        if (idx && hour < 12) {\n          hour += 12;\n        }\n        break;\n      case 'K':\n        // Hour in am/pm (0-11)\n        range = {\n          name: 'hour',\n          value: hour,\n          low: 0,\n          high: 11,\n          displayValue: hour,\n          displayLow: 0,\n          displayHigh: 11\n        };\n        this._validateRange(range);\n        idx = this._matchPMSymbol(calNode, timepart);\n        if (idx && hour < 12) {\n          hour += 12;\n        }\n        break;\n      case 'H':\n        range = {\n          name: 'hour',\n          value: hour,\n          low: 0,\n          high: 23,\n          displayValue: hour,\n          displayLow: 0,\n          displayHigh: 23\n        };\n        this._validateRange(range);\n        break;\n      case 'k':\n        if (hour === 24) {\n          hour = 0;\n        }\n        range = {\n          name: 'hour',\n          value: hour,\n          low: 0,\n          high: 23,\n          displayValue: hour,\n          displayLow: 1,\n          displayHigh: 24\n        };\n        break;\n      default:\n        break;\n    }\n    // Minutes.\n    range = {\n      name: 'minute',\n      value: minute,\n      low: 0,\n      high: 59,\n      displayValue: minute,\n      displayLow: 0,\n      displayHigh: 59\n    };\n    this._validateRange(range);\n    // Seconds.\n    range = {\n      name: 'second',\n      value: second,\n      low: 0,\n      high: 59,\n      displayValue: second,\n      displayLow: 0,\n      displayHigh: 59\n    };\n    this._validateRange(range);\n    // millisec\n    range = {\n      name: 'farctionalSecond',\n      value: msec,\n      low: 0,\n      high: 999,\n      displayValue: msec,\n      displayLow: 0,\n      displayHigh: 999\n    };\n    this._validateRange(range);\n    result.setHours(hour, minute, second, msec);\n  }\n\n  private static _getWeekdayName(value: string, calNode: CalendarNodeType): string | null {\n    const calDaysFmt = calNode.days.format;\n    const calDaysStandAlone = calNode.days['stand-alone'];\n    const days = [\n      calDaysFmt.wide,\n      calDaysFmt.abbreviated,\n      calDaysStandAlone.wide,\n      calDaysStandAlone.abbreviated\n    ];\n\n    for (let i = 0; i < days.length; i++) {\n      const dayKeys = Object.keys(days[i]);\n      for (let j = 0; j < dayKeys.length; j++) {\n        const dName = (days as any)[i][dayKeys[j]];\n        const dRegExp = new RegExp(dName + '\\\\b', 'i');\n        if (dRegExp.test(value)) {\n          return dName;\n        }\n      }\n    }\n    return null;\n  }\n\n  // lenient parse yMd and yMEd patterm. Must have year, moth,\n  // date all numbers. Ex: 5/3/2013\n  // weekday is optional. If present it must match date.\n  // Ex:  Tuesday 11/19/2013\n  // if year is 3-digits it can be anywhere in the string.\n  // Otherwise assume its position based on pattern\n  // if date > 12 it can be anywhere in the string.\n  // Otherwise assume its position based on pattern\n  // separators can be any non digit characters\n  private static _parseLenientyMEd(\n    value: string,\n    format: string,\n    options: NativeDateTimeResolvedOptions,\n    cal: any,\n    isDateTime: boolean\n  ): ParsedObjectType {\n    (NativeDateTimeConstants._YMD_REGEXP as any).lastIndex = 0;\n    const match: any = NativeDateTimeConstants._YMD_REGEXP.exec(value);\n    let dtype = 0;\n    if (match === null) {\n      dtype = isDateTime ? 2 : 0;\n      this._throwDateFormatMismatch(value, format, dtype);\n    }\n    const tokenIndexes = [\n      {\n        y: format.indexOf('y')\n      },\n      {\n        M: format.indexOf('M')\n      },\n      {\n        d: format.indexOf('d')\n      }\n    ];\n    tokenIndexes.sort(function (a, b) {\n      const n1 = Object.keys(a)[0];\n      const n2 = Object.keys(b)[0];\n      return (a as any)[n1] - (b as any)[n2];\n    });\n    let year = 0;\n    let month = 0;\n    let day = 0;\n    let yearIndex = 0;\n    let foundDayIndex = 0;\n    let i = 0;\n    const dayIndex = this._getTokenIndex(tokenIndexes, 'd');\n    let foundYear = false;\n    let foundDay = false;\n\n    for (i = 1; i <= 3; i++) {\n      const tokenMatch: string = match[i];\n      // find year if year is yyy|yyyy\n      const intToken = parseInt(tokenMatch);\n      if (tokenMatch.length > 2 || intToken > 31) {\n        year = intToken;\n        foundYear = true;\n        yearIndex = i - 1;\n      }\n    }\n    if (!foundYear) {\n      yearIndex = this._getTokenIndex(tokenIndexes, 'y');\n      year = match[this._getTokenIndex(tokenIndexes, 'y') + 1];\n    }\n    // find day if day value > 12\n    for (i = 0; i < 3; i++) {\n      if (i !== yearIndex && match[i + 1] > 12) {\n        day = match[i + 1];\n        foundDay = true;\n        foundDayIndex = i;\n        break;\n      }\n    }\n    if (!foundDay) {\n      if (yearIndex === this._getTokenIndex(tokenIndexes, 'd')) {\n        day = match[this._getTokenIndex(tokenIndexes, 'y') + 1];\n        month = match[this._getTokenIndex(tokenIndexes, 'M') + 1];\n      } else if (yearIndex === this._getTokenIndex(tokenIndexes, 'M')) {\n        day = match[this._getTokenIndex(tokenIndexes, 'd') + 1];\n        month = match[this._getTokenIndex(tokenIndexes, 'y') + 1];\n      } else {\n        day = match[this._getTokenIndex(tokenIndexes, 'd') + 1];\n        month = match[this._getTokenIndex(tokenIndexes, 'M') + 1];\n      }\n    } else {\n      for (i = 0; i < 3; i++) {\n        if (i !== foundDayIndex && i !== yearIndex) {\n          month = match[i + 1];\n          break;\n        }\n      }\n      if (month === undefined) {\n        month = match[this._getTokenIndex(tokenIndexes, 'M') + 1];\n      }\n    }\n    month -= 1;\n    const daysInMonth = LocalOraI18nUtils.getDaysInMonth(year, month);\n    let range: RangeType;\n    // if both month and day > 12 and swapped, throw exception\n    // based on original order\n    if (foundDay && dayIndex !== foundDayIndex && month > 12) {\n      range = {\n        name: 'month',\n        value: day,\n        low: 0,\n        high: 11,\n        displayValue: day,\n        displayLow: 1,\n        displayHigh: 12\n      };\n      this._validateRange(range);\n    }\n    range = {\n      name: 'month',\n      value: month,\n      low: 0,\n      high: 11,\n      displayValue: month + 1,\n      displayLow: 1,\n      displayHigh: 12\n    };\n    this._validateRange(range);\n    range = {\n      name: 'day',\n      value: day,\n      low: 1,\n      high: daysInMonth,\n      displayValue: day,\n      displayLow: 1,\n      displayHigh: daysInMonth\n    };\n    this._validateRange(range);\n    const start2DigitYear = options.twoDigitYearStart || 1950;\n    year = this._expandYear(start2DigitYear, year);\n    range = {\n      name: 'year',\n      value: year,\n      low: 0,\n      high: 9999,\n      displayValue: year,\n      displayLow: 0,\n      displayHigh: 9999\n    };\n    this._validateRange(range);\n    const parsedDate = new Date(year, month, day);\n    // locate weekday\n    const dName = this._getWeekdayName(value, cal);\n    if (dName !== null) {\n      const weekDay = this._getDayIndex(cal, dName);\n      // day of week does not match date\n      if (parsedDate.getDay() !== weekDay) {\n        this._throwWeekdayMismatch(dName, parsedDate.getDate());\n      }\n    }\n    if (isDateTime) {\n      const timepart = value.substr(NativeDateTimeConstants._YMD_REGEXP.lastIndex);\n      if (timepart.length === 0) {\n        parsedDate.setHours(0, 0, 0, 0);\n      } else {\n        this._parseLenienthms(parsedDate, timepart, format, 2, cal);\n      }\n    }\n    const result: ParsedObjectType = {\n      value: LocalOraI18nUtils.dateToLocalIso(parsedDate),\n      warning: 'lenient parsing was used'\n    };\n    return result;\n  }\n\n  // lenient parse yMMMd and yMMMEd patterns. Must have year, date as numbers\n  // and month name.\n  // weekday is optional. If present it must match date.\n  // Ex:  Monday Nov, 11 2013\n  // weekday and month name can be anywhere in the string.\n  // if year > 2-digits it can be anywhere in the string.\n  // Otherwise assume its position based on pattern\n  // separators can be any non digit characters\n  private static _parseLenientyMMMEd(\n    value: string,\n    format: string,\n    options: NativeDateTimeResolvedOptions,\n    cal: any,\n    isDateTime: boolean\n  ): ParsedObjectType {\n    const origValue = value;\n    // eslint-disable-next-line no-param-reassign\n    value = LocalOraI18nUtils.toUpper(value);\n    // locate month name\n    const calMonthsFmt = cal.months.format;\n    const calMonthsStandAlone = cal.months['stand-alone'];\n    const months = [\n      calMonthsFmt.wide,\n      calMonthsFmt.abbreviated,\n      calMonthsStandAlone.wide,\n      calMonthsStandAlone.abbreviated\n    ];\n    let foundMatch = false;\n    let reverseMonth = [];\n    let i = 0;\n    let mName = '';\n    for (i = 0; i < months.length; i++) {\n      reverseMonth = [];\n      const monthKeys = Object.keys(months[i]);\n      let j = 0;\n      for (j = 0; j < monthKeys.length; j++) {\n        mName = LocalOraI18nUtils.toUpper(months[i][monthKeys[j]]);\n        reverseMonth.unshift({\n          idx: j,\n          name: mName\n        });\n      }\n\n      reverseMonth.sort(function (a, b) {\n        return b.idx - a.idx;\n      });\n\n      for (j = 0; j < reverseMonth.length; j++) {\n        mName = reverseMonth[j].name;\n        if (value.indexOf(mName) !== -1) {\n          foundMatch = true;\n          // eslint-disable-next-line no-param-reassign\n          value = value.replace(mName, '');\n          break;\n        }\n      }\n      if (foundMatch) {\n        break;\n      }\n    }\n    // There is no month name. Try yMEd lenient parse.\n    if (!foundMatch) {\n      return this._parseLenientyMEd(origValue, format, options, cal, isDateTime);\n    }\n\n    const month = this._getMonthIndex(cal, mName);\n    let range: RangeType = {\n      name: 'month',\n      value: month,\n      low: 0,\n      high: 11,\n      displayValue: month,\n      displayLow: 1,\n      displayHigh: 12\n    };\n    this._validateRange(range);\n\n    // locate weekday\n    const dName = this._getWeekdayName(origValue, cal);\n    const dRegExp = new RegExp(dName + '\\\\W', 'i');\n    if (dName !== null) {\n      // eslint-disable-next-line no-param-reassign\n      value = value.replace(dRegExp, '');\n    }\n    // find year and date\n    (NativeDateTimeConstants._YEAR_AND_DATE_REGEXP as any).lastIndex = 0;\n    const match: any = NativeDateTimeConstants._YEAR_AND_DATE_REGEXP.exec(value);\n    if (match === null) {\n      const dtype = isDateTime ? 2 : 0;\n      this._throwDateFormatMismatch(origValue, format, dtype);\n    }\n    const tokenIndexes = [\n      {\n        y: format.indexOf('y')\n      },\n      {\n        d: format.indexOf('d')\n      }\n    ];\n\n    tokenIndexes.sort(function (a, b) {\n      const n1 = Object.keys(a)[0];\n      const n2 = Object.keys(b)[0];\n      return (a as any)[n1] - (b as any)[n2];\n    });\n\n    let year = 0;\n    let day = 0;\n    let yearIndex = 0;\n    let foundYear = false;\n    for (i = 1; i <= 2; i++) {\n      const tokenMatch = match[i];\n      // find year if year is yyy|yyyy\n      const intToken = parseInt(tokenMatch);\n      if (tokenMatch.length > 2 || intToken > 31) {\n        year = intToken;\n        foundYear = true;\n        yearIndex = i - 1;\n      }\n    }\n    if (!foundYear) {\n      yearIndex = this._getTokenIndex(tokenIndexes, 'y');\n      year = parseInt(match[this._getTokenIndex(tokenIndexes, 'y') + 1], 10);\n    }\n    if (yearIndex === this._getTokenIndex(tokenIndexes, 'd')) {\n      day = parseInt(match[this._getTokenIndex(tokenIndexes, 'y') + 1], 10);\n    } else {\n      day = parseInt(match[this._getTokenIndex(tokenIndexes, 'd') + 1], 10);\n    }\n\n    const start2DigitYear = options.twoDigitYearStart || 1950;\n    year = this._expandYear(start2DigitYear, year);\n    range = {\n      name: 'year',\n      value: year,\n      low: 0,\n      high: 9999,\n      displayValue: year,\n      displayLow: 0,\n      displayHigh: 9999\n    };\n    this._validateRange(range);\n    const parsedDate = new Date(year, month, day);\n    if (dName !== null) {\n      const weekDay = this._getDayIndex(cal, dName);\n      // day of week does not match date\n      if (parsedDate.getDay() !== weekDay) {\n        this._throwWeekdayMismatch(dName, parsedDate.getDate());\n      }\n    }\n    const daysInMonth = LocalOraI18nUtils.getDaysInMonth(year, month);\n    range = {\n      name: 'day',\n      value: day,\n      low: 1,\n      high: daysInMonth,\n      displayValue: day,\n      displayLow: 1,\n      displayHigh: daysInMonth\n    };\n    this._validateRange(range);\n\n    if (isDateTime) {\n      const timepart = value.substr(NativeDateTimeConstants._YEAR_AND_DATE_REGEXP.lastIndex);\n      if (timepart.length === 0) {\n        parsedDate.setHours(0, 0, 0, 0);\n      } else {\n        this._parseLenienthms(parsedDate, timepart, format, 2, cal);\n      }\n    }\n    const result: ParsedObjectType = {\n      value: LocalOraI18nUtils.dateToLocalIso(parsedDate),\n      warning: 'lenient parsing was used'\n    };\n    return result;\n  }\n\n  private static _parseLenient(\n    value: string,\n    format: string,\n    options: NativeDateTimeResolvedOptions,\n    cal: CalendarNodeType\n  ): ParsedObjectType {\n    const dtStyle = this._dateTimeStyle(options);\n    let result: ParsedObjectType;\n    switch (dtStyle) {\n      case 0:\n        // date style\n        result = this._parseLenientyMMMEd(value, format, options, cal, false);\n        break;\n      case 1:\n        // time style\n        const d = new Date();\n        this._parseLenienthms(d, value, format, 1, cal);\n        const isoStr = LocalOraI18nUtils.dateToLocalIso(d);\n        result = { value: isoStr, warning: 'lenient parsing was used' };\n        break;\n      case 2:\n        // date-time style\n        result = this._parseLenientyMMMEd(value, format, options, cal, true);\n        break;\n      default:\n        result = { value: '', warning: 'lenient parsing was used' };\n        break;\n    }\n    // convert result to gregorian\n    const parts = LocalOraI18nUtils.IsoStrParts(result.value);\n    const gregParts = [parts[0], parts[1], parts[2]];\n    const isoParts = result.value.split('T');\n    result.value =\n      LocalOraI18nUtils.padZeros(gregParts[0], 4) +\n      '-' +\n      LocalOraI18nUtils.padZeros(gregParts[1], 2) +\n      '-' +\n      LocalOraI18nUtils.padZeros(gregParts[2], 2) +\n      'T' +\n      isoParts[1];\n    return result;\n  }\n\n  private static _getNameIndex(\n    calNode: CalendarNodeType,\n    datePart: string,\n    matchGroup: string,\n    mLength: any,\n    style: any,\n    // @ts-ignore\n    matchIndex: number,\n    start1: number,\n    end1: number,\n    start2: string,\n    end2: string,\n    name: string\n  ): number {\n    let index = 0;\n    const monthsFormat = (calNode as any)[datePart][style];\n    if (datePart === 'months') {\n      index = this._getMonthIndex(calNode, matchGroup);\n    } else {\n      index = this._getDayIndex(calNode, matchGroup);\n    }\n    const startName = monthsFormat[mLength][start2];\n    const endName = monthsFormat[mLength][end2];\n    const range = {\n      name: name,\n      value: index,\n      low: start1,\n      high: end1,\n      displayValue: parseInt(matchGroup),\n      displayLow: startName,\n      displayHigh: endName\n    };\n    this._validateRange(range);\n    return index;\n  }\n\n  private static _validateTimePart(\n    matchInt: number,\n    _timeObj: any,\n    objMap: any,\n    timeToken: string\n  ) {\n    const timeObj = _timeObj;\n    timeObj[objMap.timePart] = matchInt;\n    if (timeToken === 'h' || timeToken === 'hh') {\n      if (matchInt === 12) {\n        timeObj[objMap.timePart] = 0;\n      }\n    } else if (timeToken === 'k' || timeToken === 'kk') {\n      timeObj.htoken = timeToken;\n      if (matchInt === 24) {\n        timeObj[objMap.timePart] = 0;\n      }\n    } else if (timeToken === 'K' || timeToken === 'KK') {\n      if (matchInt === 12) {\n        timeObj[objMap.timePart] = 0;\n      }\n    }\n    const range: RangeType = {\n      name: objMap.timePart,\n      value: timeObj[objMap.timePart],\n      low: objMap.start1,\n      high: objMap.end1,\n      displayValue: matchInt,\n      displayLow: objMap.start2,\n      displayHigh: objMap.end2\n    };\n    this._validateRange(range);\n  }\n\n  // test if the pattern/options is date, time or date-time\n  // 0: date, 1:time, 2:date-time\n  private static _dateTimeStyle(resOptions: NativeDateTimeResolvedOptions): number {\n    const isTime =\n      resOptions.hour !== undefined ||\n      resOptions.minute !== undefined ||\n      resOptions.second !== undefined ||\n      resOptions.fractionalSecondDigits !== undefined;\n    const isDate =\n      resOptions.year !== undefined ||\n      resOptions.month !== undefined ||\n      resOptions.day !== undefined ||\n      resOptions.weekday !== undefined;\n    if (isDate && isTime) {\n      return 2;\n    } else if (isTime) {\n      return 1;\n    } else if (isDate) {\n      return 0;\n    }\n    // try predefined style\n    if (resOptions.dateStyle !== undefined && resOptions.timeStyle !== undefined) {\n      return 2;\n    }\n    if (resOptions.timeStyle !== undefined) {\n      return 1;\n    }\n    return 0;\n  }\n\n  // for zh-TW locales the pm symbol can vary depending on the time. We need\n  // to iterate through the pm symbols in order to find a match.\n  private static _matchPMSymbol(cal: CalendarNodeType, matchGroup: string) {\n    const loc = cal.locale;\n    let isPM = false;\n    let i = 0;\n    if (NativeDateTimeConstants._zh_tw_locales.includes(loc)) {\n      const pmSymbols = NativeDateTimeConstants._zh_tw_pm_symbols;\n      for (i = 0; i < pmSymbols.length; i++) {\n        const pmSymbol = pmSymbols[i];\n        if (matchGroup.indexOf(pmSymbol) !== -1) {\n          return true;\n        }\n      }\n    } else {\n      const calPM = cal.dayPeriods.format.wide.pm;\n      isPM = LocalOraI18nUtils.toUpper(matchGroup).indexOf(LocalOraI18nUtils.toUpper(calPM)) !== -1;\n    }\n    return isPM;\n  }\n\n  // exact match parsing for date-time. If it fails, try lenient parse.\n  private static _parseExact(\n    value: string,\n    format: string,\n    resOptions: NativeDateTimeResolvedOptions,\n    cal: CalendarNodeType\n  ): any {\n    // remove spaces from era.\n    const eraPart = cal.eras.eraAbbr['1'];\n    const trimEraPart = LocalOraI18nUtils.trimNumber(eraPart);\n    // eslint-disable-next-line no-param-reassign\n    value = value.replace(eraPart, trimEraPart);\n    const getOption = LocalOraI18nUtils.getGetOption(resOptions, 'NativeDateTimeConverter.parse');\n    const lenientParse = getOption('lenientParse', 'string', ['none', 'full'], 'full');\n    const dtStyle = this._dateTimeStyle(resOptions);\n\n    // convert date formats into regular expressions with groupings.\n    // use the regexp to determine the input format and extract the date\n    //  fields.\n    const parseInfo = this._getParseRegExp(format, resOptions);\n    const match: any = new RegExp(parseInfo.regExp).exec(value);\n    if (match === null) {\n      if (lenientParse === 'full') {\n        return this._parseLenient(value, format, resOptions, cal);\n      }\n      this._throwDateFormatMismatch(value, format, dtStyle);\n    }\n    // found a date format that matches the input.\n    const groups = parseInfo.groups;\n    let year = null;\n    let month: any = null;\n    let date = null;\n    let weekDay = null;\n    let hourOffset = '';\n    let tzID = null;\n    let pmHour = undefined;\n    let weekDayName = '';\n    let range: RangeType;\n    const timeObj = {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisec: 0,\n      htoken: ''\n    };\n    const start2DigitYear = resOptions.twoDigitYearStart || 1950;\n    // iterate the format groups to extract and set the date fields.\n    for (let j = 0, jl = groups.length; j < jl; j++) {\n      const matchGroup = match[j + 1];\n      if (matchGroup) {\n        const current = groups[j];\n        const matchInt = parseInt(matchGroup, 10);\n        const currentGroup = (NativeDateTimeConstants._PROPERTIES_MAP as any)[current];\n\n        switch (currentGroup.token) {\n          case 'months':\n            month = this._getNameIndex(\n              cal,\n              currentGroup.token,\n              matchGroup,\n              currentGroup.mLen,\n              currentGroup.style,\n              currentGroup.matchIndex,\n              0,\n              11,\n              '1',\n              '12',\n              'month name'\n            );\n            break;\n          case 'days':\n            weekDayName = matchGroup;\n            weekDay = this._getNameIndex(\n              cal,\n              currentGroup.token,\n              matchGroup,\n              currentGroup.dLen,\n              currentGroup.style,\n              currentGroup.matchIndex,\n              0,\n              6,\n              'sun',\n              'sat',\n              'weekday'\n            );\n            break;\n          case 'time':\n            this._validateTimePart(matchInt, timeObj, currentGroup, current);\n            break;\n          case 'dayOfMonth':\n            date = matchInt;\n            break;\n          case 'monthIndex':\n            // Month.\n            month = matchInt - 1;\n            // try lenient parse for date style only\n            if (month > 11 && lenientParse === 'full') {\n              try {\n                return this._parseLenient(value, format, resOptions, cal);\n              } catch (e) {\n                range = {\n                  name: 'month',\n                  value: month,\n                  low: 0,\n                  high: 11,\n                  displayValue: month + 1,\n                  displayLow: 1,\n                  displayHigh: 12\n                };\n                this._validateRange(range);\n              }\n            }\n            break;\n          case 'year':\n            year = this._expandYear(start2DigitYear, matchInt);\n            break;\n          case 'ampm':\n            pmHour = this._matchPMSymbol(cal, matchGroup);\n            break;\n          case 'tzhm':\n            // Time zone hours minutes: -0800\n            hourOffset = matchGroup.substr(-2);\n            hourOffset = matchGroup.substr(0, 3) + ':' + hourOffset;\n            break;\n          case 'tzhsepm':\n            // Time zone hours minutes: -08:00\n            hourOffset = matchGroup;\n            break;\n          case 'tzh':\n            // Time zone hours minutes: -08\n            hourOffset = matchGroup + ':00';\n            break;\n          case 'tzid':\n            // Time zone ID: America/Los_Angeles\n            tzID = matchGroup;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    const parsedDate = new Date();\n    if (year === null) {\n      year = parsedDate.getFullYear();\n    }\n    // if day and month are unspecified,the defaults are current\n    // day and month.\n    if (month === null && date === null) {\n      month = parsedDate.getMonth();\n      date = parsedDate.getDate();\n    } else if (date === null) {\n      // if day is unspecified, default 1st day of month.\n      date = 1;\n    }\n    parsedDate.setFullYear(year, month, date);\n    // validate month days\n    const MonthDays = LocalOraI18nUtils.getDaysInMonth(year, month);\n    range = {\n      name: 'day',\n      value: date,\n      low: 1,\n      high: MonthDays,\n      displayValue: date,\n      displayLow: 1,\n      displayHigh: MonthDays\n    };\n    this._validateRange(range);\n    // if pm designator token was found make sure the hours fit the\n    // 24-hour clock.\n    if (pmHour == true && timeObj.hour < 12) {\n      timeObj.hour += 12;\n    }\n    // when hour is 12 AM and hour cycle is h24, set hour to 00\n    if (\n      pmHour == false &&\n      timeObj.hour == 12 &&\n      (timeObj.htoken == 'k' || timeObj.htoken == 'kk')\n    ) {\n      timeObj.hour = 0;\n    }\n\n    const parts = [year, month + 1, date];\n    parts[3] = timeObj.hour;\n    parts[4] = timeObj.minute;\n    parts[5] = timeObj.second;\n    parts[6] = timeObj.millisec;\n    let isoParsedDate = LocalOraI18nUtils.partsToIsoString(parts);\n    if (tzID !== null) {\n      const zoneOffset = this._getTimeZoneOffset(parts, tzID);\n      hourOffset = LocalOraI18nUtils.getTimeStringFromOffset('', zoneOffset, false, true);\n    }\n    if (hourOffset !== '') {\n      isoParsedDate += hourOffset;\n    }\n    // validate year\n    range = {\n      name: 'year',\n      value: year,\n      low: 0,\n      high: 9999,\n      displayValue: year,\n      displayLow: 0,\n      displayHigh: 9999\n    };\n    this._validateRange(range);\n    // validate month\n    range = {\n      name: 'month',\n      value: month,\n      low: 0,\n      high: 11,\n      displayValue: month + 1,\n      displayLow: 1,\n      displayHigh: 12\n    };\n    this._validateRange(range);\n    // validate day range, depending on the month and year\n    const daysInMonth = LocalOraI18nUtils.getDaysInMonth(parts[0], parts[1] - 1);\n    range = {\n      name: 'day',\n      value: parts[2],\n      low: 1,\n      high: daysInMonth,\n      displayValue: parts[2],\n      displayLow: 1,\n      displayHigh: daysInMonth\n    };\n    this._validateRange(range);\n    // day of week does not match date\n    if (weekDay !== null) {\n      const validateDay = LocalOraI18nUtils.isoToLocalDate(isoParsedDate);\n      if (validateDay && validateDay.getDay() !== weekDay) {\n        this._throwWeekdayMismatch(weekDayName, validateDay.getDate());\n      }\n    }\n    const result = { value: isoParsedDate };\n    return result;\n  }\n\n  // test if the isoStr is date, time or date-time\n  // 0: date, 1:time, 2:date-time\n  private static _isoStrDateTimeStyle(isoStr: string): number {\n    const timeIndex = isoStr.indexOf('T');\n    if (timeIndex === -1) {\n      return 0;\n    }\n    if (timeIndex > 0) {\n      return 2;\n    }\n    return 1;\n  }\n\n  /*\n   * Returns the offset of a time zone at a given moment-in-time.\n   *\n   * @param {Object} localeElements - locale data bundle, it also contain the\n   * timezone data.\n   * @param {string} tzName - The IANA time zone name for which we want to get the\n   * offset. If it is the same as the local system's time zone, return the local\n   * system's time zone offset by using Date.getTimezoneOffset() instead of\n   * going through time zone data.\n   * @param {array} parts - An array conataining year, month, day, hour, minute,\n   * second that are used to create The Date object representing the moment-in-time.\n   */\n  private static _getTimeZoneOffset(parts: any, tzName: any) {\n    // if The timeZone in the options is the same as local system's\n    // timezone, use Date.getTimezoneOffset\n    const localTtimeZone = this.getLocalSystemTimeZone();\n    if (localTtimeZone === tzName) {\n      const d = new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n      const localOffset = d.getTimezoneOffset();\n      return -localOffset;\n    }\n    const dateParts: DateDef = {\n      year: parts[0],\n      month: parts[1],\n      date: parts[2],\n      hours: parts[3],\n      minutes: parts[4]\n    };\n    const offset = getISODateOffset(dateParts, tzName);\n    return offset;\n  }\n\n  private static _getAdjustedOffset(timezone: any, isoStrInfo: any) {\n    const parts: Array<number> = isoStrInfo.isoStrParts;\n    return this._getTimeZoneOffset(parts, timezone);\n  }\n\n  private static _adjustHours(isoStrInfo: any, options: NativeDateTimeResolvedOptions) {\n    const value: Array<number> = isoStrInfo.isoStrParts;\n    const isoStrFormat = isoStrInfo.format;\n    let origOffset = 0;\n    switch (isoStrFormat) {\n      case NativeDateTimeConstants._OFFSET:\n        const tzParts = this._parseTimezoneOffset(isoStrInfo.timeZone);\n        const hoursOffset = tzParts[0];\n        const minOffset = tzParts[1];\n        origOffset = hoursOffset * 60 + (hoursOffset < 0 ? -minOffset : minOffset);\n        break;\n      case NativeDateTimeConstants._ZULU:\n        origOffset = 0;\n        break;\n      default:\n        break;\n    }\n    let newOffset = this._getAdjustedOffset(options.timeZone, isoStrInfo);\n    newOffset -= origOffset;\n    // target time zone might have switched to dst before orig timezone, or\n    // orig time zone might have switched to dst before target timezone.\n    // Need to get the correct offset at target time zone. This happens when\n    // we are very close to after target or orig time zones switched to dst.\n    const newDate = new Date(value[0], value[1] - 1, value[2], value[3], value[4], value[4]);\n    newDate.setHours(value[3] + ((newOffset / 60) << 0), newOffset % 60);\n    const newDateIso = LocalOraI18nUtils.dateToLocalIso(newDate);\n    const newDateIsoStrInfo = LocalOraI18nUtils.getISOStrFormatInfo(newDateIso);\n    newOffset = this._getAdjustedOffset(options.timeZone, newDateIsoStrInfo);\n    newOffset -= origOffset;\n    // Do the offset math through the Date object.\n    const adjustD = new Date(\n      Date.UTC(value[0], value[1] - 1, value[2], value[3], value[4], value[5])\n    );\n    const adjustedMin = adjustD.getUTCMinutes() + newOffset;\n    // eslint-disable-next-line no-bitwise\n    adjustD.setUTCHours(adjustD.getUTCHours() + ((adjustedMin / 60) << 0), adjustedMin % 60);\n    value[0] = adjustD.getUTCFullYear();\n    value[1] = adjustD.getUTCMonth() + 1;\n    value[2] = adjustD.getUTCDate();\n    value[3] = adjustD.getUTCHours();\n    value[4] = adjustD.getUTCMinutes();\n    value[5] = adjustD.getUTCSeconds();\n  }\n\n  // Returns a time-only, date-only or date-time ISO string based on dtStyle.\n  private static _createISOStrParts(dtStyle: number, d: Array<any>): string {\n    let ms: any = 0;\n    let val = '';\n    switch (dtStyle) {\n      // Date only\n      case 0:\n        val =\n          LocalOraI18nUtils.padZeros(d[0], 4) +\n          '-' +\n          LocalOraI18nUtils.padZeros(d[1], 2) +\n          '-' +\n          LocalOraI18nUtils.padZeros(d[2], 2);\n        break;\n      // Time only\n      case 1:\n        val =\n          'T' +\n          LocalOraI18nUtils.padZeros(d[3], 2) +\n          ':' +\n          LocalOraI18nUtils.padZeros(d[4], 2) +\n          ':' +\n          LocalOraI18nUtils.padZeros(d[5], 2);\n        ms = d[6];\n        if (ms > 0) {\n          val += '.' + LocalOraI18nUtils.trimRightZeros(ms);\n        }\n        break;\n      // Date-Time\n      default:\n        val =\n          LocalOraI18nUtils.padZeros(d[0], 4) +\n          '-' +\n          LocalOraI18nUtils.padZeros(d[1], 2) +\n          '-' +\n          LocalOraI18nUtils.padZeros(d[2], 2) +\n          'T' +\n          LocalOraI18nUtils.padZeros(d[3], 2) +\n          ':' +\n          LocalOraI18nUtils.padZeros(d[4], 2) +\n          ':' +\n          LocalOraI18nUtils.padZeros(d[5], 2);\n        ms = d[6];\n        if (ms > 0) {\n          val += '.' + LocalOraI18nUtils.trimRightZeros(ms);\n        }\n        break;\n    }\n    return val;\n  }\n\n  private static _getParseISOStringOffset(tzName: string, parts: Array<number>): string {\n    const offset = this._getTimeZoneOffset(parts, tzName);\n    return LocalOraI18nUtils.getTimeStringFromOffset('', offset, false, true);\n  }\n\n  private static _createParseISOStringFromDate(\n    dtStyle: number,\n    isoStrInfo: any,\n    options: NativeDateTimeResolvedOptions\n  ): string {\n    const getOption = LocalOraI18nUtils.getGetOption(options, 'NativeDateTimeConverter.parse');\n    const isoFormat = getOption(\n      'isoStrFormat',\n      'string',\n      [\n        NativeDateTimeConstants._ZULU,\n        NativeDateTimeConstants._OFFSET,\n        NativeDateTimeConstants._INVARIANT,\n        NativeDateTimeConstants._LOCAL,\n        NativeDateTimeConstants._AUTO\n      ],\n      NativeDateTimeConstants._AUTO\n    );\n    const parts = isoStrInfo.isoStrParts;\n    const tzName = options.timeZone;\n    let val = this._createISOStrParts(dtStyle, parts);\n    // do not include timezone if date-only\n    if (dtStyle === 0) {\n      return val;\n    }\n    switch (isoFormat) {\n      case NativeDateTimeConstants._OFFSET:\n      case NativeDateTimeConstants._AUTO:\n        val += this._getParseISOStringOffset(tzName, parts);\n        break;\n      case NativeDateTimeConstants._LOCAL:\n        // if iso string is date-time, consider LOCAL as OFFSET\n        if (dtStyle === 2) {\n          val += this._getParseISOStringOffset(tzName, parts);\n        }\n        break;\n      case NativeDateTimeConstants._ZULU:\n        let adjustedMin = 0;\n        adjustedMin = -this._getTimeZoneOffset(parts, tzName);\n        if (adjustedMin !== 0) {\n          // Do the offset math through date object.\n          const adjustD = new Date(\n            Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5], parts[6])\n          );\n          adjustedMin = adjustD.getUTCMinutes() + adjustedMin;\n          // eslint-disable-next-line no-bitwise\n          adjustD.setUTCHours(adjustD.getUTCHours() + ((adjustedMin / 60) << 0), adjustedMin % 60);\n          parts[0] = adjustD.getUTCFullYear();\n          parts[1] = adjustD.getUTCMonth() + 1;\n          parts[2] = adjustD.getUTCDate();\n          parts[3] = adjustD.getUTCHours();\n          parts[4] = adjustD.getUTCMinutes();\n          parts[5] = adjustD.getUTCSeconds();\n          val = this._createISOStrParts(dtStyle, parts);\n        }\n        val += 'Z';\n        break;\n      default:\n        break;\n    }\n    return val;\n  }\n\n  /*\n   * Returns the current date at the specified timeZone. If timeZone is\n   * null, return current date of the local system.\n   */\n  public static getTimeZoneCurrentDate(tzName: string | null): string {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      day: '2-digit',\n      month: '2-digit'\n    };\n    if (tzName) {\n      options.timeZone = tzName;\n    }\n    const cnv = Intl.DateTimeFormat('en-US', options);\n    const fmt = cnv.format(new Date()); // fmt looks something like 03/05/2020\n    const parts = fmt.split('/');\n    const result = parts[2] + '-' + parts[0] + '-' + parts[1];\n    return result;\n  }\n\n  /*\n   * Returns the current offset of the specified timeZone.\n   */\n  public static getTimeZoneCurrentOffset(timezone: string): number {\n    const d = new Date();\n    const isoStr = LocalOraI18nUtils.dateToLocalIso(d);\n    const isoStrInfo: any = LocalOraI18nUtils.getISOStrFormatInfo(isoStr);\n    return this._getAdjustedOffset(timezone, isoStrInfo);\n  }\n\n  /*\n   * Returns the local system's time zone.\n   */\n  public static getLocalSystemTimeZone(): string {\n    if (!localSystemTimeZone) {\n      const intlCnv = new Intl.DateTimeFormat('en-US');\n      localSystemTimeZone = intlCnv.resolvedOptions().timeZone;\n    }\n    return localSystemTimeZone;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { CalendarUtils } from './CalendarUtils';\nimport { DateDef } from './ISODateTimezoneOffset';\nimport { FormatParseError } from '../UNSAFE_IntlFormatParse';\nimport { getISODateOffset } from './ISODateTimezoneOffset';\nimport { Logger } from '../utils/UNSAFE_logger';\nimport { NativeDateTimeConstants } from './NativeDateTimeConstants';\nimport { NativeDateTimeOptions } from './NativeDateTimeOptions';\nimport { NativeParserImpl } from './NativeParserImpl';\nimport { NativeDateTimeResolvedOptions } from './NativeDateTimeOptions';\nimport * as LocalOraI18nUtils from './dateTimeUtils';\n\n/**\n * Create an Intl.DateTimeFormat from the options.\n */\nexport const getFormatter = (options: NativeDateTimeOptions) => {\n  return new Intl.DateTimeFormat(options.locale, options);\n};\n\n/**\n * Get the resolved options from the Intl.DateTimeFormat instance, plus any custom options used by our implementation.\n */\nexport const getResolvedOptions = (\n  formatter: Intl.DateTimeFormat,\n  options: NativeDateTimeOptions\n): NativeDateTimeResolvedOptions => {\n  const resOptions = formatter.resolvedOptions();\n  const isoStrFormat = options.isoStrFormat ?? 'auto';\n  const twoDigitYearStart = options.twoDigitYearStart ?? 1950;\n  const lenientParse = options.lenientParse ?? 'full';\n  const patternFromOptions = getPatternFromOptions(formatter, resOptions);\n  return { ...resOptions, isoStrFormat, twoDigitYearStart, lenientParse, patternFromOptions };\n};\n\n/**\n * Create an Intl.DateTimeFormat that can merge in the year in the desired format during the call to 'format'.\n * This is useful if you always want year: 'numeric' for dateStyle: 'short' even if\n * in some locales dateStyle: 'short' yields a 2-digit year. 2-digit years are ambiguous.\n */\nexport const getYearFormatter = (\n  options: NativeDateTimeOptions,\n  resOptions: NativeDateTimeResolvedOptions\n) => {\n  let formatter: Intl.DateTimeFormat | null = null;\n  // Set up the yearFormatter if dateStyle is short and the dateStyleShortYear option is defined.\n  // If we do not add numberingSystem/calendar, then Intl.DateTimeFormat defaults to the locale's\n  // numberingSystem, and that is not what JET uses.\n  if (options.dateStyle === 'short' && options.dateStyleShortYear) {\n    formatter = new Intl.DateTimeFormat(options.locale, {\n      year: options.dateStyleShortYear,\n      numberingSystem: resOptions.numberingSystem,\n      calendar: resOptions.calendar\n    });\n  }\n  return formatter;\n};\n\n/**\n * Merge in the year in the desired format rather than whatever the locale default is for dateStyle: 'short'.\n */\nexport const formatWithYearFormat = (\n  formatInstance: Intl.DateTimeFormat,\n  yearInstance: Intl.DateTimeFormat,\n  value: Date\n) => {\n  // first get the formatted numeric year\n  const yearParts = yearInstance.formatToParts(value);\n  const formattedYear = yearParts.find((part) => part.type === 'year')?.value;\n  // next get the formatToParts of the formatInstance and substitute in formattedYear.\n  const parts = formatInstance.formatToParts(value);\n  return parts.reduce((acc, part) => {\n    if (part.type === 'year') {\n      return acc + (formattedYear ?? part.value);\n    }\n    return acc + part.value;\n  }, '');\n};\n\n/**\n * Formats a date time string based on the given options.\n */\nexport const formatDateTimeWithOptions = (options: NativeDateTimeOptions, value: string) => {\n  const intlFormatter = getFormatter(options);\n  const resOptions = getResolvedOptions(intlFormatter, options);\n  const yearFormatter = getYearFormatter(options, resOptions);\n  return formatDateTime(intlFormatter, yearFormatter, resOptions.timeZone, value);\n};\n\n/**\n * Formats a date time string using Intl.DateTimeFormat.\n */\nexport const formatDateTime = (\n  intlFormatter: Intl.DateTimeFormat,\n  yearFormatter: Intl.DateTimeFormat | null,\n  timeZone: string,\n  value: string\n) => {\n  const isoStr = normalizeIsoString(timeZone, value);\n  const isoStrDate = new Date(isoStr);\n  return yearFormatter\n    ? formatWithYearFormat(intlFormatter, yearFormatter, isoStrDate)\n    : intlFormatter.format(isoStrDate);\n};\n\n/**\n * Parses a string into an iso string based on the given options.\n */\nexport const parseDateTimeWithOptions = (options: NativeDateTimeOptions, str: string) => {\n  const intlFormatter = getFormatter(options);\n  const resOptions = getResolvedOptions(intlFormatter, options);\n  return parseDateTime(options.locale, intlFormatter, resOptions, str);\n};\n\n/**\n * Parses the formatted string, and returns an iso string.\n * @returns an iso string\n * @throws Error if undefined, null, or '' or not an iso string, or if something went wrong in the call to parse.\n */\nexport const parseDateTime = (\n  locale: string,\n  formatter: Intl.DateTimeFormat,\n  resOptions: NativeDateTimeResolvedOptions,\n  str: string\n) => {\n  if (str === undefined || str === null || str === '') {\n    throw new FormatParseError('The parse value cannot be empty.', {\n      cause: { code: 'emptyParseValue' }\n    });\n  }\n  const cal = CalendarUtils.getCalendar(locale, resOptions.calendar);\n  const pattern = getPatternFromOptions(formatter, resOptions);\n  const result = NativeParserImpl.parseImpl(str, pattern, resOptions, cal);\n  const parsed = result.value;\n  if (parsed) {\n    if (result.warning) {\n      Logger.warn('The value ' + str + ' was leniently parsed to represent a date ' + parsed);\n    }\n  }\n  return parsed;\n};\n\n/**\n * Checks if it is a valid iso string.\n * Also fixes up the iso string if needed, i.e. if local and timezone are specified in the options.\n * @param timeZone\n * @param value\n * @returns\n * @throws Error if undefined, null, or '' or if it is an invalid iso string.\n */\nexport const normalizeIsoString = (timeZone: string, value: string) => {\n  if (value === undefined || value === null || value === '') {\n    throw new FormatParseError('The format value cannot be empty.', {\n      cause: { code: 'emptyFormatValue' }\n    });\n  }\n\n  if (value.startsWith('T')) {\n    // Intl Object takes Date object as parameter. new Date() throws an\n    // exception with time only ISO string. Prepend current date to time\n    // only iso string.\n    let curDate = '';\n    if (timeZone) {\n      // if options contain a timeZone, get the current date at this time zone\n      curDate = NativeParserImpl.getTimeZoneCurrentDate(timeZone);\n    } else {\n      // get the current date of the local system\n      curDate = LocalOraI18nUtils.dateToLocalIso(new Date()).split('T')[0];\n    }\n    value = curDate + value;\n  } else if (value.indexOf('T') === -1) {\n    value = value + 'T00:00:00';\n  }\n\n  // test if value is a valid ISO string\n  const exe = LocalOraI18nUtils._ISO_DATE_REGEXP.exec(value);\n  if (!exe) {\n    const e = new FormatParseError('The format value must be a valid iso string.', {\n      cause: { code: 'invalidISOString', parameterMap: { isoStr: value } }\n    });\n    throw e;\n  }\n  // If value is local ISO string and timeZone is specified in options, adjust\n  // offset to avoid time zone conversion from local system's timezone to target timezone\n  if (timeZone) {\n    // Also test if timeZone in the options is the same as local system time zone\n    let islocalTimeZone = false;\n    const localTimeZone = NativeParserImpl.getLocalSystemTimeZone();\n    if (localTimeZone === timeZone) {\n      islocalTimeZone = true;\n    }\n    const timePart = value.substring(value.indexOf('T'));\n    const isLocalValue =\n      timePart.indexOf('Z') === -1 && timePart.indexOf('+') === -1 && timePart.indexOf('-') === -1;\n    if (isLocalValue && !islocalTimeZone) {\n      const parts = LocalOraI18nUtils.IsoStrParts(value);\n      const dateParts: DateDef = {\n        year: parts[0],\n        month: parts[1],\n        date: parts[2],\n        hours: parts[3],\n        minutes: parts[4]\n      };\n      const offset = getISODateOffset(dateParts, timeZone);\n      value = value + LocalOraI18nUtils.getTimeStringFromOffset('', offset, false, true);\n    }\n  }\n  //if ISO string time zone offset is hh, replace it with hh:00 so that new Date() does not fail\n  value = value.replace(/(T.*?[+-]..$)/, '$1:00');\n  return value;\n};\n\nconst getPatternFromOptions = (\n  formatter: Intl.DateTimeFormat,\n  options: NativeDateTimeResolvedOptions\n) => {\n  const isoSTr = '2000-01-02T00:00:00';\n  const date = new Date(isoSTr);\n  let pattern = '';\n  let optVal = '';\n  let token: any = null;\n  let dtokenMap: any = null;\n  let ttokenMap: any = null;\n  let dateStyle = false;\n  let timeStyle = false;\n  if (options.dateStyle !== undefined) {\n    dtokenMap = NativeDateTimeConstants._dateTimeFormats.dateStyle;\n    dtokenMap = dtokenMap[options.dateStyle];\n    dateStyle = true;\n  }\n  if (options.timeStyle !== undefined) {\n    ttokenMap = NativeDateTimeConstants._dateTimeFormats.timeStyle;\n    ttokenMap = ttokenMap[options.timeStyle];\n    timeStyle = true;\n  }\n  const tokenMap = NativeDateTimeConstants._tokenMap;\n  // eslint-disable-next-line array-callback-return\n  formatter.formatToParts(date).map(({ type, value }) => {\n    // TODO: Intl.DateTimeFormatPartType type does not have 'fractionalSecond' even though it is in the api.\n    // so to workaround getting a typescript error, I'm setting as string here.\n    // Fix when the typescript for Intl.DateTimeFormat gets fixed.\n    switch (type as string) {\n      case 'literal':\n        token = value.replace(NativeDateTimeConstants._ALPHA_REGEXP, \"'$1'\");\n        break;\n      case 'dayPeriod':\n        token = 'a';\n        break;\n      case 'hour':\n        if (timeStyle) {\n          token = ttokenMap[type];\n        } else {\n          optVal = (options as any)[type];\n          token = (tokenMap as any)[type][optVal];\n        }\n        let ish12 = options.hour12;\n        if (ish12 === undefined) {\n          ish12 = false;\n        }\n        // take hourCycle into consideration\n        if (options.hourCycle) {\n          token = token.replace(\n            NativeDateTimeConstants._HOUR12_REGEXP,\n            NativeDateTimeConstants._hourCycleMap[options.hourCycle]\n          );\n        }\n        // h12 takes precedence over hourCycle\n        if (ish12 === true) {\n          token = token.replace(NativeDateTimeConstants._HOUR12_REGEXP, 'h');\n        }\n        break;\n      case 'month':\n        // some locales have month as numeric for medium style and some have month\n        // as medium style check the value to get accurate pattern\n        if (dateStyle) {\n          if (isNaN(+value)) {\n            token = dtokenMap.month_m;\n          } else {\n            token = dtokenMap.month_s;\n          }\n        } else {\n          optVal = (options as any)[type];\n          token = (tokenMap as any)[type][optVal];\n        }\n        break;\n      case 'year':\n      case 'day':\n      case 'weekday':\n        if (dateStyle) {\n          token = dtokenMap[type];\n        } else {\n          optVal = (options as any)[type];\n          token = (tokenMap as any)[type][optVal];\n        }\n        break;\n      case 'minute':\n      case 'second':\n      case 'timeZoneName':\n        if (timeStyle) {\n          token = ttokenMap[type];\n        } else {\n          optVal = (options as any)[type];\n          token = (tokenMap as any)[type][optVal];\n        }\n        break;\n      case 'era':\n        optVal = (options as any)[type] || 'short';\n        token = (tokenMap as any)[type][optVal];\n        break;\n      case 'fractionalSecond':\n        token = options.fractionalSecondDigits;\n        token = (tokenMap as any)[type][token];\n        break;\n      default:\n        break;\n    }\n    pattern += token;\n  });\n  return pattern;\n};\n","var _arity =\n/*#__PURE__*/\nrequire(\"./_arity\");\n\nvar _isPlaceholder =\n/*#__PURE__*/\nrequire(\"./_isPlaceholder\");\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\n\nfunction _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n\n      combined[combinedIdx] = result;\n\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n\n      combinedIdx += 1;\n    }\n\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}\n\nmodule.exports = _curryN;","var _arity =\n/*#__PURE__*/\nrequire(\"./internal/_arity\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n\nvar _curryN =\n/*#__PURE__*/\nrequire(\"./internal/_curryN\");\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\n\n\nvar curryN =\n/*#__PURE__*/\n_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n\n  return _arity(length, _curryN(length, [], fn));\n});\n\nmodule.exports = curryN;","/**\n * @license\n * Copyright (c) 2004 %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport {\n  formatDateTime,\n  getFormatter,\n  getResolvedOptions,\n  getYearFormatter,\n  parseDateTime\n} from './formatParse';\nimport { NativeDateTimeOptions } from './NativeDateTimeOptions';\nimport curryN from 'ramda/src/curryN';\n\n/**\n * This function is used to retrieve 'format'and 'parse' methods for formatting or parsing date,\n * time, or datetime values according to the provided options. The options may include:\n *\n * Using the standard date, datetime and time format lengths defined by Unicode CLDR; these\n * include the dateStyle and timeStyle properties (full | long | medium | short).\n *\n * Using options defined by the ECMA 402 Specification, including the properties year,\n * month, day, hour, minute, second, weekday, era, timeZoneName, hour12, timeZone.\n *\n * Passing the BCP47Locale is the only required option. If no other options are specified,\n * the default is to use the 'short' format length for the provided locale.\n *\n * Once the function has been called with a set of options, there is no need to call it again unless\n * you want to change the options being used to format and parse, or the locale.\n */\nexport function getFormatParse(options: NativeDateTimeOptions) {\n  const intlFormatter = getFormatter(options);\n  const resolvedOptions = getResolvedOptions(intlFormatter, options);\n  const yearFormatter = getYearFormatter(options, resolvedOptions);\n\n  const curriedFormat = curryN(4, formatDateTime);\n  const format = curriedFormat(intlFormatter, yearFormatter, resolvedOptions.timeZone);\n\n  const curriedParse = curryN(4, parseDateTime);\n  const parse = curriedParse(options.locale, intlFormatter, resolvedOptions);\n\n  return { format, parse, resolvedOptions, formatter: intlFormatter };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { BCP47Locale } from './NativeDateTimeOptions';\nexport { CalendarNodeType } from './CalendarUtils';\nexport { CalendarUtils } from './CalendarUtils';\nexport { DateDef } from './ISODateTimezoneOffset';\nexport { DateISOStr } from './types';\nexport { DateTimeStyleType } from './NativeDateTimeOptions';\nexport { formatWithYearFormat } from './formatParse';\nexport { getISODateOffset } from './ISODateTimezoneOffset';\nexport { NativeDateTimeConstants } from './NativeDateTimeConstants';\nexport { NativeDateTimeOptions } from './NativeDateTimeOptions';\nexport { NativeDateTimeResolvedOptions } from './NativeDateTimeOptions';\nexport { NativeParserImpl } from './NativeParserImpl';\nexport { normalizeIsoString } from './formatParse';\nexport { getFormatParse } from './getFormatParse';\n\nexport * as DateTimeUtils from './dateTimeUtils';\n"],"names":["LocalOraI18nUtils._ISO_DATE_REGEXP","LocalOraI18nUtils.getISOStrFormatInfo","LocalOraI18nUtils.toUpper","LocalOraI18nUtils.trim","LocalOraI18nUtils.getDaysInMonth","LocalOraI18nUtils.dateToLocalIso","LocalOraI18nUtils.IsoStrParts","LocalOraI18nUtils.padZeros","LocalOraI18nUtils.trimNumber","LocalOraI18nUtils.getGetOption","LocalOraI18nUtils.partsToIsoString","LocalOraI18nUtils.getTimeStringFromOffset","LocalOraI18nUtils.isoToLocalDate","LocalOraI18nUtils.trimRightZeros","_arity","require$$0","require$$1","_curryN","require$$2","require$$3","curryN"],"mappings":"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"}