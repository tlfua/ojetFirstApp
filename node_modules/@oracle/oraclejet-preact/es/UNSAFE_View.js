/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx } from 'preact/jsx-runtime';
import { forwardRef } from 'preact/compat';
import { borderInterpolations } from './utils/UNSAFE_interpolations/borders.js';
import { dimensionInterpolations } from './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import { colorInterpolations } from './utils/UNSAFE_interpolations/colors.js';
import { paddingInterpolations } from './utils/UNSAFE_interpolations/padding.js';
import { ariaInterpolations } from './utils/UNSAFE_interpolations/aria.js';
import { themeInterpolations } from './utils/UNSAFE_interpolations/theme.js';
import { mergeInterpolations } from './utils/UNSAFE_mergeInterpolations.js';
import { stringLiteralArray } from './utils/UNSAFE_arrayUtils.js';
import { a as EnvironmentProvider } from './index-f26154f2.js';
import { i as isEmpty } from './index-0882a837.js';
import { globalVars } from './Common/themes/themeContract.css.js';
import { a as assignInlineVars } from './vanilla-extract-dynamic.esm-33365337.js';
import { f as flexitemInterpolations } from './flexitem-89d8a00a.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './_curry1-7629ff3f.js';

import './keys-f766c992.js';
import './_has-057b6f90.js';
import './utils/UNSAFE_classNames.js';
import './classNames-f414daad.js';
import './_curry3-bb17e901.js';
import './_curry2-820ed778.js';
import 'preact';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import 'preact/hooks';

const elementTypes = stringLiteralArray(['div', 'main', 'article', 'section', 'aside']);
const interpolations = [
    ...Object.values(borderInterpolations),
    ...Object.values(dimensionInterpolations),
    ...Object.values(flexitemInterpolations),
    ...Object.values(colorInterpolations),
    ...Object.values(paddingInterpolations),
    ...Object.values(ariaInterpolations),
    ...Object.values(themeInterpolations)
];
const mergedInterpolations = mergeInterpolations(interpolations);
const View = forwardRef((props, ref) => {
    const { as, children, colorScheme, scale, color, backgroundColor, ...rest } = props;
    const { class: cls, ariaLabelledBy, ariaLabel, ...styles } = mergedInterpolations({
        colorScheme,
        scale,
        backgroundColor,
        color,
        ...rest
    });
    const env = {};
    // We need to update the environment with any theme related props specified
    if (colorScheme) {
        env.colorScheme = colorScheme;
    }
    if (scale) {
        env.scale = scale;
    }
    let assignedVars = {}; // empty var override unless background is specified
    if (backgroundColor) {
        env.currentBgColor = backgroundColor;
        assignedVars = assignInlineVars({
            [globalVars.currentBackgroundColor]: styles['backgroundColor']
        });
    }
    // we hardcode box-sizing: border-box on all of our Preact components.
    const localStyles = { boxSizing: 'border-box' };
    const Component = as || 'div';
    const viewComponent = (jsx(Component, { "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, class: cls, style: { ...styles, ...localStyles, ...assignedVars }, ref: ref, children: children }));
    return isEmpty(env) ? (viewComponent) : (jsx(EnvironmentProvider, { environment: env, children: viewComponent }));
});

export { View, elementTypes };
//# sourceMappingURL=UNSAFE_View.js.map
