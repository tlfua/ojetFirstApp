/* @oracle/oraclejet-preact: 15.1.2 */
/**
 *  Returns a specifed channel value from a css color specification (#, rgb(), rgba()).
 *  If an alpha channel is requested and a # or rgb string is supplied,
 *  an implied value of 1 is returned.
 *  @private
 *  @param  {String} colorString  The color string.
 *  @return The channel value as a decimal number (between 0 and 255).
 */
function getRGBA(colorString) {
    let clr = colorString;
    // If clr is a named color, then convert into usable format
    const namedColor = getColorFromName(clr);
    if (namedColor)
        clr = namedColor;
    // Alpha support
    // if (clr.charAt(0) === '#') return clr.length > 7 ? parseInt(clr.substring(1, 3), 16) / 255 : 1;
    const x1 = clr.indexOf('(');
    let ar;
    if (x1 < 0) {
        ar = [];
        //: parse channels for different # formats
        if (clr.length > 7) {
            //  #aarrggbb format
            ar[0] = parseInt(clr.substr(3, 2), 16);
            ar[1] = parseInt(clr.substr(5, 2), 16);
            ar[2] = parseInt(clr.substr(7, 2), 16);
            ar[3] = parseInt(clr.substr(1, 2), 16) / 255;
        }
        else {
            //  #rrggbb format
            ar[0] = parseInt(clr.substr(1, 2), 16);
            ar[1] = parseInt(clr.substr(3, 2), 16);
            ar[2] = parseInt(clr.substr(5, 2), 16);
            ar[3] = 1;
        }
    }
    else {
        //  rgb() or rgba() format
        ar = clr
            .substring(x1 + 1)
            .match(/[^,|)]+/gm)
            ?.map((x) => parseFloat(x));
    }
    return ar;
}
/**
 * Returns the contrast ratio between two relative luminance values. The ratio can range from 1 to 21.
 * Follows the formula in www.w3.org/TR/WCAG20/#contrast-ratiodef
 * @param {number} luminance1
 * @param {number} luminance2
 * @return {number} The contrast ratio.
 */
function getContrastRatioByLuminance(luminance1, luminance2) {
    const l1 = luminance1 + 0.05;
    const l2 = luminance2 + 0.05;
    return l1 > l2 ? l1 / l2 : l2 / l1;
}
/**
 * Returns the relative brightness of any point in a colorspace, normalized to 0 for darkest black and 1 for lightest white.
 * Follows the formula in www.w3.org/TR/WCAG20/#relativeluminancedef
 * @param {string} color
 * @return {number} The relative luminance of the provided color.
 */
function getLuminance(color) {
    const transform = function (c) {
        const cs = c / 255;
        return cs < 0.03928 ? cs / 12.92 : Math.pow((cs + 0.055) / 1.055, 2.4);
    };
    const rgba = getRGBA(color);
    const r = rgba?.[0];
    const g = rgba?.[1];
    const b = rgba?.[2];
    return 0.2126 * transform(r) + 0.7152 * transform(g) + 0.0722 * transform(b);
}
/**
 * Returns a contrasting text color for the specified background color.
 * @param {string} backgroundColor The background color.
 * @return {string} A constrasting color for use on text.
 */
function getContrastingTextColor(backgroundColor) {
    // TODO: Retrieve from cache if it has been computed before
    const luminance = getLuminance(backgroundColor);
    const whiteContrast = getContrastRatioByLuminance(luminance, 1);
    const blackContrast = getContrastRatioByLuminance(luminance, 0);
    const textColor = whiteContrast > blackContrast ? '#FFFFFF' : '#000000';
    return textColor;
}
/**
 * colormap const
 */
const colorMap = {};
colorMap['aliceblue'] = '#f0f8ff';
colorMap['antiquewhite'] = '#faEbd7';
colorMap['aqua'] = '#00ffff';
colorMap['aquamarine'] = '#7fffd4';
colorMap['azure'] = '#f0ffff';
colorMap['beige'] = '#f5f5dc';
colorMap['bisque'] = '#ffE4c4';
colorMap['black'] = '#000000';
colorMap['blanchedalmond'] = '#ffEbcd';
colorMap['blue'] = '#0000ff';
colorMap['blueviolet'] = '#8a2bE2';
colorMap['brown'] = '#a52a2a';
colorMap['burlywood'] = '#dEb887';
colorMap['cadetblue'] = '#5f9Ea0';
colorMap['chartreuse'] = '#7fff00';
colorMap['chocolate'] = '#d2691E';
colorMap['coral'] = '#ff7f50';
colorMap['cornflowerblue'] = '#6495Ed';
colorMap['cornsilk'] = '#fff8dc';
colorMap['crimson'] = '#dc143c';
colorMap['cyan'] = '#00ffff';
colorMap['darkblue'] = '#00008b';
colorMap['darkcyan'] = '#008b8b';
colorMap['darkgoldenrod'] = '#b8860b';
colorMap['darkgray'] = '#a9a9a9';
colorMap['darkgreen'] = '#006400';
colorMap['darkkhaki'] = '#bdb76b';
colorMap['darkmagenta'] = '#8b008b';
colorMap['darkolivegreen'] = '#556b2f';
colorMap['darkorange'] = '#ff8c00';
colorMap['darkorchid'] = '#9932cc';
colorMap['darkred'] = '#8b0000';
colorMap['darksalmon'] = '#E9967a';
colorMap['darkseagreen'] = '#8fbc8f';
colorMap['darkslateblue'] = '#483d8b';
colorMap['darkslategray'] = '#2f4f4f';
colorMap['darkturquoise'] = '#00cEd1';
colorMap['darkviolet'] = '#9400d3';
colorMap['deeppink'] = '#ff1493';
colorMap['deepskyblue'] = '#00bfff';
colorMap['dimgray'] = '#696969';
colorMap['dodgerblue'] = '#1E90ff';
colorMap['firebrick'] = '#b22222';
colorMap['floralwhite'] = '#fffaf0';
colorMap['forestgreen'] = '#228b22';
colorMap['fuchsia'] = '#ff00ff';
colorMap['gainsboro'] = '#dcdcdc';
colorMap['ghostwhite'] = '#f8f8ff';
colorMap['gold'] = '#ffd700';
colorMap['goldenrod'] = '#daa520';
colorMap['gray'] = '#808080';
colorMap['green'] = '#008000';
colorMap['greenyellow'] = '#adff2f';
colorMap['honeydew'] = '#f0fff0';
colorMap['hotpink'] = '#ff69b4';
colorMap['indianred '] = '#cd5c5c';
colorMap['indigo '] = '#4b0082';
colorMap['ivory'] = '#fffff0';
colorMap['khaki'] = '#f0E68c';
colorMap['lavender'] = '#E6E6fa';
colorMap['lavenderblush'] = '#fff0f5';
colorMap['lawngreen'] = '#7cfc00';
colorMap['lemonchiffon'] = '#fffacd';
colorMap['lightblue'] = '#add8E6';
colorMap['lightcoral'] = '#f08080';
colorMap['lightcyan'] = '#E0ffff';
colorMap['lightgoldenrodyellow'] = '#fafad2';
colorMap['lightgray'] = '#d3d3d3';
colorMap['lightgreen'] = '#90EE90';
colorMap['lightpink'] = '#ffb6c1';
colorMap['lightsalmon'] = '#ffa07a';
colorMap['lightseagreen'] = '#20b2aa';
colorMap['lightskyblue'] = '#87cEfa';
colorMap['lightslategray'] = '#778899';
colorMap['lightsteelblue'] = '#b0c4dE';
colorMap['lightyellow'] = '#ffffE0';
colorMap['lime'] = '#00ff00';
colorMap['limegreen'] = '#32cd32';
colorMap['linen'] = '#faf0E6';
colorMap['magenta'] = '#ff00ff';
colorMap['maroon'] = '#800000';
colorMap['mediumaquamarine'] = '#66cdaa';
colorMap['mediumblue'] = '#0000cd';
colorMap['mediumorchid'] = '#ba55d3';
colorMap['mediumpurple'] = '#9370db';
colorMap['mediumseagreen'] = '#3cb371';
colorMap['mediumslateblue'] = '#7b68EE';
colorMap['mediumspringgreen'] = '#00fa9a';
colorMap['mediumturquoise'] = '#48d1cc';
colorMap['mediumvioletred'] = '#c71585';
colorMap['midnightblue'] = '#191970';
colorMap['mintcream'] = '#f5fffa';
colorMap['mistyrose'] = '#ffE4E1';
colorMap['moccasin'] = '#ffE4b5';
colorMap['navajowhite'] = '#ffdEad';
colorMap['navy'] = '#000080';
colorMap['oldlace'] = '#fdf5E6';
colorMap['olive'] = '#808000';
colorMap['olivedrab'] = '#6b8E23';
colorMap['orange'] = '#ffa500';
colorMap['orangered'] = '#ff4500';
colorMap['orchid'] = '#da70d6';
colorMap['palegoldenrod'] = '#EEE8aa';
colorMap['palegreen'] = '#98fb98';
colorMap['paleturquoise'] = '#afEEEE';
colorMap['palevioletred'] = '#db7093';
colorMap['papayawhip'] = '#ffEfd5';
colorMap['peachpuff'] = '#ffdab9';
colorMap['peru'] = '#cd853f';
colorMap['pink'] = '#ffc0cb';
colorMap['plum'] = '#dda0dd';
colorMap['powderblue'] = '#b0E0E6';
colorMap['purple'] = '#800080';
colorMap['rebeccapurple'] = '#663399';
colorMap['red'] = '#ff0000';
colorMap['rosybrown'] = '#bc8f8f';
colorMap['royalblue'] = '#4169E1';
colorMap['saddlebrown'] = '#8b4513';
colorMap['salmon'] = '#fa8072';
colorMap['sandybrown'] = '#f4a460';
colorMap['seagreen'] = '#2E8b57';
colorMap['seashell'] = '#fff5EE';
colorMap['sienna'] = '#a0522d';
colorMap['silver'] = '#c0c0c0';
colorMap['skyblue'] = '#87cEEb';
colorMap['slateblue'] = '#6a5acd';
colorMap['slategray'] = '#708090';
colorMap['snow'] = '#fffafa';
colorMap['springgreen'] = '#00ff7f';
colorMap['steelblue'] = '#4682b4';
colorMap['tan'] = '#d2b48c';
colorMap['teal'] = '#008080';
colorMap['thistle'] = '#d8bfd8';
colorMap['tomato'] = '#ff6347';
colorMap['turquoise'] = '#40E0d0';
colorMap['violet'] = '#EE82EE';
colorMap['wheat'] = '#f5dEb3';
colorMap['white'] = '#ffffff';
colorMap['whitesmoke'] = '#f5f5f5';
colorMap['yellow'] = '#ffff00';
colorMap['yellowgreen'] = '#9acd32';
colorMap['transparent'] = 'rgba(255,255,255,0)';
/**
 * Returns a color definition string from the named color.
 * @param {String}  name  The color name.
 * @type {String}
 * @return  An #rrggbb color string.
 */
function getColorFromName(name) {
    return colorMap[name.toLowerCase()];
}

export { getRGBA as a, getContrastRatioByLuminance as b, getLuminance as c, getColorFromName as d, getContrastingTextColor as g };
//# sourceMappingURL=ColorUtils-92c7992f.js.map
