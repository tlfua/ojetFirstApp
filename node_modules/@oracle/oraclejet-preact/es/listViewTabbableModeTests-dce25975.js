/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx } from 'preact/jsx-runtime';
import { render, fireEvent, waitFor } from '@testing-library/preact';
import { expect } from 'chai';
import { g as getRoot, b as getContents } from './testHelpers-1b2a7fbd.js';
import { p as populateData } from './listViewTestFixtures-f603dff6.js';
import userEvent from '@testing-library/user-event';

const testTabbableMode = (TestComponent) => {
    it('acts as single tab stop in composition', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const grid = await getRoot(list);
        await userEvent.tab();
        expect(document.activeElement).equals(list.getByText('Preceding Button'));
        await userEvent.tab();
        expect(document.activeElement).equals(grid);
        await userEvent.tab();
        expect(document.activeElement).equals(list.getByText('Following Button'));
        await userEvent.tab({ shift: true });
        expect(document.activeElement).equals(grid);
        await userEvent.tab({ shift: true });
        expect(document.activeElement).equals(list.getByText('Preceding Button'));
    });
    it('enters interactive mode with keyboard via F2', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const grid = await getRoot(list);
        // Tab past first button into ListView
        await userEvent.tab();
        await userEvent.tab();
        expect(document.activeElement).equals(grid);
        list.rerender(jsx(TestComponent, { data: dataMetadata }));
        const firstRowInput = list.getByTestId('input-0');
        expect(firstRowInput.getAttribute('tabindex')).equals('-1');
        fireEvent.keyDown(grid, { key: 'F2' });
        expect(firstRowInput.getAttribute('tabindex')).equals('0');
    });
    it('leaves interactive mode with keyboard via ESC', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const grid = await getRoot(list);
        const firstRowInput = list.getByTestId('input-0');
        expect(firstRowInput.getAttribute('tabindex')).equals('-1');
        await userEvent.click(firstRowInput);
        expect(firstRowInput.getAttribute('tabindex')).equals('0');
        fireEvent.keyDown(firstRowInput, { key: 'Escape' });
        await waitFor(() => {
            expect(document.activeElement, 'active element should be grid').equals(grid);
        });
    });
    it('enters interactive mode again with keyboard via arrow keys and F2', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const grid = await getRoot(list);
        const items = await getContents(list);
        await userEvent.click(items[0]);
        fireEvent.keyDown(grid, { key: 'ArrowDown' });
        const secondRowInput = list.getByTestId('input-1');
        expect(secondRowInput.getAttribute('tabindex')).equals('-1');
        fireEvent.keyDown(grid, { key: 'F2' });
        expect(secondRowInput.getAttribute('tabindex')).equals('0');
    });
    it('enters interactive mode with click on input', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const firstRowInput = list.getByTestId('input-0');
        expect(firstRowInput.getAttribute('tabindex')).equals('-1');
        await userEvent.click(firstRowInput);
        // NOTE without this rerender the state change doesn't stick
        list.rerender(jsx(TestComponent, { data: dataMetadata }));
        expect(firstRowInput.getAttribute('tabindex')).equals('0');
        expect(document.activeElement).equals(firstRowInput);
        await userEvent.tab();
        expect(document.activeElement).equals(list.getByTestId('button-0'));
    });
    // FIXME: reenable this test once  is fixed
    xit('leaves interactive mode with click outside', async () => {
        const data = populateData(100, true);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = render(jsx(TestComponent, { data: dataMetadata }));
        const firstRowInput = list.getByTestId('input-0');
        expect(firstRowInput.getAttribute('tabindex')).equals('-1');
        await userEvent.click(firstRowInput);
        // NOTE without this rerender the state change doesn't stick
        list.rerender(jsx(TestComponent, { data: dataMetadata }));
        expect(firstRowInput.getAttribute('tabindex')).equals('0');
        expect(document.activeElement).equals(firstRowInput);
        const outsideElement = list.getByText('Preceding Button');
        await userEvent.click(outsideElement);
        expect(document.activeElement).equals(outsideElement);
        list.rerender(jsx(TestComponent, { data: dataMetadata }));
        expect(firstRowInput.getAttribute('tabindex')).equals('-1');
    });
};

export { testTabbableMode as t };
//# sourceMappingURL=listViewTabbableModeTests-dce25975.js.map
