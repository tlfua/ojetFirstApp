/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx } from 'preact/jsx-runtime';
import './utils/UNSAFE_classNames.js';
import { containsKey } from './utils/UNSAFE_keys.js';
import { useSelection } from './hooks/PRIVATE_useSelection.js';
import { useTabbableMode } from './hooks/UNSAFE_useTabbableMode.js';
import './PRIVATE_ThemedIcons/CheckboxOffIcon.js';
import './PRIVATE_ThemedIcons/CheckboxOnIcon.js';
import './PRIVATE_ThemedIcons/CheckboxMixedIcon.js';
import './UNSAFE_Flex.js';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import { useInteractionStyle } from './hooks/UNSAFE_useInteractionStyle.js';
import { multiVariantStyles, styles } from './UNSAFE_Selector/themes/SelectorStyles.css.js';
import { RadioIconRedwoodTheme } from './UNSAFE_Radio/themes/redwood/RadioIconTheme.js';
import { c as classNames } from './classNames-f414daad.js';
import { CheckboxMixed as SvgCheckboxMixed } from './PRIVATE_Icons/CheckboxMixed.js';
import { CheckboxOn as SvgCheckboxOn } from './PRIVATE_Icons/CheckboxOn.js';
import { CheckboxOff as SvgCheckboxOff } from './PRIVATE_Icons/CheckboxOff.js';
import { F as Flex } from './Flex-46adb0e4.js';
import 'preact/hooks';
import './utils/UNSAFE_arrayUtils.js';
import './hooks/UNSAFE_useUser.js';
import './index-f26154f2.js';
import 'preact';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import 'preact/compat';
import './utils/PRIVATE_collectionUtils.js';
import './utils/PRIVATE_clientHints.js';
import './clientHints-26cce6ec.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './_curry1-7629ff3f.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_curry2-820ed778.js';
import './_has-057b6f90.js';

import './utils/UNSAFE_interpolations/boxalignment.js';
import './keys-f766c992.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-645317db.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-89d8a00a.js';
import './utils/UNSAFE_logger.js';
import './utils/UNSAFE_mergeProps.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import './SelectorStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './UNSAFE_Radio/themes/RadioIconStyles.css.js';
import './RadioIconStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.css.js';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconVariants.css.js';
import './RadioIconVariants.styles.css';
import './UNSAFE_Icon.js';
import './Icon-e04c1503.js';
import './hooks/UNSAFE_useTooltip.js';
import './hooks/UNSAFE_useId.js';
import './UNSAFE_Floating.js';
import './Floating-2d909840.js';
import './index-326d7a5f.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-33365337.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';

// internal component to use in place of the real Checkbox
function Checkbox(props) {
    const { isTabbable } = useTabbableMode();
    const { interactionProps, applyActiveStyle } = useInteractionStyle();
    // because Checkbox components reference Radio scoped vars, we need to bring in the Radio base theme
    // to pick up the scoped var definitions.
    const { classes: radioClassess } = useComponentTheme(RadioIconRedwoodTheme, { iconSize: '4xUnits' });
    const variantClasses = multiVariantStyles({
        checked: props.checked ? (props.isPartial ? 'isPartiallyChecked' : 'isChecked') : 'notChecked',
        active: applyActiveStyle ? 'isActive' : 'notActive'
    });
    const classes = classNames([radioClassess, styles.checkbox, variantClasses]);
    const ariaChecked = props.checked ? (props.isPartial ? 'mixed' : 'true') : 'false';
    return (jsx("div", { ...interactionProps, class: classes, tabIndex: isTabbable ? 0 : -1, role: "checkbox", "aria-label": props['aria-label'], "aria-checked": ariaChecked, onClick: props.onClick, children: props.checked ? (props.isPartial ? (jsx(SvgCheckboxMixed, {})) : (jsx(SvgCheckboxOn, {}))) : (jsx(SvgCheckboxOff, {})) }));
}
// click event handler used by Selector
const handleClick = (event) => {
    // we don't want container component like ListView to process it
    event.stopPropagation();
};
// update selectionProps onClick event to call event.stopPropagation()
const updateSelectionProps = (selectionProps) => {
    // click event handler return from useSelection
    const onClick = selectionProps.onClick;
    if (onClick) {
        // click event handler used by Selector
        selectionProps.onClick = (event) => {
            onClick(event);
            handleClick(event);
        };
        return selectionProps;
    }
    return { onClick: handleClick };
};
/**
 * The Selector component renders checkboxes in collections to support selection.
 */
function Selector({ 'aria-label': ariaLabel, rowKey, selectedKeys, isPartial, selectionMode = 'multiple', onChange }) {
    const { selectionProps } = useSelection(() => rowKey, selectedKeys, selectionMode, false, 'toggle', false, onChange);
    // TODO: replace internal with Preact checkbox component once it is available
    return (jsx("div", { class: styles.container, ...updateSelectionProps(selectionProps), children: jsx("div", { class: styles.base, children: jsx(Flex, { align: "center", justify: "center", width: "11x", height: "11x", children: jsx(Checkbox, { checked: containsKey(selectedKeys, rowKey), "aria-label": ariaLabel, isPartial: isPartial }) }) }) }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { Checkbox, Selector };
//# sourceMappingURL=UNSAFE_Selector.js.map
