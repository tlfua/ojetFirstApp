{"version":3,"file":"HiddenAccessible-6ca9b782.js","sources":["../../src/UNSAFE_HiddenAccessible/HiddenAccessible.tsx"],"sourcesContent":["import { ComponentChildren } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nconst hiddenAccessibleStyle = cssProps`${{\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflowX: 'hidden',\n  overflowY: 'hidden',\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  width: '1px',\n  position: 'absolute'\n}}`;\n\ntype HiddenAccessibleProps = {\n  /**\n   * Specifies the ComponentChildren\n   */\n  children?: ComponentChildren;\n\n  /**\n   * HTML id for the rendered element\n   */\n  id?: string;\n\n  /**\n   * Specifies whether the element is hidden to the screen readers by default.\n   * However, one can override it using aria-describedby/aria-labelledby. This is\n   * useful when the content should be read only as a description for another content\n   * and not as a content of the container.\n   */\n  isHidden?: boolean;\n};\n\n/**\n * HiddenAccessible is a helper component that hides its children visually,\n * but keeps them visible to screen readers.\n *\n */\nfunction HiddenAccessible({ children, id, isHidden }: HiddenAccessibleProps) {\n  return (\n    <span id={id} class={hiddenAccessibleStyle} hidden={isHidden}>\n      {children}\n    </span>\n  );\n}\n\nexport { HiddenAccessible };\n"],"names":["hiddenAccessibleStyle","HiddenAccessible","children","id","isHidden","_jsx","class","hidden"],"mappings":";;;;AAGA,MAAAA,qBAAA,GAaC,QAAA,CAAA;AAsBD;;;;AAIG;AACH,SAAAC,gBAAAA,CAAA;EAAAC,QAAA;EAAAC,EAAA;AAAAC,EAAAA,QAAAA;AAAA,CAAA,EAAA;EACE,OAAAC,GAAA,CAAA,MAAA,EAAA;AAAAF,IAAAA,EAAA,EAAAA,EAAA;AAAAG,IAAAA,KAAA,EAAAN,qBAAA;AAAAO,IAAAA,MAAA,EAAAH,QAAA;AAAAF,IAAAA,QAAA,EAAAA,QAAAA;AAAA,GAAA,CAAA,CAAA;AAKF;;;;"}