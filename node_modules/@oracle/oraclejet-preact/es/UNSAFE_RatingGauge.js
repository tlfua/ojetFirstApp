/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import { Fragment } from 'preact';
import { useRef, useState, useEffect } from 'preact/hooks';
import './utils/UNSAFE_classNames.js';
import { ratingGaugeVars } from './UNSAFE_RatingGauge/themes/RatingGaugeContract.css.js';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import { useUser } from './hooks/UNSAFE_useUser.js';
import { a as assignInlineVars } from './vanilla-extract-dynamic.esm-33365337.js';
import { RatingGaugeRedwoodTheme } from './UNSAFE_RatingGauge/themes/redwood/RatingGaugeTheme.js';
import { c as classNames } from './classNames-f414daad.js';
import { useKeyboardEvents } from './hooks/PRIVATE_useDvtMeterEvents.js';
import { findThreshold, validateRange, getMeterAriaProps, getThresholdColorFromValue } from './utils/PRIVATE_meterUtils.js';
import { useTooltipControlled } from './hooks/UNSAFE_useTooltip.js';
import { mergeProps } from './utils/UNSAFE_mergeProps.js';
import { useTabbableMode } from './hooks/UNSAFE_useTabbableMode.js';
import './utils/UNSAFE_logger.js';
import './_curry1-7629ff3f.js';
import './_curry2-820ed778.js';
import './index-f26154f2.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import 'preact/compat';
import './UNSAFE_RatingGauge/themes/RatingGaugeStyles.css.js';
import './RatingGaugeStyles.styles.css';
import './UNSAFE_RatingGauge/themes/redwood/RatingGaugeBaseTheme.css.js';
import './UNSAFE_RatingGauge/themes/redwood/RatingGaugeBaseTheme.styles.css';
import './UNSAFE_RatingGauge/themes/redwood/RatingGaugeVariants.css.js';
import './RatingGaugeVariants.styles2.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './hooks/UNSAFE_useId.js';
import './UNSAFE_Floating.js';
import './Floating-2d909840.js';
import './index-326d7a5f.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils-9a0cb8dc.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './UNSAFE_Theme.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_has-057b6f90.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './utils/UNSAFE_dvtCommonUtils.js';

function getValue(pageX, max, step, dimensionsRef, isRtl) {
    const dimensions = dimensionsRef.current;
    if (!dimensions || dimensions.width === 0) {
        return -1;
    }
    const width = pageX - dimensions.x;
    const val = (max * (isRtl ? dimensions.width - width : width)) / dimensions.width;
    const numSteps = val / step;
    return numSteps < 0.5 ? 0 : Math.min(max, Math.ceil(numSteps) * step);
}
function getDimensions(element) {
    if (!element) {
        return {
            width: 0,
            x: 0
        };
    }
    const rect = element.getBoundingClientRect();
    return {
        width: rect.width,
        x: rect.x + window.scrollX
    };
}
/**
 * Returns The color in rating gauge, if the color enum is supported. undefined otherwise.
 * @param color The color in rating gauge.
 * @returns The color in rating gauge, if the color enum is supported. undefined otherwise.
 */
function getColorEnum(color) {
    return color === 'neutral' ||
        color === 'gold' ||
        color === 'danger' ||
        color === 'warning' ||
        color === 'success'
        ? color
        : undefined;
}

const RatingStar = ({ isSelected, isDisabled, isReadOnly, color = 'neutral' }) => {
    const { forcedColors } = useUser();
    const isHighContrast = forcedColors === 'active';
    const needsHighContrastStyle = isHighContrast && isDisabled;
    const enumColor = getColorEnum(color);
    const customColors = assignInlineVars({
        [ratingGaugeVars.colorSelected]: color,
        [ratingGaugeVars.borderColorSelected]: color,
        [ratingGaugeVars.colorSelectedReadonly]: color
    });
    const { variantClasses, styles: { ratingStarBaseStyle, innerRatingStarColor, outerRatingStarColor, outerDisabledHighContrastBaseStyle, outerDisabledHighContrastSelectedStyle, outerDisabledHighContrastUnselectedStyle } } = useComponentTheme(RatingGaugeRedwoodTheme, {
        color: enumColor,
        selectionState: isSelected ? 'isSelected' : 'isNotSelected',
        disabledState: isDisabled ? 'isDisabled' : 'isNotDisabled',
        readonlyState: isReadOnly ? 'isReadonly' : 'isNotReadonly',
        highContrastState: isHighContrast ? 'isHighContrast' : 'isNotHighContrast'
    });
    return (jsx("svg", { viewBox: "0 0 36 36", height: "100%", width: "100%", style: !enumColor ? customColors : undefined, class: classNames([ratingStarBaseStyle, enumColor ? variantClasses : '']), children: jsxs("g", { children: [jsx("path", { class: innerRatingStarColor, d: "m18 1 5.0061 11.9524 12.9939 1.0344-9.9 8.4215 3.0246 12.5917-11.1246-6.7476-11.12461 6.7476 3.02461-12.5917-9.9-8.4215 12.9939-1.0344z" }), jsx("path", { class: classNames([
                        outerRatingStarColor,
                        needsHighContrastStyle ? outerDisabledHighContrastBaseStyle : '',
                        needsHighContrastStyle
                            ? isSelected
                                ? outerDisabledHighContrastSelectedStyle
                                : outerDisabledHighContrastUnselectedStyle
                            : ''
                    ]), d: "m23.0061 12.9524-5.0061-11.9524-5.0061 11.9524-12.9939 1.0344 9.9 8.4215-3.02461 12.5917 11.12461-6.7476 11.1246 6.7476-3.0246-12.5917 9.9-8.4215zm10.5043 1.8394-8.5262 7.2528 2.6077 10.8562-9.5919-5.818-9.59192 5.818 2.60772-10.8562-8.52615-7.2528 11.19115-.891 4.3192-10.31227 4.3192 10.31227z" })] }) }));
};

const RatingGaugeItem = ({ fillRatio, isDisabled, isReadonly, color }) => {
    const { direction } = useUser();
    const isRtl = direction === 'rtl';
    if (fillRatio === 1 || fillRatio === 0) {
        return (jsx(RatingStar, { isSelected: fillRatio === 1, isDisabled: isDisabled, isReadOnly: isReadonly, color: color }));
    }
    const { styles: { fractionalStarBaseStyle } } = useComponentTheme(RatingGaugeRedwoodTheme);
    // if fillRatio is not 1 or zero, absolutely position selected star above the
    // unselected star and clip both to form partially selected star.
    return (jsxs(Fragment, { children: [jsx("div", { class: fractionalStarBaseStyle, style: {
                    clipPath: `inset(0% ${isRtl ? (1 - fillRatio) * 100 : 0}% 0% ${isRtl ? 0 : fillRatio * 100}%)`
                }, children: jsx(RatingStar, { isSelected: false, isDisabled: isDisabled, isReadOnly: isReadonly, color: color }) }), jsx("div", { class: fractionalStarBaseStyle, style: {
                    clipPath: `inset(0% ${isRtl ? 0 : (1 - fillRatio) * 100}% 0% ${isRtl ? (1 - fillRatio) * 100 : 0}%)`
                }, children: jsx(RatingStar, { isSelected: true, isDisabled: isDisabled, isReadOnly: isReadonly, color: color }) })] }));
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
const useEvents = (max, step, value, rootRef, dimensionsRef, isInteractive, onCommit, onInput) => {
    const currentInputRef = useRef();
    const { direction } = useUser();
    if (!isInteractive) {
        return {};
    }
    const isRtl = direction === 'rtl';
    const handleInput = (inputValue) => {
        onInput?.({ value: inputValue });
        currentInputRef.current = inputValue;
    };
    const pointerUpHandler = (event) => {
        const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);
        if (val !== -1) {
            onCommit?.({ value: val });
        }
    };
    // When the document or rating gauge parent scrolls, we need to update the dimensionRef.current.x.
    // Instead of updating it for every scroll event, recalculate the dims the first time mouse enters
    // so we get fresh dimension value.
    const pointerEnterHandler = () => {
        dimensionsRef.current = getDimensions(rootRef.current);
    };
    const hoverHandler = (event) => {
        const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);
        if (val !== -1 && val != currentInputRef.current) {
            handleInput(val);
        }
    };
    const blurHandler = () => {
        onCommit?.({ value: value });
    };
    const pointerLeaveHandler = () => {
        handleInput(undefined);
    };
    const keyboardEventsProps = useKeyboardEvents(value, 0, max, step, currentInputRef, onCommit, onInput);
    return {
        onPointerUp: pointerUpHandler,
        onBlur: blurHandler,
        onPointerMove: hoverHandler,
        onKeyUp: keyboardEventsProps.onKeyUp,
        onKeyDown: keyboardEventsProps.onKeyDown,
        onPointerLeave: pointerLeaveHandler,
        onPointerEnter: pointerEnterHandler
    };
};

function useTooltipOrDatatip({ max, value, isReadonly, isDisabled, tooltip, datatip, thresholds, ariaDescribedBy, width }) {
    const [isOpen, setIsOpen] = useState(false);
    const tooltipVariant = isReadonly && !isDisabled ? 'tooltip' : 'datatip';
    let disabled = isDisabled ||
        !((tooltipVariant === 'tooltip' && tooltip) || (tooltipVariant === 'datatip' && datatip));
    const datatipIndex = Math.max(1, Math.ceil(value));
    const offset = tooltipVariant === 'tooltip' ? 0 : ((datatipIndex - Math.ceil(max / 2)) * width) / max;
    let text = tooltipVariant === 'tooltip' ? tooltip : datatip;
    if (!text && thresholds && !isDisabled) {
        text = findThreshold(value, thresholds)?.accessibleLabel;
        disabled = false;
    }
    const { tooltipContent, tooltipProps } = useTooltipControlled({
        text,
        isOpen,
        anchor: {
            x: 'element',
            y: 'element'
        },
        position: 'bottom',
        offset: {
            mainAxis: 8,
            crossAxis: offset
        },
        isDisabled: disabled,
        onToggle: ({ value }) => setIsOpen(value),
        variant: tooltipVariant
    });
    tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]
        .filter(Boolean)
        .join(' ');
    return {
        tooltipContent,
        tooltipProps
    };
}

/**
 * A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.
 */
function RatingGauge({ max = 5, value = 0, size, color = 'neutral', step = 1, isReadonly, isDisabled, ...props }) {
    validateRange(0, max, value, step);
    const rootRef = useRef(null);
    const dimensionsRef = useRef(getDimensions(null));
    const isInteractive = !isReadonly && !isDisabled;
    // Since the dimension are compute lazily after render, store width and x in ref
    // This is used to identify hovered and clicked star.
    // width of the rating gauge depends on size and max so passing them as dependencies for useEffect
    useEffect(() => {
        dimensionsRef.current = getDimensions(rootRef.current);
    }, [size, max]);
    const eventProps = useEvents(max, step, value, rootRef, dimensionsRef, isInteractive, props.onCommit, props.onInput);
    const { tooltipContent, tooltipProps } = useTooltipOrDatatip({
        max,
        value,
        isReadonly,
        isDisabled,
        tooltip: props.tooltip,
        datatip: props.datatip,
        thresholds: props.thresholds,
        width: dimensionsRef.current.width,
        ariaDescribedBy: props['aria-describedby']
    });
    const ariaProps = getMeterAriaProps(value, 0, max, props['aria-label'], props['aria-labelledby'], props.thresholds, isDisabled, isReadonly, props.tooltip);
    const mergedEventProps = mergeProps(eventProps, tooltipProps);
    const itemColor = getThresholdColorFromValue(value, color, props.thresholds);
    const { isTabbable } = useTabbableMode();
    const { classes, styles: { baseStyle, interactiveStyle, itemStyle, sizeStyle } } = useComponentTheme(RatingGaugeRedwoodTheme, {
        size
    });
    return (jsxs(Fragment, { children: [jsx("div", { ...ariaProps, ref: rootRef, class: classNames([classes, baseStyle, isInteractive ? interactiveStyle : undefined]), tabIndex: isTabbable && !isDisabled ? 0 : -1, ...mergedEventProps, children: [...Array(max)].map((_, index) => {
                    const fillRatio = Math.min(Math.max(0, value - index), 1);
                    return (jsx("div", { className: classNames([sizeStyle, itemStyle]), children: jsx(RatingGaugeItem, { fillRatio: fillRatio, isDisabled: isDisabled, isReadonly: isReadonly, color: itemColor }) }));
                }) }), tooltipContent] }));
}

export { RatingGauge };
//# sourceMappingURL=UNSAFE_RatingGauge.js.map
