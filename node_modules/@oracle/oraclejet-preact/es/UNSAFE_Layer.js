/* @oracle/oraclejet-preact: 15.1.2 */
import { useContext, useMemo, useState, useLayoutEffect, createPortal } from 'preact/compat';
import { L as LayerContext } from './index-f26154f2.js';
export { L as LayerContext, b as LayerManager } from './index-f26154f2.js';
import { u as useThemeInterpolations } from './useThemeInterpolations-48ee20a7.js';
import 'preact';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import 'preact/jsx-runtime';
import 'preact/hooks';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './utils/UNSAFE_classNames.js';
import './classNames-f414daad.js';
import './_curry1-7629ff3f.js';
import './_curry3-bb17e901.js';
import './_curry2-820ed778.js';
import './_has-057b6f90.js';

const _LOGICAL_PARENT = '__oj_logical_parent';
const Layer = (props) => {
    const context = useContext(LayerContext);
    const defaultHost = context.getHost?.();
    const host = useMemo(() => defaultHost, [defaultHost]);
    const [layerContainer, setLayerContainer] = useState(null);
    // because the children are being rendered into a portal that is out of the flow of parent dom,
    // we need to specify the colorScheme and scale class names here to pick up the correct CSS styles.
    const classes = useThemeInterpolations();
    // Really need useLayoutEffect instead of useEffect here. Otherwise the re-parented
    // content does not get re-rendered with valid ref's
    useLayoutEffect(() => {
        if (!host)
            return;
        const doc = host.ownerDocument ?? document;
        const layer = doc.createElement('div');
        if (props.logicalParentRef) {
            layer[_LOGICAL_PARENT] = props.logicalParentRef.current;
        }
        host.appendChild(layer);
        setLayerContainer(layer);
        return () => {
            if (host && layer && host.contains(layer)) {
                delete layer[_LOGICAL_PARENT];
                host.removeChild(layer);
            }
            setLayerContainer(null);
        };
    }, [host]);
    // add the colorScheme and scale classes if there is a layerContainer
    if (layerContainer) {
        // use the theme interpolations to set the appropriate style classes for colorScheme and scale
        layerContainer.className = classes;
    }
    return layerContainer && createPortal(props.children, layerContainer);
};

export { Layer };
//# sourceMappingURL=UNSAFE_Layer.js.map
