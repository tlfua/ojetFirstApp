/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs, Fragment } from 'preact/jsx-runtime';
import { forwardRef } from 'preact/compat';
import { useCallback, useRef } from 'preact/hooks';
import { useFocusableTextField } from './hooks/UNSAFE_useFocusableTextField.js';
import { useFormContext } from './hooks/UNSAFE_useFormContext.js';
import { FormFieldContext } from './hooks/UNSAFE_useFormFieldContext.js';
import { useHover } from './hooks/UNSAFE_useHover.js';
import { useTextField } from './hooks/UNSAFE_useTextField.js';
import './UNSAFE_Label.js';
import { usePrefixSuffix } from './hooks/UNSAFE_usePrefixSuffix.js';
import { ReadonlyTextField, TextField } from './UNSAFE_TextField.js';
import { InlineUserAssistance, CompactUserAssistance } from './UNSAFE_UserAssistance.js';
import './utils/PRIVATE_clientHints.js';
import { useSpinning } from './hooks/UNSAFE_useSpinning.js';
import './UNSAFE_IconButton.js';
import { TabbableModeContext } from './hooks/UNSAFE_useTabbableMode.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import { I as IconButton } from './IconButton-d6cc2f62.js';
import { Grid } from './UNSAFE_Grid.js';
import './PRIVATE_ThemedIcons/IncrementIcon.js';
import './PRIVATE_ThemedIcons/DecrementIcon.js';
import { MinusIcon as SvgMinus } from './PRIVATE_ThemedIcons/MinusIcon.js';
import { PlusIcon as SvgPlus } from './PRIVATE_ThemedIcons/PlusIcon.js';
import { S as SvgChevronDown } from './index-8b1d59ff.js';
import { S as SvgChevronUp } from './index-de7a76d6.js';
import { useCurrentValueReducer } from './hooks/UNSAFE_useCurrentValueReducer.js';
import { L as Label } from './Label-642674b7.js';
import { R as ReadonlyTextFieldInput } from './ReadonlyTextFieldInput-cc60e2b7.js';
import { T as TextFieldInput } from './TextFieldInput-f1ae0ae9.js';
import { g as getClientHints } from './clientHints-26cce6ec.js';
import './hooks/UNSAFE_useFocusWithin.js';
import './useFocusWithin-f96a205e.js';
import 'preact';
import './hooks/UNSAFE_useToggle.js';
import './hooks/PRIVATE_useMessageSeverity.js';
import './utils/UNSAFE_stringUtils.js';
import './stringUtils-5f2d2e94.js';
import './hooks/UNSAFE_useFormFieldContextProps.js';
import './hooks/UNSAFE_useId.js';
import './utils/UNSAFE_classNames.js';
import './classNames-f414daad.js';
import './hooks/UNSAFE_useComponentTheme.js';
import './utils/UNSAFE_logger.js';
import './_curry1-7629ff3f.js';
import './_curry2-820ed778.js';
import './InlineHelpSource-6e0b687e.js';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js';
import './UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js';
import './UserAssistanceStyles.styles.css';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.styles.css';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './index-f26154f2.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import './UNSAFE_ComponentMessage.js';
import './ComponentMessage-a41ebbdc.js';
import './PRIVATE_Message.js';
import './UNSAFE_Flex.js';
import './Flex-46adb0e4.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_has-057b6f90.js';

import './utils/UNSAFE_interpolations/boxalignment.js';
import './keys-f766c992.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-645317db.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-89d8a00a.js';
import './utils/PRIVATE_timer.js';
import './PRIVATE_Message/themes/MessageStyles.css.js';
import './MessageStyles.styles.css';
import './MessageCloseButton-b3e6b568.js';
import './PRIVATE_ThemedIcons/CloseIcon.js';
import './UNSAFE_Icon.js';
import './Icon-e04c1503.js';
import './hooks/UNSAFE_useTooltip.js';
import './UNSAFE_Floating.js';
import './Floating-2d909840.js';
import './index-326d7a5f.js';
import './hooks/UNSAFE_useUser.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-33365337.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './utils/UNSAFE_mergeProps.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './MessageDetail-558fff70.js';
import './MessageFormattingUtils-5a95e8e9.js';
import './utils/UNSAFE_getLocale.js';
import './Message.types-06b5fdd0.js';
import './MessageStartIcon-a9a1a453.js';
import './PRIVATE_ThemedIcons/MessageConfirmationIcon.js';
import './PRIVATE_ThemedIcons/MessageErrorIcon.js';
import './PRIVATE_ThemedIcons/MessageInfoIcon.js';
import './PRIVATE_ThemedIcons/MessageWarningIcon.js';
import './MessageSummary-29c1f7ef.js';
import './MessageTimestamp-d46daaa0.js';
import './MessageUtils-7e2e288a.js';
import './utils/UNSAFE_soundUtils.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js';
import './UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js';
import './MessageBannerStyles.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js';
import './MessageBannerVariants.styles.css';
import './MessagesManager-6e35eea0.js';
import './PRIVATE_TransitionGroup.js';
import './hooks/UNSAFE_useMessagesContext.js';
import './UNSAFE_BaseButton.js';
import './BaseButton-06d74a34.js';
import './hooks/UNSAFE_usePress.js';
import './hooks/UNSAFE_useActive.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-8ea4b106.js';
import './UNSAFE_Text.js';
import './Text-0dad47bb.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './UNSAFE_HiddenAccessible.js';
import './HiddenAccessible-6ca9b782.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js';
import './UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js';
import './ComponentMessageStyles.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js';
import './ComponentMessageContainer-94ad5e1d.js';
import './hooks/UNSAFE_useInputGroupContext.js';
import './UNSAFE_Popup.js';
import './utils/PRIVATE_tabbableUtils.js';
import './_arity-cb2c60f3.js';
import './UNSAFE_FocusTrap.js';
import './FocusTrap-9dc31155.js';
import './hooks/PRIVATE_useAnimationStatus.js';
import './UNSAFE_Popup/themes/PopupContract.css.js';
import './UNSAFE_Popup/themes/redwood/PopupTheme.js';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.styles.css';
import './UNSAFE_Popup/themes/redwood/PopupVariants.css.js';
import './PopupStyles.styles.css';
import './UNSAFE_Divider.js';
import './Divider-709d2810.js';
import './UNSAFE_Divider/themes/DividerStyles.css.js';
import './DividerStyles.styles.css';
import './CompactHelpSource-8d377623.js';
import './PRIVATE_ThemedIcons/HelpIcon.js';
import './UNSAFE_Label/themes/redwood/LabelTheme.js';
import './UNSAFE_Label/themes/LabelStyles.css.js';
import './LabelStyles.styles.css';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.styles.css';
import './UNSAFE_Label/themes/redwood/LabelVariants.css.js';
import './UNSAFE_TextField/themes/redwood/TextFieldTheme.js';
import './UNSAFE_TextField/themes/TextFieldStyles.css.js';
import './SkeletonStyles.styles.css';
import './TextFieldLoadingStyles.styles.css';
import './TextFieldStyles.styles.css';
import './UNSAFE_TextField/themes/redwood/TextFieldBaseTheme.css.js';
import './UNSAFE_TextField/themes/redwood/TextFieldBaseTheme.styles.css';
import './UNSAFE_TextField/themes/redwood/TextFieldVariants.css.js';
import './TextFieldVariants.styles.css';
import './UNSAFE_PrefixSuffix.js';
import './UNSAFE_PrefixSuffix/themes/PrefixSuffixStyles.css.js';
import './PrefixSuffixStyles.styles.css';
import './UNSAFE_LabelValueLayout.js';
import './LabelValueLayoutStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioTheme.js';
import './UNSAFE_Radio/themes/RadioStyles.css.js';
import './RadioStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioBaseTheme.css.js';
import './UNSAFE_Radio/themes/redwood/RadioBaseTheme.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioVariants.css.js';
import './UNSAFE_TextField/themes/redwood/FormLayoutTheme.js';
import './UNSAFE_TextField/themes/FormLayoutStyles.css.js';
import './UNSAFE_TextField/themes/redwood/FormLayoutBaseTheme.css.js';
import './UNSAFE_TextField/themes/redwood/FormLayoutBaseTheme.styles.css';
import './UNSAFE_TextField/themes/redwood/ReadonlyTextFieldTheme.js';
import './UNSAFE_TextField/themes/ReadonlyTextFieldStyles.css.js';
import './ReadonlyTextFieldStyles.styles.css';
import './UNSAFE_TextField/themes/redwood/ReadonlyTextFieldVariants.css.js';
import './ReadonlyTextFieldVariants.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js';
import './UNSAFE_Skeleton/themes/SkeletonStyles.css.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js';
import './hooks/UNSAFE_useDebounce.js';
import './UNSAFE_LiveRegion.js';
import './hooks/UNSAFE_useAccessibleContext.js';
import './utils/UNSAFE_interpolations/text.js';
import './index-0882a837.js';
import './UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputTheme.js';
import './UNSAFE_TextField/themes/ReadonlyTextFieldInputStyles.css.js';
import './ReadonlyTextFieldInputStyles.styles.css';
import './UNSAFE_TextField/themes/redwood/ReadonlyTextFieldInputVariants.css.js';
import './hooks/UNSAFE_useTextFieldInputHandlers.js';
import './UNSAFE_TextField/themes/redwood/TextFieldInputTheme.js';
import './UNSAFE_TextField/themes/TextFieldInputStyles.css.js';
import './TextFieldInputStyles.styles.css';
import './UNSAFE_TextField/themes/redwood/TextFieldInputVariants.css.js';
import './utils/UNSAFE_interpolations/grid.js';

/**
 * A StepButton is used to request a "step up" or "step down" to a value in NumberInputText.
 * @param direction The direction of the step
 * @param isDisabled Whether the button should be disabled
 * @param onStep Handler called when the button is clicked
 * @param variant Represents different visual variants for the button
 */
function StepButton({ direction, isDisabled, onStep, children }) {
    const translations = useTranslationBundle('@oracle/oraclejet-preact');
    const labelIncrease = translations.inputNumber_increase();
    const labelDecrease = translations.inputNumber_decrease();
    const label = direction === 'increase' ? labelIncrease : labelDecrease;
    const handleClick = useCallback(() => {
        onStep?.({ direction });
    }, [onStep, direction]);
    return (jsx(TabbableModeContext.Provider, { value: { isTabbable: false }, children: jsx(IconButton, { isDisabled: isDisabled, tooltip: label, onAction: handleClick, variant: "borderless", children: children }) }));
}

// TODO: Replace Steppers with Buttonset when it becomes available
function Steppers({ children }) {
    return (jsx(Grid, { align: "center", gap: "1x", gridTemplateColumns: "1fr 1fr", children: children }));
}

/**
 * A hook for using stepping functionality with NumberInputText. Stepping can
 * be accomplished using the step up or down buttons or by pressing the arrow
 * up or arrow down keys. Holding down the buttons or keys produces continuous
 * step events.
 *
 * The hook returns a JSX element containing the step buttons, which can be
 * placed in the endContent of NumberInputText. It also returns
 * stepHandlerProps which should be spread onto the component to handle
 * keyboard stepping.
 *
 * @param hasSteppers Controls whether the step buttons are shown
 * @param stepperVariant Variant style of step buttons.
 * @param inputRef A ref to the input element
 * @param isStepDownDisabled Controls whether stepping down is disabled
 * @param isStepUpDisabled Controls whether stepping up is disabled
 * @param onSpin Called when a continuous step (aka spin) is requested
 * @param onSpinComplete Called when spinning is complete
 * @param onStep Called when a single step is requested
 * @returns An object containing the steppers and stepHandlerProps
 */
const useSteppers = ({ hasSteppers, stepperVariant, inputRef, isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep }) => {
    const { keyboardHandlerProps, pointerIncreaseHandlerProps, pointerDecreaseHandlerProps } = useSpinning({ isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep });
    const handleClick = useCallback(() => {
        // When a step button is clicked, set focus to the input.
        // Don't need to call onStep because it's already called from onPointerDown.
        // Button only calls its onAction handler after the mouse is released.
        // If the button is disabled while stepping or spinning and you hit the min/max, the
        // button handler is not called for this reason. Work around this by adding onClick
        // to the outer div (when enabled, Button handles clicks and calls stopPropagation).
        inputRef.current?.focus();
    }, [inputRef]);
    // when stepperVariant is directional, both buttons are wrapped in Steppers and placed in the endContent slot
    // if it equals quantitative, only the increase button is placed in the endContent slot
    const endContent = hasSteppers ? (stepperVariant === 'directional' ? (jsxs(Steppers, { children: [jsx("div", { "aria-hidden": "true", ...pointerDecreaseHandlerProps, children: jsx(StepButton, { direction: "decrease", isDisabled: isStepDownDisabled, onStep: handleClick, children: jsx(SvgChevronDown, {}) }) }), jsx("div", { "aria-hidden": "true", ...pointerIncreaseHandlerProps, children: jsx(StepButton, { direction: "increase", isDisabled: isStepUpDisabled, onStep: handleClick, children: jsx(SvgChevronUp, {}) }) })] })) : (jsx("div", { "aria-hidden": "true", ...pointerIncreaseHandlerProps, children: jsx(StepButton, { direction: "increase", isDisabled: isStepUpDisabled, onStep: handleClick, children: jsx(SvgPlus, {}) }) }))) : undefined;
    // when stepperVariant is quantitative, the decrease button is placed in the startContent slot
    const startContent = hasSteppers && stepperVariant === 'quantitative' ? (jsx("div", { "aria-hidden": "true", ...pointerDecreaseHandlerProps, children: jsx(StepButton, { direction: "decrease", isDisabled: isStepDownDisabled, onStep: handleClick, children: jsx(SvgMinus, {}) }) })) : undefined;
    // stepHandlerProps will be spread onto the parent to handle
    // stepping functionality via the arrow up or down keys.
    const stepHandlerProps = hasSteppers ? keyboardHandlerProps : {};
    return { startContent, endContent, stepHandlerProps };
};

const NumberInputText = forwardRef(({ 'aria-describedby': ariaDescribedBy, 'aria-valuemax': ariaValueMax, 'aria-valuemin': ariaValueMin, 'aria-valuenow': ariaValueNow, 'aria-valuetext': ariaValueText, assistiveText, autoComplete = 'off', autoFocus = false, helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isReadonly: propIsReadonly, isRequired = false, isRequiredShown, isStepDownDisabled: propIsStepDownDisabled, isStepUpDisabled: propIsStepUpDisabled, hasSteppers = false, stepperVariant = 'directional', label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, messages, placeholder, prefix, suffix, textAlign: propTextAlign, userAssistanceDensity: propUserAssistanceDensity, value, variant = 'default', virtualKeyboard, onInput, onCommit, onSpin, onSpinComplete, onStep }, ref) => {
    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });
    const onInputAndDispatch = useCallback((detail) => {
        dispatch({ type: 'input', payload: detail.value });
        onInput?.(detail);
    }, [onInput, dispatch]);
    const onCommitAndDispatch = useCallback((detail) => {
        dispatch({ type: 'commit', payload: detail.value });
        onCommit?.(detail);
    }, [onCommit, dispatch]);
    const { isDisabled: isFormDisabled, isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, textAlign: formTextAlign, userAssistanceDensity: formUserAssistanceDensity } = useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled ?? isFormDisabled;
    const isReadonly = propIsReadonly ?? isFormReadonly;
    const labelEdge = propLabelEdge ?? formLabelEdge;
    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;
    const textAlign = propTextAlign ?? formTextAlign;
    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;
    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField({ isDisabled, isReadonly, ref });
    const { hoverProps } = useHover({ isDisabled: isReadonly || isDisabled || false });
    const { baseId, formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } = useTextField({
        ariaDescribedBy,
        helpSourceLink,
        helpSourceText,
        isDisabled,
        isFocused,
        isReadonly,
        isRequiredShown,
        labelEdge,
        messages,
        styleVariant: variant,
        userAssistanceDensity,
        value
    });
    // Disable the steppers if the number input is disabled.
    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;
    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;
    // stepHandlerProps contains keyup and keydown handlers
    // for stepping using the arrow up and down keys.
    const { startContent, endContent, stepHandlerProps } = useSteppers({
        hasSteppers,
        stepperVariant,
        inputRef: enabledElementRef,
        isStepDownDisabled,
        isStepUpDisabled,
        onSpin,
        onSpinComplete,
        onStep
    });
    const { renderedPrefix, renderedSuffix, text: valuePrefixSuffix, ariaLabelledBy } = usePrefixSuffix({
        baseId,
        hasEndContent: endContent !== undefined,
        hasInsideLabel: label !== undefined && labelEdge === 'inside',
        hasStartContent: startContent !== undefined,
        hasValue: formFieldContext.hasValue,
        isDisabled,
        isFocused,
        labelId: labelProps.id,
        prefix,
        suffix,
        value
    });
    const labelComp = labelEdge !== 'none' ? jsx(Label, { ...labelProps, children: label }) : undefined;
    const fieldLabelProps = {
        label: labelEdge !== 'none' ? labelComp : undefined,
        labelEdge: labelEdge !== 'none' ? labelEdge : undefined,
        labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined
    };
    const ariaLabel = labelEdge === 'none' ? label : undefined;
    const isInlineDensity = userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';
    const inlineUserAssistance = isInlineDensity ? (isDisabled || isReadonly ? (
    // save space for user assistance if density is 'efficient', even though we don't
    // render user assistance for disabled or readonly fields
    userAssistanceDensity !== 'efficient' ? undefined : (jsx(InlineUserAssistance, { userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : (jsx(InlineUserAssistance, { assistiveText: assistiveText, fieldLabel: label, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, messages: messages, isRequiredShown: isRequiredShown, userAssistanceDensity: userAssistanceDensity, ...userAssistanceProps }))) : undefined;
    const anchorRef = useRef(null);
    const compactUserAssistance = userAssistanceDensity === 'compact' ? (jsx(CompactUserAssistance, { anchorRef: anchorRef, messages: messages, assistiveText: assistiveText, ...userAssistanceProps })) : undefined;
    if (isReadonly) {
        return (jsx(FormFieldContext.Provider, { value: formFieldContext, children: jsx(ReadonlyTextField, { role: "presentation", compactUserAssistance: compactUserAssistance, inlineUserAssistance: inlineUserAssistance, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, ref: anchorRef, ...fieldLabelProps, children: jsx(ReadonlyTextFieldInput, { "aria-describedby": inputProps['aria-describedby'], "aria-label": ariaLabel, "aria-labelledby": labelProps.id, as: "div", autoFocus: autoFocus, elementRef: readonlyElementRef, textAlign: textAlign, value: valuePrefixSuffix, hasEmptyLabel: label === '' && labelEdge === 'none', hasInsideLabel: label !== undefined && labelEdge === 'inside' }) }) }));
    }
    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.
    const valueText = ariaValueNow === undefined
        ? ariaValueText
        : ariaValueNow.toString() !== ariaValueText
            ? ariaValueText
            : undefined;
    const mainContent = (jsxs(Fragment, { children: [renderedPrefix, jsx(TextFieldInput, { "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, "aria-valuemax": ariaValueMax, "aria-valuemin": ariaValueMin, "aria-valuenow": ariaValueNow, "aria-valuetext": valueText, autoComplete: autoComplete, autoFocus: autoFocus, currentCommitValue: currentCommitValue, hasEmptyLabel: label === '' && labelEdge === 'none', hasEndContent: endContent !== undefined, hasInsideLabel: labelComp !== undefined && labelEdge === 'inside', hasPrefix: renderedPrefix !== undefined, hasStartContent: startContent !== undefined, hasSuffix: renderedSuffix !== undefined, inputRef: enabledElementRef, isRequired: isRequired, placeholder: placeholder, role: hasSteppers ? 'spinbutton' : undefined, textAlign: textAlign, type: isMobile() ? virtualKeyboard : undefined, value: isDisabled ? valuePrefixSuffix : value, onCommit: onCommitAndDispatch, onInput: onInputAndDispatch, ...inputProps, ...stepHandlerProps }), renderedSuffix] }));
    return (jsx(FormFieldContext.Provider, { value: formFieldContext, children: jsx(TextField, { startContent: startContent, endContent: endContent, compactUserAssistance: compactUserAssistance, inlineUserAssistance: inlineUserAssistance, mainContent: mainContent, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, mainFieldRef: anchorRef, hasZeroStartMargin: hasSteppers && stepperVariant === 'quantitative', ...textFieldProps, ...fieldLabelProps, ...hoverProps }) }));
});
/**
 * Helper function to determine whether the current device is a mobile device
 * @returns true if running on a mobile device, false otherwise
 */
function isMobile() {
    const deviceType = getClientHints().deviceType;
    return deviceType === 'phone' || deviceType === 'tablet';
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { NumberInputText };
//# sourceMappingURL=UNSAFE_NumberInputText.js.map
