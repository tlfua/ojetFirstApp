{"version":3,"file":"UNSAFE_useSpinning.js","sources":["../../../src/hooks/UNSAFE_useSpinning/useSpinning.tsx","../../../src/hooks/UNSAFE_useSpinning/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { useToggle } from '../UNSAFE_useToggle';\n\nconst SPIN_DELAY = 500;\nconst SPIN_INTERVAL = 40;\n\nexport type StepDirection = 'increase' | 'decrease';\n\nexport type StepEvent = {\n  /**\n   * The direction of the requested step.\n   */\n  direction: StepDirection;\n};\n\nexport type StepProps = {\n  /**\n   * Controls whether step down is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether step up is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a single step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\n/**\n * A hook that provides keyboard and pointer event handlers that can be spread\n * onto any component that wants to support stepping and spinning through the\n * Arrow Up or Down Keys, or by clicking a StepButton. Holding down the key\n * or button first emits a step, then waits for SPIN_DELAY before producing\n * continuous step events (aka spinning) for every SPIN_INTERVAL.\n *\n * @param isStepDownDisabled Controls whether stepping down is disabled\n * @param isStepUpDisabled Controls whether stepping up is disabled\n * @param onSpin Called when a continuous step (aka spin) is requested\n * @param onSpinComplete Called when spinning is complete\n * @param onStep Called when a single step is requested\n * @returns Keyboard and pointer event handlers\n */\nexport const useSpinning = ({\n  isStepDownDisabled,\n  isStepUpDisabled,\n  onSpin,\n  onSpinComplete,\n  onStep\n}: StepProps) => {\n  const { bool: isStarted, setTrue: setStartedTrue, setFalse: setStartedFalse } = useToggle(false);\n  const {\n    bool: isSpinning,\n    setTrue: setSpinningTrue,\n    setFalse: setSpinningFalse\n  } = useToggle(false);\n  const startTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const spinTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n  const directionRef = useRef<StepDirection>('increase');\n  const spinCompleteRef = useRef(false);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!(event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n        return;\n      }\n      // By default, pressing the arrow keys moves the cursor to the\n      // beginning or end which we don't want, so call preventDefault.\n      // We also want to stop propagation of handled events.\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isStarted) {\n        // If already started, ignore repeated key down events.\n        return;\n      }\n      if (\n        (event.key === 'ArrowDown' && isStepDownDisabled) ||\n        (event.key === 'ArrowUp' && isStepUpDisabled)\n      ) {\n        // If requested step is disabled, return.\n        return;\n      }\n      directionRef.current = event.key === 'ArrowDown' ? 'decrease' : 'increase';\n      setStartedTrue();\n      // Do an initial step, which is what oj-input-number did as well.\n      onStep?.({ direction: directionRef.current });\n    },\n    [isStarted, onStep, isStepDownDisabled, isStepUpDisabled, setStartedTrue]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        if (isSpinning) {\n          // Only want to call onSpinComplete if we were actually spinning.\n          spinCompleteRef.current = true;\n        }\n        setStartedFalse();\n        setSpinningFalse();\n        event.stopPropagation();\n      }\n    },\n    [isSpinning, setStartedFalse, setSpinningFalse]\n  );\n\n  const onIncreasePointerDown = useCallback(\n    (event: PointerEvent) => {\n      // Similar to Arrow Up, stop propagation of the event, start the timer, and\n      // do an initial 'increase' step.\n      event.stopPropagation();\n      // We don't want the step buttons getting focus, so call preventDefault.\n      event.preventDefault();\n\n      if (isStepUpDisabled) {\n        return;\n      }\n      directionRef.current = 'increase';\n      setStartedTrue();\n      onStep?.({ direction: directionRef.current });\n    },\n    [onStep, isStepUpDisabled, setStartedTrue]\n  );\n\n  const onDecreasePointerDown = useCallback(\n    (event: PointerEvent) => {\n      // Similar to Arrow Down, stop propagation of the event, start the timer, and\n      // do an initial 'decrease' step.\n      event.stopPropagation();\n      // We don't want the step buttons getting focus, so call preventDefault.\n      event.preventDefault();\n\n      if (isStepDownDisabled) {\n        return;\n      }\n      directionRef.current = 'decrease';\n      setStartedTrue();\n      onStep?.({ direction: directionRef.current });\n    },\n    [onStep, isStepDownDisabled, setStartedTrue]\n  );\n\n  const onPointerUpOutOrCancel = useCallback(\n    // Handle spin cancellation on pointer up, out, or cancel.\n    // This is for both the increase and decrease cases.\n    (event: PointerEvent) => {\n      if (isSpinning) {\n        spinCompleteRef.current = true;\n      }\n      setStartedFalse();\n      setSpinningFalse();\n      event.stopPropagation();\n    },\n    [isSpinning, setStartedFalse, setSpinningFalse]\n  );\n\n  useEffect(() => {\n    if (isStarted && !startTimerRef.current) {\n      startTimerRef.current = setTimeout(() => {\n        setSpinningTrue();\n      }, SPIN_DELAY);\n    }\n    return () => {\n      // Clean up between renders.\n      if (startTimerRef.current) {\n        clearTimeout(startTimerRef.current);\n        startTimerRef.current = null;\n      }\n    };\n  }, [isStarted, setSpinningTrue]);\n\n  useEffect(() => {\n    if (!isSpinning) {\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    } else {\n      if (!spinTimerRef.current) {\n        spinTimerRef.current = setInterval(() => {\n          // If further spinning is disabled, call setSpinningFalse to\n          // clean up the timer otherwise repeat the step.\n          if (\n            (directionRef.current === 'increase' && isStepUpDisabled) ||\n            (directionRef.current === 'decrease' && isStepDownDisabled)\n          ) {\n            setSpinningFalse();\n            spinCompleteRef.current = true;\n          } else {\n            onSpin?.({ direction: directionRef.current });\n          }\n        }, SPIN_INTERVAL);\n      }\n    }\n    return () => {\n      // Clean up between renders.\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    };\n  }, [isSpinning, isStepDownDisabled, isStepUpDisabled, onSpin, setSpinningFalse]);\n\n  // Only want to run this effect when isSpinning is false and our ref is true.\n  // This helps guarantee onSpinComplete is only called once after spinning stops,\n  // even if onSpinComplete's identity is changing.\n  useEffect(() => {\n    if (!isSpinning && spinCompleteRef.current) {\n      spinCompleteRef.current = false;\n      onSpinComplete?.();\n    }\n  }, [isSpinning, onSpinComplete]);\n\n  // Handlers for arrow key up and down events.\n  const keyboardHandlerProps = { onKeyDown, onKeyUp };\n\n  // Handlers for pointer events on a step button that increases the value.\n  const pointerIncreaseHandlerProps = {\n    onPointerDown: onIncreasePointerDown,\n    onPointerUp: onPointerUpOutOrCancel,\n    onPointerOut: onPointerUpOutOrCancel,\n    onPointerCancel: onPointerUpOutOrCancel\n  };\n\n  // Handlers for pointer events on a step button that decreases the value.\n  const pointerDecreaseHandlerProps = {\n    onPointerDown: onDecreasePointerDown,\n    onPointerUp: onPointerUpOutOrCancel,\n    onPointerOut: onPointerUpOutOrCancel,\n    onPointerCancel: onPointerUpOutOrCancel\n  };\n\n  return { keyboardHandlerProps, pointerIncreaseHandlerProps, pointerDecreaseHandlerProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useSpinning, StepDirection, StepEvent, StepProps } from './useSpinning';\n"],"names":[],"mappings":"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"}