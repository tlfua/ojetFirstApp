{"version":3,"file":"PRIVATE_useCurrentKey.js","sources":["../../../src/hooks/PRIVATE_useCurrentKey/useCurrentKey.ts","../../../src/hooks/PRIVATE_useCurrentKey/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback } from 'preact/hooks';\nimport { isKeyDefined } from '../../utils/UNSAFE_keys';\nimport { CurrentKeyDetail } from '../../UNSAFE_Collection';\nimport { useUser } from '../UNSAFE_useUser';\n\n/**\n * Hook for handling current key update due to user interaction including keyboard navigation.\n * This can be reuse by all Collection components.\n *\n * @param keyExtractor function to extract the key based on the provided element\n * @param allowShiftKey if set to false, then pressing arrow key while shift key is down will not change the current key\n * @param getVerticalPrevKey function to get the previous key in the vertical direction based on the current key\n * @param getVerticalNextKey function to get the next key in the vertical direction based on the current key\n * @param getHorizontalPrevKey function to get the previous key in the horizontal direction based on the current key\n * @param getHorizontalNextKey function to get the next key based on the current key\n * @param currentKey the current key\n * @param onCurrentChange function to invoke if the current key has changed\n * @param keyComparator an optional function to compare keys, otherwise === is used\n * @returns\n */\nexport function useCurrentKey<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  allowShiftKey: boolean,\n  getVerticalPrevKey?: () => K | null,\n  getVerticalNextKey?: () => K | null,\n  getHorizontalPrevKey?: () => K | null,\n  getHorizontalNextKey?: () => K | null,\n  currentKey?: K,\n  onChange?: (detail: CurrentKeyDetail<K>) => void,\n  keyComparator?: (key1: K, key2: K) => boolean\n) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const keyEquals = useCallback(\n    (key1: K, key2: K) => {\n      if (keyComparator) {\n        return keyComparator(key1, key2);\n      }\n      return key1 === key2;\n    },\n    [keyComparator]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (onChange && isKeyDefined(currentKey)) {\n        const keyHandlers: Record<string, (() => K | null) | undefined> = {\n          ArrowUp: getVerticalPrevKey,\n          ArrowDown: getVerticalNextKey,\n          ArrowLeft: isRtl ? getHorizontalNextKey : getHorizontalPrevKey,\n          ArrowRight: isRtl ? getHorizontalPrevKey : getHorizontalNextKey\n        };\n\n        if (Object.keys(keyHandlers).includes(event.key) && (allowShiftKey || !event.shiftKey)) {\n          const newKey = keyHandlers[event.key]?.();\n          if (isKeyDefined(newKey) && !keyEquals(currentKey as K, newKey as K)) {\n            onChange({ value: newKey as K });\n          }\n          event.preventDefault();\n        }\n      }\n    },\n    [\n      currentKey,\n      onChange,\n      getVerticalPrevKey,\n      getVerticalNextKey,\n      getHorizontalPrevKey,\n      getHorizontalNextKey,\n      keyEquals\n    ]\n  );\n\n  const onClickCapture = useCallback(\n    (event: MouseEvent) => {\n      if (onChange && !event.shiftKey) {\n        const nextKey = keyExtractor(event.target as HTMLElement);\n        if (isKeyDefined(nextKey) && !keyEquals(currentKey as K, nextKey as K)) {\n          onChange({ value: nextKey as K });\n        }\n      }\n    },\n    [currentKey, keyExtractor, onChange, keyEquals]\n  );\n\n  const currentKeyProps = onChange == null ? {} : { onClickCapture, onKeyDown };\n  return { currentKeyProps };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useCurrentKey } from './useCurrentKey';\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;AAMG;AAMH;;;;;;;;;;;;;;AAcG;SACa,aAAa,CAC3B,YAAgD,EAChD,aAAsB,EACtB,kBAAmC,EACnC,kBAAmC,EACnC,oBAAqC,EACrC,oBAAqC,EACrC,UAAc,EACd,QAAgD,EAChD,aAA6C,EAAA;AAE7C,IAAA,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,CAAC;AAChC,IAAA,MAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;IAElC,MAAM,SAAS,GAAG,WAAW,CAC3B,CAAC,IAAO,EAAE,IAAO,KAAI;AACnB,QAAA,IAAI,aAAa,EAAE;AACjB,YAAA,OAAO,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,SAAA;QACD,OAAO,IAAI,KAAK,IAAI,CAAC;AACvB,KAAC,EACD,CAAC,aAAa,CAAC,CAChB,CAAC;AAEF,IAAA,MAAM,SAAS,GAAG,WAAW,CAC3B,CAAC,KAAoB,KAAI;AACvB,QAAA,IAAI,QAAQ,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;AACxC,YAAA,MAAM,WAAW,GAAiD;AAChE,gBAAA,OAAO,EAAE,kBAAkB;AAC3B,gBAAA,SAAS,EAAE,kBAAkB;gBAC7B,SAAS,EAAE,KAAK,GAAG,oBAAoB,GAAG,oBAAoB;gBAC9D,UAAU,EAAE,KAAK,GAAG,oBAAoB,GAAG,oBAAoB;aAChE,CAAC;YAEF,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,aAAa,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACtF,MAAM,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;AAC1C,gBAAA,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAe,EAAE,MAAW,CAAC,EAAE;AACpE,oBAAA,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAW,EAAE,CAAC,CAAC;AAClC,iBAAA;gBACD,KAAK,CAAC,cAAc,EAAE,CAAC;AACxB,aAAA;AACF,SAAA;AACH,KAAC,EACD;QACE,UAAU;QACV,QAAQ;QACR,kBAAkB;QAClB,kBAAkB;QAClB,oBAAoB;QACpB,oBAAoB;QACpB,SAAS;AACV,KAAA,CACF,CAAC;AAEF,IAAA,MAAM,cAAc,GAAG,WAAW,CAChC,CAAC,KAAiB,KAAI;AACpB,QAAA,IAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC/B,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,MAAqB,CAAC,CAAC;AAC1D,YAAA,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAe,EAAE,OAAY,CAAC,EAAE;AACtE,gBAAA,QAAQ,CAAC,EAAE,KAAK,EAAE,OAAY,EAAE,CAAC,CAAC;AACnC,aAAA;AACF,SAAA;KACF,EACD,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS,CAAC,CAChD,CAAC;AAEF,IAAA,MAAM,eAAe,GAAG,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC;IAC9E,OAAO,EAAE,eAAe,EAAE,CAAC;AAC7B;;AC/FA;;;;;;AAMG;;;;"}