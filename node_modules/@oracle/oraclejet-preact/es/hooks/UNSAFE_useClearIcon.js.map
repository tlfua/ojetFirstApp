{"version":3,"file":"UNSAFE_useClearIcon.js","sources":["../../../src/hooks/UNSAFE_useClearIcon/useClearIcon.ts"],"sourcesContent":["import { ComponentChildren } from 'preact';\nimport { useEffect, useCallback } from 'preact/hooks';\nimport { useToggle } from '../UNSAFE_useToggle';\n\nexport type UseClearIconProps = {\n  clearIcon?: ComponentChildren;\n  display?: 'always' | 'conditionally' | 'never';\n  hasValue?: boolean;\n  isEnabled?: boolean;\n  isFocused?: boolean;\n  isHover?: boolean;\n};\n\n/**\n * A custom hook that handles showing/hiding clear icon\n */\nexport function useClearIcon({\n  clearIcon,\n  display,\n  hasValue,\n  isEnabled = true,\n  isFocused = false,\n  isHover = false\n}: UseClearIconProps) {\n  const shouldRenderClearIcon = useCallback(\n    () =>\n      isEnabled &&\n      (display === 'always' || (display === 'conditionally' && hasValue && (isFocused || isHover))),\n    [display, hasValue, isEnabled, isFocused, isHover]\n  );\n  const { bool, setFalse, setTrue } = useToggle(shouldRenderClearIcon());\n\n  useEffect(() => {\n    shouldRenderClearIcon() ? setTrue() : setFalse();\n  }, [shouldRenderClearIcon, setTrue, setFalse]);\n\n  return bool ? clearIcon : null;\n}\n"],"names":[],"mappings":";;;;AAaA;;AAEG;AACG,SAAU,YAAY,CAAC,EAC3B,SAAS,EACT,OAAO,EACP,QAAQ,EACR,SAAS,GAAG,IAAI,EAChB,SAAS,GAAG,KAAK,EACjB,OAAO,GAAG,KAAK,EACG,EAAA;AAClB,IAAA,MAAM,qBAAqB,GAAG,WAAW,CACvC,MACE,SAAS;AACT,SAAC,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,eAAe,IAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,CAAC,CAAC,CAAC,EAC/F,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,CACnD,CAAC;AACF,IAAA,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAEvE,SAAS,CAAC,MAAK;QACb,qBAAqB,EAAE,GAAG,OAAO,EAAE,GAAG,QAAQ,EAAE,CAAC;KAClD,EAAE,CAAC,qBAAqB,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;IAE/C,OAAO,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;AACjC;;;;"}