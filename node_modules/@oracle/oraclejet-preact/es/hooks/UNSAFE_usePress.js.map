{"version":3,"file":"UNSAFE_usePress.js","sources":["../../../src/hooks/UNSAFE_usePress/usePress.ts","../../../src/hooks/UNSAFE_usePress/index.ts"],"sourcesContent":["import { useCallback, useState, useRef } from 'preact/hooks';\n\nexport type PressOptions = {\n  isDisabled?: boolean;\n  isRepeat?: boolean;\n  repeatDelay?: number;\n  repeatInterval?: number;\n};\n\nconst DefaultSettings = {\n  isDisabled: false,\n  isRepeat: false,\n  repeatDelay: 500,\n  repeatInterval: 40\n};\n\n/**\n * Returns a click handler that can make a target element either clickable or keyboard pressable.\n *\n * @param onPressHandler function\n * @param isRepeat boolean\n * @param repeatInterval number number of ms between events for mouse and touch\n * @param repeatDelay number number of ms before repeat events initiates\n * @param isDisabled boolean\n * @returns\n */\n\nexport function usePress(\n  onPressHandler: (event: Event) => void,\n  settings: PressOptions = DefaultSettings\n): { pressProps: Record<string, any> } {\n  const mergedSettings = { ...DefaultSettings, ...settings };\n  const [isClickable, setIsClickable] = useState<boolean>(true);\n  const [isPressed, setIsPressed] = useState<boolean>(false);\n  const intervalID = useRef<ReturnType<typeof setInterval>>();\n  const isRepeating = useRef<boolean>(false);\n  const repeatHandler = (event: Event) => {\n    if (isRepeating.current) {\n      onPressHandler(event);\n    }\n    intervalID.current = setInterval(onPressHandler, mergedSettings.repeatInterval, event); // @HTMLUpdateOK\n  };\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (\n        (event.code === 'Space' || event.code === 'Enter') &&\n        (mergedSettings.isRepeat || !event.repeat)\n      ) {\n        event.preventDefault();\n        setIsPressed(true);\n        if (mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.code === 'Space' || event.code === 'Enter') {\n        setIsPressed(false);\n        event.preventDefault();\n        if (!mergedSettings.isRepeat) {\n          onPressHandler(event);\n        }\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsPressed]\n  );\n\n  const onBlur = useCallback(() => {\n    setIsPressed(false);\n  }, [setIsPressed]);\n\n  const onPointerDown = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(false);\n      if (mergedSettings.isRepeat) {\n        isRepeating.current = true;\n        event.preventDefault();\n        onPressHandler(event);\n        intervalID.current = setTimeout(repeatHandler, mergedSettings.repeatDelay, event);\n      }\n    },\n    [mergedSettings, onPressHandler, intervalID, setIsClickable, repeatHandler]\n  );\n\n  const onPointerUp = useCallback(\n    (event: PointerEvent) => {\n      if (mergedSettings.isRepeat && intervalID.current) {\n        isRepeating.current = false;\n        clearInterval(intervalID.current);\n        intervalID.current = undefined;\n      } else {\n        onPressHandler(event);\n      }\n    },\n    [mergedSettings.isRepeat, intervalID, onPressHandler]\n  );\n\n  // Keep this to permit automated invocation of target via click event\n  // Need to ignore this for manual invocation whereby browser generates click\n  // pointerdown/pointerup/click -> ignore click\n  // keydown/keyup/click -> ignore click\n  // click without pointerup or keyup -> invoke\n  const onClick = useCallback(\n    (event: Event) => {\n      // There are use cases where pressable/clickable components (eg. Buttons) are nested inside of other\n      // components that also process bubbling click events (eg. Collapsible). In order to avoid conflicting\n      // processing of clicks (eg. in order to avoid the click both activating a Button as well as toggling the\n      // ancestor Collapsible), we stop propagation here. That way, only the child component handles the\n      // click and the ancestor component is oblivious to the fact that the click even occurred.\n      event.stopPropagation();\n      if (isClickable && !isPressed && intervalID.current) {\n        onPressHandler(event);\n      }\n      setIsClickable(true);\n    },\n    [setIsClickable, onPressHandler, isClickable, intervalID, isPressed]\n  );\n\n  const onClickSingle = useCallback(\n    (event: Event) => {\n      // See note above about why propagation is stopped: to prevent nested component bubbling clicks issue\n      event.stopPropagation();\n      if (!isPressed) {\n        onPressHandler(event);\n      }\n    },\n    [onPressHandler, isPressed]\n  );\n\n  const onPointerOut = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, onPressHandler, intervalID, setIsClickable]);\n\n  const onPointerCancel = useCallback(() => {\n    setIsClickable(true);\n    if (mergedSettings.isRepeat && intervalID.current) {\n      clearInterval(intervalID.current);\n    }\n  }, [mergedSettings.isRepeat, onPressHandler, intervalID, setIsClickable]);\n\n  const onContextMenu = useCallback(\n    (event: PointerEvent) => {\n      setIsClickable(true);\n      if (mergedSettings.isRepeat) {\n        event.preventDefault();\n      }\n    },\n    [mergedSettings.isRepeat, onPressHandler, setIsClickable]\n  );\n\n  const pressProps = mergedSettings.isDisabled\n    ? {}\n    : mergedSettings.isRepeat\n    ? {\n        onPointerUp,\n        onPointerDown,\n        onPointerOut,\n        onPointerCancel,\n        onKeyDown,\n        onKeyUp,\n        onContextMenu,\n        onClick,\n        onBlur\n      }\n    : {\n        onKeyDown,\n        onKeyUp,\n        onBlur,\n        onClick: onClickSingle\n      };\n\n  return {\n    pressProps\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport * from './usePress';\n"],"names":[],"mappings":"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"}