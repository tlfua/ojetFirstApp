{"version":3,"file":"UNSAFE_useFormContext.js","sources":["../../../src/hooks/UNSAFE_useFormContext/FormContext.ts","../../../src/hooks/UNSAFE_useFormContext/useFormContext.ts"],"sourcesContent":["import { createContext } from 'preact';\nimport { Size } from '../../utils/UNSAFE_size';\n\n/**\n * Props of the FormContext\n */\n// TODO: investigate labelEdge, labelStartWidth, labelWrapping and see if they still need to be on the form components,\n// or if we can just use a FormContext to pass this to a single component when it isn't in a form layout. See JET-51152\ntype FormContextProps = {\n  /**\n   * Indicates whether the form layout is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Indicates whether the component is inside a form layout.\n   */\n  isFormLayout?: boolean;\n  /**\n   * Indicates whether the form layout is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies the label position.\n   */\n  labelEdge?: 'inside' | 'start' | 'top';\n  /**\n   * Specifies the width of the start aligned label, ignored for top aligned.\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies if start or top label text should wrap or truncate.\n   */\n  labelWrapping?: 'truncate' | 'wrap';\n  /**\n   * Specifies the text alignment of the value.\n   */\n  textAlign?: 'start' | 'end' | 'right';\n  /**\n   * Specifies the density of the user assistance presentation.\n   */\n  userAssistanceDensity?: 'reflow' | 'efficient' | 'compact';\n};\n\nconst DefaultFormContext: FormContextProps = {\n  isDisabled: false,\n  isFormLayout: false,\n  isReadonly: false,\n  labelEdge: 'inside',\n  labelStartWidth: '33%',\n  labelWrapping: 'wrap',\n  textAlign: 'start',\n  userAssistanceDensity: 'reflow'\n};\n\n/**\n * Context which the parent component can use to provide various FormLayout related\n * information to descendant form controls.\n */\nconst FormContext = createContext<FormContextProps>(DefaultFormContext);\n\nexport { DefaultFormContext, FormContext, FormContextProps };\n","import { useContext } from 'preact/hooks';\nimport { DefaultFormContext, FormContext } from './FormContext';\n\n/**\n * Utility hook for consuming the FormContext\n *\n * @returns The value of closest FormContext provider\n */\nfunction useFormContext() {\n  const context = useContext(FormContext);\n  // merge the returned context into the default context so that all props are specified\n  const contextWithDefaults = Object.assign({}, DefaultFormContext, context);\n  return contextWithDefaults;\n}\n\nexport { useFormContext };\n"],"names":[],"mappings":";;;;AA2CA,MAAM,kBAAkB,GAAqB;AAC3C,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE,QAAQ;AACnB,IAAA,eAAe,EAAE,KAAK;AACtB,IAAA,aAAa,EAAE,MAAM;AACrB,IAAA,SAAS,EAAE,OAAO;AAClB,IAAA,qBAAqB,EAAE,QAAQ;CAChC,CAAC;AAEF;;;AAGG;AACH,MAAM,WAAW,GAAG,aAAa,CAAmB,kBAAkB;;ACvDtE;;;;AAIG;AACH,SAAS,cAAc,GAAA;AACrB,IAAA,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;;AAExC,IAAA,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;AAC3E,IAAA,OAAO,mBAAmB,CAAC;AAC7B;;;;"}