{"version":3,"file":"PRIVATE_useTabbableModeSet.js","sources":["../../../src/hooks/PRIVATE_useTabbableModeSet/useTabbableModeSet.ts","../../../src/hooks/PRIVATE_useTabbableModeSet/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback, useState } from 'preact/hooks';\nimport { isKeyDefined } from '../../utils/UNSAFE_keys';\n\n/**\n * Hook for handling Tabbable mode set provider components.\n *\n * @param contains - callback to check  whether an element is in set\n * @param keyExtractor - function to extract the key based on provided element\n * @param currentKey - current key navigation \"cursor\" is on\n * @param onTabbableModeDisable - callback to parent when set is disabled\n * @param onTabbableModeEnable - callback to parent when set is enabled\n * @returns isCurrentTabbableKey - callback for parent to check if key is in interactive mode\n * @returns tabbableSetProps - event handlers mode relies on\n */\nexport function useTabbableModeSet<K>(\n  contains: (elem: Element | null) => boolean,\n  keyExtractor: (element: HTMLElement) => K | null,\n  currentKey?: K,\n  onTabbableModeDisable?: (target: EventTarget | null, isKeyboardEvent: boolean) => void,\n  onTabbableModeEnable?: (key: K) => void\n): [\n  (key?: K) => boolean,\n  {\n    onFocus: (event: FocusEvent) => void;\n    onBlur: (event: FocusEvent) => void;\n    onKeyDown: (event: KeyboardEvent) => void;\n    onPointerDown: (event: MouseEvent) => void;\n  }\n] {\n  // Track which row is in actionable in state\n  const [currentTabbableKey, setCurrentTabbableKey] = useState<K>();\n  const disableTabbableMode = useCallback(\n    (target: EventTarget | null, isKeyboardEvent = false) => {\n      setCurrentTabbableKey(undefined);\n      onTabbableModeDisable && onTabbableModeDisable(target, isKeyboardEvent);\n    },\n    [onTabbableModeDisable, setCurrentTabbableKey]\n  );\n  const enableTabbableMode = useCallback(\n    (key: K) => {\n      setCurrentTabbableKey(key);\n      onTabbableModeEnable && onTabbableModeEnable(key);\n    },\n    [onTabbableModeEnable, setCurrentTabbableKey]\n  );\n  const isCurrentTabbableKey = useCallback(\n    (key?: K) => {\n      return key === currentTabbableKey;\n    },\n    [currentTabbableKey]\n  );\n\n  const onFocus = (event: FocusEvent) => {\n    const key = keyExtractor(event.target as HTMLElement) as K;\n    if (isKeyDefined(key) && !isCurrentTabbableKey(key)) {\n      enableTabbableMode(key);\n    }\n  };\n\n  const onBlur = (event: FocusEvent) => {\n    if (!event.relatedTarget || !contains(event.relatedTarget as Element)) {\n      disableTabbableMode(event.relatedTarget);\n    }\n  };\n\n  const onPointerDown = (event: MouseEvent) => {\n    const key = keyExtractor(event.target as HTMLElement) as K;\n    if (currentTabbableKey !== undefined && !isCurrentTabbableKey(key)) {\n      disableTabbableMode(event.target);\n    }\n  };\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'F2') {\n        currentKey !== undefined && !isCurrentTabbableKey(currentKey)\n          ? enableTabbableMode(currentKey)\n          : disableTabbableMode(event.target, true);\n      }\n      if (event.key === 'Esc' || event.key === 'Escape') {\n        disableTabbableMode(event.target, true);\n      }\n    },\n    [currentKey, disableTabbableMode, enableTabbableMode, isCurrentTabbableKey]\n  );\n\n  const tabbableSetProps = {\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onPointerDown\n  };\n\n  return [isCurrentTabbableKey, tabbableSetProps];\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useTabbableModeSet } from './useTabbableModeSet';\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAMG;AAIH;;;;;;;;;;AAUG;AACG,SAAU,kBAAkB,CAChC,QAA2C,EAC3C,YAAgD,EAChD,UAAc,EACd,qBAAsF,EACtF,oBAAuC,EAAA;;IAWvC,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,QAAQ,EAAK,CAAC;IAClE,MAAM,mBAAmB,GAAG,WAAW,CACrC,CAAC,MAA0B,EAAE,eAAe,GAAG,KAAK,KAAI;QACtD,qBAAqB,CAAC,SAAS,CAAC,CAAC;AACjC,QAAA,qBAAqB,IAAI,qBAAqB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAC1E,KAAC,EACD,CAAC,qBAAqB,EAAE,qBAAqB,CAAC,CAC/C,CAAC;AACF,IAAA,MAAM,kBAAkB,GAAG,WAAW,CACpC,CAAC,GAAM,KAAI;QACT,qBAAqB,CAAC,GAAG,CAAC,CAAC;AAC3B,QAAA,oBAAoB,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC;AACpD,KAAC,EACD,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAC9C,CAAC;AACF,IAAA,MAAM,oBAAoB,GAAG,WAAW,CACtC,CAAC,GAAO,KAAI;QACV,OAAO,GAAG,KAAK,kBAAkB,CAAC;AACpC,KAAC,EACD,CAAC,kBAAkB,CAAC,CACrB,CAAC;AAEF,IAAA,MAAM,OAAO,GAAG,CAAC,KAAiB,KAAI;QACpC,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,MAAqB,CAAM,CAAC;QAC3D,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE;YACnD,kBAAkB,CAAC,GAAG,CAAC,CAAC;AACzB,SAAA;AACH,KAAC,CAAC;AAEF,IAAA,MAAM,MAAM,GAAG,CAAC,KAAiB,KAAI;AACnC,QAAA,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAwB,CAAC,EAAE;AACrE,YAAA,mBAAmB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC1C,SAAA;AACH,KAAC,CAAC;AAEF,IAAA,MAAM,aAAa,GAAG,CAAC,KAAiB,KAAI;QAC1C,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,MAAqB,CAAM,CAAC;QAC3D,IAAI,kBAAkB,KAAK,SAAS,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE;AAClE,YAAA,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACnC,SAAA;AACH,KAAC,CAAC;AAEF,IAAA,MAAM,SAAS,GAAG,WAAW,CAC3B,CAAC,KAAoB,KAAI;AACvB,QAAA,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,EAAE;AACtB,YAAA,UAAU,KAAK,SAAS,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC;AAC3D,kBAAE,kBAAkB,CAAC,UAAU,CAAC;kBAC9B,mBAAmB,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC7C,SAAA;QACD,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;AACjD,YAAA,mBAAmB,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACzC,SAAA;KACF,EACD,CAAC,UAAU,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAC5E,CAAC;AAEF,IAAA,MAAM,gBAAgB,GAAG;QACvB,OAAO;QACP,MAAM;QACN,SAAS;QACT,aAAa;KACd,CAAC;AAEF,IAAA,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;AAClD;;ACrGA;;;;;;AAMG;;;;"}