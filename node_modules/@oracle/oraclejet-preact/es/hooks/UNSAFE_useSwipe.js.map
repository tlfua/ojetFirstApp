{"version":3,"file":"UNSAFE_useSwipe.js","sources":["../../../src/hooks/UNSAFE_useSwipe/useSwipe.ts","../../../src/hooks/UNSAFE_useSwipe/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef, useCallback } from 'preact/hooks';\n\n/*\n  threshold: Minimal threshold required before recognizing\n  tolerance: A tolerance value which allows the user to move their finger about a length measured in pixels.\n  This allows the swipe gesture to be triggered more easily since a User might not move their finger\n  in a straight line.\n*/\ntype SwipeOptions = {\n  threshold?: number;\n  maximumTime?: number;\n  tolerance?: number;\n  isDisabled?: boolean;\n};\n\ntype SwipeInfo = {\n  direction: 'left' | 'right' | 'up' | 'down';\n};\n\ntype SwipeState = {\n  pointerDownId: number | null;\n  startTime: number | null;\n  prevoffsetX: number;\n  prevoffsetY: number;\n};\n\nexport function useSwipe(\n  onSwipe: (e: SwipeInfo) => void,\n  { threshold = 10, maximumTime = 300, tolerance = 50, isDisabled = false }: SwipeOptions = {\n    threshold: 10,\n    maximumTime: 300,\n    tolerance: 50,\n    isDisabled: false\n  }\n): { swipeProps: Record<string, any> } {\n  const ref = useRef<SwipeState>({\n    pointerDownId: 0,\n    startTime: null,\n    prevoffsetX: 0,\n    prevoffsetY: 0\n  });\n\n  const onPointerDown = useCallback((e: PointerEvent) => {\n    if (!ref.current.pointerDownId) {\n      ref.current = {\n        pointerDownId: e.pointerId,\n        startTime: e.timeStamp,\n        prevoffsetX: e.offsetX,\n        prevoffsetY: e.offsetY\n      };\n    } else {\n      clearSwipe();\n    }\n  }, []);\n\n  const onPointerUp = useCallback(\n    (ev: PointerEvent) => {\n      if (ev.pointerId === ref.current.pointerDownId) {\n        if (ref.current.startTime && ev.timeStamp - ref.current.startTime < maximumTime) {\n          if (\n            ref.current.prevoffsetX - ev.offsetX > threshold &&\n            Math.abs(ev.offsetY - ref.current.prevoffsetY) <= tolerance\n          ) {\n            onSwipe?.({ direction: 'left' });\n          } else if (\n            ev.offsetX - ref.current.prevoffsetX > threshold &&\n            Math.abs(ev.offsetY - ref.current.prevoffsetY) <= tolerance\n          ) {\n            onSwipe?.({ direction: 'right' });\n          } else if (\n            ref.current.prevoffsetY - ev.offsetY > threshold &&\n            Math.abs(ev.offsetX - ref.current.prevoffsetX) <= tolerance\n          ) {\n            onSwipe?.({ direction: 'up' });\n          } else if (\n            ev.offsetY - ref.current.prevoffsetY > threshold &&\n            Math.abs(ev.offsetX - ref.current.prevoffsetX) <= tolerance\n          ) {\n            onSwipe?.({ direction: 'down' });\n          }\n        }\n      }\n      // state would be reset to its original state whether swipe is completed or cancelled\n      clearSwipe();\n    },\n    [threshold, onSwipe]\n  );\n\n  const clearSwipe = useCallback(() => {\n    ref.current = {\n      pointerDownId: null,\n      startTime: 0,\n      prevoffsetX: 0,\n      prevoffsetY: 0\n    };\n  }, []);\n\n  const swipeProps = isDisabled\n    ? {}\n    : {\n        /** event handlers to spread on the target element. */\n        onPointerDown,\n        onPointerUp,\n        onPointerCancel: clearSwipe\n      };\n\n  return {\n    swipeProps\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { useSwipe } from './useSwipe';\n"],"names":[],"mappings":"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"}