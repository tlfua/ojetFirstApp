{"version":3,"file":"UNSAFE_useHover.js","sources":["../../../src/hooks/UNSAFE_useHover/useHover.ts","../../../src/hooks/UNSAFE_useHover/index.ts"],"sourcesContent":["import { useToggle } from '../UNSAFE_useToggle';\n\nexport type HoverOptions = {\n  isDisabled?: boolean;\n};\n\n/**\n * Returns listeners and status for hover\n * If only visual changes are required, :hover is faster.\n *\n * @returns\n */\nexport function useHover(settings: HoverOptions = { isDisabled: false }): {\n  isHover: boolean;\n  hoverProps: Record<string, any>;\n} {\n  // :hover is faster than event handlers, but doesn't work for all platforms.\n  // For touch-first devices, the media query for hover is enough.\n  // Hybrid devices support hover upon pointer usage, but tapping would toggle hover state\n  // so disable :hover and use event handlers for such devices.\n  // Use getClientHints to check if hybrid\n  // const isHybrid = getClientHints().hoverSupport === 'events';\n  // Classes can be done via :\n  //     !isHybrid && compStyles.pseudohover,\n  //      isHybrid && isHover && compStyles.hover\n  // and the props can be done via:\n  //     const { hoverProps, isHover } = useHover( {isDisabled: !isHybrid});\n  //\n  // For the algorithm below, There are 2 possible sequences:\n  // 1. A pointer (mouse, trackpad) would generate a mouseEnter event that would initiate hover.\n  // 2. A touch generates a touchstart/touchend/mouseEnter event sequence.\n  // Hover has no meaning in a touch context, so the isHover state should be avoided.\n  // To avoid, we set an ignore flag when a touchend is encountered.\n  // Each time mouseEnter is encountered, the flag is checked.\n  // If ignore, we know that it is a touch device, so don't set hover state.\n  // In all cases, reset the flag for the next sequence.\n  //\n  const { bool, setTrue, setFalse } = useToggle(false);\n  const { bool: ignore, setTrue: setIgnoreTrue, setFalse: setIgnoreFalse } = useToggle(false);\n  const startHover = () => {\n    if (ignore) {\n      setIgnoreFalse();\n    } else {\n      setTrue();\n    }\n  };\n\n  const hoverProps = settings.isDisabled\n    ? {}\n    : { ontouchend: setIgnoreTrue, onMouseEnter: startHover, onMouseLeave: setFalse };\n  return {\n    isHover: settings.isDisabled ? false : bool,\n    hoverProps: hoverProps\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useHover } from './useHover';\n"],"names":[],"mappings":";;;;AAMA;;;;;AAKG;AACG,SAAU,QAAQ,CAAC,QAAA,GAAyB,EAAE,UAAU,EAAE,KAAK,EAAE,EAAA;;;;;;;;;;;;;;;;;;;;;;AAyBrE,IAAA,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AACrD,IAAA,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAC5F,MAAM,UAAU,GAAG,MAAK;AACtB,QAAA,IAAI,MAAM,EAAE;AACV,YAAA,cAAc,EAAE,CAAC;AAClB,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;AACH,KAAC,CAAC;AAEF,IAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU;AACpC,UAAE,EAAE;AACJ,UAAE,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;IACpF,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,UAAU,GAAG,KAAK,GAAG,IAAI;AAC3C,QAAA,UAAU,EAAE,UAAU;KACvB,CAAC;AACJ;;ACtDA;;;;;;AAMG;;;;"}