/* @oracle/oraclejet-preact: 15.1.2 */
import { useState, useCallback } from 'preact/hooks';

/**
 * Use to associate a popup menu with a target that supports onAction
 *
 * @returns
 */
function useMenuAction({ isDisabled, isMenuOpen, onToggleMenu, anchorRef }) {
    const [initialFocus, setInitialFocus] = useState('menu');
    const handleAction = useCallback(((details) => {
        if (details.reason === 'keyboard') {
            setInitialFocus('firstItem');
        }
        else {
            setInitialFocus('menu');
        }
        onToggleMenu?.({
            value: !isMenuOpen
        });
    }), [onToggleMenu, isMenuOpen, setInitialFocus]);
    const handleClose = useCallback((detail) => {
        if (detail.reason === 'outsideClick' && detail.target === anchorRef.current) {
            return;
        }
        //Focus has to be set on the launcher when menu is dismissed or
        //item is "selected"
        if (detail.reason === 'dismissed' || detail.reason === 'itemAction') {
            anchorRef.current?.focus();
        }
        onToggleMenu?.({
            value: false
        });
    }, [onToggleMenu, anchorRef]);
    const menuProps = {
        anchorRef: anchorRef,
        isOpen: isMenuOpen,
        onClose: handleClose,
        initialFocus: initialFocus
    };
    const triggerProps = isDisabled
        ? {}
        : {
            onAction: handleAction,
            'aria-haspopup': 'true',
            'aria-expanded': isMenuOpen
        };
    return {
        triggerProps: triggerProps,
        menuProps: menuProps
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { useMenuAction };
//# sourceMappingURL=UNSAFE_useMenuAction.js.map
