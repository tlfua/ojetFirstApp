{"version":3,"file":"PRIVATE_useTextDimensions.js","sources":["../../../src/hooks/PRIVATE_useTextDimensions/textDimensionsUtils.ts","../../../src/hooks/PRIVATE_useTextDimensions/useTextDimensions.tsx","../../../src/hooks/PRIVATE_useTextDimensions/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport type Font = {\n  fontStyle?: string;\n  fontVariant?: 'normal' | 'small-caps';\n  fontWeight?: string;\n  fontStretch?:\n    | 'normal'\n    | 'ultra-condensed'\n    | 'extra-condensed'\n    | 'condensed'\n    | 'semi-condensed'\n    | 'semi-expanded'\n    | 'expanded'\n    | 'extra-expanded'\n    | 'ultra-expanded';\n  fontSize?: string;\n  lineHeight?: string;\n  fontFamily?: string;\n  letterSpacing?: string;\n  wordSpacing?: string;\n  fontVariantNumeric?: string;\n};\n\nexport type TextDimensions = {\n  /**\n   * x position assuming the text is aligned to x = 0.\n   * In almost all cases this is 0, or close to 0.\n   */\n  x: number;\n  /**\n   * y positioning assuming the text baseline is aligned to y = 0\n   * i.e. this is the (negative) distance from the bounding box top\n   * to the baseline.\n   */\n  y: number;\n  /**\n   * Width of the text in pixels.\n   */\n  width: number;\n  /**\n   * Height of the text in pixles.\n   */\n  height: number;\n};\n\nexport type MeasurementBackend =\n  /**\n   * Use Canvas 2D for geting text dimensions\n   */\n  | 'canvas'\n  /**\n   * Use HTML for getting text width and height. Use SVG for getting text x and y.\n   */\n  | 'htmlSvg'\n  /**\n   * Use HTML for getting text width and height. Use Canvas 2D for getting text x and y.\n   */\n  | 'htmlCanvas'\n  /**\n   * Use SVG for geting text dimensions\n   */\n  | 'svg';\n\n// Text dimensions cache for each measurement backend.\n// Note that all consumers of this util within an app shares this cache.\nconst textDimensionsCache: Record<MeasurementBackend, Record<string, TextDimensions>> = {\n  canvas: {},\n  htmlSvg: {},\n  htmlCanvas: {},\n  svg: {}\n};\n\n// Represents the computed styles of the text's parent.\n// This is referred to as the \"base styles\" throughout this file.\nlet baseStyle: Required<Font> = {\n  fontStyle: 'normal',\n  fontVariant: 'normal',\n  fontWeight: 'normal',\n  fontStretch: 'normal',\n  fontSize: 'medium',\n  lineHeight: 'normal',\n  fontFamily: '',\n  letterSpacing: 'normal',\n  wordSpacing: 'normal',\n  fontVariantNumeric: 'normal'\n};\n\n// font shorthand only supports font-variant CSS Level 2 (Revision 1), i.e. only\n// 'normal' or 'small-caps'\nconst LEGAL_FONT_VARIANT = new Set(['normal', 'small-caps']);\n// font shorthand only supports single keyword value subset of fontStretch\nconst LEGAL_FONT_STRETCH = new Set([\n  'normal',\n  'ultra-condensed',\n  'extra-condensed',\n  'condensed',\n  'semi-condensed',\n  'semi-expanded',\n  'expanded',\n  'extra-expanded',\n  'ultra-expanded'\n]);\n\n// Representative text used for determining the text baseline location for a given font.\nconst REPRESENTATIVE_TEXT = 'MW';\n\n/**\n * Merges the given font with the base styles.\n * @param font The font to merge.\n * @returns The merged font.\n */\nconst mergeDefaultStyle = (font?: Font) => {\n  if (!font) return { ...baseStyle };\n  return { ...baseStyle, ...font };\n};\n\n/**\n * Converts the given font into a font CSS shorthand string.\n * @param font The target font.\n * @returns The equivalent font CSS shorthand string.\n */\nconst toFontString = (font: Font) => {\n  const { fontStyle, fontVariant, fontWeight, fontStretch, fontSize, lineHeight, fontFamily } =\n    font;\n  // include 'px' if fontSize is just a number\n  const fontSizeString = !Number.isNaN(Number(fontSize)) ? `${fontSize}px` : fontSize;\n  return `${fontStyle} ${fontVariant} ${fontWeight} ${fontStretch} ${fontSizeString}/${lineHeight} ${fontFamily}`;\n};\n\n/**\n * Constructs the cache key uniquely derived from the given textString and font.\n * @param textString The text string.\n * @param font The font.\n * @returns The cache key.\n */\nconst getCacheKey = (textString: string, font: Font) => {\n  return (\n    textString +\n    toFontString(font) +\n    font.letterSpacing +\n    font.wordSpacing +\n    font.fontVariantNumeric\n  );\n};\n\n/**\n * Determines whether the given CSS value is equivalent to 'normal.\n * @param value The value.\n * @returns Whether the value is equivalent to 'normal'.\n */\nconst isNormalSpacing = (value: string) => {\n  return value === 'normal' || value === '0px';\n};\n\n/**\n * Determines the most suitable measurement backend given the browser and the font.\n * @param clientBrowser The browser.\n * @param font The font.\n * @returns The most suitable measurement backend.\n */\nexport const getBackend = (\n  clientBrowser: 'chrome' | 'edge' | 'firefox' | 'safari' | 'unknown',\n  font?: Font\n): MeasurementBackend => {\n  if (clientBrowser === 'unknown') {\n    return 'htmlSvg';\n  }\n  const { letterSpacing, wordSpacing, fontVariantNumeric } = mergeDefaultStyle(font);\n  const isLetterSpacingNormal = isNormalSpacing(letterSpacing);\n  const isWordSpacingNormal = isNormalSpacing(wordSpacing);\n  const isFontVariantNumericNormal = fontVariantNumeric === 'normal';\n  const isFontVariantNumericInherited = fontVariantNumeric === baseStyle.fontVariantNumeric;\n  if (\n    isLetterSpacingNormal &&\n    isWordSpacingNormal &&\n    isFontVariantNumericNormal &&\n    isFontVariantNumericInherited\n  ) {\n    return 'canvas';\n  }\n  switch (clientBrowser) {\n    // Firefox <canvas> does not support letterSpacing, wordSpacing, or fontVariantNumeric\n    // even if attached to the DOM.\n    case 'firefox':\n      return 'htmlSvg';\n    // Safari <canvas> does not support letterSpacing or wordSpacing, even if attached to the DOM.\n    // Chrome and Edge <canvas> context supports letterSpacing and wordSpacing, but only CSS lengths,\n    // e.g. 'normal' is not supported. They're also considered experimental technology right now.\n    // so we'll use 'htmlCanvas' backend to be safe.\n    // All three support fontVariantNumeric inheritance if the canvas is attached to the DOM.\n    case 'safari':\n    case 'chrome':\n    case 'edge':\n      return isLetterSpacingNormal && isWordSpacingNormal && isFontVariantNumericInherited\n        ? 'canvas'\n        : 'htmlCanvas';\n    default:\n      return 'htmlSvg';\n  }\n};\n\n/**\n * Sets the base style to the computed style of the given node.\n * @param referenceNode The target node.\n */\nexport const computeBaseStyle = (\n  referenceNode: HTMLCanvasElement | HTMLDivElement | SVGSVGElement\n) => {\n  const computedStyle = getComputedStyle(referenceNode);\n  baseStyle = {\n    fontStyle: computedStyle.fontStyle,\n    fontVariant: computedStyle.fontVariantCaps as Required<Font>['fontVariant'],\n    fontWeight: computedStyle.fontWeight,\n    fontStretch: computedStyle.fontStretch as Required<Font>['fontStretch'],\n    fontSize: computedStyle.fontSize,\n    lineHeight: computedStyle.lineHeight,\n    fontFamily: computedStyle.fontFamily,\n    letterSpacing: computedStyle.letterSpacing,\n    wordSpacing: computedStyle.wordSpacing,\n    fontVariantNumeric: computedStyle.fontVariantNumeric\n  };\n  if (!baseStyle.fontVariant || !LEGAL_FONT_VARIANT.has(baseStyle.fontVariant)) {\n    baseStyle.fontVariant = 'normal';\n  }\n  if (!baseStyle.fontStretch || !LEGAL_FONT_STRETCH.has(baseStyle.fontStretch)) {\n    baseStyle.fontStretch = 'normal';\n  }\n};\n\n/**\n * Computes the text dimensions of the given string with the given font\n * using Canvas 2D.\n * Note the following font properties support:\n *   - font*:\n *       - Supports whatever the font CSS shorthand supports,\n *         which is basically everything we care about, except fontVariant and fontStretch values are more limited;\n *         see LEGAL_FONT_VARIANT and LEGAL_FONT_STRETCH.\n *   - letterSpacing:\n *       - Chrome and Edge supports CSS lengths only. Everything else is ignored.\n *       - Ignored and not supported in Safari and Firefox.\n *   - wordSpacing: same as letterSpacing.\n *   - fontVariantNumeric:\n *       - Ignored and not supported in Firefox.\n *       - In Chrome/Edge/Safari, the inherited (parent's) fontVariantNumeric is used.\n *         (So specifying a different fontVariantNumeric in the given font has no effect).\n * @param canvasCtx The canvas 2D context.\n * @param textString The target text string.\n * @param font The target text's font.\n * @returns The target text's dimensions.\n */\nexport const getCanvasTextDimensions = (\n  canvasCtx: CanvasRenderingContext2D,\n  textString: string,\n  font?: Font\n): TextDimensions => {\n  const fullFont = mergeDefaultStyle(font);\n  const cacheKey = getCacheKey(textString, fullFont);\n  const cachedDims = textDimensionsCache.canvas[cacheKey];\n  if (cachedDims) return cachedDims;\n\n  const fontString = toFontString(fullFont);\n  canvasCtx.font = fontString;\n  // Note: letterSpacing and wordSpacing only supported on Chrome and Edge currently,\n  // and only CSS lengths supported.\n  // This is a no-op in other browsers.\n  /* eslint-disable */\n  // @ts-ignore\n  canvasCtx.letterSpacing = '0px'; // Default any invalid values set in the next line\n  // @ts-ignore\n  canvasCtx.letterSpacing = fullFont.letterSpacing;\n  // @ts-ignore\n  canvasCtx.wordSpacing = '0px'; // Default any invalid values set in the next line\n  // @ts-ignore\n  canvasCtx.wordSpacing = fullFont.wordSpacing;\n  /* eslint-enable */\n  const textMetrics = canvasCtx.measureText(textString);\n  const dims = {\n    x: 0,\n    y: -textMetrics.fontBoundingBoxAscent,\n    width: textMetrics.width,\n    height: textMetrics.fontBoundingBoxAscent + textMetrics.fontBoundingBoxDescent\n  };\n\n  textDimensionsCache.canvas[cacheKey] = dims;\n  return dims;\n};\n\n/**\n * Computes the text dimensions of the given string with the given font\n * using SVG.\n * This is well supported across all browsers, but is generally less performant\n * compared to using an HTML or Canvas.\n * @param container The SVG container element.\n * @param textString The target text string.\n * @param font The target text's font.\n * @returns The target text's dimensions.\n */\nexport const getSvgTextDimensions = (\n  container: SVGSVGElement,\n  textString: string,\n  font?: Font\n): TextDimensions => {\n  const fullFont = mergeDefaultStyle(font);\n  const cacheKey = getCacheKey(textString, fullFont);\n  const cachedDims = textDimensionsCache.svg[cacheKey];\n  if (cachedDims) return cachedDims;\n\n  const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n  text.setAttribute('font-style', fullFont.fontStyle);\n  text.setAttribute('font-variant', fullFont.fontVariant);\n  text.setAttribute('font-weight', fullFont.fontWeight);\n  text.setAttribute('font-stretch', fullFont.fontStretch);\n  text.setAttribute('font-size', fullFont.fontSize);\n  text.setAttribute('font-family', fullFont.fontFamily);\n  text.setAttribute('letter-spacing', fullFont.letterSpacing);\n  text.setAttribute('word-spacing', fullFont.wordSpacing);\n  text.style.fontVariantNumeric = fullFont.fontVariantNumeric;\n  text.textContent = textString;\n  container.appendChild(text);\n  const bbox = text.getBBox();\n  const dims = {\n    x: bbox.x,\n    y: bbox.y,\n    width: bbox.width,\n    height: bbox.height\n  };\n  container.innerHTML = '';\n\n  textDimensionsCache.svg[cacheKey] = dims;\n  return dims;\n};\n\n/**\n * Computes the width and height of the given string with the given font using HTML.\n * This is well supported across all browsers.\n * To match the support of the Canvas backend, this method also only supports\n * the font values that the font CSS shorthand supports.\n * @param container The container element.\n * @param textString The target text string.\n * @param font The target text's font.\n * @returns The target text's width and height.\n */\nconst getHtmlTextSize = (container: HTMLDivElement, textString: string, font?: Font) => {\n  const fullFont = mergeDefaultStyle(font);\n  const fontString = toFontString(fullFont);\n  const span = document.createElement('span');\n  span.style.font = fontString;\n  span.style.whiteSpace = 'nowrap';\n  span.style.letterSpacing = fullFont.letterSpacing;\n  span.style.wordSpacing = fullFont.wordSpacing;\n  span.style.fontVariantNumeric = fullFont.fontVariantNumeric;\n  span.textContent = textString;\n  container.appendChild(span);\n  const size = {\n    width: span.offsetWidth,\n    height: span.offsetHeight\n  };\n  container.innerHTML = '';\n  return size;\n};\n\n/**\n * Computes the dimensions of a representative text with the given font and measurement backend.\n * @param options The measurement backend.\n * @param font The target font.\n * @returns The representative text's dimensions.\n */\nconst getRepresentativeTextDimensions = (\n  options:\n    | { backend: 'svg'; container: SVGSVGElement }\n    | { backend: 'canvas'; ctx: CanvasRenderingContext2D },\n  font?: Font\n) => {\n  let dimensions: TextDimensions;\n  switch (options.backend) {\n    case 'svg':\n      dimensions = getSvgTextDimensions(options.container, REPRESENTATIVE_TEXT, font);\n      break;\n    case 'canvas':\n      dimensions = getCanvasTextDimensions(options.ctx, REPRESENTATIVE_TEXT, font);\n      break;\n  }\n  return {\n    x: dimensions.x,\n    y: dimensions.y,\n    width: dimensions.width / REPRESENTATIVE_TEXT.length,\n    height: dimensions.height\n  };\n};\n\n/**\n * Computes the text width and height of the given string with the given font\n * using HTML. Due to limitations of HTML, the x and y values are computed using a different specified backend.\n * Note that for the x and y computation backend:\n *   - Canvas backend is supported by Chrome/Edge/Safari, but not Firefox.\n *   - SVG backend is supported by all browsers but is generally less performant.\n * @param container The container element.\n * @param baselineMeasureOptions The options for the backend to use for computing the x and y portion of the dimensions.\n * @param textString The target text string.\n * @param font The target text's font.\n * @returns The target text's dimensions.\n */\nexport const getHtmlTextDimensions = (\n  container: HTMLDivElement,\n  baselineMeasureOptions: Parameters<typeof getRepresentativeTextDimensions>[0],\n  textString: string,\n  font?: Font\n): TextDimensions => {\n  const fullFont = mergeDefaultStyle(font);\n  const cacheKey = getCacheKey(textString, fullFont);\n  const cache =\n    baselineMeasureOptions.backend === 'svg'\n      ? textDimensionsCache.htmlSvg\n      : textDimensionsCache.htmlCanvas;\n  const cachedDims = cache[cacheKey];\n  if (cachedDims) return cachedDims;\n\n  const { width, height } = getHtmlTextSize(container, textString, font);\n  const { x, y } = getRepresentativeTextDimensions(baselineMeasureOptions, font);\n  const dims = { x, y, width, height };\n\n  cache[cacheKey] = dims;\n  return dims;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useState, useLayoutEffect, useRef, useMemo } from 'preact/hooks';\nimport {\n  Font,\n  TextDimensions,\n  MeasurementBackend,\n  getBackend,\n  computeBaseStyle,\n  getCanvasTextDimensions,\n  getSvgTextDimensions,\n  getHtmlTextDimensions\n} from './textDimensionsUtils';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\n\ntype UseTextDimensionsOptions = {\n  backend?: MeasurementBackend | 'auto';\n};\n\nconst clientBrowser = getClientHints().browser;\n\nconst useTextDimensions = ({ backend = 'auto' }: UseTextDimensionsOptions = {}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const htmlRef = useRef<HTMLDivElement>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const [measureFunction, setMeasureFunction] =\n    useState<(textString: string, font?: Font) => TextDimensions>();\n\n  const backendConfig = useMemo(() => {\n    const canvasContent = <canvas ref={canvasRef} style={{ display: 'none' }} />;\n    const htmlContent = <div ref={htmlRef} />;\n    const svgContent = (\n      <svg ref={svgRef} style={{ display: 'block', width: '0px', height: '0px' }} />\n    );\n\n    const config = {\n      canvas: {\n        refs: [canvasRef],\n        measureContent: canvasContent,\n        measureFunction: (textString: string, font?: Font): TextDimensions => {\n          const canvas = canvasRef.current;\n          const ctx = canvas?.getContext('2d');\n          if (!canvas || !ctx) return { x: -1, y: -1, width: -1, height: -1 };\n          return getCanvasTextDimensions(ctx, textString, font);\n        }\n      },\n      htmlSvg: {\n        refs: [htmlRef, svgRef],\n        measureContent: (\n          <div>\n            {htmlContent}\n            {svgContent}\n          </div>\n        ),\n        measureFunction: (textString: string, font?: Font): TextDimensions => {\n          if (!htmlRef.current || !svgRef.current) return { x: -1, y: -1, width: -1, height: -1 };\n          return getHtmlTextDimensions(\n            htmlRef.current,\n            { backend: 'svg', container: svgRef.current },\n            textString,\n            font\n          );\n        }\n      },\n      htmlCanvas: {\n        refs: [htmlRef, canvasRef],\n        measureContent: (\n          <div>\n            {htmlContent}\n            {canvasContent}\n          </div>\n        ),\n        measureFunction: (textString: string, font?: Font): TextDimensions => {\n          const canvas = canvasRef.current;\n          const ctx = canvas?.getContext('2d');\n          if (!htmlRef.current || !canvas || !ctx) return { x: -1, y: -1, width: -1, height: -1 };\n          return getHtmlTextDimensions(\n            htmlRef.current,\n            { backend: 'canvas', ctx },\n            textString,\n            font\n          );\n        }\n      },\n      svg: {\n        refs: [svgRef],\n        measureContent: svgContent,\n        measureFunction: (textString: string, font?: Font): TextDimensions => {\n          if (!svgRef.current) return { x: -1, y: -1, width: -1, height: -1 };\n          return getSvgTextDimensions(svgRef.current, textString, font);\n        }\n      }\n    };\n    if (backend === 'auto') {\n      return {\n        refs: [htmlRef, canvasRef],\n        measureContent: (\n          <div>\n            {canvasContent}\n            {htmlContent}\n            {svgContent}\n          </div>\n        ),\n        measureFunction: (textString: string, font?: Font): TextDimensions => {\n          const measurementBackend = getBackend(clientBrowser, font);\n          return config[measurementBackend].measureFunction(textString, font);\n        }\n      };\n    }\n    return config[backend];\n  }, [backend]);\n\n  useLayoutEffect(() => {\n    if (!backendConfig.refs[0].current) return;\n    computeBaseStyle(backendConfig.refs[0].current);\n    // Ensure all fonts are loaded before any measurements are made\n    document.fonts.ready.then(() => {\n      setMeasureFunction(() => backendConfig.measureFunction);\n    });\n  }, [backendConfig]);\n\n  return {\n    textMeasureContent: backendConfig.measureContent,\n    getTextDimensions: measureFunction\n  };\n};\n\nexport { useTextDimensions };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useTextDimensions } from './useTextDimensions';\nexport { Font, TextDimensions } from './textDimensionsUtils';\n"],"names":["_jsx","_jsxs"],"mappings":"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"}