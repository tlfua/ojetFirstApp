/* @oracle/oraclejet-preact: 15.1.2 */
import { mergeProps } from '../utils/UNSAFE_mergeProps.js';
import '../utils/PRIVATE_clientHints.js';
import { useHover } from './UNSAFE_useHover.js';
import { useActive } from './UNSAFE_useActive.js';
import { g as getClientHints } from '../clientHints-26cce6ec.js';
import './UNSAFE_useToggle.js';
import 'preact/hooks';

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
const useInteractionStyle = (isDisabled = false) => {
    const hints = getClientHints();
    // :active only works on IOS devices if a touch handler exists
    const iosProps = hints.platform === 'ios' ? { ontouchstart: function () { } } : {};
    const isHybrid = hints.hoverSupport === 'events';
    // hook props and state
    const { activeProps, isActive } = useActive();
    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });
    // apply hover styling to element on a device that does not have hoverSupport
    // events and is not active or disabled
    const applyPseudoHoverStyle = !isHybrid && !isActive && !isDisabled;
    // apply hover styling to element on a device that has hoverSupport events
    // and is not active or disabled
    const applyHoverStyle = isHybrid && isHover && !isActive && !isDisabled;
    // apply active style when element is active and not disabled
    const applyActiveStyle = isActive && !isDisabled;
    // merge all props
    const interactionProps = mergeProps(iosProps, activeProps, hoverProps);
    // in the event a component wants to conditionally use base props or hook state,
    // baseProps, and baseStates are returned
    return {
        interactionProps,
        baseProps: {
            iosProps,
            activeProps,
            hoverProps
        },
        applyPseudoHoverStyle,
        applyHoverStyle,
        applyActiveStyle,
        baseStates: {
            isActive,
            isHover
        }
    };
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Collection of helper functions for writing your component styles in our theming system.
 * Pass in your style and it will return an object with the appropriate CSS selector wrapping it.
 */
const wrapWithActiveSelector = (style) => ({
    '&:active': style
});
const wrapWithHoverSelector = (style) => ({
    '&:hover': style
});
const wrapWithFocusSelector = (style) => ({
    '&:focus': style
});
const wrapWithFocusVisibleSelector = (style) => ({
    '&:focus-visible': style
});
const wrapWithVisitedSelector = (style) => ({
    '&:visited': style
});
const wrapWithNotActiveSelector = (style) => ({
    '&:not(:active)': style
});
const wrapWithPseudoHoverSelector = (style) => ({
    '@media': {
        '(hover: hover)': {
            selectors: {
                '&:hover:not(:active)': style
            }
        }
    }
});

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { useInteractionStyle, wrapWithActiveSelector, wrapWithFocusSelector, wrapWithFocusVisibleSelector, wrapWithHoverSelector, wrapWithNotActiveSelector, wrapWithPseudoHoverSelector, wrapWithVisitedSelector };
//# sourceMappingURL=UNSAFE_useInteractionStyle.js.map
