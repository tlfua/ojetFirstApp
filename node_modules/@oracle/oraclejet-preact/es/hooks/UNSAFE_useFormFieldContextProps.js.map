{"version":3,"file":"UNSAFE_useFormFieldContextProps.js","sources":["../../../src/hooks/UNSAFE_useFormFieldContextProps/useFormFieldContextProps.ts"],"sourcesContent":["import { useMemo } from 'preact/hooks';\nimport { FormFieldContextProps } from '../UNSAFE_useFormFieldContext';\n\ntype UseTextFieldProps<V> = {\n  hasValue?: boolean;\n  isDisabled?: boolean;\n  isFocused?: boolean;\n  isInputFocused?: boolean;\n  isLoading?: boolean;\n  isReadonly?: boolean;\n  value?: V;\n};\n\n/**\n * A custom hook to determine props to set FormFieldContext\n */\nexport function useFormFieldContextProps<V>({\n  hasValue,\n  isDisabled,\n  isFocused,\n  isInputFocused,\n  isLoading,\n  isReadonly,\n  value\n}: UseTextFieldProps<V>) {\n  return useMemo<FormFieldContextProps>(() => {\n    return isReadonly\n      ? {\n          hasValue,\n          isFocused,\n          isInputFocused,\n          isLoading,\n          isReadonly: true\n        }\n      : isDisabled\n      ? {\n          hasValue,\n          isDisabled: true,\n          isLoading\n        }\n      : {\n          hasValue,\n          isFocused,\n          isInputFocused,\n          isLoading\n        };\n  }, [hasValue, isDisabled, isFocused, isInputFocused, isLoading, isReadonly, value]);\n}\n"],"names":[],"mappings":";;;AAaA;;AAEG;SACa,wBAAwB,CAAI,EAC1C,QAAQ,EACR,UAAU,EACV,SAAS,EACT,cAAc,EACd,SAAS,EACT,UAAU,EACV,KAAK,EACgB,EAAA;IACrB,OAAO,OAAO,CAAwB,MAAK;AACzC,QAAA,OAAO,UAAU;AACf,cAAE;gBACE,QAAQ;gBACR,SAAS;gBACT,cAAc;gBACd,SAAS;AACT,gBAAA,UAAU,EAAE,IAAI;AACjB,aAAA;AACH,cAAE,UAAU;AACZ,kBAAE;oBACE,QAAQ;AACR,oBAAA,UAAU,EAAE,IAAI;oBAChB,SAAS;AACV,iBAAA;AACH,kBAAE;oBACE,QAAQ;oBACR,SAAS;oBACT,cAAc;oBACd,SAAS;iBACV,CAAC;AACR,KAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;AACtF;;;;"}