/* @oracle/oraclejet-preact: 15.1.2 */
import { useRef, useEffect } from 'preact/hooks';
import { coerceArray } from '../utils/UNSAFE_arrayUtils.js';

const isPointOutside = (event, ref) => {
    const target = event.target;
    if (target) {
        const doc = getDocument(target);
        if (!doc.contains(target))
            return false;
    }
    return ref.every((elRef) => !elRef.current?.contains(target));
};
const getDocument = (node) => node?.ownerDocument ?? document;
const useOutsideClick = ({ isDisabled: disabled = false, ref, handler }) => {
    // use ref to store mutable data and not cause a re-render
    const stateRef = useRef({
        isMouseDown: false
    });
    const state = stateRef.current;
    useEffect(() => {
        const refs = coerceArray(ref);
        if (!handler ||
            disabled ||
            (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1))
            return;
        const onMouseDown = () => {
            state.isMouseDown = true;
        };
        const onMouseUp = (event) => {
            if (state.isMouseDown && isPointOutside(event, refs)) {
                state.isMouseDown = false;
                handler?.(event);
            }
        };
        const firstElRef = refs[0];
        const doc = getDocument(firstElRef.current);
        if (doc) {
            doc.addEventListener('mousedown', onMouseDown, true);
            doc.addEventListener('mouseup', onMouseUp, true);
            return () => {
                doc.removeEventListener('mousedown', onMouseDown, true);
                doc.removeEventListener('mouseup', onMouseUp, true);
            };
        }
        return undefined;
    }, [disabled, handler, ref, state]);
};

export { useOutsideClick };
//# sourceMappingURL=UNSAFE_useOutsideClick.js.map
