{"version":3,"file":"UNSAFE_useCurrentValueReducer.js","sources":["../../../src/hooks/UNSAFE_useCurrentValueReducer/useCurrentValueReducer.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { useEffect, useReducer } from 'preact/hooks';\nimport { TextFieldInput } from '../../UNSAFE_TextField';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\n\ntype UseCurrentValueProps = {\n  value?: TextFieldInputProps['value'];\n};\n\ntype CurrentValueState = {\n  currentInputValue?: string;\n  currentCommitValue?: string;\n};\n\ntype CurrentValueDispatchAction = {\n  type: 'input' | 'commit';\n  payload?: string;\n};\n\nconst currentValueReducer = (\n  state: CurrentValueState,\n  { type, payload }: CurrentValueDispatchAction\n) => {\n  switch (type) {\n    case 'input':\n      return { ...state, currentInputValue: payload };\n    case 'commit':\n      return { ...state, currentCommitValue: payload, currentInputValue: payload };\n    default:\n      throw new Error(`Unknown action type: ${type}`);\n  }\n};\n\n/**\n * This hook takes an Object with a value, and returns currentCommitValue and dispatch.\n *\n * Whenever you call onInput, call dispatch({ type: 'input', payload: value });\n * For example:\n * dispatch({ type: 'input', payload: detail.value });\n * onInput?.(detail);\n * And similarly whenever you call onCommit, call dispatch({ type: 'commit', payload: value });\n *\n * The state is used to determine if the component's value property was programmatically\n * changed or just changed from an onInput listener to update the value back\n * to what the user typed in which is required for a controlled component.\n *\n * @param param0 The props for the useCurrentValueReducer hook\n * @returns\n */\nexport function useCurrentValueReducer({ value }: UseCurrentValueProps) {\n  const [state, dispatch] = useReducer(currentValueReducer, {\n    currentInputValue: value,\n    currentCommitValue: value\n  });\n\n  useEffect(() => {\n    // If the value is different than the currentInputValue, that means\n    // the value was programmatically changed. state.currentInputValue gets\n    // updated on every keystroke (onInput).\n    const programmaticallyChanged = value !== state.currentInputValue;\n    if (programmaticallyChanged) {\n      // dispatch type commit synces up the currentCommitValue and the currentInputValue.\n      // We don't want to call the user's\n      // onCommit for the case where the value is programmatically changed, so we sync the\n      // input/commit states every time onCommit is called and also here.\n      // For more details, see useTextFieldInputHandler#onChange\n      dispatch({ type: 'commit', payload: value });\n    }\n  }, [value, state.currentInputValue]);\n\n  return {\n    currentCommitValue: state.currentCommitValue,\n    dispatch\n  };\n}\n"],"names":[],"mappings":";;;AAoBA,MAAM,mBAAmB,GAAG,CAC1B,KAAwB,EACxB,EAAE,IAAI,EAAE,OAAO,EAA8B,KAC3C;AACF,IAAA,QAAQ,IAAI;AACV,QAAA,KAAK,OAAO;YACV,OAAO,EAAE,GAAG,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC;AAClD,QAAA,KAAK,QAAQ;AACX,YAAA,OAAO,EAAE,GAAG,KAAK,EAAE,kBAAkB,EAAE,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC;AAC/E,QAAA;AACE,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,CAAA,CAAE,CAAC,CAAC;AACnD,KAAA;AACH,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;AAeG;AACa,SAAA,sBAAsB,CAAC,EAAE,KAAK,EAAwB,EAAA;IACpE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,UAAU,CAAC,mBAAmB,EAAE;AACxD,QAAA,iBAAiB,EAAE,KAAK;AACxB,QAAA,kBAAkB,EAAE,KAAK;AAC1B,KAAA,CAAC,CAAC;IAEH,SAAS,CAAC,MAAK;;;;AAIb,QAAA,MAAM,uBAAuB,GAAG,KAAK,KAAK,KAAK,CAAC,iBAAiB,CAAC;AAClE,QAAA,IAAI,uBAAuB,EAAE;;;;;;YAM3B,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;AAC9C,SAAA;KACF,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAErC,OAAO;QACL,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;QAC5C,QAAQ;KACT,CAAC;AACJ;;;;"}