{"version":3,"file":"UNSAFE_InputPassword.js","sources":["../../src/UNSAFE_InputPassword/RevealToggleIcon.tsx","../../src/UNSAFE_InputPassword/InputPassword.tsx","../../src/UNSAFE_InputPassword/index.ts"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { ViewHideIcon } from '../PRIVATE_ThemedIcons/ViewHideIcon';\nimport { ViewIcon } from '../PRIVATE_ThemedIcons/ViewIcon';\n\ntype RevealToogleIconProps = {\n  onPress: (event: Event) => void;\n  isRevealed?: boolean;\n};\n\n// TODO: This was copied from ClearIcon. When we have a preact <Button> component we\n// will need to refactor to use that.\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n\nconst revealToggleIconStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor,\n    borderColor: 'transparent',\n    backgroundColor: 'transparent',\n\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight,\n    fontSize: ojButtonIconSize,\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`\n};\n\nexport function RevealToggleIcon({ isRevealed, onPress }: RevealToogleIconProps) {\n  const { pressProps } = usePress(onPress);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // title attribute. We removed these because title is taking precedence over aria-label and this\n  // is messing up the screen readers. To be accessible we are removing title and will implement\n  // this as a <Tooltip> component when we have one.\n  // TODO JET-51517 implement reveal icon title as a Tooltip\n  // const hidePasswordStr = translations.inputPassword_hide();\n  // const showPasswordStr = translations.inputPassword_show();\n  const passwordMaskedStr = translations.inputPassword_hidden();\n  // TODO: Use toggle <Button> when that is available, JET-49207\n  return (\n    <button\n      aria-label={passwordMaskedStr}\n      role=\"switch\"\n      aria-checked={isRevealed ? false : true}\n      class={revealToggleIconStyles.base}\n      tabIndex={0}\n      {...pressProps}>\n      {isRevealed ? <ViewHideIcon /> : <ViewIcon />}\n    </button>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from './RevealToggleIcon';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '../UNSAFE_InputText/ClearIcon';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Specifies whether the clear icon should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The clear icon is always visible.</li>\n   * <li><code>'conditionally'</code>: The clear icon is visible under the following conditions:\n   * if the component has a non-empty value, and it either has focus or the mouse is over the field.</li>\n   * <li><code>'never'</code>: The clear icon is never visible.</li>\n   * </ul>\n   */\n  hasClearIcon?: 'always' | 'conditionally' | 'never';\n  /**\n   * Specifies whether the reveal toggle should be shown.\n   * <ul>\n   * <li><code>'always'</code>: The reveal toggle is always visible and the user can click on it to reveal the password in plain text.\n   * When the user leaves the field, the password is automatically masked.</li>\n   * <li><code>'never'</code>: The reveal toggle is never visible and the user can never reveal the password in plain text.</li>\n   * </ul>\n   */\n  hasRevealToggle?: 'always' | 'never';\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field. If the labelEdge is 'none',\n   * the labelHint is hidden from the user but is still accessible.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   *\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\n// One way InputPassword differs from InputText is InputPassword's readonly\n// is implemented with an <input> and not a <div>.\nexport const InputPassword = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      hasClearIcon,\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLInputElement\n    >({ isDisabled, isReadonly, ref, onBlurWithin: setRevealedFalse });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal buttton,\n    // toggle revealing/masking password\n    const onRevealIconPress = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed, setRevealedFalse, setRevealedTrue]);\n\n    const revealToggleIcon =\n      !isDisabled && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon onPress={onRevealIconPress} isRevealed={isRevealed} />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value, enabledElementRef]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            ref={anchorRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"input\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              type=\"password\"\n              value={value}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <TextFieldInput\n        aria-label={ariaLabel}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        currentCommitValue={currentCommitValue}\n        hasEmptyLabel={label === '' && labelEdge === 'none'}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        onInput={onInputAndDispatch}\n        onCommit={onCommitAndDispatch}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        value={value}\n        type={isRevealed ? 'text' : 'password'}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          compactUserAssistance={compactUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          mainFieldRef={anchorRef}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n export { InputPassword } from './InputPassword';\n"],"names":["ojButtonHeight","ojButtonBorderRadius","ojButtonBorderlessChromeTextColor","ojButtonBorderlessChromeTextColorHover","ojButtonBorderlessChromeBgColorHover","ojButtonBorderlessChromeBorderColorHover","ojButtonIconSize","revealToggleIconStyles","RevealToggleIcon","isRevealed","onPress","translations","useTranslationBundle","passwordMaskedStr","inputPassword_hidden","_jsx"],"mappings":"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"}