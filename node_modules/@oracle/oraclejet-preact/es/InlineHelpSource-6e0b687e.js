/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx } from 'preact/jsx-runtime';
import './utils/UNSAFE_classNames.js';
import { useComponentTheme } from './hooks/UNSAFE_useComponentTheme.js';
import { useTabbableMode } from './hooks/UNSAFE_useTabbableMode.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import { UserAssistanceRedwoodTheme } from './UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js';
import { c as classNames } from './classNames-f414daad.js';

function InlineHelpSource({ children, source }) {
    const translations = useTranslationBundle('@oracle/oraclejet-preact');
    const userAssistance_learnMoreStr = translations.userAssistance_learnMore();
    children = children ?? userAssistance_learnMoreStr;
    // JET-52914 - Implement Tabbable mode API contract in InputText
    // if not tabbable, spread tabbableModeProps on component
    const { isTabbable, tabbableModeProps } = useTabbableMode();
    // TODO: Implement and use a preact Link component instead of using an anchor tag
    const { classes, styles } = useComponentTheme(UserAssistanceRedwoodTheme);
    const { helpSourceStyles } = styles; // TODO: refactor types so inferring works properly
    return (jsx("a", { class: classNames([classes, helpSourceStyles]), target: "_blank", href: source, ...(!isTabbable && tabbableModeProps), children: children }));
}

export { InlineHelpSource as I };
//# sourceMappingURL=InlineHelpSource-6e0b687e.js.map
