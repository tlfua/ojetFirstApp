{"version":3,"file":"ListView-6a846051.js","sources":["../../src/UNSAFE_ListView/ListView.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { DataState } from '../UNSAFE_Collection';\nimport { List } from '../PRIVATE_List';\nimport { ListProps } from './List.types';\n\n/**\n * Props specific to non-virtualized ListView\n */\ntype NonVirtualizedListProps<K, D> = {\n  /**\n   * The data that is used to render each item in ListView.  If the value is null, then ListView will show nothing\n   * if hasMore is false, or loading indicator if hasMore is true.\n   */\n  data: D[] | null;\n  /**\n   * A callback function to extract the key which is used to identify the item.\n   */\n  getRowKey: (data: D) => K;\n  /**\n   * Whether there are more data available to load.  By default this returns false.\n   */\n  hasMore?: boolean;\n  /**\n   * An optional callback function which is invoked when user scrolls to the end of the list.\n   */\n  onLoadMore?: () => void;\n};\n\n/**\n * Props for the ListView Component\n */\nexport type Props<K, D> = Pick<\n  ListProps<K, D>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'children'\n  | 'currentKey'\n  | 'currentItemVariant'\n  | 'gridlines'\n  | 'onCurrentKeyChange'\n  | 'onItemAction'\n  | 'onSelectionChange'\n  | 'promotedSection'\n  | 'selectedKeys'\n  | 'selectionMode'\n  | 'viewportConfig'\n> &\n  NonVirtualizedListProps<K, D>;\n\n/**\n * Component that renders items as a flat list.\n * This component is nom-virtualized and renders all rows provided in the data prop.\n */\nexport function ListView<K extends string | number, D>(props: Props<K, D>) {\n  const dataMetadata = props.data\n    ? props.data.map((aData: D) => {\n        const key = props.getRowKey(aData);\n        return { data: aData, metadata: { key } };\n      })\n    : null;\n  const loadRange = props.onLoadMore ? props.onLoadMore : () => {};\n  const dataState = dataMetadata\n    ? ({\n        offset: 0,\n        data: dataMetadata,\n        sizePrecision: props.hasMore ? 'atLeast' : 'exact',\n        totalSize: dataMetadata.length\n      } as DataState<K, D>)\n    : null;\n  return (\n    <List isVirtualized={false} {...props} onLoadRange={loadRange} data={dataState}>\n      {props.children}\n    </List>\n  );\n}\n"],"names":["_jsx"],"mappings":";;;;;AAuDA;;;AAGG;AACG,SAAU,QAAQ,CAA+B,KAAkB,EAAA;AACvE,IAAA,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI;UAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAQ,KAAI;YAC1B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACnC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;AAC5C,SAAC,CAAC;UACF,IAAI,CAAC;AACT,IAAA,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,GAAG,MAAK,GAAG,CAAC;IACjE,MAAM,SAAS,GAAG,YAAY;AAC5B,UAAG;AACC,YAAA,MAAM,EAAE,CAAC;AACT,YAAA,IAAI,EAAE,YAAY;YAClB,aAAa,EAAE,KAAK,CAAC,OAAO,GAAG,SAAS,GAAG,OAAO;YAClD,SAAS,EAAE,YAAY,CAAC,MAAM;AACX,SAAA;UACrB,IAAI,CAAC;IACT,QACEA,IAAC,IAAI,EAAA,EAAC,aAAa,EAAE,KAAK,EAAM,GAAA,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAA,QAAA,EAC3E,KAAK,CAAC,QAAQ,EACV,CAAA,EACP;AACJ;;;;"}