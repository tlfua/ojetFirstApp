/* @oracle/oraclejet-preact: 15.1.2 */
import { jsxs, jsx } from 'preact/jsx-runtime';
import { useCallback, useMemo, useEffect, useState, useRef } from 'preact/hooks';
import "./PRIVATE_SelectCommon.css";
import './UNSAFE_HighlightText.js';
import './PRIVATE_List.js';
import './UNSAFE_Flex.js';
import './UNSAFE_Skeleton.js';
import { Logger } from './utils/UNSAFE_logger.js';
import { F as Flex } from './Flex-46adb0e4.js';
import { H as HighlightText } from './HighlightText-1591802b.js';
import { L as List } from './List-1441b11d.js';
import { S as SkeletonContainer } from './SkeletonContainer-8f229433.js';
import { S as Skeleton } from './Skeleton-18c022d9.js';
import './UNSAFE_Floating.js';
import { Layer } from './UNSAFE_Layer.js';
import { dropdownStyles } from './PRIVATE_SelectCommon/themes/dropdownStyles.css.js';
import { coerceArray } from './utils/UNSAFE_arrayUtils.js';
import { F as Floating } from './Floating-2d909840.js';
import { usePress } from './hooks/UNSAFE_usePress.js';
import { DropdownArrowIcon as SvgCaretDown } from './PRIVATE_ThemedIcons/DropdownArrowIcon.js';
import './utils/UNSAFE_classNames.js';
import { c as classNames } from './classNames-f414daad.js';
import { CollectionGestureContext } from './hooks/PRIVATE_useCollectionGestureContext.js';
import { FormFieldContext } from './hooks/UNSAFE_useFormFieldContext.js';
import { InlineUserAssistance } from './UNSAFE_UserAssistance.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import { WindowOverlay } from './UNSAFE_WindowOverlay.js';
import { mobileDropdownStyles } from './PRIVATE_SelectCommon/themes/mobileDropdownStyles.css.js';
import './UNSAFE_Divider.js';
import { selectMobileDropdownStyles } from './PRIVATE_SelectCommon/themes/selectMobileDropdownStyles.css.js';
import { D as Divider } from './Divider-709d2810.js';
import './utils/PRIVATE_clientHints.js';
import { g as getClientHints } from './clientHints-26cce6ec.js';
import './utils/UNSAFE_keys.js';
import './hooks/UNSAFE_useId.js';
import './hooks/UNSAFE_useViewportIntersect.js';
import './hooks/UNSAFE_useTabbableMode.js';
import 'preact';
import './hooks/UNSAFE_useComponentTheme.js';
import './_curry1-7629ff3f.js';
import './_curry2-820ed778.js';
import './hooks/UNSAFE_useInteractionStyle.js';
import './utils/UNSAFE_mergeProps.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-bb17e901.js';
import './_has-057b6f90.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-89d8a00a.js';
import './keys-f766c992.js';
import './PRIVATE_List/themes/ListStyles.css.js';
import './ListStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3311d9ef.js';
import './UNSAFE_GroupedList/themes/redwood/GroupedListTheme.js';
import './UNSAFE_GroupedList/themes/GroupedListStyles.css.js';
import './GroupedListStyles.styles.css';
import './UNSAFE_GroupedList/themes/redwood/GroupedListBaseTheme.css.js';
import './UNSAFE_GroupedList/themes/redwood/GroupedListBaseTheme.styles.css';
import './PRIVATE_LoadMoreCollection.js';
import './LoadMoreCollection-213ad68a.js';
import './PRIVATE_Collection.js';
import './Collection-cb68c0ee.js';
import './PRIVATE_VirtualizedCollection.js';
import './VirtualizedCollection-435128ef.js';
import 'preact/compat';
import './UNSAFE_FocusTrap.js';
import './FocusTrap-9dc31155.js';
import './utils/PRIVATE_tabbableUtils.js';
import './_arity-cb2c60f3.js';
import './hooks/PRIVATE_useSelection.js';
import './hooks/UNSAFE_useUser.js';
import './index-f26154f2.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import './utils/PRIVATE_collectionUtils.js';
import './hooks/PRIVATE_useCurrentKey.js';
import './hooks/PRIVATE_useCollectionFocusRing.js';
import './hooks/PRIVATE_useTabbableModeSet.js';
import './hooks/PRIVATE_useItemAction.js';
import './UNSAFE_Selector.js';
import './PRIVATE_ThemedIcons/CheckboxOffIcon.js';
import './PRIVATE_Icons/CheckboxOff.js';
import './UNSAFE_Icon.js';
import './Icon-e04c1503.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-9a0cb8dc.js';
import './hooks/UNSAFE_useTooltip.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-50c5f5fb.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './useThemeInterpolations-48ee20a7.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles.css';
import './index-326d7a5f.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-33365337.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './PRIVATE_ThemedIcons/CheckboxOnIcon.js';
import './PRIVATE_Icons/CheckboxOn.js';
import './PRIVATE_ThemedIcons/CheckboxMixedIcon.js';
import './PRIVATE_Icons/CheckboxMixed.js';
import './UNSAFE_Selector/themes/SelectorStyles.css.js';
import './SelectorStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconTheme.js';
import './UNSAFE_Radio/themes/RadioIconStyles.css.js';
import './RadioIconStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.css.js';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconVariants.css.js';
import './RadioIconVariants.styles.css';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_interpolations/boxalignment.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-645317db.js';
import './utils/UNSAFE_interpolations/borders.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js';
import './UNSAFE_Skeleton/themes/SkeletonStyles.css.js';
import './SkeletonStyles.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js';
import './dropdownStyles.styles.css';
import './InlineHelpSource-6e0b687e.js';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceTheme.js';
import './UNSAFE_UserAssistance/themes/UserAssistanceStyles.css.js';
import './UserAssistanceStyles.styles.css';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.css.js';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceBaseTheme.styles.css';
import './UNSAFE_UserAssistance/themes/redwood/UserAssistanceVariants.css.js';
import './UNSAFE_ComponentMessage.js';
import './ComponentMessage-a41ebbdc.js';
import './PRIVATE_Message.js';
import './utils/PRIVATE_timer.js';
import './PRIVATE_Message/themes/MessageStyles.css.js';
import './MessageStyles.styles.css';
import './MessageCloseButton-b3e6b568.js';
import './UNSAFE_IconButton.js';
import './IconButton-d6cc2f62.js';
import './UNSAFE_BaseButton.js';
import './BaseButton-06d74a34.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-8ea4b106.js';
import './UNSAFE_Text.js';
import './Text-0dad47bb.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './PRIVATE_ThemedIcons/CloseIcon.js';
import './MessageDetail-558fff70.js';
import './MessageFormattingUtils-5a95e8e9.js';
import './utils/UNSAFE_getLocale.js';
import './utils/UNSAFE_stringUtils.js';
import './stringUtils-5f2d2e94.js';
import './Message.types-06b5fdd0.js';
import './MessageStartIcon-a9a1a453.js';
import './PRIVATE_ThemedIcons/MessageConfirmationIcon.js';
import './PRIVATE_ThemedIcons/MessageErrorIcon.js';
import './PRIVATE_ThemedIcons/MessageInfoIcon.js';
import './PRIVATE_ThemedIcons/MessageWarningIcon.js';
import './MessageSummary-29c1f7ef.js';
import './MessageTimestamp-d46daaa0.js';
import './MessageUtils-7e2e288a.js';
import './utils/UNSAFE_soundUtils.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerTheme.js';
import './UNSAFE_MessageBanner/themes/MessageBannerStyles.css.js';
import './MessageBannerStyles.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.css.js';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerBaseTheme.styles.css';
import './UNSAFE_MessageBanner/themes/redwood/MessageBannerVariants.css.js';
import './MessageBannerVariants.styles.css';
import './MessagesManager-6e35eea0.js';
import './PRIVATE_TransitionGroup.js';
import './hooks/UNSAFE_useMessagesContext.js';
import './UNSAFE_HiddenAccessible.js';
import './HiddenAccessible-6ca9b782.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageTheme.js';
import './UNSAFE_ComponentMessage/themes/ComponentMessageStyles.css.js';
import './ComponentMessageStyles.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.css.js';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageBaseTheme.styles.css';
import './UNSAFE_ComponentMessage/themes/redwood/ComponentMessageVariants.css.js';
import './ComponentMessageContainer-94ad5e1d.js';
import './hooks/UNSAFE_useFormContext.js';
import './hooks/UNSAFE_useInputGroupContext.js';
import './UNSAFE_Popup.js';
import './hooks/PRIVATE_useAnimationStatus.js';
import './UNSAFE_Popup/themes/PopupContract.css.js';
import './UNSAFE_Popup/themes/redwood/PopupTheme.js';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.css.js';
import './UNSAFE_Popup/themes/redwood/PopupBaseTheme.styles.css';
import './UNSAFE_Popup/themes/redwood/PopupVariants.css.js';
import './PopupStyles.styles.css';
import './CompactHelpSource-8d377623.js';
import './PRIVATE_ThemedIcons/HelpIcon.js';
import './hooks/UNSAFE_useFocusWithin.js';
import './useFocusWithin-f96a205e.js';
import './UNSAFE_Label/themes/redwood/LabelTheme.js';
import './UNSAFE_Label/themes/LabelStyles.css.js';
import './LabelStyles.styles.css';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.css.js';
import './UNSAFE_Label/themes/redwood/LabelBaseTheme.styles.css';
import './UNSAFE_Label/themes/redwood/LabelVariants.css.js';
import './UNSAFE_Divider/themes/DividerStyles.css.js';
import './DividerStyles.styles.css';
import './UNSAFE_WindowOverlay/themes/WindowOverlayStyles.css.js';
import './WindowOverlayStyles.styles.css';
import './UNSAFE_WindowOverlay/themes/WindowOverlayContract.css.js';
import './UNSAFE_WindowOverlay/themes/redwood/WindowOverlayTheme.js';
import './UNSAFE_WindowOverlay/themes/redwood/WindowOverlayBaseTheme.css.js';
import './UNSAFE_WindowOverlay/themes/redwood/WindowOverlayBaseTheme.styles.css';
import './UNSAFE_WindowOverlay/themes/redwood/WindowOverlayVariants.css.js';
import './mobileDropdownStyles.styles.css';
import './selectMobileDropdownStyles.styles.css';

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function renderItemText(item, itemText) {
    // if item-text is a string and the data has the specified field, return it;
    // otherwise log an error
    if (typeof itemText === 'string') {
        if (item.data?.hasOwnProperty(itemText)) {
            const retData = item.data[itemText];
            return String(retData);
        }
        Logger.error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);
        // return undefined if the field doesn't exist
        return undefined;
    }
    // if item-text is a function, call it to create a display label
    return itemText(item);
}

const itemStyles = "_1eswtdk";
const noOp = () => {};
function DefaultList({
  'aria-label': ariaLabel,
  currentItemVariant,
  currentKey,
  data,
  itemRenderer,
  itemText,
  onCurrentKeyChange,
  onItemAction,
  onLoadRange = noOp,
  onSelectionChange,
  searchText,
  selectedKeys,
  selectionMode
}) {
  const listItemRenderer = useCallback(listItemContext => {
    // specify the listItemContext props that we want to expose individually instead of
    // spreading the whole object so that we don't automatically include any new props that
    // may be added to it
    const itemRendererProps = {
      data: listItemContext.data,
      index: listItemContext.index,
      metadata: listItemContext.metadata,
      selector: listItemContext.selector,
      searchText,
      selectedKeys,
      onSelectionChange: ({
        target,
        value
      }) => {
        onSelectionChange?.({
          target,
          value: {
            all: false,
            keys: value
          }
        });
      }
    };
    const itemContext = {
      data: listItemContext.data,
      key: listItemContext.metadata.key,
      metadata: listItemContext.metadata
    };
    return itemRenderer ? itemRenderer(itemRendererProps) : jsxs(Flex, {
      children: [listItemContext.selector && listItemContext.selector(), jsx("div", {
        class: itemStyles,
        children: jsx(HighlightText, {
          matchText: searchText,
          children: renderItemText(itemContext, itemText)
        })
      })]
    });
  }, [itemRenderer, itemText, onSelectionChange, searchText, selectedKeys]);
  const keys = useMemo(() => {
    return {
      all: false,
      keys: selectedKeys ?? new Set()
    };
  }, [selectedKeys]);
  return jsx(List, {
    "aria-label": ariaLabel,
    allowTabbableMode: false,
    currentItemVariant: currentItemVariant,
    currentKey: currentKey,
    data: data ?? null,
    loadingIndicator: loadingIndicator,
    onCurrentKeyChange: onCurrentKeyChange,
    onItemAction: onItemAction,
    onLoadRange: onLoadRange,
    onSelectionChange: onSelectionChange,
    role: "listbox",
    selectedKeys: keys,
    selectionMode: selectionMode,
    children: context => listItemRenderer(context)
  });
}
/**
 * Custom 3 Skeleton loader for select multiple
 * TODO: to remove this once  is solved
 */
const loadingIndicator = jsx(SkeletonContainer, {
  minimumCount: 3,
  children: () => {
    return jsx(Flex, {
      height: "12x",
      align: "center",
      children: jsx(Skeleton, {
        height: "4x"
      })
    });
  }
});

const KEYS = {
    TAB: 'Tab',
    ENTER: 'Enter',
    NUMPAD_ENTER: 'NumpadEnter',
    ESC: 'Escape',
    SPACE: 'Space',
    LEFT: 'ArrowLeft',
    UP: 'ArrowUp',
    RIGHT: 'ArrowRight',
    DOWN: 'ArrowDown',
    SHIFT_LEFT: 'ShiftLeft',
    SHIFT_RIGHT: 'ShiftRight',
    CTRL_LEFT: 'ControlLeft',
    CTRL_RIGHT: 'ControlRight',
    ALT_LEFT: 'AltLeft',
    ALT_RIGHT: 'AltRight',
    PAGE_UP: 'PageUp',
    PAGE_DOWN: 'PageDown',
    HOME: 'Home',
    END: 'End',
    BACKSPACE: 'Backspace',
    DELETE: 'Delete'
};
const isControlKey = (event) => {
    switch (event.code) {
        case KEYS.SHIFT_LEFT:
        case KEYS.SHIFT_RIGHT:
        case KEYS.CTRL_LEFT:
        case KEYS.CTRL_RIGHT:
        case KEYS.ALT_LEFT:
        case KEYS.ALT_RIGHT:
            return true;
        default:
            return event.metaKey || event.ctrlKey;
    }
};
const isFunctionKey = (event) => {
    return /\bF([1-9]|1[0-2])\b/i.test(event.code);
};
const isControlOrFunctionKey = (event) => {
    return isControlKey(event) || isFunctionKey(event);
};
const isSimpleClick = (event) => {
    return event.button === 0 && !event.ctrlKey;
};
const preventDefault = (event) => {
    event.preventDefault();
};
const preventDefaultForCurrentTarget = (event) => {
    if (event.currentTarget === event.target) {
        event.preventDefault();
    }
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
const isPointOutside = (event, ref) => {
    const target = event.target;
    if (target) {
        const doc = getDocument(target);
        if (!doc.contains(target))
            return false;
    }
    return ref.every((elRef) => !elRef.current?.contains(target));
};
const getDocument = (node) => node?.ownerDocument ?? document;
const useOutsideMousedown = ({ isDisabled: disabled = false, ref, handler }) => {
    useEffect(() => {
        const refs = coerceArray(ref);
        if (!handler ||
            disabled ||
            (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1))
            return;
        const onMouseDown = (event) => {
            if (isPointOutside(event, refs)) {
                handler?.(event);
            }
        };
        const firstElRef = refs[0];
        const doc = getDocument(firstElRef.current);
        if (doc) {
            doc.addEventListener('mousedown', onMouseDown, true);
            return () => {
                doc.removeEventListener('mousedown', onMouseDown, true);
            };
        }
        return undefined;
    }, [disabled, handler, ref]);
};

const DEFAULT_PLACEMENT = 'bottom-start';
function Dropdown({ anchorRef, children, dropdownRef, id, isOpen, onAutoDismiss, onPosition }) {
    const [placement, setPlacement] = useState(DEFAULT_PLACEMENT);
    useEffect(() => {
        // reset the placement to the default when the dropdown closes, not opens, so that it doesn't
        // initially open in the previous position and then move to the default position on the
        // rerender after the state is updated
        if (!isOpen) {
            setPlacement(DEFAULT_PLACEMENT);
        }
    }, [isOpen, setPlacement]);
    const handlePosition = useCallback((positionData) => {
        // update the placement so that the dropdown stays where it is until there is a collision,
        // i.e. it no longer fits, instead of letting it try to move back to the default position
        // on every render
        setPlacement(positionData.placement);
        // call the callback that was passed in through props
        onPosition?.(positionData);
    }, [onPosition, setPlacement]);
    const handleAutoDismiss = useCallback((event) => {
        onAutoDismiss?.(event);
    }, [onAutoDismiss]);
    const handleKeyDown = useCallback((event) => {
        if (event.defaultPrevented || isControlOrFunctionKey(event)) {
            return;
        }
        switch (event.code) {
            case KEYS.ESC:
            case KEYS.TAB:
                handleAutoDismiss(event);
                break;
        }
    }, [handleAutoDismiss]);
    // use the mousedown event to be consistent with legacy JET and so that we're hiding the dropdown
    // on the same event where focus will transfer
    useOutsideMousedown({
        isDisabled: !isOpen,
        ref: [anchorRef, dropdownRef],
        handler: handleAutoDismiss
    });
    // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset
    const offsetValue = { mainAxis: 4, crossAxis: 0 };
    const inlineStyle = isOpen
        ? {
            minWidth: `${anchorRef.current?.offsetWidth}px`
        }
        : {};
    return !isOpen ? null : (jsx(Layer, { logicalParentRef: anchorRef, children: jsx(Floating, { anchorRef: anchorRef, sizeOptions: {
                isMaxHeightAdjusted: true,
                maxHeightCeiling: 400
            }, ref: dropdownRef, placement: placement, offsetValue: offsetValue, onPosition: handlePosition, children: jsx("div", { class: dropdownStyles.base, id: id, style: inlineStyle, onKeyDown: handleKeyDown, onMouseDown: preventDefaultForCurrentTarget, children: children }) }) }));
}

// TODO: replace this with var(--oj-button-height) once it is available
const ojButtonHeight = '2.75rem';
// TODO: replace this with var(--oj-button-sm-height) once it is available
const ojButtonSmHeight = '2.25rem';
// TODO: replace this with var(--oj-button-border-radius) once it is available
const ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';
// TODO: replace this with var(--oj-button-borderless-chrome-text-color) once it is available
const ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';
// TODO: replace this with var (--oj-button-borderless-chrome-text-color-disabled) once it is available
const ojButtonBorderlessChromeTextColorDisabled = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)';
// TODO: replace this with var(--oj-button-borderless-chrome-text-color-hover) once it is available
const ojButtonBorderlessChromeTextColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';
// TODO: replace this with var(--oj-button-borderless-chrome-bg-color-hover) once it is available
const ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';
// TODO: replace this with var(--oj-button-borderless-chrome-border-color-hover) once it is available
const ojButtonBorderlessChromeBorderColorHover = 'transparent';
// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available
const ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';
const rootStyles$3 = {
  base: "_1hw79jq",
  sizeMd: "osnrmf",
  sizeSm: "_10cpwdl",
  enabled: "cb9pd7",
  disabled: "rmx6gs"
};
const noop = () => {};
function DropdownArrow({
  isDisabled = false,
  onClick,
  size = 'md'
}) {
  const preventDefault = useCallback(event => {
    event.preventDefault();
  }, []);
  const {
    pressProps
  } = usePress(onClick ?? noop, {
    isDisabled
  });
  const styleClasses = classNames([rootStyles$3.base, size === 'sm' ? rootStyles$3.sizeSm : rootStyles$3.sizeMd, isDisabled ? rootStyles$3.disabled : rootStyles$3.enabled]);
  return jsx("span", {
    "aria-hidden": "true",
    class: styleClasses,
    tabIndex: -1,
    onMouseDown: preventDefault,
    ...pressProps,
    children: jsx(SvgCaretDown, {})
  });
}

const rootStyles$2 = {
  base: "_7ew2di",
  // TODO: These should really be applied directly to the child ListView so that the content
  // displays under the padding when scrolled, but we can't apply styles to the child collection.
  // TODO: Also need to figure out how to determine whether the collection is a ListView (in
  // the collectionRenderer case) in order to apply this styling.
  topGap: "_8a0yjj",
  bottomGap: "_1ik89q2",
  loading: "md5w5g"
};
function DropdownList({
  children,
  hasBottomGap = true,
  isLoading = false
}) {
  const styleClasses = classNames([rootStyles$2.base, rootStyles$2.topGap, hasBottomGap && rootStyles$2.bottomGap, isLoading && rootStyles$2.loading]);
  return jsx(CollectionGestureContext.Provider, {
    value: 'embedded',
    children: jsx("div", {
      class: styleClasses,
      onMouseDown: preventDefaultForCurrentTarget,
      children: children
    })
  });
}

const rootStyles$1 = "_14wyexj";
function DropdownUserAssistance(props) {
  // Prevent the focus from transferring when the user clicks on an empty/non-clickable area
  // of the user assistance
  const handleMouseDown = useCallback(event => {
    // Don't call preventDefault when the user clicks on the help source link, so that the
    // focus is allowed to transfer in that case.
    if (event.target?.tagName !== 'A') {
      event.preventDefault();
    }
  }, []);
  return jsx(FormFieldContext.Provider, {
    value: {
      isFocused: true
    },
    children: jsx("div", {
      class: rootStyles$1,
      onMouseDown: handleMouseDown,
      children: jsx(InlineUserAssistance, {
        ...props
      })
    })
  });
}

const rootStyles = "_29d6ea";
function EmptyResults() {
  const translations = useTranslationBundle('@oracle/oraclejet-preact');
  // TODO: figure out whether we need a separate resource string for this message;
  // (JET-53984 - Preact Select* components: empty results message)
  // call preventDefault for mousedown on this div so that focus does not transfer from
  // the input
  return jsx("div", {
    class: rootStyles,
    onMouseDown: preventDefaultForCurrentTarget,
    children: translations.select_noMatchesFound()
  });
}

function MobileDropdown({ children, id, isOpen }) {
    return !isOpen ? null : (jsx(Layer, { children: jsx(WindowOverlay, { children: jsx("div", { id: id, class: mobileDropdownStyles.base, role: "dialog", "aria-modal": "true", children: jsx(Flex, { width: "100%", height: "100%", maxHeight: "100%", direction: "column", children: children }) }) }) }));
}

function SelectMobileDropdown({ children, footer, header, id, isOpen }) {
    return (jsxs(MobileDropdown, { id: id, isOpen: isOpen, children: [header, jsx(Divider, {}), jsx("div", { class: selectMobileDropdownStyles.content, children: children }), jsx(Divider, {}), footer] }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Helper function to determine whether the current device is a mobile device
 * @returns true if running on a mobile device, false otherwise
 */
function isMobile() {
    const deviceType = getClientHints().deviceType;
    return deviceType === 'phone' || deviceType === 'tablet';
}
/**
 * Helper function to determine whether the current device is a phone
 * @returns true if running on a phone, false otherwise
 */
function isPhone() {
    return getClientHints().deviceType === 'phone';
}
/**
 * Helper function to determine whether the current device is a tablet
 * @returns true if running on a tablet, false otherwise
 */
function isTablet() {
    return getClientHints().deviceType === 'tablet';
}
function isBeforeDataFetch(data) {
    return data.sizePrecision === 'atLeast' && data.totalSize === 0;
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Hook that manages state and behavior for a Select* component.  This hook creates state
 * variables and event listeners, returning properties to apply to components internally
 * rendered by a Select* component, as well as state information.
 *
 * @param data Specifies data for the dropdown list.
 * @param inputRef Ref to the input element.
 * @param isFocused Specifies whether the component has focus.
 * @param onFilter Callback function to trigger loading data for the dropdown list,
 * which may or may not be filtered by user entered text.
 *
 * @returns Component state and event listeners.
 */
function useSelectCommon({ data, inputRef, isFocused, onFilter }) {
    const mainFieldRef = useRef(null);
    const dropdownRef = useRef(null);
    const [isDropdownOpen, setDropdownOpen] = useState(false);
    const [isDropdownAbove, setDropdownAbove] = useState(false);
    const [currentRow, setCurrentRow] = useState({
        rowKey: undefined
    });
    const [selectedKeys, setSelectedKeys] = useState();
    const [isUserFiltering, setUserFiltering] = useState(false);
    const [userInput, setUserInput] = useState();
    const [searchText, setSearchText] = useState();
    const onMouseDown = useCallback((event) => {
        // const target = event.target as HTMLElement;
        if (event.defaultPrevented || !isSimpleClick(event)) {
            return;
        }
        if (!isDropdownOpen) {
            setDropdownOpen(true);
        }
        // this is needed to focus the input when clicking on the inside label when there is no
        // value;  otherwise the component looks focused but doesn't actually have physical focus
        setTimeout(function () {
            inputRef.current?.focus();
        }, 0);
    }, [inputRef, isDropdownOpen]);
    const handleDropdownArrowClick = useCallback(() => {
        setDropdownOpen(!isDropdownOpen);
        // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes
        inputRef.current?.focus();
    }, [inputRef, isDropdownOpen]);
    const handleDropdownAutoDismiss = useCallback((event) => {
        if (isDropdownOpen) {
            setDropdownOpen(false);
            switch (event?.type) {
                case 'keydown':
                    const keyboardEvent = event;
                    switch (keyboardEvent.code) {
                        case KEYS.ESC:
                            // focus the input when the user cancels out of the dropdown
                            inputRef.current?.focus();
                            break;
                        default:
                            break;
                    }
                    break;
                case 'mousedown':
                    // if focus is in the dropdown, focus the input before the dropdown is hidden so that
                    // focus will transfer correctly when the target is not focusable;
                    // otherwise the text cursor appears in the input again
                    if (dropdownRef.current?.contains(document.activeElement)) {
                        inputRef.current?.focus();
                    }
                    break;
                default:
                    break;
            }
        }
    }, [inputRef, isDropdownOpen]);
    const handleDropdownPosition = useCallback((data) => {
        setDropdownAbove(data.placement.startsWith('top'));
    }, []);
    const handleUpDownArrowKeys = useCallback((event) => {
        if (!isDropdownOpen) {
            setDropdownOpen(true);
        }
        else {
            // transfer physical focus into the dropdown
            const firstFocusableElem = dropdownRef.current?.querySelector('[tabindex="0"]');
            firstFocusableElem?.focus();
            // if there is no current item set, make the first item current
            if (data !== undefined && currentRow.rowKey === undefined) {
                setCurrentRow({ rowKey: data?.data?.[0]?.metadata?.key });
            }
        }
        // prevent the page from scrolling
        event.preventDefault();
    }, [currentRow, data, isDropdownOpen]);
    const handleMainFieldKeyDown = useCallback((event) => {
        // const target = event.target as HTMLElement;
        // ignore control key and function key
        if (isControlOrFunctionKey(event)) {
            return;
        }
        switch (event.code) {
            case KEYS.PAGE_UP:
            case KEYS.PAGE_DOWN:
                // prevent the page from scrolling
                event.preventDefault();
                return;
            case KEYS.UP:
            case KEYS.DOWN:
                // prevent the page from scrolling
                event.preventDefault();
                break;
            case KEYS.ESC:
                if (isDropdownOpen) {
                    setDropdownOpen(false);
                    event.preventDefault();
                    // JET-53183 - core pack compat: stop propagation of handled events
                    // we don't want a parent collection component to stop editing the row when we close
                    // the dropdown
                    event.stopPropagation();
                }
                break;
            default:
                break;
        }
    }, [isDropdownOpen]);
    const handleMainFieldKeyUp = useCallback((event) => {
        // ignore control key and function key
        if (isControlOrFunctionKey(event)) {
            return;
        }
        switch (event.code) {
            case KEYS.UP:
            case KEYS.DOWN:
                handleUpDownArrowKeys(event);
                break;
            default:
                break;
        }
    }, [handleUpDownArrowKeys]);
    const handleInput = useCallback((detail) => {
        if (!isDropdownOpen) {
            setDropdownOpen(true);
        }
        setUserFiltering(true);
        setUserInput(detail.value);
        const str = detail.value?.trim();
        setSearchText(str);
        onFilter?.({ searchText: str });
    }, [isDropdownOpen, onFilter]);
    const onCurrentKeyChange = useCallback((detail) => {
        setCurrentRow({ rowKey: detail.value });
    }, []);
    const stopFiltering = useCallback(() => {
        setUserFiltering(false);
        setUserInput('');
        setSearchText('');
    }, []);
    // the user is not actively filtering if the dropdown is closed and the component doesn't
    // have focus
    useEffect(() => {
        if (!isDropdownOpen && !isFocused && isUserFiltering) {
            stopFiltering();
        }
    }, [isDropdownOpen, isFocused, isUserFiltering, stopFiltering]);
    // need to call onFilter with undefined searchText when the dropdown opens and the
    // user is NOT filtering
    useEffect(() => {
        if (isDropdownOpen && !isUserFiltering) {
            onFilter?.({ searchText: undefined });
        }
    }, [isDropdownOpen, isUserFiltering, onFilter]);
    // when the dropdown closes, reset the isDropdownAbove flag
    useEffect(() => {
        if (!isDropdownOpen) {
            setDropdownAbove(false);
        }
    }, [isDropdownOpen]);
    return {
        currentRow,
        dropdownRef,
        handleDropdownArrowClick,
        handleDropdownAutoDismiss,
        handleDropdownPosition,
        handleInput,
        handleMainFieldKeyDown,
        handleMainFieldKeyUp,
        handleUpDownArrowKeys,
        isDropdownAbove,
        isDropdownOpen,
        // the field should remain to look focused while the dropdown is open,
        // in case physical focus is in the dropdown
        isFocused: isFocused || isDropdownOpen,
        isUserFiltering,
        mainFieldRef,
        onCurrentKeyChange,
        onMouseDown,
        searchText,
        selectedKeys,
        setCurrentRow,
        setDropdownOpen,
        setSelectedKeys,
        setUserInput,
        stopFiltering,
        userInput
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { DefaultList, Dropdown, DropdownArrow, DropdownList, DropdownUserAssistance, EmptyResults, KEYS, MobileDropdown, SelectMobileDropdown, isBeforeDataFetch, isControlKey, isControlOrFunctionKey, isFunctionKey, isMobile, isPhone, isSimpleClick, isTablet, preventDefault, preventDefaultForCurrentTarget, renderItemText, useSelectCommon };
//# sourceMappingURL=PRIVATE_SelectCommon.js.map
