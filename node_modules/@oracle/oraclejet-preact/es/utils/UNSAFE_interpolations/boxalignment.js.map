{"version":3,"file":"boxalignment.js","sources":["../../../../src/utils/UNSAFE_interpolations/boxalignment/boxalignment.ts"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport keys from 'ramda/src/keys';\nimport { Size, sizeToCSS } from '../../../utils/UNSAFE_size';\nimport { coerceArray } from '../../../utils/UNSAFE_arrayUtils';\n\n// boxalignment are styles that help with alignment for Grid/Flex styles, like justifyContent,\n// align, and gap.\n\nconst alignStyles = {\n  baseline: cssProps`${{\n    alignItems: 'baseline'\n  }}`,\n\n  center: cssProps`${{\n    alignItems: 'center'\n  }}`,\n\n  end: cssProps`${{\n    alignItems: 'flex-end'\n  }}`,\n\n  start: cssProps`${{\n    alignItems: 'flex-start'\n  }}`,\n\n  inherit: cssProps`${{\n    alignItems: 'inherit'\n  }}`,\n\n  initial: cssProps`${{\n    alignItems: 'initial'\n  }}`,\n\n  stretch: cssProps`${{\n    alignItems: 'stretch'\n  }}`\n};\n\nconst justifyStyles = {\n  center: cssProps`${{\n    justifyContent: 'center'\n  }}`,\n\n  end: cssProps`${{\n    justifyContent: 'flex-end'\n  }}`,\n\n  start: cssProps`${{\n    justifyContent: 'flex-start'\n  }}`,\n\n  inherit: cssProps`${{\n    justifyContent: 'inherit'\n  }}`,\n\n  initial: cssProps`${{\n    justifyContent: 'initial'\n  }}`,\n\n  around: cssProps`${{\n    justifyContent: 'space-around'\n  }}`,\n\n  between: cssProps`${{\n    justifyContent: 'space-between'\n  }}`,\n\n  evenly: cssProps`${{\n    justifyContent: 'space-evenly'\n  }}`\n};\n\n// See https://stackoverflow.com/questions/55377365/what-does-keyof-typeof-mean-in-typescript\n// typeof operator gives you the type of an object\n// then keyof operator gives you the literal type union\n// derive the types of each property from the implementation\nexport type BoxAlignmentProps = {\n  align?: keyof typeof alignStyles;\n  gap?: Size | [Size] | [Size, Size];\n  justify?: keyof typeof justifyStyles;\n};\n\nconst boxAlignmentInterpolations = {\n  align: ({ align }: Pick<BoxAlignmentProps, 'align'>) =>\n    align === undefined\n      ? {}\n      : {\n          class: alignStyles[align]\n        },\n  justify: ({ justify }: Pick<BoxAlignmentProps, 'justify'>) =>\n    justify === undefined\n      ? {}\n      : {\n          class: justifyStyles[justify]\n        },\n  // See https://developer.mozilla.org/en-US/docs/Web/CSS/gap\n  gap: ({ gap }: Pick<BoxAlignmentProps, 'gap'>) => {\n    if (gap === undefined) {\n      return {};\n    } else {\n      const [rowSize, columnSize = rowSize] = coerceArray(gap) as [Size] | [Size, Size];\n      return { gap: `${sizeToCSS(rowSize)} ${sizeToCSS(columnSize)}` };\n    }\n  }\n};\n\n// These consts are exported so they can be used in stories to show the allowed options\n// e.g., See Flex.stories.tsx:   align: {control: 'select',options: aligns}\nconst aligns = keys(alignStyles);\nconst justifies = keys(justifyStyles);\n\nexport { aligns, justifies, boxAlignmentInterpolations };\n"],"names":["alignStyles","justifyStyles","boxAlignmentInterpolations","class","align","justify","gap","rowSize","columnSize","coerceArray","sizeToCSS","aligns","keys","justifies"],"mappings":";;;;;;;;;;;AAKA;AACA;AAEA,MAAAA,WAAA,GAAA;;;;;;;;;AA8BA,MAAAC,aAAA,GAAA;;;;;;;;;;AA4CA,MAAAC,0BAAA,GAAA;;;8BAGM,EAAA,GACA;IACIC,KAAA,EAAAH,WAAA,CAAAI,KAAA,CAAA;GACD;;;gCAGH,EAAA,GACA;IACID,KAAA,EAAAF,aAAA,CAAAI,OAAA,CAAA;GACD;;AAEPC,EAAAA,GAAA,EAAAA,CAAA;AAAAA,IAAAA,GAAAA;AAAA,GAAA,KAAA;;AAEI,MAAA,OAAA,EAAA,CAAA;AACD,KAAA,MAAM;MACL,MAAA,CAAAC,OAAA,EAAAC,UAAA,GAAAD,OAAA,CAAA,GAAAE,WAAA,CAAAH,GAAA,CAAA,CAAA;MACA,OAAA;QAAAA,GAAA,EAAA,CAAAI,EAAAA,SAAA,CAAAH,OAAA,CAAA,CAAAG,CAAAA,EAAAA,SAAA,CAAAF,UAAA,CAAA,CAAA,CAAA;OAAA,CAAA;AACD,KAAA;;;AAIL;AACA;AACA,MAAAG,MAAA,GAAAC,MAAA,CAAAZ,WAAA,EAAA;AACA,MAAAa,SAAA,GAAAD,MAAA,CAAAX,aAAA;;;;"}