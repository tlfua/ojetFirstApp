{"version":3,"file":"PRIVATE_floatingUtils.js","sources":["../../../src/utils/PRIVATE_floatingUtils/positionUtils.ts","../../../src/utils/PRIVATE_floatingUtils/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { RtlSide } from '../../UNSAFE_Floating';\n\n/**\n * Returns the normalized Position depending on the reading direction\n * @param side The side that should be normalized\n * @param direction The reading direction\n * @returns The normalized 'right' or 'left' position if the side was 'start' or 'end', otherwise returns unchanged position\n */\nexport const normalizePosition = (side: RtlSide, direction: 'rtl' | 'ltr'): RtlSide => {\n  const sideHashLtr = {\n    start: 'left',\n    end: 'right'\n  };\n  const sideHashRtl = {\n    start: 'right',\n    end: 'left'\n  };\n  if (direction === 'rtl') {\n    return side.replace(\n      /start|end/g,\n      (matched) => (sideHashRtl as any)[matched]\n    ) as RtlSide;\n  } else {\n    return side.replace(\n      /start|end/g,\n      (matched) => (sideHashLtr as any)[matched]\n    ) as RtlSide;\n  }\n};\n/**\n * Returns the reversed normalized Position depending on the reading direction\n * @param side The side that should be reversed\n * @param direction The reading direction\n * @returns The 'start' or 'end' position if the side was 'right' or 'left', otherwise returns unchanged position\n */\nexport const reverseNormalizePosition = (\n  side: RtlSide,\n  direction: 'rtl' | 'ltr'\n): RtlSide => {\n  const sideHashLtr = {\n    left: 'start',\n    right: 'end'\n  };\n  const sideHashRtl = {\n    right: 'start',\n    left: 'end'\n  };\n  if (direction === 'rtl') {\n    return side.replace(\n      /left|right/g,\n      (matched) => (sideHashRtl as any)[matched]\n    ) as RtlSide;\n  } else {\n    return side.replace(\n      /left|right/g,\n      (matched) => (sideHashLtr as any)[matched]\n    ) as RtlSide;\n  }\n};","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * PRIVATE Components not intended for outside use,\n */\nexport { normalizePosition, reverseNormalizePosition } from './positionUtils';\n"],"names":[],"mappings":";AAAA;;;;;;AAMG;AAIH;;;;;AAKG;MACU,iBAAiB,GAAG,CAAC,IAAa,EAAE,SAAwB,KAAa;AACpF,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,KAAK,EAAE,MAAM;AACb,QAAA,GAAG,EAAE,OAAO;KACb,CAAC;AACF,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,KAAK,EAAE,OAAO;AACd,QAAA,GAAG,EAAE,MAAM;KACZ,CAAC;IACF,IAAI,SAAS,KAAK,KAAK,EAAE;AACvB,QAAA,OAAO,IAAI,CAAC,OAAO,CACjB,YAAY,EACZ,CAAC,OAAO,KAAM,WAAmB,CAAC,OAAO,CAAC,CAChC,CAAC;AACd,KAAA;AAAM,SAAA;AACL,QAAA,OAAO,IAAI,CAAC,OAAO,CACjB,YAAY,EACZ,CAAC,OAAO,KAAM,WAAmB,CAAC,OAAO,CAAC,CAChC,CAAC;AACd,KAAA;AACH,EAAE;AACF;;;;;AAKG;MACU,wBAAwB,GAAG,CACtC,IAAa,EACb,SAAwB,KACb;AACX,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,KAAK,EAAE,KAAK;KACb,CAAC;AACF,IAAA,MAAM,WAAW,GAAG;AAClB,QAAA,KAAK,EAAE,OAAO;AACd,QAAA,IAAI,EAAE,KAAK;KACZ,CAAC;IACF,IAAI,SAAS,KAAK,KAAK,EAAE;AACvB,QAAA,OAAO,IAAI,CAAC,OAAO,CACjB,aAAa,EACb,CAAC,OAAO,KAAM,WAAmB,CAAC,OAAO,CAAC,CAChC,CAAC;AACd,KAAA;AAAM,SAAA;AACL,QAAA,OAAO,IAAI,CAAC,OAAO,CACjB,aAAa,EACb,CAAC,OAAO,KAAM,WAAmB,CAAC,OAAO,CAAC,CAChC,CAAC;AACd,KAAA;AACH;;AClEA;;;;;;AAMG;;;;"}