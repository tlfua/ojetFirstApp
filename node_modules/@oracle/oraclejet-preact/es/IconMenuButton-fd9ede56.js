/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import './UNSAFE_ButtonLayout.js';
import './PRIVATE_ThemedIcons/ChevronDownIcon.js';
import './UNSAFE_Menu.js';
import { useMenuAction } from './hooks/UNSAFE_useMenuAction.js';
import { useTooltip } from './hooks/UNSAFE_useTooltip.js';
import './UNSAFE_BaseButton.js';
import { Fragment } from 'preact';
import { forwardRef } from 'preact/compat';
import { useRef, useImperativeHandle } from 'preact/hooks';
import { mergeProps } from './utils/UNSAFE_mergeProps.js';
import { B as BaseButton } from './BaseButton-06d74a34.js';
import { B as ButtonLayout } from './ButtonLayout-8ea4b106.js';
import { S as SvgChevronDown } from './index-8b1d59ff.js';
import { M as Menu } from './Menu-31a689f5.js';

/**
 * A IconMenuButton is a combined action and menu button.
 */
const IconMenuButton = forwardRef(({ children, tooltip, accessibleLabel, variant = 'outlined', isDisabled = false, isMenuOpen = false, isIconOnly = false, onToggleMenu, size = 'md', width, icon, 'aria-describedby': ariaDescribedBy }, ref) => {
    const buttonRef = useRef(null);
    useImperativeHandle(ref, () => buttonRef.current, [buttonRef]);
    const { triggerProps, menuProps } = useMenuAction({
        isDisabled: isDisabled,
        onToggleMenu: onToggleMenu,
        isMenuOpen: isMenuOpen,
        anchorRef: buttonRef
    });
    const { tooltipContent, tooltipProps } = useTooltip({
        text: tooltip ? tooltip : accessibleLabel,
        isDisabled: isMenuOpen
    });
    const rootButton = (jsx(Fragment, { children: jsxs(BaseButton, { ...mergeProps(tooltipProps, triggerProps), styling: isMenuOpen ? ['min', 'active'] : ['min'], isDisabled: isDisabled, variant: variant, width: width, size: size, ref: buttonRef, "aria-describedby": ariaDescribedBy, "aria-label": accessibleLabel ?? tooltip, children: [jsx(ButtonLayout, { display: 'icons', startIcon: icon, endIcon: isIconOnly ? null : jsx(SvgChevronDown, {}), size: size }), tooltipContent] }) }));
    return isDisabled ? (rootButton) : (jsxs(Fragment, { children: [rootButton, jsx(Menu, { ...menuProps, children: children })] }));
});

export { IconMenuButton as I };
//# sourceMappingURL=IconMenuButton-fd9ede56.js.map
