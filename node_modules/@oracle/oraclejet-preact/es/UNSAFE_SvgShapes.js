/* @oracle/oraclejet-preact: 15.1.2 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import './utils/UNSAFE_classNames.js';
import { styles } from './UNSAFE_SvgShapes/themes/SvgShapesStyles.css.js';
import { c as classNames } from './classNames-f414daad.js';
import './SvgShapesStyles.styles.css';

const Ellipse = ({ cx, cy, rx, ry, scaleX, scaleY, tx, ty, fill, stroke }) => {
    return (jsx("ellipse", { cx: cx + tx, cy: cy + ty, rx: rx * scaleX, ry: ry * scaleY, fill: fill, stroke: stroke, strokeWidth: 1, vectorEffect: "non-scaling-stroke" }));
};

const HUMAN_PATH_CMDS = 'M 49.973566845209916 0 C 35.487299168442284 0 23.71094058258365 12.495019801980108 23.71094058258365 27.90841584158416 C 23.71094058258365 43.32181188118821 35.487299168442284 55.81683168316832 49.973566845209916 55.81683168316832 C 64.4599001785434 55.81683168316832 76.23619310783617 43.32181188118821 76.23619310783617 27.90841584158416 C 76.23619310783617 12.495019801980108 64.4599001785434 0 49.973566845209916 0 z M 19.607405229048297 50.541460396039604 C 10.737203208846282 57.250371287128864 -3.3723927507496847 73.51485148514851 0.7311426027856692 89.17079207920791 C 23.783162804806032 103.5633663366335 68.33114260278562 105.4951732673267 100.03669815834124 88.31992574257426 C 101.26447593611908 71.04665841584145 91.18619310783609 58.7152227722771 79.51902139066446 50.541460396039604 C 64.74629411793718 75.89591584158418 36.02154664318971 70.79344059405938 19.607405229048297 50.541460396039604 z';
// only human is supported for now.
const Path = ({ scaleX, scaleY, tx, ty, fill, stroke }) => {
    return (jsx("path", { fill: fill, stroke: stroke, strokeWidth: 1, vectorEffect: "non-scaling-stroke", transform: `translate(${tx} ${ty}) scale(${scaleX} ${scaleY})`, d: HUMAN_PATH_CMDS }));
};

const STAR_POLYGON_CMDS = [
    -50, -11.22, -16.69, -17.94, 0, -47.55, 16.69, -17.94, 50, -11.22, 26.69, 13.8, 30.9, 47.56, 0,
    33.42, -30.9, 47.56, -26.69, 13.8
];
const Polygon = ({ type, scaleX, scaleY, tx, ty, height, width, fill, stroke }) => {
    let cmds;
    const cx = width / 2;
    const cy = height / 2;
    const s = Math.min(width, height);
    const half = s / 2;
    const sixth = s / 6;
    switch (type) {
        case 'star': {
            cmds = STAR_POLYGON_CMDS;
            tx = 50;
            ty = 50;
            break;
        }
        case 'triangleUp': {
            cmds = [cx - half, cy + half, cx, cy - half, cx + half, cy + half];
            break;
        }
        case 'triangleDown': {
            cmds = [cx - half, cy - half, cx, cy + half, cx + half, cy - half];
            break;
        }
        case 'diamond': {
            cmds = [cx - half, cy, cx, cy - half, cx + half, cy, cx, cy + half];
            break;
        }
        case 'plus': {
            cmds = [
                cx - half,
                cy - sixth,
                cx - sixth,
                cy - sixth,
                cx - sixth,
                cy - half,
                cx + sixth,
                cy - half,
                cx + sixth,
                cy - sixth,
                cx + half,
                cy - sixth,
                cx + half,
                cy + sixth,
                cx + sixth,
                cy + sixth,
                cx + sixth,
                cy + half,
                cx - sixth,
                cy + half,
                cx - sixth,
                cy + sixth,
                cx - half,
                cy + sixth
            ];
            break;
        }
    }
    return (jsx("polygon", { fill: fill, stroke: stroke, strokeWidth: 1, vectorEffect: "non-scaling-stroke", transform: `translate(${tx} ${ty}) scale(${scaleX} ${scaleY})`, points: cmds.join(' ') }));
};

const Rect = ({ x, y, width, height, scaleX, scaleY, tx, ty, fill, stroke }) => {
    return (jsx("rect", { x: x + tx, y: y + ty, width: width * scaleX, height: height * scaleY, fill: fill, stroke: stroke, strokeWidth: 2, vectorEffect: "non-scaling-stroke" }));
};

const GOLDEN_RATIO = 1.62;
const HUMAN_SCALE_X = 0.8; // preserve legacy human marker scale w/h = 0.8
const Marker = ({ scale, type, height = 100, width = 100, fill, stroke, preserveRectAspectRatio }) => {
    const scaleX = type === 'human' ? scale * HUMAN_SCALE_X : scale;
    const scaleY = type === 'rectangle' && preserveRectAspectRatio ? scale / GOLDEN_RATIO : scale;
    const tx = ((1 - scaleX) * width) / 2;
    const ty = ((1 - scaleY) * height) / 2;
    const ry = (height / 2) * (type === 'ellipse' && preserveRectAspectRatio ? 1 / GOLDEN_RATIO : 1);
    switch (type) {
        case 'human': {
            return (jsx(Path, { type: "human", tx: tx, ty: ty, fill: fill, stroke: stroke, width: width, height: height, scaleX: scaleX, scaleY: scaleY }));
        }
        case 'rectangle':
        case 'square': {
            return (jsx(Rect, { x: 0, y: 0, width: width, height: height, scaleX: scaleX, scaleY: scaleY, fill: fill, stroke: stroke, tx: tx, ty: ty }));
        }
        case 'circle':
        case 'ellipse': {
            return (jsx(Ellipse, { cx: width / 2, cy: height / 2, scaleX: scaleX, scaleY: scaleY, fill: fill, stroke: stroke, rx: width / 2, ry: ry, tx: 0, ty: 0 }));
        }
        default: {
            return (jsx(Polygon, { fill: fill, stroke: stroke, type: type, scaleX: scaleX, scaleY: scale, tx: tx, ty: ty, height: height, width: width }));
        }
    }
};

const Line = ({ lineWidth = 3, lineStyle = 'solid', color, lineLength }) => {
    const isNotSolid = lineStyle != 'solid';
    const lineExtension = lineLength != undefined ? lineLength : 0;
    const { lineBaseStyle, lineDottedStyle, lineDashedStyle } = styles;
    return (jsx("line", { x1: 0 - lineExtension, y1: 50, x2: 100 + lineExtension, y2: 50, stroke: color, strokeWidth: lineWidth, class: classNames([
            lineBaseStyle,
            isNotSolid ? (lineStyle === 'dotted' ? lineDottedStyle : lineDashedStyle) : ''
        ]) }));
};

const MARKER_SHAPE_RATIO = 0.6;
const MAX_SCALE = 1;
const SvgSymbol = ({ markerShape, lineStyle = 'none', lineLength, lineWidth, lineColor, borderColor, markerColor, setAspectRatioNone }) => {
    const markerScale = lineStyle != 'none' ? MARKER_SHAPE_RATIO : MAX_SCALE;
    return (jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 100 100", class: styles.svgSymbolBaseStyle, preserveAspectRatio: setAspectRatioNone ? 'none' : undefined, children: [lineStyle != 'none' && (jsx(Line, { lineStyle: lineStyle, lineWidth: lineWidth, color: lineColor, lineLength: lineLength })), markerShape != 'none' && (jsx(Marker, { type: markerShape, scale: markerScale, height: 100, width: 100, preserveRectAspectRatio: !setAspectRatioNone, fill: markerColor, stroke: borderColor }))] }));
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { SvgSymbol };
//# sourceMappingURL=UNSAFE_SvgShapes.js.map
