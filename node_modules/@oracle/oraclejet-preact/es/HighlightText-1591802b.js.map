{"version":3,"file":"HighlightText-1591802b.js","sources":["../../src/UNSAFE_HighlightText/HighlightText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Fragment } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nconst highlightStyles = cssProps`${{\n  fontWeight: 700\n}}`;\n\ntype Props = {\n  /**\n   * The text string to apply highlighting to.\n   */\n  children?: string;\n  /**\n   * The text string to match.\n   */\n  matchText?: string;\n};\n\n/**\n * Renders a text string with highlighting applied to the given text to match.\n */\nexport function HighlightText({ children = '', matchText = '' }: Props) {\n  return highlighter(children, matchText);\n}\n\nconst HIGHLIGHT_TOKEN = '__@@__';\nconst HIGHLIGHT_PATTERN = `${HIGHLIGHT_TOKEN}$&${HIGHLIGHT_TOKEN}`;\n\nfunction highlighter(unhighlightedText: string, matchText: string) {\n  if (matchText.length > 0 && unhighlightedText.length > 0) {\n    const escapedMatchText = escapeRegExp(matchText);\n    const highlightedText = unhighlightedText.replace(\n      new RegExp(escapedMatchText, 'gi'),\n      HIGHLIGHT_PATTERN\n    );\n    const tokens = highlightedText.split(HIGHLIGHT_TOKEN);\n    const nodes = tokens.map((current, index) =>\n      index % 2 == 0 ? current : <span class={highlightStyles}>{current}</span>\n    );\n    return <Fragment>{nodes}</Fragment>;\n  }\n  return <Fragment>{unhighlightedText}</Fragment>;\n}\n\nfunction escapeRegExp(str: string) {\n  // copied from:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n  return str.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n"],"names":["highlightStyles","HighlightText","children","matchText","highlighter","HIGHLIGHT_TOKEN","HIGHLIGHT_PATTERN","unhighlightedText","escapedMatchText","escapeRegExp","highlightedText","replace","RegExp","nodes","tokens","map","current","index","_jsx","class","Fragment","str"],"mappings":";;;;;AAWA,MAAAA,eAAA,GAEC,UAAA,CAAA;AAaD;;AAEG;AACH,SAAAC,aAAAA,CAAA;AAAAC,EAAAA,QAAA,GAAA,EAAA;AAAAC,EAAAA,SAAA,GAAA,EAAA;AAAA,CAAA,EAAA;AACE,EAAA,OAAAC,WAAA,CAAAF,QAAA,EAAAC,SAAA,CAAA,CAAA;AACF,CAAA;AAEA,MAAAE,eAAA,GAAA,QAAA,CAAA;AACA,MAAAC,iBAAA,GAAA,CAAA,EAAAD,eAAA,CAAA,EAAA,EAAAA,eAAA,CAAA,CAAA,CAAA;AAEA,SAAAD,WAAAA,CAAAG,iBAAA,EAAAJ,SAAA,EAAA;;AAEI,IAAA,MAAAK,gBAAA,GAAAC,YAAA,CAAAN,SAAA,CAAA,CAAA;AACA,IAAA,MAAAO,eAAA,GAAAH,iBAAA,CAAAI,OAAA,CAAA,IAAAC,MAAA,CAAAJ,gBAAA,EAAA,IAAA,CAAA,EAAAF,iBAAA,CAAA,CAAA;;IAKA,MAAAO,KAAA,GAAAC,MAAA,CAAAC,GAAA,CAAA,CAAAC,OAAA,EAAAC,KAAA,KAAAA,KAAA,GAAA,CAAA,IAAA,CAAA,GAAAD,OAAA,GAAAE,GAAA,CAAA,MAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAnB,eAAA;AAAAE,MAAAA,QAAA,EAAAc,OAAAA;AAAA,KAAA,CAAA,CAAA,CAAA;IAGA,OAAAE,GAAA,CAAAE,QAAA,EAAA;AAAAlB,MAAAA,QAAA,EAAAW,KAAAA;AAAA,KAAA,CAAA,CAAA;AACD,GAAA;EACD,OAAAK,GAAA,CAAAE,QAAA,EAAA;AAAAlB,IAAAA,QAAA,EAAAK,iBAAAA;AAAA,GAAA,CAAA,CAAA;AACF,CAAA;AAEA,SAAAE,YAAAA,CAAAY,GAAA,EAAA;;;;AAIA;;;;"}