/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ComponentChildren } from 'preact';
import { Keys } from '../utils/UNSAFE_keys';
import { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';
import { ListItemContext, CurrentKeyDetail, SelectionDetail, SelectionMode } from '../UNSAFE_Collection';
/**
 * Props for the GradGrid Component, which consist of some props from ListView
 */
type CardGridProps<K, D> = {
    /**
     * An array of shaped data that provide information to this CardGrid.
     * If the value is null, then CardGrid will show loading indicator until the value is set.
     */
    data: D[] | null;
    /**
     * Callback function to handle when viewport has changed, including the case
     * where user scrolls to the end of the component and there are more items to load.
     */
    onLoadMore?: () => void;
    /**
     * A boolean that indicates whether there are still more data to load.
     */
    hasMore?: boolean;
    /**
     * A callback function to get the key for a given row
     */
    getRowKey: (data: D) => K;
    /**
     * A function to render each item
     */
    children: (context: ListItemContext<K, D>) => ComponentChildren;
    /**
     * The key of the item that currently have keyboard focus. Ignored if the current item is not
     * currently in the viewport.
     */
    currentKey?: K;
    /**
     * Callback function to handle when current focused item has changed.  The function should
     * update the currentKey prop with a new current key.
     */
    onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;
    /**
     * The type of selection behavior that is enabled on the CardGrid. This property controls the number
     * of selections that can be made via selection gestures at any given time.
     */
    selectionMode?: SelectionMode;
    /**
     * The keys of the current selected items in the CardGrid.
     */
    selectedKeys?: Keys<K>;
    /**
     * Callback function to handle when selection has changed.  The function should update
     * the selectedKeys prop with a new set of selected keys.
     */
    onSelectionChange?: (detail: SelectionDetail<K>) => void;
    /**
     * The ViewportConfig currently contains only one property which allows application to specify what the scroller element should be.
     * If not specified, then the root element of CardGrid itself will be the scroller element.
     */
    viewportConfig?: ViewportConfig;
    /**
     * An aria-label which defines a string value that labels this CardGrid.
     * Either aria-label or aria-labelledby should be specified in order to make CardGrid accessible.
     */
    'aria-label'?: string;
    /**
     * An aria-labelledby which identifies the element(s) that labels this CardGrid.
     * Either aria-label or aria-labelledby should be specified in order to make CardGrid accessible.
     */
    'aria-labelledby'?: string;
    /**
     * Specify animation when cards are initially rendered.
     */
    initialAnimation?: 'slideUp' | 'slideDown';
    /**
     * Size of the gutter between columns.
     */
    gutterSize?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
};
export declare function CardGrid<K extends string | number, D>({ children, data, onLoadMore, hasMore, getRowKey, currentKey, onCurrentKeyChange, selectionMode, selectedKeys, onSelectionChange, viewportConfig, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, initialAnimation, gutterSize }: CardGridProps<K, D>): import("preact").JSX.Element;
export {};
