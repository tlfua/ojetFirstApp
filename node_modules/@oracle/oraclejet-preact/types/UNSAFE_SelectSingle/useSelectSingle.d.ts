/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ComponentProps } from 'preact';
import { MutableRef } from 'preact/hooks';
import { DataState, ItemActionDetail } from '../UNSAFE_Collection';
import { Item } from '../utils/UNSAFE_dataProvider';
import { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';
import { SelectSingle } from './SelectSingle';
type PickedPropsFromSelectSingle = Pick<ComponentProps<typeof SelectSingle>, 'isDisabled' | 'isReadonly' | 'onFilter'>;
type UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {
    data?: DataState<K, D> | null;
    inputRef: MutableRef<HTMLInputElement>;
    isFocused?: boolean;
    onCommit: (detail: ValueUpdateDetail<K>) => void;
    valueItem?: Item<K, D>;
};
/**
 * Hook that manages SelectSingle state and behavior.  This hook creates state variables and
 * event listeners, returning properties to apply to components internally rendered by
 * SelectSingle, as well as state information.
 *
 * @param data Specifies data for the dropdown list.
 * @param inputRef Ref to the input element.
 * @param isDisabled Specifies whether the component is disabled.
 * @param isFocused Specifies whether the component has focus.
 * @param isReadonly Specifies whether the component is readonly.
 * @param onCommit Callback invoked when the selected value is committed.
 * @param onFilter Callback function to trigger loading data for the dropdown list,
 * which may or may not be filtered by user entered text.
 * @param valueItem Specifies the key, data, and optional metadata for the selected value.
 *
 * @returns Properties to apply to internal components that SelectSingle renders, and component
 * state.
 */
export declare function useSelectSingle<K, D>({ data, inputRef, isDisabled, isFocused: propIsFocused, isReadonly, onCommit: propOnCommit, onFilter, valueItem }: UseSelectSingleProps<K, D>): {
    collectionProps: {
        currentKey: K | undefined;
        onCurrentKeyChange: (detail: import("../UNSAFE_Collection").CurrentKeyDetail<K>) => void;
        onItemAction: (detail: ItemActionDetail<K, D>) => void;
        selectedKeys: Set<K> | undefined;
    };
    dropdownArrowEventHandlers: {
        onClick: () => void;
    };
    dropdownEventHandlers: {
        onAutoDismiss: ((event?: Event | undefined) => void) | ((event?: Event) => void);
        onPosition: (data: import("../UNSAFE_Floating").PositionData) => void;
    };
    dropdownRef: import("preact/hooks").Ref<HTMLDivElement>;
    inputEventHandlers: {
        onInput: (detail: ValueUpdateDetail<string>) => void;
        onKeyDown: ((event: KeyboardEvent) => void) | ((event: KeyboardEvent) => void);
        onKeyUp: (event: KeyboardEvent) => void;
    };
    inputRef: MutableRef<HTMLInputElement>;
    isDropdownAbove: boolean;
    isDropdownOpen: boolean;
    isFocused: boolean;
    isUserFiltering: boolean;
    mainFieldRef: import("preact/hooks").Ref<HTMLDivElement>;
    mouseProps: {
        onMouseDown?: undefined;
    } | {
        onMouseDown: (event: MouseEvent) => void;
    };
    searchText: string | undefined;
    userInput: string | undefined;
};
export {};
