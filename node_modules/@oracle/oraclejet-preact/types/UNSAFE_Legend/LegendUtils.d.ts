/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
import { ItemInfo, LegendItem, LegendSection } from './Legend.type';
import { LayoutInfo } from './useLegendLayout';
/**
 * Returns the value of the data-oj-item-index attribute for a given element.
 * @param element The HTML element.
 * @returns
 */
export declare const getItemInfo: (element: HTMLElement) => {
    itemIdx: number;
    sectionIdx: number;
} | undefined;
/**
 * Checks if the item is highlighted.
 * @param id Id of the item
 * @param highlighted The set of highlighted item
 */
export declare function isItemHighlighted<K>(id: K, highlighted?: K[]): boolean | undefined;
/**
 * Checks if the item is hidden.
 * @param id Id of the item.
 * @param hiddenIds The set of hidden items.
 * @returns
 */
export declare function isItemHidden<K>(id: K, hiddenIds?: K[]): boolean | undefined;
/**
 * Checks if the item is the currentItem and if the focus ring
 * is visible.
 * @param itemInfo ItemInfo
 * @param itemIdx Item index
 * @param sectionIdx Section index
 */
export declare const hasFocusRing: (itemInfo: ItemInfo, itemIdx: number, sectionIdx?: number) => boolean;
/**
 * Returns the text for the legend datatip.
 * @param items The legend items data.
 * @param itemInfoRef The item currently hovered.
 * @param currentItem The item that is currently keyboard focused.
 */
export declare function getDatatipText<K>(items: LegendItem<K>[] | LegendSection<K>[], getItem: (itemInfo: ItemInfo, items: LegendItem<K>[] | LegendSection<K>[]) => LegendItem<K> | undefined, focusedItem: ItemInfo, hoveredItem?: ItemInfo): string | undefined;
/**
 * Returns the aria properties for the legend.
 * @param isReadOnly { boolean } If the legend is readonly.
 * @param ariaLabel { string } The aria-label set by the app.
 * @returns The aria props.
 */
export declare function getAriaProps<K>(isReadOnly?: boolean, ariaLabel?: string, hiddenIds?: K[]): {
    'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];
    'aria-disabled'?: HTMLAttributesSignalExcluded['aria-disabled'];
    role?: HTMLAttributesSignalExcluded['role'];
};
/**
 * Gererates randomId used for aria-activedescendant.
 * @returns
 */
export declare function getRandomId(): string;
/**
 * Returns the item props for BaseLegendItem.
 * @param item The legend item.
 * @param itemIdx The item index of the item.
 * @param sectionIdx The section index of section of the item.
 * @param focusedItem The info of currently focused item.
 * @param isReadOnly Whether the legend is readonly.
 * @param hoveredItem The info of the currently hovered item.
 * @param hiddenIds The hidden ids.
 * @param highlightedIds The highlighted ids.
 */
export declare function getItemProps<K>(item: LegendItem<K>, itemIdx: number, sectionIdx: number | undefined, focusedItem: ItemInfo, isReadOnly?: boolean, hoveredItem?: ItemInfo, hiddenIds?: K[], highlightedIds?: K[]): {
    text: string;
    datatip?: string | undefined;
    'aria-label'?: string | undefined;
    id: K;
    markerColor?: import("csstype").Property.Color | undefined;
    borderColor?: import("csstype").Property.Color | undefined;
    markerShape?: "none" | import("../UNSAFE_SvgShapes").MarkerShapes | undefined;
    lineColor?: import("csstype").Property.Color | undefined;
    lineStyle?: "none" | import("../UNSAFE_SvgShapes").LineStyle | undefined;
    lineWidth?: number | undefined;
    source?: string | undefined;
    isCurrent: boolean;
    isHighlighted: boolean | undefined;
    isHidden: boolean | undefined;
    isFocused: boolean;
    key: K;
};
/**
 * Compares if two ItemInfo are equal
 * @param item1
 * @param item2
 * @returns
 */
export declare const isEqualItem: (item1?: ItemInfo, item2?: ItemInfo) => boolean;
/**
 * Returns the num of cols and rows for the legend.
 */
export declare const getGridNums: (numItems: number, layoutInfo?: LayoutInfo) => {
    itemsPerRow: number | undefined;
    itemsPerCol: number | undefined;
};
/**
 * Returns the grid row and column for given item.
 * @param noOfItems The number of items in the section.
 * @param index The index of the item.
 * @param itemsPerRow The num of items per row in the grid.
 * @param itemsPerCol The num of items per col in the grid.
 * @returns
 */
export declare function getGridCellIndices(noOfItems: number, index: number, itemsPerRow?: number, itemsPerCol?: number): {
    gridRow: number | undefined;
    gridCol: number | undefined;
};
