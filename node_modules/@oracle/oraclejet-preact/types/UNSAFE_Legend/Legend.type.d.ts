/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ColorProps } from '../utils/UNSAFE_interpolations/colors';
import { Property } from 'csstype';
import { MarkerShapes, LineStyle } from '../UNSAFE_SvgShapes';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
import { Ref, MutableRef } from 'preact/hooks';
export type ItemActionDetail<K> = {
    itemId: K;
    sectionId?: K;
};
export type InputDetail<K> = {
    itemId?: K;
    sectionId?: K;
};
export type ItemInfo = {
    itemIdx: number;
    sectionIdx: number;
    isCurrent?: boolean;
    isFocusVisible?: boolean;
};
/**
 * Marker shapes supported by the legend.
 */
export type LegendMarkerShape = MarkerShapes;
export type SymbolProps = {
    /**
     * The color of the marker in legend symbol.
     */
    markerColor?: ColorProps['color'];
    /**
     * The border color of the legend symbol.
     */
    borderColor?: ColorProps['color'];
    /**
     * The shape of the marker.
     */
    markerShape?: LegendMarkerShape | 'none';
    /**
     * The color of the line in legend symbol.
     */
    lineColor?: ColorProps['color'];
    /**
     * The line style.
     */
    lineStyle?: LineStyle | 'none';
    /**
     * The width of the line in pixel.
     */
    lineWidth?: number;
    /**
     * The source url for the image.
     */
    source?: string;
};
/**
 * Props for the legend item.
 */
export type LegendItem<K> = {
    /**
     * The text label of the data item. By default, this text will also be used as aria-label for the legend item
     * unless separate aria-label is specified through aria-label prop.
     */
    text: string;
    /**
     * The description of the legend item used for the datatip. If undefined, default datatip will be used.
     */
    datatip?: string;
    /**
     * The aria label of the legend item.
     */
    'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];
    /**
     * The id of the legend item.
     */
    id: K;
} & SymbolProps;
export type LegendSection<K> = {
    id: K;
    items: LegendItem<K>[];
    title: string;
};
/**
 * Props for legend text styles. Remove this when theming is available.
 */
export type TextStylesProps = {
    /**
     * The font style of the legend text.
     */
    textFontStyle?: Property.FontStyle;
    /**
     * The font size of the legend text.
     */
    textFontSize?: Property.FontSize;
    /**
     * The color of the legend text.
     */
    textColor?: Property.Color;
    /**
     * The font weight of the legend text.
     */
    textFontWeight?: Property.FontWeight;
    /**
     * The text decoration of the legend text.
     */
    textTextDecoration?: Property.TextDecoration;
    /**
     * The font family of the legend text.
     */
    textFontFamily?: Property.FontFamily;
};
/**
 * Props for legend text styles. Remove this when theming is available.
 */
export type SectionTitleStylesProps = {
    /**
     * The font style of the legend section title.
     */
    sectionTitleFontStyle?: Property.FontStyle;
    /**
     * The font size of the legend section title.
     */
    sectionTitleFontSize?: Property.FontSize;
    /**
     * The color of the legend section title.
     */
    sectionTitleColor?: Property.Color;
    /**
     * The font weight of the legend section title.
     */
    sectionTitleFontWeight?: Property.FontWeight;
    /**
     * The text decoration of the legend section title.
     */
    sectionTitleTextDecoration?: Property.TextDecoration;
    /**
     * The font family of the legend section title.
     */
    sectionTitleFontFamily?: Property.FontFamily;
    /**
     * The halign for the legend section title.
     */
    sectionTitleHAlign?: 'start' | 'center' | 'end';
};
export type CommonProps<K> = {
    /**
     * The orientation of the legend.
     */
    orientation?: 'vertical' | 'horizontal';
    /**
     * The height of the legend symbol. If undefined, theme specific default height is used.
     */
    symbolHeight?: number;
    /**
     * The width of the legend symbol. If undefined, theme specific default width is used.
     */
    symbolWidth?: number;
    /**
     * An array of ids to be hidden. If defined, the legend items will act as checkboxes that can be toggled.
     * Application should update the hiddenIds with new hiddenIds in onItemAction callback.
     */
    hiddenIds?: Array<K>;
    /**
     * An array of ids to be highlighted. If defined, the items of the given ids will be highlighted and others will be
     * dimmed. By default, if the highlightedIds is empty, all items will be highlighted.
     * Application should update the highlightedIds with new highlightedIds in onInput callback.
     */
    highlightedIds?: Array<K>;
    /**
     * Defines whether the legend should be read only. User interaction is prevented if set to true.
     */
    isReadOnly?: boolean;
    /**
     * The callback invoked when a legend item is clicked or when Enter is pressed.
     */
    onItemAction?: (detail: ItemActionDetail<K>) => void;
    /**
     * The callback invoked when a legend item is hovered or keyboard focused.
     */
    onInput?: (detail: InputDetail<K>) => void;
    /**
     * The aria label for the legend.
     */
    'aria-label'?: HTMLAttributesSignalExcluded['aria-label'];
} & TextStylesProps;
export type LegendProps<K> = CommonProps<K> & {
    /**
     * The data for the legend.
     */
    items: LegendItem<K>[];
};
/**
 * Props for Legend.
 */
export type BaseLegendProps<K> = Omit<LegendProps<K>, 'onItemAction' | 'onInput' | 'aria-label'> & {
    /**
     * The info about currently keyboard focused item.
     */
    focusedItemInfo: ItemInfo;
    /**
     * The ref of the focused item.
     */
    focusedItemRef: Ref<HTMLDivElement>;
    /**
     * The info about the currently hovered item.
     */
    hoveredItemInfo?: ItemInfo;
    /**
     * The id for active item.
     */
    activeId?: string;
    /**
     * The id for the section
     */
    sectionIdx: number;
    /**
     * The labelled by id for each legend items provided for each section.
     */
    labelledBy?: string;
    /**
     * The num of legend items per row.
     */
    itemsPerRow?: number;
    /**
     * The num of legend items per col.
     */
    itemsPerCol?: number;
    /**
     * The item width of the legend item.
     */
    itemWidth?: number;
    /**
     * Whether or not grid column width should be set.
     */
    isColumnWidthValidRef: MutableRef<boolean>;
};
/**
 * Props for legend section.
 */
export type SectionalLegendProps<K> = CommonProps<K> & SectionTitleStylesProps & {
    sections: LegendSection<K>[];
};
