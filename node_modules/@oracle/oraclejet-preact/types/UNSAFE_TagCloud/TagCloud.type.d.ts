import { Size } from '../utils/UNSAFE_size';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
/**
 * Props for the ItemActionDetail.
 */
export type ItemActionDetail<K> = {
    id?: K;
};
/**
 * Props for the ItemInputDetail.
 */
export type ItemInputDetail<K> = {
    id?: K;
};
/**
 * Props for the ItemInfo.
 */
export type ItemInfo = {
    /**
     * Defines the index of the item.
     */
    idx: number;
    /**
     * Defines whether the item is current.
     */
    isCurrent?: boolean;
    /**
     * Defines whether the item is focused.
     */
    isFocusVisible?: boolean;
};
/**
 * Props for the TagCloud item data.
 */
export type TagCloudItemProps<K> = {
    /**
     * Defines the id of the item.
     */
    id: K;
    /**
     * Defines the label of the item.
     */
    label: string;
    /**
     *The label to be used for accessibility purposes.
     */
    accessibleLabel?: string;
    /**
     * Defines the value of the item.
     */
    value: number;
    /**
     * Defines the color of the item.
     */
    color?: string;
    /**
     * Defines the accessibility role of the item. Default value for role is img.
     */
    role?: HTMLAttributesSignalExcluded['role'];
};
/**
 * Props for the TagCloud
 */
export type TagCloudProps<K> = {
    /**
     * Defines the width of the tag cloud. Supports CSS lengths.
     */
    width?: Size | string;
    /**
     * Defines the height of the tag cloud. Supports CSS lengths.
     */
    height?: Size | string;
    /**
     * Defines the layout shape of the tag cloud. If undefined, default layout shape rectangular will be used.
     */
    layout?: 'cloud' | 'rectangular';
    /**
     * An array of ids to be highlighted.
     */
    highlightedIds?: Array<K>;
    /**
     * An array of ids to be hidden.
     */
    hiddenIds?: Array<K>;
    /**
     * An array of ids to be selected.
     */
    selectedIds?: Array<K>;
    /**
     * The selection mode.
     */
    selectionMode?: 'none' | 'single' | 'multiple';
    /**
     * The callback to be triggered when the selection changes. This function should
     * update the selectedIds prop.
     */
    onSelectionChange?: (detail: {
        ids: K[];
    }) => void;
    /**
     * Defines the data of the tag cloud.
     */
    items: TagCloudItemProps<K>[];
    /**
     * The callback invoked on click (whether or not it is an item) or when an Enter is pressed.
     */
    onItemAction?: (detail: ItemActionDetail<K>) => void;
    /**
     * The callback invoked when a tag cloud item is hovered or keyboard focused.
     */
    onItemInput?: (detail: ItemInputDetail<K>) => void;
    /**
     * The description of the tag cloud item used for the datatip. If undefined, default datatip will be used.
     */
    datatip?: string;
    /**
     *The label to be used for accessibility purposes.
     */
    accessibleLabel?: string;
};
