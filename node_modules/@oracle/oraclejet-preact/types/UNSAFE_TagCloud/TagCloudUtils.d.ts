import { ItemInfo, TagCloudItemProps } from './TagCloud.type';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
import { BundleType } from '../resources/nls/bundle';
import { TagItemProps } from './TagCloudItem';
import { Font, TextDimensions } from '../hooks/PRIVATE_useTextDimensions';
/**
 * helper layout functions for font size calc
 * @param {number} minValue
 * @param {number} maxValue
 * @param {number} range
 * @return {number}
 */
export declare const fontSizeCalc: (value: number, minValue: number, maxValue: number, range: number) => number;
/**
 * returns initial font size arr of items for layout
 * @param {Array} items
 * @return {Array}
 */
export declare function getInitialFontSize<K>(items: TagCloudItemProps<K>[]): TagItemProps<K>[];
/**
 * Calculates the line breaks for rectangular layout
 * @param {Array} arDims an array of dvt.Dimension objects for each tag
 * @param {number} width the available width
 * @return {Array} an array containing the starting tag index for each line in the layout
 * @private
 */
export declare function calculateLineBreaks(arDims: any, width: any): number[];
/**
 * Returns the items position and font size in cloud layout.
 * @param items
 * @param tagcloudH
 * @param tagcloudW
 */
export declare function getCloudLayout<K>(items: TagCloudItemProps<K>[], tagcloudW: number, tagcloudH: number, isRTL: boolean, getTextDimensions: (textString: string, font: Font) => TextDimensions): TagItemProps<K>[];
/**
 * Returns the items position and font size in rectangle layout.
 * @param items
 * @param hiddenIds
 * @param tagcloudH
 * @param tagcloudW
 */
export declare function getRectangleLayout<K>(items: TagCloudItemProps<K>[], tagcloudW: number, tagcloudH: number, isRTL: boolean, getTextDimensions: (textString: string, font: Font) => TextDimensions): any[];
/**
 * Calls the right layout algorithm based on tagcloud type.
 * @param layout cloud or rectangle. cloud if not defined.
 * @param items
 * @param hiddenIds
 * @param tagcloudH tagcloud height
 * @param tagcloudW tagcloud width
 */
export declare function getLayout<K>(layout: string | undefined, items: TagCloudItemProps<K>[], tagcloudW: number, tagcloudH: number, isRTL: boolean, getTextDimensions: (textString: string, font: Font) => TextDimensions): any[];
/**
 * Checks if the item is highlighted.
 * @param id Id of the item
 * @param highlighted The set of highlighted item
 */
export declare function isItemHighlighted<K>(id: K, highlightedIds?: K[]): boolean | undefined;
/**
 * Checks if the item is highlighted.
 * @param id Id of the item
 * @param selectedIds The set of highlighted item
 */
export declare function isItemSelected<K>(id: K, selectedIds?: K[]): boolean;
/**
 * Checks if the item is hidden.
 * @param id Id of the item.
 * @param hiddenIds The set of hidden items.
 * @returns
 */
export declare function isItemHidden<K>(id: K, hiddenIds?: K[]): boolean | undefined;
/**
 * Returns the aria properties for the tag cloud.
 * @param isReadOnly { boolean } If the tag cloud is readonly.
 * @param accessibleLabel { string } The aria-label set by the app.
 * @returns The aria props.
 */
export declare function getAriaProps(translations: BundleType, hasData?: boolean, accessibleLabel?: string): {
    'aria-label': HTMLAttributesSignalExcluded['aria-label'];
    role: HTMLAttributesSignalExcluded['role'];
};
/**
 * Returns the aria properties for the tag cloud.
 * @param isReadOnly { boolean } If the tag cloud is readonly.
 * @param accessibleLabel { string } The aria-label set by the app.
 * @returns The aria props.
 */
export declare function getItemAriaProps(supportsSelection: boolean, translations?: BundleType, isSelected?: boolean, accessibleLabel?: string, role?: HTMLAttributesSignalExcluded['role']): {
    'aria-label': HTMLAttributesSignalExcluded['aria-label'];
    role: HTMLAttributesSignalExcluded['role'];
};
/**
 * Returns the item props for BaseTagCloudItem.
 * @param item The tagcloud item.
 * @param itemId The item index of the item.
 * @param focusedItem The info of currently focused item.
 * @param isReadOnly Whether the tagcloud is readonly.
 * @param hoveredItem The info of the currently hovered item.
 * @param hiddenIds The hidden ids.
 * @param highlightedIds The highlighted ids.
 */
export declare function getItemProps<K>(item: TagCloudItemProps<K>, itemIdx: number, supportsSelection: boolean, isReadOnly: boolean, hoveredItem?: ItemInfo, selectedIds?: Array<K>, focusedItem?: ItemInfo, highlightedIds?: Array<K>, activeId?: string): {
    id: K;
    label: string;
    accessibleLabel?: string | undefined;
    value: number;
    color?: string | undefined;
    role?: import("preact").JSX.AriaRole | undefined;
    isCurrent: boolean;
    isHighlighted: boolean | undefined;
    isSelected: boolean;
    isFocused: boolean;
    key: K;
    itemIdx: number;
    style: {
        color: string;
        backgroundColor: string | undefined;
        backgroundImage: undefined;
    } | {
        backgroundColor: string;
        color?: undefined;
        backgroundImage?: undefined;
    } | undefined;
    activeId: string | undefined;
    isReadOnly: boolean;
};
/**
 * Returns the text for the tag cloud datatip.
 * @param items The tag cloud items data.
 * @param focusedItem The item currently keyboard focused.
 * @param hoveredItem The item that is currently hovered.
 * @param datatip The datatip.
 */
export declare function getDatatipText<K>(items: TagCloudItemProps<K>[], getItem: (itemInfo: ItemInfo, items: TagCloudItemProps<K>[]) => TagCloudItemProps<K> | undefined, focusedItem: ItemInfo, hoveredItem?: ItemInfo, datatip?: string): string | undefined;
/**
 * Returns the value of the data-oj-item-index attribute for a given element.
 * @param element The HTML element.
 */
export declare function getItemInfo(element: HTMLElement): {
    idx: number;
} | undefined;
/**
 * Compares if two ItemInfo are equal
 * @param item1
 * @param item2
 * @returns
 */
export declare function isEqualItem(item1?: ItemInfo, item2?: ItemInfo): boolean;
/**
 * Checks if the item is the currentItem and if the focus ring
 * is visible.
 * @param itemInfo ItemInfo
 * @param itemId Item index
 */
export declare function hasFocusRing(itemInfo: ItemInfo, itemIdx: number): boolean;
