import { ComponentThemeType, CompoundVariantStyles, VariantOptions } from '../../UNSAFE_Theme/Theme';
type TextFieldInputVariants = typeof variants;
type TextFieldInputVariantOptions = VariantOptions<TextFieldInputVariants>;
type TextFieldInputStyles = typeof styles;
type TextFieldInputTheme = ComponentThemeType<TextFieldInputVariants, TextFieldInputStyles>;
/*******************
 * Component Styles
 *******************/
declare const textFieldInputBase: string;
declare const styles: {};
/*******************
 * Component Variants
 *******************/
declare const variants: {
    styleVariant: {
        default: string;
        embedded: string;
    };
    textarea: {
        isTextArea: string;
        notTextArea: string;
    };
    input: {
        isInput: string;
        notInput: string;
    };
    insideLabel: {
        hasInsideLabel: string;
        noInsideLabel: string;
    };
    disabled: {
        isDisabled: string;
        notDisabled: string;
    };
    type: {
        isPassword: string;
        notPassword: string;
    };
    startContent: {
        hasStartContent: string;
        noStartContent: string;
    };
    endContent: {
        hasEndContent: string;
        noEndContent: string;
    };
    prefix: {
        hasPrefix: string;
        noPrefix: string;
    };
    suffix: {
        hasSuffix: string;
        noSuffix: string;
    };
    value: {
        hasValue: string;
        noValue: string;
    };
    focused: {
        isFocused: string;
        notFocused: string;
    };
};
declare const compoundVariants: CompoundVariantStyles<TextFieldInputVariantOptions>;
declare const textFieldInputStyles: {
    textFieldInputBase: string;
    textFieldInput: string;
    textFieldTextarea: string;
    textFieldPassword: string;
    labelDefaultPadding: string;
    labelInsideBase: string;
    textareaLabelInsideBase: string;
    labelInsideNoValueAndHasFocus: string;
    hasStartContent: string;
    hasEndContent: string;
    textFieldInputDefaultColor: string;
    textFieldInputDisabledColor: string;
    hasPrefix: string;
    hasSuffix: string;
    textFieldInputDefault: string;
    defaultPaddingStart: string;
    defaultPaddingEnd: string;
    textFieldInputEmbedded: string;
};
export type { TextFieldInputVariantOptions, TextFieldInputStyles, TextFieldInputTheme };
export { textFieldInputBase, textFieldInputStyles, variants, compoundVariants };
