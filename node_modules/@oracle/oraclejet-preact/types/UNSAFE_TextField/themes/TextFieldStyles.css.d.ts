import { ComponentThemeType, CompoundVariantStyles, VariantOptions } from '../../UNSAFE_Theme';
type TextFieldVariants = typeof variants;
type TextFieldVariantOptions = VariantOptions<TextFieldVariants>;
type TextFieldStyles = typeof styles;
type TextFieldTheme = ComponentThemeType<TextFieldVariants, TextFieldStyles>;
declare const placeholderAnimation: string;
declare const variants: {
    styleVariant: {
        default: string[];
        embedded: string;
    };
    statusVariant: {
        error: string;
        none: string;
        warning: string;
    };
    contentVariant: {
        input: string;
        textarea: string;
    };
    startContent: {
        hasInsideLabel: {
            fontSize: string;
        };
        noInsideLabel: string;
    };
    insideLabel: {
        hasInsideLabel: string;
        noInsideLabel: string;
    };
    resize: {
        horizontal: string;
        vertical: string;
        both: string;
        none: string;
    };
    disabled: {
        isDisabled: string;
        notDisabled: string;
    };
    focused: {
        isFocused: string;
        notFocused: string;
    };
    loading: {
        isLoading: string;
        notLoading: string;
    };
    readonly: {
        isReadonly: string;
        notReadonly: string;
    };
    formControlInsideLabel: {
        hasInsideLabel: string;
        noInsideLabel: string;
    };
    inputGroupPosition: {
        groupLeft: string;
        groupRight: string;
        groupMiddle: string;
    };
    withinGroup: {
        isWithinGroup: string;
    };
    startContentMargin: {
        hasStartMargin: {
            marginInlineStart: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
            fontSize: string;
        };
        noStartMargin: {
            marginInlineStart: string;
            fontSize: string;
        };
    };
    startContentDisabled: {
        isDisabled: {
            color: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
        };
        notDisabled: string;
    };
    middleContent: {
        input: string[];
        textarea: string[];
    };
    endContent: {
        hasInsideLabel: string[];
        noInsideLabel: string[];
    };
};
declare const compoundVariants: CompoundVariantStyles<TextFieldVariantOptions>;
declare const styles: {
    textFieldBase: string;
    textFieldContainerBase: string;
    textFieldContainerDefault: string;
    textFieldContainerEmbedded: string;
    textFieldContainerShowBorder: string;
    textFieldContainerTextarea: string;
    textFieldContainerLabelInside: string;
    textFieldContainerFocused: string;
    textFieldContainerResizeBoth: string;
    textFieldContainerResizeHorizontal: string;
    textFieldContainerResizeVertical: string;
    textFieldContainerDisabled: string;
    textFieldContainerError: string;
    textFieldContainerErrorFocused: string;
    textFieldContainerWarning: string;
    textFieldContainerWarningFocused: string;
    textFieldEmbedded: string;
    formControlBase: string;
    formControlLabelInside: string;
};
export type { TextFieldVariantOptions, TextFieldStyles, TextFieldTheme };
export { styles, variants, compoundVariants, placeholderAnimation };
