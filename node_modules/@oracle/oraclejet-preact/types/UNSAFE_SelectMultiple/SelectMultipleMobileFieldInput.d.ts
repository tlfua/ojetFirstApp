import { Ref } from 'preact';
import { AriaAttributesSignalExcluded, HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
import { TextProps } from '../utils/UNSAFE_interpolations/text';
type AriaProps = Pick<AriaAttributesSignalExcluded, 'aria-controls' | 'aria-describedby' | 'aria-expanded' | 'aria-invalid' | 'aria-label' | 'aria-labelledby'>;
type EventProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onBlur' | 'onFocus'>;
type Props = AriaProps & EventProps & TextProps & {
    displayValue?: string;
    hasEmptyLabel?: boolean;
    hasInsideLabel?: boolean;
    isRequired?: boolean;
    placeholder?: string;
    variant?: 'default' | 'embedded';
};
/**
 * This component is used for rendering the main field in mobile phones. This is a bit different from the
 * normal main field (SelectMultipleFieldInput) that we use for desktop & tablet devices in the way that
 * a user will not be able to edit the value of this field. But, one can still have other functionalities
 * of having a placeholder, tab in & out of it, and other such functionalities of an enabled field.
 *
 * This also differs from ReadonlyTextFieldInput in the following ways:
 * 1. This will be rendered as div as well, but has a role of combobox set on it
 * 2. This will not be read as readonly input by the screen readers
 * 3. This has the stylings much similar to the TextFieldInput component
 * 4. This supports the use of placeholder and shows it when there is no value present
 * 5. This supports having the variant property and styles accordingly
 *
 * As such, this is very similar to the TextFieldInput except that this does not allow user input.
 * Note: we cannot use TextFieldInput with readonly set on it; even though it might provide us the
 * behavior we need, it will make the field as readonly and screen readers read the same about this
 * field. This will be an incorrect representation contextually as one can still edit the value by opening
 * the dropdown and changing the selection.
 */
export declare const SelectMultipleMobileFieldInput: import("preact").FunctionalComponent<Omit<Props, "ref"> & {
    ref?: Ref<HTMLDivElement> | undefined;
}>;
export {};
