{"version":3,"file":"UNSAFE_View.js","sources":["../../src/UNSAFE_View/View.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, RefCallback, RefObject } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { borderInterpolations } from '../utils/UNSAFE_interpolations/borders';\nimport type { BorderProps } from '../utils/UNSAFE_interpolations/borders';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { colorInterpolations } from '../utils/UNSAFE_interpolations/colors';\nimport type { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { paddingInterpolations } from '../utils/UNSAFE_interpolations/padding';\nimport type { PaddingProps } from '../utils/UNSAFE_interpolations/padding';\nimport { ariaInterpolations } from '../utils/UNSAFE_interpolations/aria';\nimport type { AriaProps } from '../utils/UNSAFE_interpolations/aria';\nimport { themeInterpolations } from '../utils/UNSAFE_interpolations/theme';\nimport type { ThemeProps } from '../utils/UNSAFE_interpolations/theme';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport type { Role } from '../utils/UNSAFE_roles';\nimport { EnvironmentProvider } from '..//UNSAFE_Environment';\nimport type { ThemeModifiers } from '../UNSAFE_Theme';\nimport { isEmpty } from 'ramda';\nimport { globalVars } from '../Common/themes/themeContract.css';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\n\nconst elementTypes = stringLiteralArray(['div', 'main', 'article', 'section', 'aside']);\n\ntype ElementType = typeof elementTypes[number];\n\ntype StyleProps = BorderProps &\n  DimensionProps &\n  FlexitemProps &\n  ColorProps &\n  PaddingProps &\n  AriaProps &\n  ThemeProps;\n\ntype Props = StyleProps & {\n  as?: ElementType;\n  role?: Role;\n  children?: ComponentChildren;\n};\n\nconst interpolations = [\n  ...Object.values(borderInterpolations),\n  ...Object.values(dimensionInterpolations),\n  ...Object.values(flexitemInterpolations),\n  ...Object.values(colorInterpolations),\n  ...Object.values(paddingInterpolations),\n  ...Object.values(ariaInterpolations),\n  ...Object.values(themeInterpolations)\n];\n\nconst mergedInterpolations = mergeInterpolations<Props>(interpolations);\n\ntype RefType = (RefObject<HTMLDivElement> | RefCallback<HTMLDivElement>) &\n  (RefObject<HTMLElement> | RefCallback<HTMLElement>);\n\nexport const View = forwardRef<RefType, Props>((props, ref) => {\n  const { as, children, colorScheme, scale, color, backgroundColor, ...rest } = props;\n  const {\n    class: cls,\n    ariaLabelledBy,\n    ariaLabel,\n    ...styles\n  } = mergedInterpolations({\n    colorScheme,\n    scale,\n    backgroundColor,\n    color,\n    ...rest\n  });\n  const env: Partial<ThemeModifiers> = {};\n  // We need to update the environment with any theme related props specified\n  if (colorScheme) {\n    env.colorScheme = colorScheme;\n  }\n  if (scale) {\n    env.scale = scale;\n  }\n  let assignedVars = {}; // empty var override unless background is specified\n  if (backgroundColor) {\n    env.currentBgColor = backgroundColor;\n    assignedVars = assignInlineVars({\n      [globalVars.currentBackgroundColor]: styles['backgroundColor']\n    });\n  }\n\n  // we hardcode box-sizing: border-box on all of our Preact components.\n  const localStyles = { boxSizing: 'border-box' };\n  const Component = as || 'div';\n\n  const viewComponent = (\n    <Component\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      class={cls}\n      style={{ ...styles, ...localStyles, ...assignedVars }}\n      ref={ref as RefType}>\n      {children}\n    </Component>\n  );\n  return isEmpty(env) ? (\n    viewComponent\n  ) : (\n    <EnvironmentProvider environment={env}>{viewComponent}</EnvironmentProvider>\n  );\n});\n\nexport { elementTypes };\n"],"names":["elementTypes","stringLiteralArray","interpolations","Object","values","borderInterpolations","dimensionInterpolations","flexitemInterpolations","colorInterpolations","paddingInterpolations","ariaInterpolations","themeInterpolations","mergedInterpolations","mergeInterpolations","View","forwardRef","props","ref","as","children","colorScheme","scale","color","backgroundColor","rest","class","cls","ariaLabelledBy","ariaLabel","styles","env","assignedVars","currentBgColor","assignInlineVars","globalVars","currentBackgroundColor","Component","viewComponent","_jsx","style","boxSizing","isEmpty","EnvironmentProvider","environment"],"mappings":"k6BAgCA,MAAMA,EAAeC,EAAkBA,mBAAC,CAAC,MAAO,OAAQ,UAAW,UAAW,UAkBxEC,EAAiB,IAClBC,OAAOC,OAAOC,2BACdF,OAAOC,OAAOE,8BACdH,OAAOC,OAAOG,6BACdJ,OAAOC,OAAOI,0BACdL,OAAOC,OAAOK,4BACdN,OAAOC,OAAOM,yBACdP,OAAOC,OAAOO,wBAGbC,EAAuBC,EAAAA,oBAA2BX,GAK3CY,EAAOC,EAAUA,YAAiB,CAACC,EAAOC,KACrD,MAAMC,GAAEA,EAAEC,SAAEA,EAAQC,YAAEA,EAAWC,MAAEA,EAAKC,MAAEA,EAAKC,gBAAEA,KAAoBC,GAASR,GAE5ES,MAAOC,EAAGC,eACVA,EAAcC,UACdA,KACGC,GACDjB,EAAqB,CACvBQ,cACAC,QACAE,kBACAD,WACGE,IAECM,EAA+B,CAAA,EAEjCV,IACFU,EAAIV,YAAcA,GAEhBC,IACFS,EAAIT,MAAQA,GAEd,IAAIU,EAAe,CAAA,EACfR,IACFO,EAAIE,eAAiBT,EACrBQ,EAAeE,EAAAA,iBAAiB,CAC9B,CAACC,aAAWC,wBAAyBN,EAAwB,mBAKjE,MACMO,EAAYlB,GAAM,MAElBmB,EACJC,MAACF,EACa,CAAA,aAAAR,EACK,kBAAAD,EACjBF,MAAOC,EACPa,MAAO,IAAKV,EARMW,UAAW,gBAQUT,GACvCd,IAAKA,EAAcE,SAClBA,IAGL,OAAOsB,UAAQX,GACb,EAEAQ,EAAAA,IAACI,EAAAA,oBAAmB,CAACC,YAAab,EAAMX,SAAAkB,GACzC"}