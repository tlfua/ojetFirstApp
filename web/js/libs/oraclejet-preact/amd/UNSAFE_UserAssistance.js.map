{"version":3,"file":"UNSAFE_UserAssistance.js","sources":["../../src/UNSAFE_UserAssistance/InlineHelp.tsx","../../src/UNSAFE_UserAssistance/InlineRequired.tsx","../../src/UNSAFE_UserAssistance/InlineUserAssistanceContainer.tsx","../../src/UNSAFE_UserAssistance/CompactLabelAssistance.tsx","../../src/UNSAFE_UserAssistance/CompactUserAssistance.tsx","../../src/UNSAFE_UserAssistance/IconUserAssistance.tsx","../../src/UNSAFE_UserAssistance/InlineUserAssistance.tsx"],"sourcesContent":["import { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { InlineHelpSource } from './InlineHelpSource';\nimport {\n  UserAssistanceStyles,\n  UserAssistanceVariantOptions\n} from './themes/UserAssistanceStyles.css';\nimport { UserAssistanceRedwoodTheme } from './themes/redwood/UserAssistanceTheme';\n\ntype Props = {\n  assistiveText?: string;\n  sourceLink?: string;\n  sourceText?: string;\n};\n\nexport function InlineHelp({ assistiveText, sourceLink, sourceText }: Props) {\n  const {\n    styles: { helpTextStyles }\n  } = useComponentTheme<UserAssistanceVariantOptions, UserAssistanceStyles>(\n    UserAssistanceRedwoodTheme\n  );\n  return (\n    <div>\n      {assistiveText && sourceLink ? (\n        <span class={helpTextStyles}>{assistiveText}</span>\n      ) : (\n        assistiveText\n      )}\n      {sourceLink && <InlineHelpSource source={sourceLink}>{sourceText}</InlineHelpSource>}\n    </div>\n  );\n}\n","import { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { UserAssistanceVariantOptions } from './themes/UserAssistanceStyles.css';\nimport { UserAssistanceRedwoodTheme } from './themes/redwood/UserAssistanceTheme';\n\ntype Props = {\n  align?: 'start' | 'end';\n  hasMessages?: boolean;\n  hasHelp?: boolean;\n};\n\nexport function InlineRequired({ align = 'end', hasHelp = false, hasMessages = false }: Props) {\n  const { classes } = useComponentTheme<UserAssistanceVariantOptions>(UserAssistanceRedwoodTheme, {\n    align,\n    visible: hasHelp || hasMessages ? 'hide' : 'show' // TODO: fix typing so that options autocomplete\n  });\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const requiredStr = translations.userAssistance_required();\n\n  return <div class={classes}>{requiredStr}</div>;\n}\n","import { ComponentChildren } from 'preact';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { UserAssistanceDensityType } from './InlineUserAssistance';\nimport {\n  UserAssistanceStyles,\n  UserAssistanceVariantOptions\n} from './themes/UserAssistanceStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { UserAssistanceRedwoodTheme } from './themes/redwood/UserAssistanceTheme';\n\ntype Props = {\n  id?: string;\n  children?: ComponentChildren;\n  variant?: UserAssistanceDensityType;\n};\n\n// defaults to type='reflow'. If this is within an oj-form-layout, the o-f-l\n// will pass down its type which defaults to 'efficient' (TODO).\nexport function InlineUserAssistanceContainer({ variant = 'reflow', children, id }: Props) {\n  const {\n    classes,\n    styles: { inlineContainerBaseStyles }\n  } = useComponentTheme<UserAssistanceVariantOptions, UserAssistanceStyles>(\n    UserAssistanceRedwoodTheme,\n    {\n      container: variant\n    }\n  );\n\n  // we want to suppress the display of messages if it's in a group context\n  const inputGroupContext = useInputGroupContext();\n  if (inputGroupContext !== null) return null;\n\n  const content = (\n    <div class={classNames([classes, inlineContainerBaseStyles])} id={id}>\n      {children}\n    </div>\n  );\n\n  return content;\n}\n","import { useTooltip } from '../hooks/UNSAFE_useTooltip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { CompactHelpSource } from './CompactHelpSource';\nimport { requiredIconBase, requiredIconLabelEdgeStart } from './themes/UserAssistanceStyles.css';\n\ntype Props = {\n  helpIconId?: string;\n  helpSourceLink?: string;\n  helpSourceText?: string;\n  isRequiredShown?: boolean;\n  labelEdge?: 'inside' | 'start' | 'top';\n};\n\nconst CompactLabelAssistance = ({\n  helpIconId,\n  helpSourceLink,\n  helpSourceText,\n  isRequiredShown,\n  labelEdge\n}: Props) => {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const requiredStr = translations.userAssistance_required();\n\n  const { tooltipContent, tooltipProps } = useTooltip({\n    text: requiredStr,\n    offset: { mainAxis: 8 }\n  });\n\n  const requiredStyles = classNames([\n    requiredIconBase,\n    labelEdge === 'start' && requiredIconLabelEdgeStart\n  ]);\n  const requiredIndicator = isRequiredShown && (\n    <span>\n      <span class={requiredStyles} {...tooltipProps} />\n      {tooltipContent}\n    </span>\n  );\n\n  const helpIndicator = (helpSourceLink || helpSourceText) && (\n    <CompactHelpSource id={helpIconId} labelEdge={labelEdge} source={helpSourceLink}>\n      {helpSourceText}\n    </CompactHelpSource>\n  );\n\n  return (\n    <>\n      {labelEdge !== 'start' && requiredIndicator}\n      {helpIndicator}\n      {labelEdge === 'start' && requiredIndicator}\n    </>\n  );\n};\n\nexport { CompactLabelAssistance };\n","import { RefObject } from 'preact/compat';\n\nimport { ComponentMessageContainer, ComponentMessageItem } from '../UNSAFE_ComponentMessage';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Popup } from '../UNSAFE_Popup';\nimport { Coords } from '../UNSAFE_Floating';\nimport { Divider } from '../UNSAFE_Divider';\nimport { usePopupFocusWithin } from './usePopupFocusWithin';\nimport { assistiveStyles, dividerStyle } from './themes/UserAssistanceStyles.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { UserAssistanceRedwoodTheme } from './themes/redwood/UserAssistanceTheme';\n\ntype Props = {\n  anchorRef: RefObject<HTMLElement | Coords>;\n  assistiveText?: string;\n  fieldLabel?: string;\n  id?: string;\n  messages?: ComponentMessageItem[];\n};\n\nexport function CompactUserAssistance({\n  anchorRef,\n  assistiveText,\n  fieldLabel,\n  id,\n  messages = []\n}: Props) {\n  const { isInputFocused, isReadonly } = useFormFieldContext();\n  const flip = { mainAxis: true, crossAxis: false };\n  const { isFocused: isPopupFocused, popupProps } = usePopupFocusWithin();\n  const isOpen = isInputFocused === true || isPopupFocused === true;\n\n  const { baseTheme } = useComponentTheme(UserAssistanceRedwoodTheme);\n\n  const uaCompactContent =\n    isReadonly !== true && (messages.length > 0 || assistiveText) ? (\n      <Popup\n        {...popupProps}\n        placement=\"end-top-corner\"\n        isOpen={isOpen}\n        anchorRef={anchorRef}\n        flipOptions={flip}\n        tail=\"simple\">\n        <div id={id} class={baseTheme}>\n          {messages.length > 0 && (\n            <ComponentMessageContainer fieldLabel={fieldLabel} messages={messages} />\n          )}\n          {messages.length > 0 && assistiveText && (\n            <span class={dividerStyle}>\n              <Divider />\n            </span>\n          )}\n          {assistiveText && <span class={assistiveStyles}>{assistiveText}</span>}\n        </div>\n      </Popup>\n    ) : null;\n\n  return uaCompactContent;\n}\n","import { useRef } from 'preact/hooks';\n\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { BundleType } from '../resources/nls/bundle';\n\nimport { HelpIcon } from '../PRIVATE_ThemedIcons/HelpIcon';\nimport { Popup } from '../UNSAFE_Popup';\nimport { InlineHelp } from './InlineHelp';\nimport {\n  iconUserAssistanceIcon,\n  iconUserAssistancePopupFocus\n} from './themes/UserAssistanceStyles.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { PopupRedwoodTheme } from '../UNSAFE_Popup/themes/redwood/PopupTheme';\n\ntype Props = {\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: string;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: string;\n  /**\n   * Custom text to be rendered for the `helpSourceLink`. \"Learn more\" will be used if no custom text is provided.\n   */\n  helpSourceText?: string;\n  /**\n   * Whether the trigger element is in tab sequence\n   */\n  isTabbable?: boolean;\n  /**\n   * ID of the pop up content that can be used for aria-describedby\n   */\n  id?: string;\n};\n\n/**\n * Created to match icon user assistance spec for use with radio option, pending design review\n * of inline UA assistance.\n */\nconst IconUserAssistance = ({\n  assistiveText,\n  helpSourceLink,\n  helpSourceText,\n  isTabbable = true,\n  id\n}: Props) => {\n  const { bool: isOpen, setFalse: setIsOpenFalse, setTrue: setIsOpenTrue } = useToggle(false);\n\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const userAssistance_learnMoreStr = translations.userAssistance_learnMore();\n  const sourceText = helpSourceLink && (helpSourceText || userAssistance_learnMoreStr);\n  // We are referencing popup vars, so we need to bring in the baseTheme for popup\n  const { baseTheme: popupBaseTheme } = useComponentTheme(PopupRedwoodTheme);\n\n  const { pressProps } = usePress((e) => {\n    e.preventDefault();\n    setIsOpenTrue();\n  });\n  const anchorRef = useRef(null);\n\n  const iconUserAssistanceClasses = classNames([popupBaseTheme, iconUserAssistancePopupFocus]);\n\n  return helpSourceLink || assistiveText ? (\n    <>\n      <span\n        {...pressProps}\n        ref={anchorRef}\n        tabIndex={isTabbable ? 0 : -1}\n        class={iconUserAssistanceIcon}\n        id={`${id}-help-icon`}>\n        <HelpIcon />\n      </span>\n      <Popup\n        placement=\"top\"\n        isOpen={isOpen}\n        anchorRef={anchorRef}\n        onClose={setIsOpenFalse}\n        onClickOutside={setIsOpenFalse}\n        shiftOptions={{ mainAxis: true, crossAxis: false }}\n        initialFocus=\"firstFocusable\">\n        <div id={id} tabIndex={0} class={iconUserAssistanceClasses}>\n          <InlineHelp\n            assistiveText={assistiveText}\n            sourceLink={helpSourceLink}\n            sourceText={sourceText}\n          />\n        </div>\n      </Popup>\n    </>\n  ) : null;\n};\n\nexport { IconUserAssistance };\n","import { ComponentProps } from 'preact';\nimport { ComponentMessageItem, ComponentMessageContainer } from '../UNSAFE_ComponentMessage';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineHelp } from './InlineHelp';\nimport { InlineRequired } from './InlineRequired';\nimport { InlineUserAssistanceContainer } from './InlineUserAssistanceContainer';\n\nexport type UserAssistanceDensityType = 'reflow' | 'efficient';\n\ntype Props = {\n  assistiveText?: string;\n  fieldLabel?: string;\n  helpSourceLink?: string;\n  helpSourceText?: string;\n  id?: string;\n  isRequiredShown?: boolean;\n  requiredAlignment?: ComponentProps<typeof InlineRequired>['align'];\n  messages?: ComponentMessageItem[];\n  userAssistanceDensity?: UserAssistanceDensityType;\n};\n\n// This has the precedence rules for the user assistance.\nexport function InlineUserAssistance({\n  assistiveText,\n  fieldLabel,\n  helpSourceLink,\n  helpSourceText,\n  id,\n  isRequiredShown,\n  requiredAlignment,\n  messages = [],\n  userAssistanceDensity\n}: Props) {\n  const { isReadonly: isFormReadonly } = useFormContext();\n  const needsUserAssistanceIfNoContent =\n    userAssistanceDensity === 'efficient' && isFormReadonly === false;\n  const { isFocused } = useFormFieldContext();\n  const uaInlineContent =\n    messages.length > 0 ? (\n      <ComponentMessageContainer fieldLabel={fieldLabel} messages={messages} />\n    ) : (assistiveText || helpSourceLink) && isFocused ? (\n      <InlineHelp\n        assistiveText={assistiveText}\n        sourceLink={helpSourceLink}\n        sourceText={helpSourceText}\n      />\n    ) : isRequiredShown ? (\n      <InlineRequired align={requiredAlignment} />\n    ) : null;\n\n  // when reflow we do not render unless it has content.\n  // when efficient we render regardless of if it has content.\n  // TODO: Get the userAssistanceDensity value from the FormContext\n  return uaInlineContent || needsUserAssistanceIfNoContent ? (\n    <InlineUserAssistanceContainer id={id} variant={userAssistanceDensity}>\n      {uaInlineContent}\n    </InlineUserAssistanceContainer>\n  ) : null;\n}\n"],"names":["InlineHelp","assistiveText","sourceLink","sourceText","styles","helpTextStyles","useComponentTheme","UserAssistanceRedwoodTheme","_jsxs","children","_jsx","class","InlineHelpSource","source","InlineRequired","align","hasHelp","hasMessages","classes","visible","requiredStr","useTranslationBundle","userAssistance_required","InlineUserAssistanceContainer","variant","id","inlineContainerBaseStyles","container","useInputGroupContext","classNames","helpIconId","helpSourceLink","helpSourceText","isRequiredShown","labelEdge","tooltipContent","tooltipProps","useTooltip","text","offset","mainAxis","requiredStyles","requiredIconBase","requiredIconLabelEdgeStart","requiredIndicator","helpIndicator","jsx","CompactHelpSource","jsxs","_Fragment","Fragment","anchorRef","fieldLabel","messages","isInputFocused","isReadonly","useFormFieldContext","isFocused","isPopupFocused","popupProps","usePopupFocusWithin","isOpen","baseTheme","length","Popup","placement","flipOptions","crossAxis","tail","ComponentMessageContainer","dividerStyle","Divider","assistiveStyles","isTabbable","bool","setFalse","setIsOpenFalse","setTrue","setIsOpenTrue","useToggle","userAssistance_learnMoreStr","userAssistance_learnMore","popupBaseTheme","PopupRedwoodTheme","pressProps","usePress","e","preventDefault","useRef","iconUserAssistanceClasses","iconUserAssistancePopupFocus","ref","tabIndex","iconUserAssistanceIcon","HelpIcon","onClose","onClickOutside","shiftOptions","initialFocus","requiredAlignment","userAssistanceDensity","isFormReadonly","useFormContext","needsUserAssistanceIfNoContent","uaInlineContent"],"mappings":"+uMAcM,SAAUA,IAAWC,cAAEA,EAAaC,WAAEA,EAAUC,WAAEA,IACtD,MACEC,QAAQC,eAAEA,IACRC,EAAAA,kBACFC,EAAAA,4BAEF,OACEC,OACG,MAAA,CAAAC,SAAA,CAAAR,GAAiBC,EAChBQ,EAAAA,IAAA,OAAA,CAAMC,MAAON,EAAiBI,SAAAR,IAAqB,EAIpDC,GAAcQ,EAAAA,IAACE,EAAAA,iBAAiB,CAAAC,OAAQX,EAAUO,SAAGN,MAG5D,CClBgB,SAAAW,IAAeC,MAAEA,EAAQ,MAAKC,QAAEA,GAAU,EAAKC,YAAEA,GAAc,IAC7E,MAAMC,QAAEA,GAAYZ,EAAiBA,kBAA+BC,6BAA4B,CAC9FQ,QACAI,QAASH,GAAWC,EAAc,OAAS,SAIvCG,EADeC,uBAAiC,4BACrBC,0BAEjC,OAAOZ,EAAAA,WAAKC,MAAOO,EAAUT,SAAAW,GAC/B,CCHM,SAAUG,IAA8BC,QAAEA,EAAU,SAAQf,SAAEA,EAAQgB,GAAEA,IAC5E,MAAMP,QACJA,EACAd,QAAQsB,0BAAEA,IACRpB,EAAiBA,kBACnBC,6BACA,CACEoB,UAAWH,IAMf,GAA0B,OADAI,EAAAA,uBACM,OAAO,KAQvC,OALElB,EAAAA,IAAA,MAAA,CAAKC,MAAOkB,EAAUA,WAAC,CAACX,EAASQ,IAA6BD,GAAIA,EAC/DhB,SAAAA,GAKP,gEC1B+B,EAC7BqB,aACAC,iBACAC,iBACAC,kBACAC,gBAEA,MACMd,EADeC,uBAAiC,4BACrBC,2BAE3Ba,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMlB,EACNmB,OAAQ,CAAEC,SAAU,KAGhBC,EAAiBZ,EAAAA,WAAW,CAChCa,EAAgBA,iBACF,UAAdR,GAAyBS,EAA0BA,6BAE/CC,EAAoBX,GACxBzB,yBACEE,MAAM,OAAA,CAAAC,MAAO8B,KAAoBL,IAChCD,KAICU,GAAiBd,GAAkBC,IACvCtB,EAACoC,IAAAC,EAAiBA,kBAAC,CAAAtB,GAAIK,EAAYI,UAAWA,EAAWrB,OAAQkB,EAC9DtB,SAAAuB,IAIL,OACExB,EACGwC,KAAAC,EAAAC,SAAA,CAAAzC,SAAA,CAAc,UAAdyB,GAAyBU,EACzBC,EACc,UAAdX,GAAyBU,IAE5B,0BCjCY,UAAsBO,UACpCA,EAASlD,cACTA,EAAamD,WACbA,EAAU3B,GACVA,EAAE4B,SACFA,EAAW,KAEX,MAAMC,eAAEA,EAAcC,WAAEA,GAAeC,EAAmBA,uBAElDC,UAAWC,EAAcC,WAAEA,GAAeC,EAAmBA,sBAC/DC,GAA4B,IAAnBP,IAA8C,IAAnBI,GAEpCI,UAAEA,GAAcxD,EAAiBA,kBAACC,EAA0BA,4BAyBlE,OAtBiB,IAAfgD,IAAwBF,EAASU,OAAS,GAAK9D,GAC7CS,EAAAA,IAACsD,EAAAA,MAAK,IACAL,EACJM,UAAU,iBACVJ,OAAQA,EACRV,UAAWA,EACXe,YAbO,CAAE1B,UAAU,EAAM2B,WAAW,GAcpCC,KAAK,SACL3D,SAAAD,EAAAA,KAAA,MAAA,CAAKiB,GAAIA,EAAId,MAAOmD,EACjBrD,SAAA,CAAA4C,EAASU,OAAS,GACjBrD,EAAAoC,IAACuB,EAAyBA,0BAAC,CAAAjB,WAAYA,EAAYC,SAAUA,IAE9DA,EAASU,OAAS,GAAK9D,GACtBS,cAAMC,MAAO2D,EAAAA,aAAY7D,SACvBC,EAACoC,IAAAyB,EAAOA,cAGXtE,GAAiBS,EAAAoC,IAAA,OAAA,CAAMnC,MAAO6D,EAAeA,gBAAG/D,SAAAR,SAGnD,IAGR,uBCb2B,EACzBA,gBACA8B,iBACAC,iBACAyC,cAAa,EACbhD,SAEA,MAAQiD,KAAMb,EAAQc,SAAUC,EAAgBC,QAASC,GAAkBC,aAAU,GAG/EC,EADe3D,uBAAiC,4BACL4D,2BAC3C9E,EAAa4B,IAAmBC,GAAkBgD,IAEhDlB,UAAWoB,GAAmB5E,EAAiBA,kBAAC6E,EAAiBA,oBAEnEC,WAAEA,GAAeC,EAAQA,UAAEC,IAC/BA,EAAEC,iBACFT,GAAe,IAEX3B,EAAYqC,SAAO,MAEnBC,EAA4B5D,EAAUA,WAAC,CAACqD,EAAgBQ,EAAAA,+BAE9D,OAAO3D,GAAkB9B,EACvBO,EACEwC,KAAAC,EAAAC,SAAA,CAAAzC,SAAA,CAAAC,MAAA,OAAA,IACM0E,EACJO,IAAKxC,EACLyC,SAAUnB,EAAa,GAAK,EAC5B9D,MAAOkF,EAAAA,uBACPpE,GAAI,GAAGA,cACPhB,SAAAC,EAAAoC,IAACgD,WAAQ,CAAA,KAEXpF,EAACoC,IAAAkB,QACC,CAAAC,UAAU,MACVJ,OAAQA,EACRV,UAAWA,EACX4C,QAASnB,EACToB,eAAgBpB,EAChBqB,aAAc,CAAEzD,UAAU,EAAM2B,WAAW,GAC3C+B,aAAa,iBACbzF,SAAAC,EAAAoC,IAAA,MAAA,CAAKrB,GAAIA,EAAImE,SAAU,EAAGjF,MAAO8E,EAC/BhF,SAAAC,EAAAoC,IAAC9C,GAAU,CACTC,cAAeA,EACfC,WAAY6B,EACZ5B,WAAYA,WAKlB,IAAI,6DCxEJ,UAA+BF,cACnCA,EAAamD,WACbA,EAAUrB,eACVA,EAAcC,eACdA,EAAcP,GACdA,EAAEQ,gBACFA,EAAekE,kBACfA,EAAiB9C,SACjBA,EAAW,GAAE+C,sBACbA,IAEA,MAAQ7C,WAAY8C,GAAmBC,EAAcA,iBAC/CC,EACsB,cAA1BH,IAA4D,IAAnBC,GACrC5C,UAAEA,GAAcD,EAAAA,sBAChBgD,EACJnD,EAASU,OAAS,EAChBrD,EAAAA,IAAC2D,EAAAA,0BAAyB,CAACjB,WAAYA,EAAYC,SAAUA,KAC1DpD,GAAiB8B,IAAmB0B,EACvC/C,EAAAA,IAACV,GAAU,CACTC,cAAeA,EACfC,WAAY6B,EACZ5B,WAAY6B,IAEZC,EACFvB,EAAAA,IAACI,GAAe,CAAAC,MAAOoF,IACrB,KAKN,OAAOK,GAAmBD,EACxB7F,MAACa,GAA6B,CAACE,GAAIA,EAAID,QAAS4E,EAC7C3F,SAAA+F,IAED,IACN"}