{"version":3,"file":"listViewSelectionTests-b1de647f.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTests.tsx","../../src/PRIVATE_List/__tests__/shared/listViewSelectionTests.tsx"],"sourcesContent":["import { fireEvent, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport {\n  CurrentItemVariant,\n  ItemActionDetail,\n  Metadata,\n  SelectionMode\n} from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getItems, getRoot } from './testHelpers';\n\nexport type Props<K, D> = {\n  currentItemVariant?: CurrentItemVariant;\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  gridlines?: Gridlines;\n  initialKey?: K;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number, D> = (props: Props<K, D>) => VNode;\n\nexport const testRender = (TestComponent: TestComponentProps<any, any>) => {\n  it('initial render', async function () {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect(items.length).eq(25);\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest == typeof undefined) {\n    it('initial render with sparkle', async () => {\n      const data = populateData(100) as Employee<string>[];\n      let dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n        (data) => {\n          return { data: data, metadata: { key: data.id } };\n        }\n      );\n\n      // add suggestions\n      dataMetadata[3].metadata.suggestion = { enable: true };\n      dataMetadata[7].metadata.suggestion = { enable: true };\n      dataMetadata[9].metadata.suggestion = { enable: true };\n\n      const suggestions = dataMetadata.filter((d) => d.metadata.suggestion);\n      dataMetadata = dataMetadata.filter((d) => !d.metadata.suggestion);\n      dataMetadata.unshift(...suggestions);\n\n      const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n      const grid = await getRoot(list);\n      const sparkle = grid.querySelector('.oj-collection-sparkle')\n        ?.firstElementChild as HTMLElement;\n      expect(sparkle !== undefined).eq(true);\n\n      const items = await getItems(list);\n      expect(items?.length).eq(25);\n      expect(items[0].dataset['ojSuggestion']).eq('true');\n      expect(items[1].dataset['ojSuggestion']).eq('true');\n      expect(items[2].dataset['ojSuggestion']).eq('true');\n\n      const sparkleHeight = items[0].offsetHeight + items[1].offsetHeight + items[2].offsetHeight;\n      expect(sparkleHeight).eq(sparkle.offsetHeight);\n    });\n  }\n};\n\nexport const testAria = (TestComponent: TestComponentProps<any, any>) => {\n  it('aria structure and properties (select-none)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq(null);\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq(null);\n  });\n\n  it('aria structure and properties (single-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} selectionMode=\"single\"></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('false');\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('aria structure and properties (multi-select)', async function () {\n    const data = populateData(10) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('10');\n    expect(grid.getAttribute('aria-multiselectable')).eq('true');\n\n    const items = await getItems(list);\n    expect(items.length).eq(10);\n    expect(items[0].getAttribute('aria-rowindex')).eq('1');\n\n    const cells = await getContents(list);\n    expect(cells.length).eq(10);\n    expect(cells[0].getAttribute('aria-colindex')).eq('1');\n    expect(cells[0].getAttribute('aria-selected')).eq('false');\n  });\n};\n\nexport const testKeys = (TestComponent: TestComponentProps<any, any>) => {\n  it('supports currentKey logic with numeric key', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('supports currentKey logic with string key', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n\n  it('checking key type - string key', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[1] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n    expect((items[2] as HTMLElement).dataset['ojKeyType'] === undefined).eq(true);\n  });\n\n  it('checking key type - numeric key', async () => {\n    const data = populateData(3, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect((items[0] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[1] as HTMLElement).dataset['ojKeyType']).eq('number');\n    expect((items[2] as HTMLElement).dataset['ojKeyType']).eq('number');\n  });\n};\n\nexport const testGridlines = (TestComponent: TestComponentProps<any, any>) => {\n  const isTopGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineTop_visible') > 0;\n  };\n\n  const isBottomGridlineVisible = (item: HTMLElement) => {\n    const className = item.className;\n    return className.indexOf('gridlineBottom_visible') > 0;\n  };\n\n  const isGridlineHidden = (item: HTMLElement) => {\n    return !isTopGridlineVisible(item) && !isBottomGridlineVisible(item);\n  };\n\n  it('gridlines - gridlines are hidden', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const items = await getItems(list);\n    expect(isGridlineHidden(items[0])).to.be.true;\n    expect(isGridlineHidden(items[1])).to.be.true;\n    expect(isGridlineHidden(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visible = { item: 'visible' as const, bottom: 'visible' as const };\n    const list = render(<TestComponent data={dataMetadata} gridlines={visible}></TestComponent>);\n    const items = await getItems(list);\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleExceptLast = { item: 'visible' as const };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleExceptLast}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n\n  it('gridlines - bottom gridlines are visible; The top gridlines of the first list item is visible', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirst = {\n      item: 'visible' as const,\n      top: 'visible' as const,\n      bottom: 'visible' as const\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirst}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.true;\n  });\n\n  it('gridlines - bottom gridlines are visible except for the last list item. The top gridlines of the first list item is visible.', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const visibleWithFirstButNotLast = { item: 'visible' as const, top: 'visible' as const };\n    const list = render(\n      <TestComponent data={dataMetadata} gridlines={visibleWithFirstButNotLast}></TestComponent>\n    );\n    const items = await getItems(list);\n    expect(isTopGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[0])).to.be.true;\n    expect(isBottomGridlineVisible(items[1])).to.be.true;\n    expect(isBottomGridlineVisible(items[2])).to.be.false;\n  });\n};\n\nexport const testItemAction = (TestComponent: TestComponentProps<any, any>) => {\n  const isMetadataEqual = (metadata1: Metadata<any>, metadata2: Metadata<any>) => {\n    return metadata1.key === metadata2.key;\n  };\n\n  const isFocusHighlight = (item: HTMLElement) => {\n    const className = item.className;\n    return (\n      className.indexOf('focusHighlight_isFocusHighlight') > 0 ||\n      className.indexOf('MultiVariantStyles_compound') > 0\n    );\n  };\n\n  it('ItemAction - test click on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 0) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n    );\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[1]);\n    fireEvent.click(items[1]);\n    fireEvent.click(items[2]);\n    expect(count).eq(3);\n  });\n\n  it('ItemAction - test press enter on item', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    const list = render(\n      <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n    );\n    const grid = await getRoot(list);\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(items[1], { key: 'Enter' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: 'Enter' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[1].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(\n          isMetadataEqual(detail.context.metadata, dataMetadata[2].metadata),\n          'Context metadata is correct'\n        ).eq(true);\n      }\n      count++;\n    };\n    const list = render(\n      <CollectionGestureContext.Provider value={'embedded'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot(list);\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[2], { key: ' ' });\n    expect(count).eq(4);\n  });\n\n  it('ItemAction - test press spacebar on item (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    let count = 0;\n    const onItemAction = <K, D>(detail: ItemActionDetail<K, D>) => {\n      if (count === 1) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 2) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[1].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[1].metadata);\n      } else if (count === 3) {\n        expect(detail.context.data, 'Context data is correct').eq(dataMetadata[2].data);\n        expect(detail.context.metadata, 'Context metadata is correct').eq(dataMetadata[2].metadata);\n      }\n      count++;\n    };\n    const list = render(\n      <CollectionGestureContext.Provider value={'default'}>\n        <TestComponent data={dataMetadata} onItemAction={onItemAction}></TestComponent>\n      </CollectionGestureContext.Provider>\n    );\n    const grid = await getRoot(list);\n    const items = await getItems(list, 'row');\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    fireEvent.keyDown(items[1], { key: ' ' });\n    expect(count).eq(1);\n  });\n\n  it('currentItemVariant - highlight', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"highlight\"></TestComponent>\n    );\n    const items = await getItems(list);\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.true;\n  });\n\n  it('currentItemVariant - none', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: {\n      data: Employee<string>;\n      metadata: Metadata<string>;\n    }[] = data.map((data) => {\n      return { data: data, metadata: { key: data.id } };\n    });\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        initialKey={dataMetadata[1].metadata.key}\n        currentItemVariant=\"none\"></TestComponent>\n    );\n    const items = await getItems(list);\n    expect(isFocusHighlight(items[0])).to.be.false;\n\n    fireEvent.click(items[0]);\n    expect(isFocusHighlight(items[0])).to.be.false;\n  });\n};\n\nexport const testNavigation = (TestComponent: TestComponentProps<any, any>) => {\n  it('arrow keys', async () => {\n    const data = populateData(3) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.hasAttribute('aria-activedescendant')).eq(false);\n    const items = await getContents(list);\n    fireEvent.click(items[0]);\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[2].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[1].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n    fireEvent.keyDown(grid, { key: 'ArrowUp' });\n    expect(grid.getAttribute('aria-activedescendant')).eq(items[0].id);\n  });\n};\n","import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata, SelectionMode } from '../../../UNSAFE_Collection';\nimport { RootEnvironmentProvider } from '../../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../../UNSAFE_Environment';\nimport { Gridlines } from '../../../UNSAFE_ListView';\nimport { Keys } from '../../../utils/UNSAFE_keys';\nimport { matchTranslationBundle } from '../../../utils/UNSAFE_matchTranslationBundle';\nimport { CollectionGestureContext } from '../../../hooks/PRIVATE_useCollectionGestureContext';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getContents, getRoot, mouseCheckboxSelection, mouseItemSelection } from './testHelpers';\n\ntype Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n  selectedKeys?: Keys<K>;\n  selectionMode?: SelectionMode;\n  gridlines?: Gridlines;\n  onClick?: () => void;\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testSelection = (TestComponent: TestComponentProps<any>) => {\n  it('select single - numeric key', async () => {\n    const data = populateData(10, true) as Employee<number>[];\n    const dataMetadata: { data: Employee<number>; metadata: Metadata<number> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(\n      <TestComponent\n        data={dataMetadata}\n        selectionMode=\"single\"\n        onClick={() => {\n          expect(false, 'Click event should not propagate').to.be.true;\n        }}></TestComponent>\n    );\n    const items = await getContents(list);\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[5]);\n    await waitFor(() => {\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[7]);\n    await waitFor(() => {\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('select multiple items using shift click', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    // console.log('here');\n    // console.log(list.debug());\n    await waitFor(() => {\n      expect(items[1].getAttribute('aria-selected')).eq('false');\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n    });\n  }, 3000);\n\n  it('select multiple items using shift space bar', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects multiple items when clicking on Selector checkboxes', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const selected: Keys<string> = { all: false, keys: new Set([data[2].id]) };\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          data={dataMetadata}\n          selectionMode=\"multiple\"\n          selectedKeys={selected}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n\n    mouseCheckboxSelection(items[4]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n    });\n  });\n\n  it('correctly modifies range selection when using SPACE to select', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    fireEvent.keyUp(items[5], { key: ' ', shiftKey: true });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n\n    // keyboard select to \"toggle\" one item off\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n\n    // keyboard select again to \"replace\" with single selection only\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('selects single items using space keypress', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: ' ' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  }, 3000);\n\n  it('selects single items using enter keypress (Context value is embedded)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'embedded'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    fireEvent.keyUp(items[3], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n  });\n\n  it('selects single items using enter keypress (Context value is default)', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <CollectionGestureContext.Provider value={'default'}>\n          <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n        </CollectionGestureContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    fireEvent.keyUp(items[2], { key: 'Enter' });\n    expect(items[1].getAttribute('aria-selected')).eq('false');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('select multiple items then click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3]);\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('false');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then shift click on a selected items', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    mouseItemSelection(items[3], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('false');\n      expect(items[5].getAttribute('aria-selected')).eq('false');\n    });\n  });\n\n  it('select multiple items then metaKey click on a selected items, to select and unselect', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const items = await getContents(list);\n\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // first click to deselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('false');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // second click to reselect\n    mouseItemSelection(items[3], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n    });\n\n    // click outside of range should be additive too\n    mouseItemSelection(items[7], { metaKey: true });\n    await waitFor(() => {\n      expect(items[2].getAttribute('aria-selected')).eq('true');\n      expect(items[3].getAttribute('aria-selected')).eq('true');\n      expect(items[4].getAttribute('aria-selected')).eq('true');\n      expect(items[5].getAttribute('aria-selected')).eq('true');\n      expect(items[6].getAttribute('aria-selected')).eq('false');\n      expect(items[7].getAttribute('aria-selected')).eq('true');\n    });\n  }, 3000);\n\n  it('supports multi-select (and deselect) via keyboard arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot(list);\n    const items = await getContents(list);\n\n    // select items 1-3\n    fireEvent.click(items[0]);\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n\n    // deselect 2 and 3 via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('false');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n\n    // continue up past initial anchor, to select items 0 and 1\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[0].getAttribute('aria-selected')).eq('true');\n    expect(items[1].getAttribute('aria-selected')).eq('true');\n    expect(items[2].getAttribute('aria-selected')).eq('false');\n    expect(items[3].getAttribute('aria-selected')).eq('false');\n  });\n\n  it('supports extending mouse initiated range select via arrow keys', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const list = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent data={dataMetadata} selectionMode=\"multiple\"></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const grid = await getRoot(list);\n    const items = await getContents(list);\n\n    // select items 2-5 via click\n    mouseItemSelection(items[2]);\n    mouseItemSelection(items[5], { shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n\n    // now extend by two more rows\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowDown', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('true');\n    expect(items[7].getAttribute('aria-selected')).eq('true');\n\n    // now deselect those via up-arrow\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    fireEvent.keyDown(grid, { key: 'ArrowUp', shiftKey: true });\n    expect(items[2].getAttribute('aria-selected')).eq('true');\n    expect(items[3].getAttribute('aria-selected')).eq('true');\n    expect(items[4].getAttribute('aria-selected')).eq('true');\n    expect(items[5].getAttribute('aria-selected')).eq('true');\n    expect(items[6].getAttribute('aria-selected')).eq('false');\n    expect(items[7].getAttribute('aria-selected')).eq('false');\n  });\n};\n"],"names":["TestComponent","it","async","dataMetadata","populateData","map","data","metadata","key","id","list","render","_jsx","grid","getRoot","expect","getAttribute","eq","items","getItems","length","cells","getContents","jsx","selectionMode","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","RootEnvironmentProvider","environment","children","isTopGridlineVisible","item","className","indexOf","isBottomGridlineVisible","isGridlineHidden","to","be","true","gridlines","bottom","false","top","isMetadataEqual","metadata1","metadata2","isFocusHighlight","count","onItemAction","detail","context","fireEvent","click","keyDown","CollectionGestureContext","Provider","value","initialKey","currentItemVariant","hasAttribute","undefined","dataset","jest","suggestion","enable","suggestions","filter","d","unshift","sparkle","querySelector","firstElementChild","sparkleHeight","offsetHeight","onClick","mouseItemSelection","waitFor","shiftKey","__variableDynamicImportRuntime1__","keyUp","selected","all","keys","__variableDynamicImportRuntime2__","selectedKeys","mouseCheckboxSelection","__variableDynamicImportRuntime3__","__variableDynamicImportRuntime4__","__variableDynamicImportRuntime5__","__variableDynamicImportRuntime6__","__variableDynamicImportRuntime7__","__variableDynamicImportRuntime8__","__variableDynamicImportRuntime9__","metaKey","__variableDynamicImportRuntime10__","__variableDynamicImportRuntime11__"],"mappings":"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"}