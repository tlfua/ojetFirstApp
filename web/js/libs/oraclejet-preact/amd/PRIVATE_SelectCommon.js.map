{"version":3,"file":"PRIVATE_SelectCommon.js","sources":["../../src/PRIVATE_SelectCommon/itemTextUtils.ts","../../src/PRIVATE_SelectCommon/DefaultList.tsx","../../src/PRIVATE_SelectCommon/eventUtils.ts","../../src/PRIVATE_SelectCommon/useOutsideMousedown.ts","../../src/PRIVATE_SelectCommon/Dropdown.tsx","../../src/PRIVATE_SelectCommon/DropdownArrow.tsx","../../src/PRIVATE_SelectCommon/DropdownList.tsx","../../src/PRIVATE_SelectCommon/MobileDropdown.tsx","../../src/PRIVATE_SelectCommon/DropdownUserAssistance.tsx","../../src/PRIVATE_SelectCommon/EmptyResults.tsx","../../src/PRIVATE_SelectCommon/SelectMobileDropdown.tsx","../../src/PRIVATE_SelectCommon/selectUtils.ts","../../src/PRIVATE_SelectCommon/useSelectCommon.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Logger } from '../utils/UNSAFE_logger';\nimport { ItemTextFunctionType, ItemTextType } from '../utils/UNSAFE_selectUtils';\n\nexport function renderItemText<K, D>(item: Item<K, D>, itemText: ItemTextType<K, D>) {\n  // if item-text is a string and the data has the specified field, return it;\n  // otherwise log an error\n  if (typeof itemText === 'string') {\n    if ((item.data as any)?.hasOwnProperty(itemText)) {\n      const retData = item.data[itemText];\n      return String(retData);\n    }\n    Logger.error('SelectMultiple: itemText specifies field that does not exist: ' + itemText);\n    // return undefined if the field doesn't exist\n    return undefined;\n  }\n  // if item-text is a function, call it to create a display label\n  return (itemText as ItemTextFunctionType<K, D>)(item);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { useCallback, useMemo } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport {\n  CurrentKeyDetail,\n  DataState,\n  ItemActionDetail,\n  ListItemContext,\n  Metadata,\n  SelectionDetail\n} from '../UNSAFE_Collection';\nimport { HighlightText } from '../UNSAFE_HighlightText';\nimport { List, SkeletonContainer } from '../PRIVATE_List';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Skeleton } from '../UNSAFE_Skeleton';\nimport { Keys } from '../utils/UNSAFE_keys';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from './itemTextUtils';\n\nconst itemStyles = cssProps`${{\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n}}`;\n\ntype PickedPropsFromList = Pick<\n  ComponentProps<typeof List>,\n  'aria-label' | 'currentItemVariant' | 'selectionMode'\n>;\n\n// pick the props from the ListItemContext instead of extending it directly so that we\n// don't automatically expose any new props that may be added to it\ntype PickedPropsFromListItemContext<K, D> = Pick<\n  ListItemContext<K, D>,\n  'data' | 'index' | 'selector'\n>;\ntype ItemRendererSelectionDetail<K> = {\n  value: Set<K>;\n  target: EventTarget | null;\n};\ntype ItemRendererMetadata<K> = Pick<Metadata<K>, 'key' | 'suggestion'>;\ntype ItemRendererProps<K, D> = PickedPropsFromListItemContext<K, D> & {\n  metadata: ItemRendererMetadata<K>;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n  onSelectionChange?: (detail: ItemRendererSelectionDetail<K>) => void;\n};\n\ntype Props<K extends string | number, D extends Record<string, any>> = PickedPropsFromList & {\n  itemRenderer?: (itemRendererProps: ItemRendererProps<K, D>) => ComponentChildren;\n  itemText: ItemTextType<K, D>;\n  // props from List that we constrain or unconstrain\n  currentKey?: K;\n  data?: DataState<K, D> | null;\n  onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;\n  onItemAction?: (detail: ItemActionDetail<K, D>) => void;\n  onLoadRange?: ComponentProps<typeof List>['onLoadRange'];\n  onSelectionChange?: (detail: SelectionDetail<K>) => void;\n  searchText?: string;\n  selectedKeys?: Set<K>;\n};\n\nconst noOp = () => {};\n\nexport function DefaultList<K extends string | number, D extends Record<string, any>>({\n  'aria-label': ariaLabel,\n  currentItemVariant,\n  currentKey,\n  data,\n  itemRenderer,\n  itemText,\n  onCurrentKeyChange,\n  onItemAction,\n  onLoadRange = noOp,\n  onSelectionChange,\n  searchText,\n  selectedKeys,\n  selectionMode\n}: Props<K, D>) {\n  const listItemRenderer = useCallback(\n    (listItemContext: ListItemContext<K, D>) => {\n      // specify the listItemContext props that we want to expose individually instead of\n      // spreading the whole object so that we don't automatically include any new props that\n      // may be added to it\n      const itemRendererProps: ItemRendererProps<K, D> = {\n        data: listItemContext.data,\n        index: listItemContext.index,\n        metadata: listItemContext.metadata,\n        selector: listItemContext.selector,\n        searchText,\n        selectedKeys,\n        onSelectionChange: ({ target, value }) => {\n          onSelectionChange?.({\n            target,\n            value: { all: false, keys: value }\n          });\n        }\n      };\n      const itemContext = {\n        data: listItemContext.data,\n        key: listItemContext.metadata.key,\n        metadata: listItemContext.metadata\n      };\n      return itemRenderer ? (\n        itemRenderer(itemRendererProps)\n      ) : (\n        <Flex>\n          {listItemContext.selector && listItemContext.selector()}\n          <div class={itemStyles}>\n            <HighlightText matchText={searchText}>\n              {renderItemText(itemContext, itemText) as string}\n            </HighlightText>\n          </div>\n        </Flex>\n      );\n    },\n    [itemRenderer, itemText, onSelectionChange, searchText, selectedKeys]\n  );\n\n  const keys = useMemo(() => {\n    return { all: false, keys: selectedKeys ?? new Set<K>() };\n  }, [selectedKeys]) as Keys<K>;\n\n  return (\n    <List<K, D>\n      aria-label={ariaLabel}\n      allowTabbableMode={false}\n      currentItemVariant={currentItemVariant}\n      currentKey={currentKey}\n      data={data ?? null}\n      loadingIndicator={loadingIndicator}\n      onCurrentKeyChange={onCurrentKeyChange}\n      onItemAction={onItemAction}\n      onLoadRange={onLoadRange}\n      onSelectionChange={onSelectionChange}\n      role=\"listbox\"\n      selectedKeys={keys}\n      selectionMode={selectionMode}>\n      {(context: ListItemContext<K, D>) => listItemRenderer(context)}\n    </List>\n  );\n}\n\n/**\n * Custom 3 Skeleton loader for select multiple\n * TODO: to remove this once  is solved\n */\nconst loadingIndicator = (\n  <SkeletonContainer minimumCount={3}>\n    {() => {\n      return (\n        <Flex height=\"12x\" align=\"center\">\n          <Skeleton height=\"4x\" />\n        </Flex>\n      );\n    }}\n  </SkeletonContainer>\n);\n","export const KEYS = {\n  TAB: 'Tab',\n  ENTER: 'Enter',\n  NUMPAD_ENTER: 'NumpadEnter',\n  ESC: 'Escape',\n  SPACE: 'Space',\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  SHIFT_LEFT: 'ShiftLeft',\n  SHIFT_RIGHT: 'ShiftRight',\n  CTRL_LEFT: 'ControlLeft',\n  CTRL_RIGHT: 'ControlRight',\n  ALT_LEFT: 'AltLeft',\n  ALT_RIGHT: 'AltRight',\n  PAGE_UP: 'PageUp',\n  PAGE_DOWN: 'PageDown',\n  HOME: 'Home',\n  END: 'End',\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete'\n};\n\nexport const isControlKey = (event: KeyboardEvent) => {\n  switch (event.code) {\n    case KEYS.SHIFT_LEFT:\n    case KEYS.SHIFT_RIGHT:\n    case KEYS.CTRL_LEFT:\n    case KEYS.CTRL_RIGHT:\n    case KEYS.ALT_LEFT:\n    case KEYS.ALT_RIGHT:\n      return true;\n    default:\n      return event.metaKey || event.ctrlKey;\n  }\n};\n\nexport const isFunctionKey = (event: KeyboardEvent) => {\n  return /\\bF([1-9]|1[0-2])\\b/i.test(event.code);\n};\n\nexport const isControlOrFunctionKey = (event: KeyboardEvent) => {\n  return isControlKey(event) || isFunctionKey(event);\n};\n\nexport const isSimpleClick = (event: MouseEvent) => {\n  return event.button === 0 && !event.ctrlKey;\n};\n\nexport const preventDefault = (event: Event) => {\n  event.preventDefault();\n};\n\nexport const preventDefaultForCurrentTarget = (event: MouseEvent) => {\n  if (event.currentTarget === event.target) {\n    event.preventDefault();\n  }\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\n/**\n * `useOutsideMousedown` hook for capturing mousedown outside of an element\n */\nimport { RefObject } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport { coerceArray } from '../utils/UNSAFE_arrayUtils';\n\ntype Props = {\n  /**\n   * If true outside mousedown is disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Reference to element or array of elements relative to which outside mousedown is performed\n   */\n  ref: RefObject<HTMLElement> | RefObject<HTMLElement>[];\n  /**\n   * Outside mousedown callback\n   */\n  handler?: (event: MouseEvent) => void;\n};\n\nconst isPointOutside = (event: Event, ref: RefObject<HTMLElement>[]) => {\n  const target = event.target as HTMLElement;\n  if (target) {\n    const doc = getDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n  return ref.every((elRef) => !elRef.current?.contains(target));\n};\n\nconst getDocument = (node?: Node): Document => node?.ownerDocument ?? document;\n\nexport const useOutsideMousedown = ({ isDisabled: disabled = false, ref, handler }: Props) => {\n  useEffect(() => {\n    const refs = coerceArray(ref);\n    if (\n      !handler ||\n      disabled ||\n      (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1)\n    )\n      return;\n\n    const onMouseDown = (event: MouseEvent) => {\n      if (isPointOutside(event, refs)) {\n        handler?.(event);\n      }\n    };\n    const firstElRef = refs[0];\n    const doc = getDocument(firstElRef.current!);\n    if (doc) {\n      doc.addEventListener('mousedown', onMouseDown, true);\n\n      return () => {\n        doc.removeEventListener('mousedown', onMouseDown, true);\n      };\n    }\n    return undefined;\n  }, [disabled, handler, ref]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useEffect, useState } from 'preact/hooks';\nimport { Floating, PositionData } from '../UNSAFE_Floating';\nimport { Layer } from '../UNSAFE_Layer';\nimport { KEYS, isControlOrFunctionKey, preventDefaultForCurrentTarget } from './eventUtils';\nimport { dropdownStyles } from './themes/dropdownStyles.css';\nimport { useOutsideMousedown } from './useOutsideMousedown';\n\ntype FloatingProps = ComponentProps<typeof Floating>;\n\ntype Props = {\n  anchorRef: MutableRef<HTMLElement | null>;\n  children?: ComponentChildren;\n  dropdownRef: MutableRef<HTMLElement | null>;\n  id?: string;\n  isOpen?: boolean;\n  onAutoDismiss?: (event?: Event) => void;\n  onPosition?: FloatingProps['onPosition'];\n};\n\nconst DEFAULT_PLACEMENT = 'bottom-start';\n\nexport function Dropdown({\n  anchorRef,\n  children,\n  dropdownRef,\n  id,\n  isOpen,\n  onAutoDismiss,\n  onPosition\n}: Props) {\n  const [placement, setPlacement] = useState<FloatingProps['placement']>(DEFAULT_PLACEMENT);\n\n  useEffect(() => {\n    // reset the placement to the default when the dropdown closes, not opens, so that it doesn't\n    // initially open in the previous position and then move to the default position on the\n    // rerender after the state is updated\n    if (!isOpen) {\n      setPlacement(DEFAULT_PLACEMENT);\n    }\n  }, [isOpen, setPlacement]);\n\n  const handlePosition = useCallback(\n    (positionData: PositionData) => {\n      // update the placement so that the dropdown stays where it is until there is a collision,\n      // i.e. it no longer fits, instead of letting it try to move back to the default position\n      // on every render\n      setPlacement(positionData.placement);\n\n      // call the callback that was passed in through props\n      onPosition?.(positionData);\n    },\n    [onPosition, setPlacement]\n  );\n\n  const handleAutoDismiss = useCallback(\n    (event: Event) => {\n      onAutoDismiss?.(event);\n    },\n    [onAutoDismiss]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.defaultPrevented || isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.ESC:\n        case KEYS.TAB:\n          handleAutoDismiss(event);\n          break;\n      }\n    },\n    [handleAutoDismiss]\n  );\n\n  // use the mousedown event to be consistent with legacy JET and so that we're hiding the dropdown\n  // on the same event where focus will transfer\n  useOutsideMousedown({\n    isDisabled: !isOpen,\n    ref: [anchorRef, dropdownRef],\n    handler: handleAutoDismiss\n  });\n\n  // TODO: get dropdown y (mainAxis) offset from --oj-c-PRIVATE-DO-NOT-USE-private-core-global-dropdown-offset\n  const offsetValue = { mainAxis: 4, crossAxis: 0 };\n\n  const inlineStyle = isOpen\n    ? {\n        minWidth: `${anchorRef.current?.offsetWidth}px`\n      }\n    : {};\n\n  return !isOpen ? null : (\n    <Layer logicalParentRef={anchorRef}>\n      <Floating\n        anchorRef={anchorRef}\n        sizeOptions={{\n          isMaxHeightAdjusted: true,\n          maxHeightCeiling: 400\n        }}\n        ref={dropdownRef}\n        placement={placement}\n        offsetValue={offsetValue}\n        onPosition={handlePosition}>\n        <div\n          class={dropdownStyles.base}\n          id={id}\n          style={inlineStyle}\n          onKeyDown={handleKeyDown}\n          onMouseDown={preventDefaultForCurrentTarget}>\n          {children}\n        </div>\n      </Floating>\n    </Layer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { DropdownArrowIcon } from '../PRIVATE_ThemedIcons/DropdownArrowIcon';\nimport { classNames } from '../utils/UNSAFE_classNames';\n\ntype Props = {\n  isDisabled?: boolean;\n  onClick?: () => void;\n  size?: 'md' | 'sm';\n};\n\n// TODO: replace this with var(--oj-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-button-sm-height) once it is available\nconst ojButtonSmHeight = '2.25rem';\n// TODO: replace this with var(--oj-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var (--oj-button-borderless-chrome-text-color-disabled) once it is available\nconst ojButtonBorderlessChromeTextColorDisabled =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)';\n// TODO: replace this with var(--oj-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n\nconst rootStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor,\n    fontSize: ojButtonIconSize\n  }}`,\n\n  sizeMd: cssProps`${{\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight\n  }}`,\n\n  sizeSm: cssProps`${{\n    width: ojButtonSmHeight,\n    height: ojButtonSmHeight,\n    lineHeight: ojButtonSmHeight\n  }}`,\n\n  enabled: cssProps`${{\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`,\n\n  disabled: cssProps`${{\n    color: ojButtonBorderlessChromeTextColorDisabled\n  }}`\n};\n\nconst noop = () => {};\n\nexport function DropdownArrow({ isDisabled = false, onClick, size = 'md' }: Props) {\n  const preventDefault = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const { pressProps } = usePress(onClick ?? noop, { isDisabled });\n\n  const styleClasses = classNames([\n    rootStyles.base,\n    size === 'sm' ? rootStyles.sizeSm : rootStyles.sizeMd,\n    isDisabled ? rootStyles.disabled : rootStyles.enabled\n  ]);\n\n  return (\n    <span\n      aria-hidden=\"true\"\n      class={styleClasses}\n      tabIndex={-1}\n      onMouseDown={preventDefault}\n      {...pressProps}>\n      <DropdownArrowIcon />\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { CollectionGestureContext } from '../hooks/PRIVATE_useCollectionGestureContext';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\n\nconst rootStyles = {\n  base: cssProps`${{\n    paddingLeft: '0',\n    paddingRight: '0',\n    margin: '1px 0 2px 0',\n    position: 'relative',\n    overflowX: 'hidden',\n    overflowY: 'auto',\n    // '-webkit-tap-highlight-color': 'transparent',\n    boxSizing: 'border-box',\n\n    display: 'flex',\n    flexDirection: 'column'\n  }}`,\n\n  // TODO: These should really be applied directly to the child ListView so that the content\n  // displays under the padding when scrolled, but we can't apply styles to the child collection.\n  // TODO: Also need to figure out how to determine whether the collection is a ListView (in\n  // the collectionRenderer case) in order to apply this styling.\n  topGap: cssProps`${{\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`,\n  bottomGap: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`,\n\n  loading: cssProps`${{\n    minHeight: 'calc(10 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))'\n  }}`\n};\n\ntype Props = {\n  children?: ComponentChildren;\n  hasBottomGap?: boolean;\n  isLoading?: boolean;\n};\n\nexport function DropdownList({ children, hasBottomGap = true, isLoading = false }: Props) {\n  const styleClasses = classNames([\n    rootStyles.base,\n    rootStyles.topGap,\n    hasBottomGap && rootStyles.bottomGap,\n    isLoading && rootStyles.loading\n  ]);\n  return (\n    <CollectionGestureContext.Provider value={'embedded'}>\n      <div class={styleClasses} onMouseDown={preventDefaultForCurrentTarget}>\n        {children}\n      </div>\n    </CollectionGestureContext.Provider>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Layer } from '../UNSAFE_Layer';\nimport { WindowOverlay } from '../UNSAFE_WindowOverlay';\nimport { mobileDropdownStyles } from './themes/mobileDropdownStyles.css';\n\ntype Props = {\n  /**\n   * The dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The id for the top level element\n   */\n  id?: string;\n\n  /**\n   * Specifies whether the dropdown is being shown\n   */\n  isOpen?: boolean;\n};\n\nexport function MobileDropdown({ children, id, isOpen }: Props) {\n  return !isOpen ? null : (\n    <Layer>\n      <WindowOverlay>\n        <div id={id} class={mobileDropdownStyles.base} role=\"dialog\" aria-modal=\"true\">\n          <Flex width=\"100%\" height=\"100%\" maxHeight=\"100%\" direction=\"column\">\n            {children}\n          </Flex>\n        </div>\n      </WindowOverlay>\n    </Layer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\n\ntype InlineUserAssistanceProps = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'fieldLabel'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'id'\n  | 'userAssistanceDensity'\n>;\n\nconst rootStyles = cssProps`${{\n  borderTopColor: 'rgba(var(--oj-c-PRIVATE-DO-NOT-USE-palette-neutral-rgb-190), 0.1)',\n  borderTopStyle: 'solid',\n  borderTopWidth: '1px',\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n}}`;\n\nexport function DropdownUserAssistance(props: InlineUserAssistanceProps) {\n  // Prevent the focus from transferring when the user clicks on an empty/non-clickable area\n  // of the user assistance\n  const handleMouseDown = useCallback((event: MouseEvent) => {\n    // Don't call preventDefault when the user clicks on the help source link, so that the\n    // focus is allowed to transfer in that case.\n    if ((event.target as Element)?.tagName !== 'A') {\n      event.preventDefault();\n    }\n  }, []);\n\n  return (\n    <FormFieldContext.Provider value={{ isFocused: true }}>\n      <div class={rootStyles} onMouseDown={handleMouseDown}>\n        <InlineUserAssistance {...props} />\n      </div>\n    </FormFieldContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { preventDefaultForCurrentTarget } from './eventUtils';\n\nconst rootStyles = cssProps`${{\n  paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)',\n  paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n}}`;\n\nexport function EmptyResults() {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // TODO: figure out whether we need a separate resource string for this message;\n  // (JET-53984 - Preact Select* components: empty results message)\n\n  // call preventDefault for mousedown on this div so that focus does not transfer from\n  // the input\n  return (\n    <div class={rootStyles} onMouseDown={preventDefaultForCurrentTarget}>\n      {translations.select_noMatchesFound()}\n    </div>\n  );\n}\n","import { ComponentChildren, ComponentProps } from 'preact';\nimport { Divider } from '../UNSAFE_Divider';\nimport { MobileDropdown } from './MobileDropdown';\nimport { selectMobileDropdownStyles } from './themes/selectMobileDropdownStyles.css';\n\ntype MobileDropdownProps = ComponentProps<typeof MobileDropdown>;\ntype PassThroughMobileDropdownProps = Pick<MobileDropdownProps, 'id' | 'isOpen'>;\n\ntype Props = PassThroughMobileDropdownProps & {\n  /**\n   * The main dropdown content\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The components to be placed in the end of the dropdown\n   */\n  footer?: ComponentChildren;\n\n  /**\n   * The components to be placed in the beginning of the dropdown\n   */\n  header?: ComponentChildren;\n};\n\nexport function SelectMobileDropdown({ children, footer, header, id, isOpen }: Props) {\n  return (\n    <MobileDropdown id={id} isOpen={isOpen}>\n      {header}\n      <Divider />\n      {/* TODO: Add overflow support to View and use it here */}\n      {/*  */}\n      <div class={selectMobileDropdownStyles.content}>{children}</div>\n      <Divider />\n      {footer}\n    </MobileDropdown>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { DataState } from '../UNSAFE_Collection';\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if running on a mobile device, false otherwise\n */\nexport function isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\n/**\n * Helper function to determine whether the current device is a phone\n * @returns true if running on a phone, false otherwise\n */\nexport function isPhone() {\n  return getClientHints().deviceType === 'phone';\n}\n\n/**\n * Helper function to determine whether the current device is a tablet\n * @returns true if running on a tablet, false otherwise\n */\nexport function isTablet() {\n  return getClientHints().deviceType === 'tablet';\n}\n\nexport function isBeforeDataFetch<K, D>(data: DataState<K, D>) {\n  return data.sizePrecision === 'atLeast' && data.totalSize === 0;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { CurrentKeyDetail, DataState } from '../UNSAFE_Collection';\nimport { PositionData } from '../UNSAFE_Floating';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, isSimpleClick, KEYS } from './eventUtils';\n\ntype UseSelectCommonProps<K, D> = {\n  data?: DataState<K, D> | null;\n  inputRef: Ref<HTMLElement>;\n  isFocused?: boolean;\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n};\n\n/**\n * Hook that manages state and behavior for a Select* component.  This hook creates state\n * variables and event listeners, returning properties to apply to components internally\n * rendered by a Select* component, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isFocused Specifies whether the component has focus.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n *\n * @returns Component state and event listeners.\n */\nexport function useSelectCommon<K, D>({\n  data,\n  inputRef,\n  isFocused,\n  onFilter\n}: UseSelectCommonProps<K, D>) {\n  const mainFieldRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [isDropdownAbove, setDropdownAbove] = useState(false);\n  const [currentRow, setCurrentRow] = useState<{ rowKey?: K }>({\n    rowKey: undefined\n  });\n  const [selectedKeys, setSelectedKeys] = useState<Set<K>>();\n  const [isUserFiltering, setUserFiltering] = useState(false);\n  const [userInput, setUserInput] = useState<string>();\n  const [searchText, setSearchText] = useState<string>();\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent) => {\n      // const target = event.target as HTMLElement;\n      if (event.defaultPrevented || !isSimpleClick(event)) {\n        return;\n      }\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      // this is needed to focus the input when clicking on the inside label when there is no\n      // value;  otherwise the component looks focused but doesn't actually have physical focus\n      setTimeout(function () {\n        inputRef.current?.focus();\n      }, 0);\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownArrowClick = useCallback(() => {\n    setDropdownOpen(!isDropdownOpen);\n\n    // focus the input so that if the user Tabs afterwards, it loses focus and the dropdown closes\n    inputRef.current?.focus();\n  }, [inputRef, isDropdownOpen]);\n\n  const handleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        setDropdownOpen(false);\n\n        switch (event?.type) {\n          case 'keydown':\n            const keyboardEvent = event as KeyboardEvent;\n            switch (keyboardEvent.code) {\n              case KEYS.ESC:\n                // focus the input when the user cancels out of the dropdown\n                inputRef.current?.focus();\n                break;\n              default:\n                break;\n            }\n            break;\n          case 'mousedown':\n            // if focus is in the dropdown, focus the input before the dropdown is hidden so that\n            // focus will transfer correctly when the target is not focusable;\n            // otherwise the text cursor appears in the input again\n            if (dropdownRef.current?.contains(document.activeElement)) {\n              inputRef.current?.focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    [inputRef, isDropdownOpen]\n  );\n\n  const handleDropdownPosition = useCallback((data: PositionData) => {\n    setDropdownAbove(data.placement.startsWith('top'));\n  }, []);\n\n  const handleUpDownArrowKeys = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      } else {\n        // transfer physical focus into the dropdown\n        const firstFocusableElem = dropdownRef.current?.querySelector('[tabindex=\"0\"]');\n        (firstFocusableElem as HTMLElement)?.focus();\n\n        // if there is no current item set, make the first item current\n        if (data !== undefined && currentRow.rowKey === undefined) {\n          setCurrentRow({ rowKey: data?.data?.[0]?.metadata?.key });\n        }\n      }\n\n      // prevent the page from scrolling\n      event.preventDefault();\n    },\n    [currentRow, data, isDropdownOpen]\n  );\n\n  const handleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.PAGE_UP:\n        case KEYS.PAGE_DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n\n          return;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleMainFieldKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n      setUserFiltering(true);\n      setUserInput(detail.value);\n      const str = detail.value?.trim();\n      setSearchText(str);\n      onFilter?.({ searchText: str });\n    },\n    [isDropdownOpen, onFilter]\n  );\n\n  const onCurrentKeyChange = useCallback((detail: CurrentKeyDetail<K>) => {\n    setCurrentRow({ rowKey: detail.value });\n  }, []);\n\n  const stopFiltering = useCallback(() => {\n    setUserFiltering(false);\n    setUserInput('');\n    setSearchText('');\n  }, []);\n\n  // the user is not actively filtering if the dropdown is closed and the component doesn't\n  // have focus\n  useEffect(() => {\n    if (!isDropdownOpen && !isFocused && isUserFiltering) {\n      stopFiltering();\n    }\n  }, [isDropdownOpen, isFocused, isUserFiltering, stopFiltering]);\n\n  // need to call onFilter with undefined searchText when the dropdown opens and the\n  // user is NOT filtering\n  useEffect(() => {\n    if (isDropdownOpen && !isUserFiltering) {\n      onFilter?.({ searchText: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering, onFilter]);\n\n  // when the dropdown closes, reset the isDropdownAbove flag\n  useEffect(() => {\n    if (!isDropdownOpen) {\n      setDropdownAbove(false);\n    }\n  }, [isDropdownOpen]);\n\n  return {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    // the field should remain to look focused while the dropdown is open,\n    // in case physical focus is in the dropdown\n    isFocused: isFocused || isDropdownOpen,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    setUserInput,\n    stopFiltering,\n    userInput\n  };\n}\n"],"names":["renderItemText","item","itemText","data","hasOwnProperty","retData","String","Logger","error","noOp","loadingIndicator","_jsx","jsx","SkeletonContainer","minimumCount","children","KEYS","TAB","ENTER","NUMPAD_ENTER","ESC","SPACE","LEFT","UP","RIGHT","DOWN","SHIFT_LEFT","SHIFT_RIGHT","CTRL_LEFT","CTRL_RIGHT","ALT_LEFT","ALT_RIGHT","PAGE_UP","PAGE_DOWN","HOME","END","BACKSPACE","DELETE","isControlKey","event","code","metaKey","ctrlKey","isFunctionKey","test","isControlOrFunctionKey","isSimpleClick","button","preventDefaultForCurrentTarget","currentTarget","target","preventDefault","getDocument","node","ownerDocument","document","useOutsideMousedown","isDisabled","disabled","ref","handler","useEffect","refs","coerceArray","length","findIndex","elRef","current","onMouseDown","contains","every","isPointOutside","firstElRef","doc","addEventListener","removeEventListener","DEFAULT_PLACEMENT","rootStyles","noop","MobileDropdown","id","isOpen","Layer","WindowOverlay","class","mobileDropdownStyles","base","role","Flex","width","height","maxHeight","direction","ariaLabel","currentItemVariant","currentKey","itemRenderer","onCurrentKeyChange","onItemAction","onLoadRange","onSelectionChange","searchText","selectedKeys","selectionMode","listItemRenderer","useCallback","listItemContext","itemRendererProps","itemContext","key","metadata","keys","useMemo","all","Set","List","allowTabbableMode","context","anchorRef","dropdownRef","onAutoDismiss","onPosition","placement","setPlacement","useState","handlePosition","positionData","handleAutoDismiss","handleKeyDown","defaultPrevented","inlineStyle","minWidth","offsetWidth","logicalParentRef","Floating","sizeOptions","isMaxHeightAdjusted","maxHeightCeiling","offsetValue","mainAxis","crossAxis","dropdownStyles","style","onKeyDown","onClick","size","pressProps","usePress","hasBottomGap","isLoading","props","handleMouseDown","tagName","FormFieldContext","Provider","value","isFocused","InlineUserAssistance","translations","useTranslationBundle","select_noMatchesFound","footer","header","_jsxs","jsxs","Divider","selectMobileDropdownStyles","content","sizePrecision","totalSize","deviceType","getClientHints","inputRef","onFilter","mainFieldRef","useRef","isDropdownOpen","setDropdownOpen","isDropdownAbove","setDropdownAbove","currentRow","setCurrentRow","rowKey","undefined","setSelectedKeys","isUserFiltering","setUserFiltering","userInput","setUserInput","setSearchText","setTimeout","focus","handleDropdownArrowClick","handleDropdownAutoDismiss","type","activeElement","handleDropdownPosition","startsWith","handleUpDownArrowKeys","firstFocusableElem","querySelector","handleMainFieldKeyDown","stopPropagation","handleMainFieldKeyUp","handleInput","detail","str","trim","stopFiltering"],"mappings":"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"}