{"version":3,"file":"IconMenuButton-be98d180.js","sources":["../../src/UNSAFE_IconMenuButton/IconMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLayout } from '../UNSAFE_ButtonLayout';\n\nimport { ChevronDownIcon } from '../PRIVATE_ThemedIcons/ChevronDownIcon';\n\nimport { Menu } from '../UNSAFE_Menu';\nimport { useMenuAction, MenuToggleDetail } from '../hooks/UNSAFE_useMenuAction';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\n\nimport { BaseButton } from '../UNSAFE_BaseButton';\n\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\n\nimport { ComponentChildren, ComponentChild, Fragment } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useRef, useImperativeHandle } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type BaseProps = WidthInterpolationProps & {\n  /**\n   * children - One or more MenuItems, dividers, or Menu groups\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The icon is the button's icon.  Note that this is not the menu\n   * expand icon shown on the right (or to the left in right to left mode).\n   */\n  icon?: ComponentChild;\n\n  /**\n   * Specifies that the button element should be disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if only the icon is shown, and no down chevron.\n   */\n  isIconOnly?: boolean;\n\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the button.\n   */\n  'aria-describedby'?: string;\n\n  /**\n   * Specifies if the menu is open\n   */\n  isMenuOpen?: boolean;\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggleMenu?: (details: MenuToggleDetail) => void;\n\n  /**\n   * Indicates in what states the button has chrome (background and border).\n   *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n   * buttons are useful for supplemental actions that require minimal emphasis.\",\n   *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n   * solid buttons. Outlined buttons are useful for secondary actions.\",\n   *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n   *  most important actions in the UI.\"\n   */\n  variant?: 'borderless' | 'outlined' | 'solid';\n\n  /**\n   * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n   */\n  size?: 'sm' | 'md' | 'lg';\n};\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      accessibleLabel: string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      accessibleLabel?: string;\n\n      tooltip: string;\n    };\n\n/**\n * A IconMenuButton is a combined action and menu button.\n */\nexport const IconMenuButton = forwardRef(\n  (\n    {\n      children,\n      tooltip,\n      accessibleLabel,\n      variant = 'outlined',\n      isDisabled = false,\n      isMenuOpen = false,\n      isIconOnly = false,\n      onToggleMenu,\n      size = 'md',\n      width,\n      icon,\n      'aria-describedby': ariaDescribedBy\n    }: BaseProps & VariationAccessibleLabelProps,\n    ref?: ForwardedRef<HTMLButtonElement>\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref!, () => buttonRef.current!, [buttonRef]);\n\n    const { triggerProps, menuProps } = useMenuAction({\n      isDisabled: isDisabled,\n      onToggleMenu: onToggleMenu,\n      isMenuOpen: isMenuOpen,\n      anchorRef: buttonRef\n    });\n\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ? tooltip : accessibleLabel,\n      isDisabled: isMenuOpen\n    });\n\n    const rootButton = (\n      <Fragment>\n        <BaseButton\n          {...mergeProps(tooltipProps, triggerProps)}\n          styling={isMenuOpen ? ['min', 'active'] : ['min']}\n          isDisabled={isDisabled}\n          variant={variant}\n          width={width}\n          size={size}\n          ref={buttonRef}\n          aria-describedby={ariaDescribedBy}\n          aria-label={accessibleLabel ?? tooltip}>\n          <ButtonLayout\n            display={'icons'}\n            startIcon={icon}\n            endIcon={isIconOnly ? null : <ChevronDownIcon />}\n            size={size}></ButtonLayout>\n          {tooltipContent}\n        </BaseButton>\n      </Fragment>\n    );\n\n    return isDisabled ? (\n      rootButton\n    ) : (\n      <Fragment>\n        {rootButton}\n        <Menu {...menuProps}>{children}</Menu>\n      </Fragment>\n    );\n  }\n);\n"],"names":["IconMenuButton","forwardRef","children","tooltip","accessibleLabel","variant","isDisabled","isMenuOpen","isIconOnly","onToggleMenu","size","width","icon","ariaDescribedBy","ref","buttonRef","useRef","useImperativeHandle","current","triggerProps","menuProps","useMenuAction","anchorRef","tooltipContent","tooltipProps","useTooltip","text","rootButton","_jsx","jsx","Fragment","_jsxs","jsxs","BaseButton","mergeProps","styling","ButtonLayout","display","startIcon","endIcon","ChevronDownIcon","Menu"],"mappings":"4ZAyGa,MAAAA,EAAiBC,EAAUA,YACtC,EAEIC,WACAC,UACAC,kBACAC,UAAU,WACVC,cAAa,EACbC,cAAa,EACbC,cAAa,EACbC,eACAC,OAAO,KACPC,QACAC,OACA,mBAAoBC,GAEtBC,KAEA,MAAMC,EAAYC,SAA0B,MAC5CC,EAAmBA,oBAACH,GAAM,IAAMC,EAAUG,SAAU,CAACH,IAErD,MAAMI,aAAEA,EAAYC,UAAEA,GAAcC,gBAAc,CAChDf,WAAYA,EACZG,aAAcA,EACdF,WAAYA,EACZe,UAAWP,KAGPQ,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMvB,GAAoBC,EAC1BE,WAAYC,IAGRoB,EACJC,EAAAC,IAACC,WACC,CAAA5B,SAAA6B,EAAAC,KAACC,aACK,IAAAC,EAAAA,WAAWV,EAAcL,GAC7BgB,QAAS5B,EAAa,CAAC,MAAO,UAAY,CAAC,OAC3CD,WAAYA,EACZD,QAASA,EACTM,MAAOA,EACPD,KAAMA,EACNI,IAAKC,qBACaF,EAAe,aACrBT,GAAmBD,YAC/ByB,EAAAA,IAACQ,EAAAA,cACCC,QAAS,QACTC,UAAW1B,EACX2B,QAAS/B,EAAa,KAAOoB,MAACY,EAAAA,mBAC9B9B,KAAMA,IACPa,OAKP,OAAOjB,EACL,EAEAyB,EAAAC,KAACF,EAAQA,SACN,CAAA5B,SAAA,CAAAyB,EACDC,EAAAA,IAACa,EAAAA,KAAI,IAAKrB,EAASlB,SAAGA,MAEzB"}