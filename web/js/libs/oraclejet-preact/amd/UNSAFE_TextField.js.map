{"version":3,"file":"UNSAFE_TextField.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextField.tsx","../../src/UNSAFE_TextField/TextFieldContent.tsx","../../src/UNSAFE_TextField/StyledTextField.tsx","../../src/UNSAFE_TextField/MaxLengthLiveRegion.tsx","../../src/UNSAFE_TextField/TextField.tsx"],"sourcesContent":["import { ComponentChildren } from 'preact';\n\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { ReadonlyTextFieldVariantOptions } from './themes/ReadonlyTextFieldStyles.css';\nimport { TextFieldStyles } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { ReadonlyTextFieldRedwoodTheme } from './themes/redwood/ReadonlyTextFieldTheme';\n\ntype DivProps = HTMLAttributesSignalExcluded<HTMLDivElement>;\ntype UAProps = {\n  compactUserAssistance?: ComponentChildren;\n  inlineUserAssistance?: ComponentChildren;\n};\ntype InnerOuterClassNamesProps = {\n  outerClassNames?: string;\n  innerClassNames?: string;\n};\n\ntype StartTopLabelReadonlyTextFieldProps = Omit<DivProps, 'label'> &\n  UAProps &\n  InnerOuterClassNamesProps & {\n    label?: ComponentChildren;\n    labelEdge?: 'start' | 'top';\n    labelStartWidth?: Size;\n  };\n\nconst StartTopLabelReadonlyTextField = ({\n  outerClassNames,\n  innerClassNames,\n  label,\n  labelEdge,\n  labelStartWidth,\n  compactUserAssistance,\n  inlineUserAssistance,\n  children,\n  ...props\n}: StartTopLabelReadonlyTextFieldProps) => {\n  return (\n    <div {...props} class={outerClassNames}>\n      {compactUserAssistance}\n      <LabelValueLayout label={label} labelEdge={labelEdge} labelStartWidth={labelStartWidth}>\n        <div class={innerClassNames}>{children}</div>\n      </LabelValueLayout>\n      {inlineUserAssistance}\n    </div>\n  );\n};\n\ntype InsideLabelReadonlyTextFieldProps = DivProps & UAProps & InnerOuterClassNamesProps;\nconst InsideLabelReadonlyTextField = ({\n  outerClassNames,\n  innerClassNames,\n  compactUserAssistance,\n  inlineUserAssistance,\n  children,\n  ...props\n}: InsideLabelReadonlyTextFieldProps) => {\n  return (\n    <div {...props} class={outerClassNames}>\n      {compactUserAssistance}\n      <div class={innerClassNames}>{children}</div>\n      {inlineUserAssistance}\n    </div>\n  );\n};\n\nexport type StyleProps = UAProps & {\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  variant?: 'textarea';\n};\n\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const ReadonlyTextField = ({ label, labelEdge, children, variant, ...props }: Props) => {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const hasInsideLabel = label !== undefined && labelEdge === 'inside';\n  const isInsideNonReadonlyForm = isFormLayout && !isReadonlyForm;\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const { classes, styles } = useComponentTheme(TextFieldRedwoodTheme, {\n    readonly: 'isReadonly'\n  });\n  const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n  const { classes: readonlyClassNames } = useComponentTheme<\n    ReadonlyTextFieldVariantOptions,\n    TextFieldStyles\n  >(ReadonlyTextFieldRedwoodTheme, {\n    insideNonReadonlyForm: isInsideNonReadonlyForm\n      ? 'isInsideNonReadonlyForm'\n      : 'notInsideNonReadonlyForm',\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    textarea: variant === 'textarea' ? 'isTextArea' : 'notTextArea',\n    loading: isLoading ? 'isLoading' : 'notLoading',\n    withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n    inputGroupPosition\n  });\n\n  const { formControlBase } = styles;\n  const outerClassNames = classNames([classes, formControlBase, formLayoutTheme, labelBaseTheme]);\n\n  if (label !== undefined && (labelEdge === 'start' || labelEdge === 'top')) {\n    return (\n      <StartTopLabelReadonlyTextField\n        outerClassNames={outerClassNames}\n        innerClassNames={readonlyClassNames}\n        label={label}\n        labelEdge={labelEdge}\n        {...props}>\n        {children}\n      </StartTopLabelReadonlyTextField>\n    );\n  }\n\n  return (\n    <InsideLabelReadonlyTextField\n      outerClassNames={outerClassNames}\n      innerClassNames={readonlyClassNames}\n      {...props}>\n      {label}\n      {children}\n    </InsideLabelReadonlyTextField>\n  );\n};\n","import { ComponentChildren, Ref } from 'preact';\n\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\n\ntype VariantProps = {\n  contentVariant?: 'input' | 'textarea';\n  statusVariant?: 'error' | 'none' | 'warning';\n  styleVariant?: 'default' | 'embedded';\n};\n\ntype Props = VariantProps & {\n  mainContent?: ComponentChildren;\n  insideLabel?: ComponentChildren;\n  startContent?: ComponentChildren;\n  endContent?: ComponentChildren;\n  resize?: 'horizontal' | 'vertical' | 'both';\n  rootRef?: Ref<HTMLDivElement>;\n  hasZeroStartMargin?: boolean;\n};\n\n// Renders the oj-text-field-container dom which includes the\n// start, middle (where the inside label and inputElem goes),\n// and end pieces of the form component.\n// This does not include user assistance because that is rendered outside the\n// oj-text-field-container; that is rendered in the TextField component.\nexport const TextFieldContent = ({\n  contentVariant = 'input',\n  insideLabel,\n  mainContent,\n  startContent,\n  statusVariant = 'none',\n  styleVariant = 'default',\n  endContent,\n  resize,\n  rootRef,\n  hasZeroStartMargin\n}: Props) => {\n  const { isDisabled, isFocused, isLoading } = useFormFieldContext();\n  const { direction } = useUser();\n  const isLtr = direction === 'ltr';\n  const hasInsideLabel = insideLabel !== undefined;\n  const inputGroupContext = useInputGroupContext();\n  const hasGroupContext = inputGroupContext !== null;\n  // depending on browser direction, apply the appropriate styling.\n  // when 'rtl' the flex row direction is reversed.\n  const inputGroupPosition = inputGroupContext\n    ? inputGroupContext.last\n      ? isLtr\n        ? 'groupRight'\n        : 'groupLeft'\n      : inputGroupContext.index === 0\n      ? isLtr\n        ? 'groupLeft'\n        : 'groupRight'\n      : 'groupMiddle'\n    : undefined;\n\n  const {\n    variantClasses,\n    styles: { textFieldContainerBase }\n  } = useComponentTheme<TextFieldVariantOptions, TextFieldStyles>(TextFieldRedwoodTheme, {\n    statusVariant,\n    styleVariant,\n    contentVariant,\n    insideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    focused: isFocused ? 'isFocused' : 'notFocused',\n    disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n    loading: isLoading ? 'isLoading' : 'notLoading',\n    resize: resize ?? 'none',\n    withinGroup: hasGroupContext ? 'isWithinGroup' : undefined,\n    inputGroupPosition\n  });\n\n  const { variantClasses: startContentStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    {\n      startContent: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n      startContentMargin: hasZeroStartMargin ? 'noStartMargin' : 'hasStartMargin',\n      startContentDisabled: isDisabled ? 'isDisabled' : 'notDisabled'\n    }\n  );\n  const { variantClasses: middleStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    { middleContent: contentVariant }\n  );\n  const { variantClasses: endContentStyles } = useComponentTheme<TextFieldVariantOptions>(\n    TextFieldRedwoodTheme,\n    { endContent: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel' }\n  );\n\n  return (\n    <div\n      role=\"presentation\"\n      class={classNames([variantClasses, textFieldContainerBase])}\n      ref={rootRef}>\n      {startContent && (\n        <span class={startContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {startContent}\n          </Flex>\n        </span>\n      )}\n      <div class={middleStyles}>\n        {insideLabel}\n        {mainContent}\n      </div>\n      {endContent && (\n        <span class={endContentStyles}>\n          <Flex justify=\"center\" align=\"center\" hasZeroMargins={true}>\n            {endContent}\n          </Flex>\n        </span>\n      )}\n    </div>\n  );\n};\n","import { classNames } from '../utils/UNSAFE_classNames';\nimport { StyledComponentProps } from '../utils/UNSAFE_typeUtils';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TextFieldStyles, TextFieldVariantOptions } from './themes/TextFieldStyles.css';\nimport { useInputGroupContext } from '../hooks/UNSAFE_useInputGroupContext';\nimport { FormLayoutRedwoodTheme } from './themes/redwood/FormLayoutTheme';\nimport { LabelRedwoodTheme } from '../UNSAFE_Label/themes/redwood/LabelTheme';\nimport { TextFieldRedwoodTheme } from './themes/redwood/TextFieldTheme';\nimport { SkeletonRedwoodTheme } from '../UNSAFE_Skeleton/themes/redwood/SkeletonTheme';\n\nexport type StyleProps = {\n  hasInsideLabel?: boolean;\n  variant?: 'default' | 'embedded';\n};\ntype Props = StyledComponentProps<'div', StyleProps>;\n\nexport const StyledTextField = ({\n  hasInsideLabel = false,\n  variant = 'default',\n  ...props\n}: Props) => {\n  // because of the mismatch of height for inputs with inside labels and no labels,\n  // we'll have to set everything to the same min-height while within an input group context.\n  // Here we'll look to see if it's present and apply the style as needed\n  const groupContext = useInputGroupContext();\n  const { isReadonly } = useFormFieldContext();\n  const { baseTheme: formLayoutTheme } = useComponentTheme(FormLayoutRedwoodTheme);\n  const { baseTheme: labelBaseTheme } = useComponentTheme(LabelRedwoodTheme);\n  const { classes: textFieldClasses, styles } = useComponentTheme<\n    TextFieldVariantOptions,\n    TextFieldStyles\n  >(TextFieldRedwoodTheme, {\n    readonly: isReadonly ? 'isReadonly' : 'notReadonly',\n    formControlInsideLabel: hasInsideLabel ? 'hasInsideLabel' : 'noInsideLabel',\n    withinGroup: groupContext !== null ? 'isWithinGroup' : undefined\n  });\n\n  const { formControlBase, textFieldBase, textFieldEmbedded } = styles;\n\n  // because TextField components reference Skeleton scoped vars, we need to bring in the Skeleton base theme\n  // to pick up the scoped var definitions.\n  const { baseTheme: skeletonBaseTheme } = useComponentTheme(SkeletonRedwoodTheme);\n\n  const classes = classNames([\n    skeletonBaseTheme,\n    formControlBase,\n    textFieldBase,\n    variant === 'embedded' && textFieldEmbedded,\n    textFieldClasses,\n    formLayoutTheme,\n    labelBaseTheme\n  ]);\n\n  return <div {...props} class={classes} />;\n};\n","import { Fragment } from 'preact';\nimport { useDebounce } from '../hooks/UNSAFE_useDebounce';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\n\ntype Props = {\n  isMaxLengthExceeded?: boolean;\n  maxLength: number;\n  valueLength?: number;\n};\n\nconst MAX_LENGTH_UPDATE_DELAY = 500;\n\nexport function MaxLengthLiveRegion({ isMaxLengthExceeded, maxLength, valueLength = 0 }: Props) {\n  // Comment copied from InputBase.js in Big JET:\n  // Only update the aria-live div when the user has paused for more than\n  // 500 milliseconds. That way, we avoid queued up aria-live messages which\n  // would be annoying and not helpful. The 500ms was agreed upon in the\n  // accessibility review meeting.\n  const debouncedRemainingChars = useDebounce(maxLength - valueLength, MAX_LENGTH_UPDATE_DELAY);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const maxLengthExceededTranslatedString = translations.formControl_maxLengthExceeded({\n    MAX_LENGTH: `${maxLength}`\n  });\n  const remainingCharsTranslatedString = translations.formControl_maxLengthRemaining({\n    CHARACTER_COUNT: `${debouncedRemainingChars}`\n  });\n\n  return (\n    <Fragment>\n      <LiveRegion>{remainingCharsTranslatedString}</LiveRegion>\n      {isMaxLengthExceeded && (\n        <LiveRegion type=\"assertive\">{maxLengthExceededTranslatedString}</LiveRegion>\n      )}\n    </Fragment>\n  );\n}\n","import { ComponentChildren, ComponentProps, Ref } from 'preact';\n\nimport { LabelValueLayout } from '../UNSAFE_LabelValueLayout';\nimport { TextFieldContent } from './TextFieldContent';\nimport { StyledTextField } from './StyledTextField';\nimport { Size } from '../utils/UNSAFE_size';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\n// TextField takes the inputElem and userAssistanceContainer\n// and renders the form component's root dom, along with the\n// TextFieldContent, and the user assistance container.\n\n// The PickedProps are the ones we pass through to the the TextFieldContent\ntype PickedPropsFromTextFieldContent = Pick<\n  ComponentProps<typeof TextFieldContent>,\n  | 'hasZeroStartMargin'\n  | 'contentVariant'\n  | 'startContent'\n  | 'statusVariant'\n  | 'styleVariant'\n  | 'mainContent'\n  | 'endContent'\n  | 'resize'\n>;\ntype PickedPropsFromHTMLElement = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'id'>;\n// TODO: How should a parent component listen to events for the text field?  The recommendation\n// was to remove event listeners from TextField itself and instead configure the TextFieldInput\n// with them, for example, thus keeping TextField a more pure layout component.  The\n// TextFieldInput renders the focusable input element, and may be a more natural place for\n// listeners.  We would potentially have to add similar listeners for the ReadonlyTextField, but\n// that component renders the focusable element itself;  there is no TextFieldInput or analogous\n// component passed in.  (from review on 3/8/22)\ntype FocusEvents = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onFocus' | 'onBlur'>;\ntype KeyEvents = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'onKeyDown'>;\ntype MouseEvents = Pick<\n  HTMLAttributesSignalExcluded<HTMLDivElement>,\n  'onMouseDown' | 'onMouseEnter' | 'onMouseLeave'\n>;\ntype LabelProps = {\n  label?: ComponentChildren;\n  labelEdge?: 'inside' | 'start' | 'top';\n  labelStartWidth?: Size;\n};\ntype Props = PickedPropsFromTextFieldContent &\n  PickedPropsFromHTMLElement &\n  FocusEvents &\n  KeyEvents &\n  MouseEvents &\n  LabelProps & {\n    compactUserAssistance?: ComponentChildren;\n    inlineUserAssistance?: ComponentChildren;\n    mainFieldRef?: Ref<HTMLDivElement>;\n  };\n\n// TODO: Do we need named props for start/endContent, or could they just be children that get\n// wrapped in a flex layout?  (from review on 3/8/22)\n\n// TODO: Instead of passing the inputElem, label, and userAssistance as named props here, should we\n// have a separate layout component that lays them out, which could just be passed as a child\n// to the TextField?  (from review on 3/8/22)\n\nexport const TextField = ({\n  contentVariant,\n  id,\n  endContent,\n  mainContent,\n  startContent,\n  compactUserAssistance,\n  inlineUserAssistance,\n  label,\n  labelEdge,\n  labelStartWidth,\n  mainFieldRef,\n  resize,\n  statusVariant,\n  styleVariant,\n  hasZeroStartMargin,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onMouseDown,\n  onMouseEnter,\n  onMouseLeave\n}: Props) => {\n  // TODO: What are the implications for interoperability between new preact-based form components\n  // and the existing JET oj-form-layout?  The preact form components create their own start/top\n  // labels, while oj-form-layout expects to create those itself and wire them to the existing form\n  // components through attributes like labelled-by.  (from review on 3/8/22)\n\n  // TODO: How should a parent form component render component-specific content within TextField,\n  // for example an aria live region?  Instead of a children prop on TextField, could the parent\n  // component pass comp-specific content through other props, like inputElem?   The parent could\n  // have its own component that composes inputElem with additional DOM.  (from review on 3/8/22)\n\n  const isStartTop = label !== undefined && (labelEdge === 'start' || labelEdge === 'top');\n  const textFieldContent = (\n    <TextFieldContent\n      contentVariant={contentVariant}\n      endContent={endContent}\n      mainContent={mainContent}\n      resize={resize}\n      rootRef={mainFieldRef}\n      startContent={startContent}\n      statusVariant={statusVariant}\n      styleVariant={styleVariant}\n      hasZeroStartMargin={hasZeroStartMargin}\n      {...(!isStartTop ? { insideLabel: label } : {})}\n    />\n  );\n\n  const innerContent = (\n    <>\n      {compactUserAssistance}\n      {textFieldContent}\n      {inlineUserAssistance}\n    </>\n  );\n\n  const styledTextFieldChildren = isStartTop ? (\n    <LabelValueLayout label={label} labelEdge={labelEdge} labelStartWidth={labelStartWidth}>\n      {innerContent}\n    </LabelValueLayout>\n  ) : (\n    innerContent\n  );\n\n  return (\n    <StyledTextField\n      id={id}\n      hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n      onfocusin={onFocus}\n      onfocusout={onBlur}\n      onKeyDown={onKeyDown}\n      onMouseDown={onMouseDown}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      variant={styleVariant}>\n      {styledTextFieldChildren}\n    </StyledTextField>\n  );\n};\n"],"names":["StartTopLabelReadonlyTextField","outerClassNames","innerClassNames","label","labelEdge","labelStartWidth","compactUserAssistance","inlineUserAssistance","children","props","_jsxs","jsxs","class","_jsx","LabelValueLayout","InsideLabelReadonlyTextField","TextFieldContent","contentVariant","insideLabel","mainContent","startContent","statusVariant","styleVariant","endContent","resize","rootRef","hasZeroStartMargin","isDisabled","isFocused","isLoading","useFormFieldContext","direction","useUser","isLtr","hasInsideLabel","undefined","inputGroupContext","useInputGroupContext","hasGroupContext","inputGroupPosition","last","index","variantClasses","styles","textFieldContainerBase","useComponentTheme","TextFieldRedwoodTheme","focused","disabled","loading","withinGroup","startContentStyles","startContentMargin","startContentDisabled","middleStyles","middleContent","endContentStyles","role","classNames","ref","jsx","Flex","justify","align","hasZeroMargins","StyledTextField","variant","groupContext","isReadonly","baseTheme","formLayoutTheme","FormLayoutRedwoodTheme","labelBaseTheme","LabelRedwoodTheme","classes","textFieldClasses","readonly","formControlInsideLabel","formControlBase","textFieldBase","textFieldEmbedded","skeletonBaseTheme","SkeletonRedwoodTheme","isMaxLengthExceeded","maxLength","valueLength","debouncedRemainingChars","useDebounce","translations","useTranslationBundle","maxLengthExceededTranslatedString","formControl_maxLengthExceeded","MAX_LENGTH","remainingCharsTranslatedString","formControl_maxLengthRemaining","CHARACTER_COUNT","Fragment","LiveRegion","type","isFormLayout","isReadonlyForm","useFormContext","isInsideNonReadonlyForm","readonlyClassNames","ReadonlyTextFieldRedwoodTheme","insideNonReadonlyForm","textarea","id","mainFieldRef","onFocus","onBlur","onKeyDown","onMouseDown","onMouseEnter","onMouseLeave","isStartTop","textFieldContent","innerContent","_Fragment","styledTextFieldChildren","onfocusin","onfocusout"],"mappings":"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"}