{"version":3,"file":"IconButton-9c80142c.js","sources":["../../src/UNSAFE_IconButton/IconButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment, Ref } from 'preact';\nimport { BaseButton } from '../UNSAFE_BaseButton';\nimport { ButtonLayout } from '../UNSAFE_ButtonLayout';\nimport { forwardRef } from 'preact/compat';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { useTooltip } from '../hooks/UNSAFE_useTooltip';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLButtonElement>, 'autofocus'>;\n\n/**\n * Note that only the ghost variant supports the xs size.\n */\ntype VariantSizeProps =\n  | {\n      /**\n       * Indicates in what states the button has chrome (background and border).\n       *     \"ghost\": \"Ghost buttons are the least prominent variant. Ghost buttons are\n       * useful for performing low-priority tasks, such as manipulating the UI.\",\n       *     \"borderless\"': \"Borderless buttons are a more prominent variant. Borderless\n       * buttons are useful for supplemental actions that require minimal emphasis.\",\n       *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n       * solid buttons. Outlined buttons are useful for secondary actions.\",\n       *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n       *  most important actions in the UI.\",\n       *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n       * complete the action that is the main goal of the page or page section. There\n       * should only be one CTA button on a page at any given time.\",\n       *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n       */\n      variant?: 'ghost';\n      /**\n       * The size indicates how large the button is rendered.\n       */\n      size?: 'xs' | 'sm' | 'md' | 'lg';\n    }\n  | {\n      variant?: 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n      size?: 'sm' | 'md' | 'lg';\n    };\n\ntype BaseProps = IntrinsicProps & {\n  /**\n   * Specifies the icon for the button.\n   */\n  children?: ComponentChild;\n\n  /**\n   * Specifies that the button element should be disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if repeated events are dispatched for key or pointer held down\n   */\n  isRepeat?: boolean;\n\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the button.\n   */\n  'aria-describedby'?: string;\n\n  /**\n   * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n   */\n  onAction?: () => void | null;\n};\n\n/**\n * Note that either an accessibleLabel or tooltip must be specified.\n */\ntype VariationAccessibleLabelProps =\n  | {\n      /**\n       * accessibleLabel - the aria label\n       */\n      'aria-label': string;\n\n      /**\n       * tooltip - overrides the accessibleLabel for the tooltip\n       */\n      tooltip?: string;\n    }\n  | {\n      'aria-label'?: string;\n\n      tooltip: string;\n    };\n\nexport const IconButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      isRepeat = false,\n      size = 'md',\n      autofocus,\n      onAction,\n      tooltip,\n      'aria-label': accessibleLabel,\n      'aria-describedby': ariaDescribedBy,\n      ...props\n    }: BaseProps & VariantSizeProps & VariationAccessibleLabelProps,\n    ref?: Ref<HTMLButtonElement>\n  ) => {\n    const { tooltipContent, tooltipProps } = useTooltip({\n      text: tooltip ? tooltip : accessibleLabel\n    });\n    return (\n      <Fragment>\n        <BaseButton\n          {...tooltipProps}\n          ref={ref as Ref<HTMLButtonElement> & Ref<HTMLAnchorElement> & Ref<HTMLSpanElement>}\n          isDisabled={isDisabled}\n          isRepeat={isRepeat}\n          size={size}\n          autofocus={autofocus}\n          variant={variant}\n          styling={['min']}\n          onAction={onAction}\n          aria-describedby={ariaDescribedBy}\n          aria-label={accessibleLabel ?? tooltip}>\n          <ButtonLayout display={'icons'} startIcon={props.children} size={size}></ButtonLayout>\n        </BaseButton>\n        {tooltipContent}\n      </Fragment>\n    );\n  }\n);\n"],"names":["IconButton","forwardRef","variant","isDisabled","isRepeat","size","autofocus","onAction","tooltip","accessibleLabel","ariaDescribedBy","props","ref","tooltipContent","tooltipProps","useTooltip","text","_jsxs","jsxs","Fragment","children","_jsx","BaseButton","styling","jsx","ButtonLayout","display","startIcon"],"mappings":"6OAiGaA,EAAaC,EAAAA,YACxB,EAEIC,UAAU,WACVC,cAAa,EACbC,YAAW,EACXC,OAAO,KACPC,YACAC,WACAC,UACA,aAAcC,EACd,mBAAoBC,KACjBC,GAELC,KAEA,MAAMC,eAAEA,EAAcC,aAAEA,GAAiBC,aAAW,CAClDC,KAAMR,GAAoBC,IAE5B,OACEQ,EAAAC,KAACC,WAAQ,CAAAC,SAAA,CACPC,MAACC,EAAAA,WAAU,IACLR,EACJF,IAAKA,EACLT,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNC,UAAWA,EACXJ,QAASA,EACTqB,QAAS,CAAC,OACVhB,SAAUA,EACQ,mBAAAG,EACN,aAAAD,GAAmBD,EAAOY,SACtCC,EAACG,IAAAC,gBAAaC,QAAS,QAASC,UAAWhB,EAAMS,SAAUf,KAAMA,MAElEQ,IAEH"}