{"version":3,"file":"MessageToast-5f38f2fc.js","sources":["../../src/UNSAFE_MessageToast/MessageToast.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'preact/hooks';\n\nimport { EnvironmentProvider } from '../UNSAFE_Environment';\nimport {\n  FocusableComponentHandle,\n  useMessageFocusManager\n} from '../hooks/PRIVATE_useMessagesFocusManager';\nimport { useBreakpointValues } from '../hooks/UNSAFE_useBreakpointValues';\nimport { useMessagesContext } from '../hooks/UNSAFE_useMessagesContext';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { getRendererWithoutIndex, Message, MessagesManager } from '../PRIVATE_Message';\nimport { MessageLayer } from '../PRIVATE_MessageLayer';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Flex } from '../UNSAFE_Flex';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { Item, ItemMetadata } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { MessageToastRedwoodTheme } from './themes/redwood/MessageToastTheme';\n\n// TODO: refactor types so we don't repeat them here and MessageLayer\n// \nconst positions = stringLiteralArray([\n  'top',\n  'top-left',\n  'top-right',\n  'top-start',\n  'top-end',\n  'bottom',\n  'bottom-left',\n  'bottom-right',\n  'bottom-start',\n  'bottom-end'\n]);\n\ntype Position = typeof positions[number];\n\ntype Offset =\n  | number\n  | {\n      horizontal?: number;\n      vertical?: number;\n    };\n\n// TODO: Refactor Message Item types\n// \n\n/**\n * An object representing a single message in MessageToast component.\n */\nexport type MessageToastItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   *\n   * @default 'error'\n   */\n  severity?: 'none' | 'error' | 'warning' | 'confirmation' | 'info';\n\n  /**\n   * Defines the sound to be played when opening the message\n   *\n   * @default 'none'\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the time after which the message is to be closed automatically\n   *\n   * on - default of 5s\n   * off - no auto timeout, manually dismissed\n   * number - seconds in milliseconds format\n   *\n   * @default 'off'\n   */\n  autoTimeout?: 'on' | 'off' | number;\n};\n\n/**\n * Structure of data item passed to the renderers\n */\nexport type MessageToastRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n\ntype Props<Key, Data> = {\n  /**\n   * Defines the fixed position where the notifications will to be placed on the screen.\n   * - top-start resolves to top-left in LTR (top-right in RTL)\n   * - top-end resolves to top-right in LTR (top-left in RTL)\n   * - bottom-start resolves to bottom-left in LTR (bottom-right in RTL)\n   * - bottom-end resolves to bottom-right in LTR (bottom-left in RTL)\n   *\n   * default bottom\n   */\n  position?: Position;\n\n  /**\n   * Defines an offset (in pixels) in the placement. Value can be supplied as a number or\n   * an object with horizontal and vertical values.\n   *\n   * default 0\n   */\n  offset?: Offset;\n\n  /**\n   * Data for the MessageToast component. This data is used for rendering each toast message.\n   * The key for each message will be configured using the key of the corresponding item. This way,\n   * the component will know whether a new message is being added or an existing message is being updated/removed\n   * when the new data comes in.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The application\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message closed. If the application\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component and the message will stay in the UI opened.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of a renderer to use for rendering the detail content.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the detail content for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's detail content. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the detail content using the detail property of the corresponding message.\n   *\n   * If an application specifies both detail and a valid detailRendererKey, the detailRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the detail content.\n   */\n  detailRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of the renderer to use for rendering the start icon.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the start icon for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's start icon. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the start icon using the severity property of the corresponding message.\n   *\n   * If an application specifies both severity and a valid iconRendererKey, the iconRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the start icon.\n   */\n  iconRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * A set of available renderers for rendering the message content. Which renderer is used\n   * for rendering which content will be decided by specific properties in the row data.\n   */\n  renderers?: Record<string, (data: MessageToastRendererDataItem<Key, Data>) => ComponentChildren>;\n};\n\n/**\n * Animation states for toast messages\n * TODO: Get this from theme context provider\n */\nconst animationStates: ComponentProps<typeof MessagesManager>['animationStates'] = {\n  entering: (node) => ({\n    from: {\n      transform: `translate(0, ${node.offsetHeight}px)`,\n      opacity: 1\n    },\n    to: {\n      transform: 'translate(0, 0)',\n      opacity: 1\n    },\n    end: {\n      transform: 'unset',\n      opacity: 1\n    },\n    options: {\n      duration: 250\n    }\n  }),\n  exiting: {\n    from: {\n      opacity: 1\n    },\n    to: {\n      opacity: 0\n    },\n    end: {\n      opacity: 0\n    },\n    options: {\n      duration: 250\n    }\n  }\n};\nconst initialAnimationStyles = {\n  opacity: 0\n} as const;\n\nexport function MessageToast<K extends string | number, D extends MessageToastItem>({\n  data,\n  detailRendererKey,\n  iconRendererKey,\n  renderers,\n  onClose,\n  offset,\n  position\n}: Props<K, D>) {\n  const messagesRef = useRef(new Map<K, HTMLDivElement | null>());\n  const autoFocusRef = useRef<HTMLDivElement>(null) as RefObject<HTMLDivElement | null>;\n  const containerDivRef = useRef<HTMLDivElement>(null);\n  const focusHandleRef = useRef<FocusableComponentHandle>(null);\n  const [liveRegionText, setLiveRegionText] = useState<string>();\n  const [shouldRender, setShouldRender] = useState(data.length > 0);\n  const [shouldTrapFocus, setShouldTrapFocus] = useState(false);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const { UNSAFE_messagesLayerId } = useMessagesContext();\n\n  // We need a ref that holds the current & previous data length, as the exiting\n  // node will always call handleNextFocus with previous data.\n  // As in TransitionGroup, when an item is removed from the data, a new vnode\n  // will not be created instead previous vnode will be used. So, the new handleNextFocus\n  // will not be called when the old vnode exits. Thus, we will be using a ref\n  // to always get the correct current data length.\n  const dataLengthRef = useRef(data.length);\n  const prevDataLengthRef = useRef(0);\n  // Update the data length ref\n  dataLengthRef.current = data.length;\n\n  // Update the focusHandleRef\n  useImperativeHandle(\n    focusHandleRef,\n    () => ({\n      focus: () => {\n        // Only trigger focus if the component is rendering messages\n        if (data.length) {\n          // set the autoFocus ref to the first message and enable the focus trap\n          // this will automatically focus the first message\n          autoFocusRef.current = messagesRef.current.get(data[0].key) ?? null;\n          setShouldTrapFocus(true);\n          return true;\n        }\n        return false;\n      },\n      contains: (element: Element) => {\n        // Only invoke method if the component is rendering messages\n        if (data.length && element) {\n          return containerDivRef.current?.contains(element) ?? false;\n        }\n        return false;\n      }\n    }),\n    [data]\n  );\n\n  // Register handlers for focus management\n  const { controller, handlers } = useMessageFocusManager(\n    focusHandleRef,\n    {\n      onFocus: useCallback(() => {\n        setLiveRegionText(translations.message_navigationFromMessagesRegion());\n      }, [translations]),\n      onFocusLeave: useCallback(() => {\n        // disable trap which should revert the focus back to the last focused item\n        setShouldTrapFocus(false);\n      }, [])\n    },\n    {\n      // we do not want the focus manager to handle Esc key as we handle it using the\n      // FocusTrap here\n      handleEscapeKey: false\n    }\n  );\n\n  /**\n   * Handles focus when a message is closed and animated away from the DOM\n   * @param key The key of the message\n   * @param index The index of the message\n   */\n  const handleNextFocus = useCallback(\n    (_key: K, index: number, closedMessageNode?: Element) => {\n      const isClosedMessageFocused = closedMessageNode?.contains(document.activeElement);\n\n      // If there are no messages, do not render anything. As the old messages\n      // are still in the DOM, use the data count to determine what to do next as it\n      // represents the next state.\n      if (dataLengthRef.current === 0) {\n        setShouldRender(false);\n        setShouldTrapFocus(false);\n        // If the current message holds focus, then restore previous focus\n        if (isClosedMessageFocused) {\n          // As we have FocusTrap, trying to restore focus now will simply result in focus being pulled\n          // back again. So, we restore the focus in the next tick so that the rendering will have been\n          // done in the microtask.\n          setImmediate(() => controller.restorePriorFocus());\n        }\n        return;\n      }\n\n      // In TransitionGroup, when an item is removed from the data, a new vnode\n      // will not be created instead previous vnode will be used. So, the new handleNextFocus\n      // will not be called when the old vnode exits. Thus, all the deps will not be pointing to\n      // the current references, rather they will be pointing to the ones where this vnode\n      // last existed in the data.\n      // This means, the data will contain the closing message as well. But, all the ref objects\n      // still point to the most up-to-date values. With that in mind, we will be evaluating the\n      // following values.\n      const renderedMessagesCount = data.length;\n\n      // Now that this message is closed, focus the next message that will take this index. If no\n      // message will take this message's index, then it means that this is the last message. If\n      // that is the case, focus the message at the previous index.\n      // Use the count of the messages that are currently shown in the UI (current state including\n      // the message that will be removed). This way we can get the correct item from the data\n      // as it will contain the closing message as well.\n      const nextMessageIndexToFocus = index + 1 < renderedMessagesCount ? index + 1 : index - 1;\n\n      // if next message is available then transfer the focus to the next element\n      if (nextMessageIndexToFocus > -1 && isClosedMessageFocused) {\n        const nextMessageKey = data[nextMessageIndexToFocus].key;\n        messagesRef.current.get(nextMessageKey)?.focus();\n      }\n    },\n    [controller, data]\n  );\n\n  // We will be using a function based ref to store the refs in the Map\n  const setHTMLDivElement = useCallback(\n    // TODO: use ramda.curry here (currently it is throwing ts error when used with generics)\n    (key: K) => {\n      return (ref: HTMLDivElement | null) => messagesRef.current.set(key, ref);\n    },\n    []\n  );\n  // Prioritize this component whenever the data changes and\n  // the new data has at least one message\n  useEffect(() => {\n    const previousDataLength = prevDataLengthRef.current;\n    prevDataLengthRef.current = data.length;\n\n    // if there are messages that need to be rendered now, then do the following deeds:\n    // 1. set the shouldRender flag\n    // 2. set the live region\n    // 3. prioritize this message component to be the latest\n    if (data.length) {\n      // set state to render content whenever the data is not empty\n      setShouldRender(true);\n      if (data.length > previousDataLength) {\n        // Only when having a new message, update the aria-live area with the\n        // text to indicate how to get the focus to the new message.\n        setLiveRegionText(translations.message_navigationToMessagesRegion());\n      }\n      controller.prioritize();\n      return;\n    }\n\n    // if there were messages and now removed, then set the live region to\n    // announce this information\n    if (previousDataLength) {\n      setLiveRegionText(translations.messageToast_allMessagesClosed());\n      return;\n    }\n\n    // When there are no messages, clear the live region so that\n    // the navigation text will be read when a new message appear\n    setLiveRegionText('');\n  }, [controller, data.length, translations]);\n\n  // determine responsive max-width\n  const maxWidth = useBreakpointValues<Size>({\n    sm: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-sm',\n    md: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-md',\n    lg: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-lg'\n  });\n  // without offset, the messages will be hugging the vertical edges of the screen\n  // so we will set a default offset.vertical value (any offset from the props will be\n  // added to this).\n  const paddedOffset = useBreakpointValues<Offset>({\n    sm: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 16 + (typeof offset === 'number' ? offset : offset?.vertical ?? 0)\n    },\n    lg: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 24 + (typeof offset === 'number' ? offset : offset?.vertical ?? 0)\n    }\n  });\n\n  // TODO: move this to the individual components.\n  // Cannot do this as of now, as doing do results in oj-message-banner not working.\n  const messageTranslations = useMemo(\n    () => ({\n      close: translations.close(),\n      confirmation: translations.confirmation(),\n      error: translations.error(),\n      info: translations.info(),\n      warning: translations.warn()\n    }),\n    [translations]\n  );\n\n  const { classes } = useComponentTheme(MessageToastRedwoodTheme);\n\n  // When both shouldRender flag is false and no data to render, do not render\n  // anything except the live region\n  if (!shouldRender && data.length === 0) {\n    return <LiveRegion>{liveRegionText}</LiveRegion>;\n  }\n\n  // TODO - Message Toast shouldn't always render as 'dark', it should be the inverse of the root environment context\n  // See JET-57590\n  return (\n    <EnvironmentProvider environment={{ colorScheme: 'dark' }}>\n      <MessageLayer offset={paddedOffset} position={position}>\n        <div\n          class={classes}\n          ref={containerDivRef}\n          tabIndex={-1} // Need to add tabindex to make the container receive the focus events\n          id={UNSAFE_messagesLayerId}\n          {...handlers}>\n          <FocusTrap autoFocusRef={autoFocusRef} isDisabled={!shouldTrapFocus}>\n            <Flex direction=\"column\" gap=\"1x\" align=\"center\" maxWidth={maxWidth}>\n              <MessagesManager\n                animationStates={animationStates}\n                initialAnimationStyles={initialAnimationStyles}\n                data={data}\n                onMessageWillRemove={handleNextFocus}>\n                {({ index, item }) => (\n                  <Message\n                    messageRef={setHTMLDivElement(item.key)}\n                    item={item}\n                    detailRenderer={getRendererWithoutIndex(item, detailRendererKey, renderers)}\n                    iconRenderer={getRendererWithoutIndex(item, iconRendererKey, renderers)}\n                    index={index}\n                    key={item.key}\n                    onClose={onClose}\n                    translations={messageTranslations}\n                    variant=\"toast\"\n                  />\n                )}\n              </MessagesManager>\n            </Flex>\n          </FocusTrap>\n        </div>\n      </MessageLayer>\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </EnvironmentProvider>\n  );\n}\n"],"names":["stringLiteralArray","animationStates","entering","node","from","transform","offsetHeight","opacity","to","end","options","duration","exiting","initialAnimationStyles","data","detailRendererKey","iconRendererKey","renderers","onClose","offset","position","messagesRef","useRef","Map","autoFocusRef","containerDivRef","focusHandleRef","liveRegionText","setLiveRegionText","useState","shouldRender","setShouldRender","length","shouldTrapFocus","setShouldTrapFocus","translations","useTranslationBundle","UNSAFE_messagesLayerId","useMessagesContext","dataLengthRef","prevDataLengthRef","current","useImperativeHandle","focus","get","key","contains","element","controller","handlers","useMessageFocusManager","onFocus","useCallback","message_navigationFromMessagesRegion","onFocusLeave","handleEscapeKey","handleNextFocus","_key","index","closedMessageNode","isClosedMessageFocused","document","activeElement","setImmediate","restorePriorFocus","nextMessageIndexToFocus","nextMessageKey","setHTMLDivElement","ref","set","useEffect","previousDataLength","message_navigationToMessagesRegion","prioritize","messageToast_allMessagesClosed","maxWidth","useBreakpointValues","sm","md","lg","paddedOffset","horizontal","vertical","messageTranslations","useMemo","close","confirmation","error","info","warning","warn","classes","useComponentTheme","MessageToastRedwoodTheme","_jsxs","EnvironmentProvider","environment","colorScheme","_jsx","MessageLayer","jsx","class","tabIndex","id","children","FocusTrap","isDisabled","Flex","direction","gap","align","MessagesManager","onMessageWillRemove","item","Message","messageRef","detailRenderer","getRendererWithoutIndex","iconRenderer","variant","LiveRegion"],"mappings":"6lBAwCkBA,EAAAA,mBAAmB,CACnC,MACA,WACA,YACA,YACA,UACA,SACA,cACA,eACA,eACA,eAVF,MAwLMC,EAA6E,CACjFC,SAAWC,IAAU,CACnBC,KAAM,CACJC,UAAW,gBAAgBF,EAAKG,kBAChCC,QAAS,GAEXC,GAAI,CACFH,UAAW,kBACXE,QAAS,GAEXE,IAAK,CACHJ,UAAW,QACXE,QAAS,GAEXG,QAAS,CACPC,SAAU,OAGdC,QAAS,CACPR,KAAM,CACJG,QAAS,GAEXC,GAAI,CACFD,QAAS,GAEXE,IAAK,CACHF,QAAS,GAEXG,QAAS,CACPC,SAAU,OAIVE,EAAyB,CAC7BN,QAAS,4BAGyEO,KAClFA,EAAIC,kBACJA,EAAiBC,gBACjBA,EAAeC,UACfA,EAASC,QACTA,EAAOC,OACPA,EAAMC,SACNA,IAEA,MAAMC,EAAcC,EAAAA,OAAO,IAAIC,KACzBC,EAAeF,SAAuB,MACtCG,EAAkBH,SAAuB,MACzCI,EAAiBJ,SAAiC,OACjDK,EAAgBC,GAAqBC,EAAQA,YAC7CC,EAAcC,GAAmBF,EAAQA,SAACf,EAAKkB,OAAS,IACxDC,EAAiBC,GAAsBL,EAAQA,UAAC,GACjDM,EAAeC,uBAAiC,6BAChDC,uBAAEA,GAA2BC,EAAAA,qBAQ7BC,EAAgBjB,EAAAA,OAAOR,EAAKkB,QAC5BQ,EAAoBlB,SAAO,GAEjCiB,EAAcE,QAAU3B,EAAKkB,OAG7BU,EAAmBA,oBACjBhB,GACA,KAAO,CACLiB,MAAO,MAED7B,EAAKkB,SAGPR,EAAaiB,QAAUpB,EAAYoB,QAAQG,IAAI9B,EAAK,GAAG+B,MAAQ,KAC/DX,GAAmB,IACZ,GAIXY,SAAWC,MAELjC,EAAKkB,SAAUe,KACVtB,EAAgBgB,SAASK,SAASC,KAAY,MAK3D,CAACjC,IAIH,MAAMkC,WAAEA,EAAUC,SAAEA,GAAaC,EAAAA,uBAC/BxB,EACA,CACEyB,QAASC,EAAWA,aAAC,KACnBxB,EAAkBO,EAAakB,uCAAuC,GACrE,CAAClB,IACJmB,aAAcF,EAAWA,aAAC,KAExBlB,GAAmB,EAAM,GACxB,KAEL,CAGEqB,iBAAiB,IASfC,EAAkBJ,EAAWA,aACjC,CAACK,EAASC,EAAeC,KACvB,MAAMC,EAAyBD,GAAmBb,SAASe,SAASC,eAKpE,GAA8B,IAA1BvB,EAAcE,QAUhB,OATAV,GAAgB,GAChBG,GAAmB,QAEf0B,GAIFG,cAAa,IAAMf,EAAWgB,uBAalC,MAQMC,EAA0BP,EAAQ,EARV5C,EAAKkB,OAQiC0B,EAAQ,EAAIA,EAAQ,EAGxF,GAAIO,GAA2B,GAAKL,EAAwB,CAC1D,MAAMM,EAAiBpD,EAAKmD,GAAyBpB,IACrDxB,EAAYoB,QAAQG,IAAIsB,IAAiBvB,OAC1C,IAEH,CAACK,EAAYlC,IAITqD,EAAoBf,EAAWA,aAElCP,GACSuB,GAA+B/C,EAAYoB,QAAQ4B,IAAIxB,EAAKuB,IAEtE,IAIFE,EAAAA,WAAU,KACR,MAAMC,EAAqB/B,EAAkBC,QAO7C,GANAD,EAAkBC,QAAU3B,EAAKkB,OAM7BlB,EAAKkB,OASP,OAPAD,GAAgB,GACZjB,EAAKkB,OAASuC,GAGhB3C,EAAkBO,EAAaqC,2CAEjCxB,EAAWyB,aAOX7C,EADE2C,EACgBpC,EAAauC,iCAMf,GAAG,GACpB,CAAC1B,EAAYlC,EAAKkB,OAAQG,IAG7B,MAAMwC,EAAWC,EAAAA,oBAA0B,CACzCC,GAAI,uDACJC,GAAI,uDACJC,GAAI,yDAKAC,EAAeJ,EAAAA,oBAA4B,CAC/CC,GAAI,CACFI,WAA8B,iBAAX9D,EAAsBA,EAASA,GAAQ8D,YAAc,EACxEC,SAAU,IAAwB,iBAAX/D,EAAsBA,EAASA,GAAQ+D,UAAY,IAE5EH,GAAI,CACFE,WAA8B,iBAAX9D,EAAsBA,EAASA,GAAQ8D,YAAc,EACxEC,SAAU,IAAwB,iBAAX/D,EAAsBA,EAASA,GAAQ+D,UAAY,MAMxEC,EAAsBC,EAAAA,SAC1B,KAAO,CACLC,MAAOlD,EAAakD,QACpBC,aAAcnD,EAAamD,eAC3BC,MAAOpD,EAAaoD,QACpBC,KAAMrD,EAAaqD,OACnBC,QAAStD,EAAauD,UAExB,CAACvD,KAGGwD,QAAEA,GAAYC,EAAiBA,kBAACC,EAAwBA,0BAI9D,OAAK/D,GAAgC,IAAhBhB,EAAKkB,OAOxB8D,OAACC,EAAAA,qBAAoBC,YAAa,CAAEC,YAAa,kBAC/CC,EAAAA,IAACC,EAAYA,cAAChF,OAAQ6D,EAAc5D,SAAUA,WAC5C8E,EACEE,IAAA,MAAA,CAAAC,MAAOV,EACPvB,IAAK3C,EACL6E,UAAW,EACXC,GAAIlE,KACAY,EACJuD,SAAAN,EAAAE,IAACK,EAASA,UAAC,CAAAjF,aAAcA,EAAckF,YAAazE,EAAeuE,SACjEN,MAACS,EAAIA,KAAA,CAACC,UAAU,SAASC,IAAI,KAAKC,MAAM,SAASnC,SAAUA,EACzD6B,SAAAN,EAAAE,IAACW,kBACC,CAAA9G,gBAAiBA,EACjBY,uBAAwBA,EACxBC,KAAMA,EACNkG,oBAAqBxD,WACpB,EAAGE,QAAOuD,UACTf,MAACgB,EAAOA,QAAA,CACNC,WAAYhD,EAAkB8C,EAAKpE,KACnCoE,KAAMA,EACNG,eAAgBC,EAAuBA,wBAACJ,EAAMlG,EAAmBE,GACjEqG,aAAcD,EAAuBA,wBAACJ,EAAMjG,EAAiBC,GAC7DyC,MAAOA,EAEPxC,QAASA,EACTiB,aAAcgD,EACdoC,QAAQ,SAHHN,EAAKpE,eAWxBqD,EAAAA,IAACsB,EAAUA,WAAA,CAAAhB,SAAE7E,OAvCRuE,EAACE,IAAAoB,EAAUA,WAAE,CAAAhB,SAAA7E,GA0CxB"}