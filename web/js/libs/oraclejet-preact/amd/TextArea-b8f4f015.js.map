{"version":3,"file":"TextArea-b8f4f015.js","sources":["../../src/UNSAFE_TextArea/MaxLengthCounter.tsx","../../src/UNSAFE_TextArea/TextArea.tsx"],"sourcesContent":["import { useCallback } from 'preact/hooks';\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { hide, maxLengthCounterBase, spanStyles } from './MaxLengthCounterStyles.css';\n\ntype Props = {\n  maxLength: number;\n  valueLength?: number;\n  onClick?: () => void; // the calling component should focus on the appropriate element when clicked.\n};\n\nconst noop = () => {};\n\nexport function MaxLengthCounter({ maxLength, valueLength = 0, onClick }: Props) {\n  const { isFocused } = useFormFieldContext();\n  // We don't want mousedown on this component to do anything, so prevent the default behavior.\n  const killEvent = useCallback((event: Event) => event.preventDefault(), []);\n  const textClasses = classNames([!isFocused && hide]);\n  const { pressProps } = usePress(onClick ?? noop);\n  return (\n    <div class={maxLengthCounterBase} onMouseDown={killEvent} {...pressProps}>\n      <span class={textClasses}>\n        <span class={spanStyles}>{valueLength}</span>\n        <span class={spanStyles}>/</span>\n        <span class={spanStyles}>{maxLength}</span>\n      </span>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback, useRef } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { MaxLengthCounter } from './MaxLengthCounter';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  resize?: TextFieldProps['resize'];\n  /**\n   * Specifies the ARIA role type.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  rows?: TextFieldInputProps['rows'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\nexport const TextArea = forwardRef(\n  (\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      messages,\n      placeholder,\n      resize,\n      role,\n      rows,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        contentVariant: 'textarea',\n        helpSourceLink,\n        helpSourceText,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        isRequiredShown,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        userAssistanceDensity,\n        value\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const anchorRef = useRef<HTMLDivElement>(null);\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={anchorRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    if (isReadonly) {\n      // TODO: We need to conditionally render the readonly innerReadonlyField as a textarea or div\n      //  also, the div will need to use white-space: pre-wrap so that the text will wrap like textarea\n      //  see JET-50636\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            ref={anchorRef}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"textarea\"\n              elementRef={readonlyElementRef}\n              rows={rows}\n              autoFocus={autoFocus}\n              textAlign={textAlign}\n              value={value}\n              variant=\"textarea\"\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, []);\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          aria-label={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={rows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && maxLength !== undefined && (\n          <MaxLengthCounter\n            {...{ maxLength, valueLength, parentHasFocus: isFocused, onClick: onClickCounter }}\n          />\n        )}\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          compactUserAssistance={compactUserAssistance}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          mainFieldRef={anchorRef}\n          resize={resize}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["noop","MaxLengthCounter","maxLength","valueLength","onClick","isFocused","useFormFieldContext","killEvent","useCallback","event","preventDefault","textClasses","classNames","pressProps","usePress","_jsx","jsx","class","onMouseDown","_jsxs","jsxs","children","spanStyles","TextArea","forwardRef","ariaDescribedBy","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLengthCounter","maxLengthUnit","messages","placeholder","resize","role","rows","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","variant","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","readonlyElementRef","focusProps","useFocusableTextField","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","contentVariant","styleVariant","isMaxLengthExceeded","onFilteredInput","useLengthFilter","labelComp","Label","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","anchorRef","useRef","compactUserAssistance","CompactUserAssistance","FormFieldContext","Provider","ReadonlyTextField","ReadonlyTextFieldInput","id","as","elementRef","hasEmptyLabel","hasInsideLabel","onClickCounter","elm","current","len","length","setSelectionRange","focus","mainContent","Fragment","TextFieldInput","inputRef","parentHasFocus","MaxLengthLiveRegion","TextField","onBlur","onfocusout","onFocus","onfocusin","mainFieldRef"],"mappings":"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"}