{"version":3,"file":"SelectSingle-b6dbe05e.js","sources":["../../src/UNSAFE_SelectSingle/SelectSingle.tsx","../../src/UNSAFE_SelectSingle/useSelectSingle.ts","../../src/UNSAFE_SelectSingle/useDisplayValue.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Label } from '../UNSAFE_Label';\nimport { VirtualizedListView } from '../UNSAFE_VirtualizedListView';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport {\n  CompactUserAssistance,\n  InlineUserAssistance,\n  UserAssistanceDensityType\n} from '../UNSAFE_UserAssistance';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownArrow,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  isBeforeDataFetch,\n  isMobile\n} from '../PRIVATE_SelectCommon';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { useDisplayValue } from './useDisplayValue';\nimport { useSelectSingle } from './useSelectSingle';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  'aria-describedby'?: TextFieldInputProps['aria-describedby'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectSingle will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n    * <li><code>'compact'</code>: Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required. </li>\n   \n  * </ul>\n   */\n  userAssistanceDensity?: UserAssistanceDensityType;\n  /**\n   * Specifies the key, data, and optional metadata for the selected value.\n   */\n  valueItem?: Item<K, D>;\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback invoked when the user commits the selected value.\n   *\n   * The function should set a new <code>valueItem</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof VirtualizedListView>['onLoadRange'];\n};\n\n/**\n * A SelectSingle is a dropdown list that supports single selection and search filtering.\n */\nexport const SelectSingle = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      'aria-describedby': ariaDescribedBy,\n      assistiveText,\n      data,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItem,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      collectionProps,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      inputEventHandlers,\n      isDropdownAbove,\n      isDropdownOpen,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      searchText,\n      userInput\n    } = useSelectSingle<K, D>({\n      data,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      valueItem\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      isRequiredShown,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      userAssistanceDensity,\n      value: valueItem !== undefined ? true : undefined\n    });\n\n    // JET-54256 - inside label animates up on initial display with selected value\n    // If we're waiting for the selected values to load, the component should look like it\n    // has a value in the meantime.\n    // Use the original propIsLoading instead of isLoading because we don't want to delay\n    // the inside label position by a timer like we do the progressive loading indicator.\n    formFieldContext.hasValue = propIsLoading || formFieldContext.hasValue;\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValue(itemText, valueItem);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n    const isInlineDensity =\n      userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow';\n\n    const inlineUserAssistance = isInlineDensity ? (\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      )\n    ) : undefined;\n\n    const compactUserAssistance =\n      userAssistanceDensity === 'compact' ? (\n        <CompactUserAssistance\n          anchorRef={mainFieldRef}\n          messages={messages}\n          assistiveText={assistiveText}\n          {...userAssistanceProps}\n        />\n      ) : undefined;\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            compactUserAssistance={compactUserAssistance}\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            ref={mainFieldRef}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              aria-describedby={inputProps['aria-describedby']}\n              aria-label={ariaLabel}\n              aria-labelledby={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasEmptyLabel={label === '' && labelEdge === 'none'}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          aria-autocomplete=\"list\"\n          aria-controls={dropdownId}\n          aria-expanded={isDropdownOpen}\n          aria-label={ariaLabel}\n          autoComplete=\"off\"\n          hasEmptyLabel={label === '' && labelEdge === 'none'}\n          hasInsideLabel={hasInsideLabel}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          // onCommit={handleCommit}\n          {...inputEventHandlers}\n          placeholder={placeholder}\n          role=\"combobox\"\n          spellcheck={false}\n          textAlign={textAlign}\n          type={isMobile() ? (virtualKeyboard === 'auto' ? 'search' : virtualKeyboard) : undefined}\n          value={isUserFiltering ? userInput : displayValue}\n          {...inputProps}\n        />\n        <LiveRegion>{liveRegionText}</LiveRegion>\n      </Fragment>\n    );\n\n    const dropdownArrow = (\n      <DropdownArrow\n        isDisabled={isDisabled}\n        size={hasInsideLabel ? 'md' : 'sm'}\n        {...dropdownArrowEventHandlers}\n      />\n    );\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDropdownAbove &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...collectionProps}\n        aria-label={label ?? ''}\n        currentItemVariant=\"highlight\"\n        data={data}\n        itemText={itemText}\n        onLoadRange={onLoadRange}\n        searchText={isUserFiltering ? searchText : undefined}\n        selectionMode=\"single\"\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <TextField\n            compactUserAssistance={compactUserAssistance}\n            endContent={isLoading ? undefined : dropdownArrow}\n            inlineUserAssistance={inlineUserAssistance}\n            mainContent={mainContent}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onfocusout}\n            onFocus={focusProps?.onfocusin}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}\n          />\n        </FormFieldContext.Provider>\n        <Dropdown\n          dropdownRef={dropdownRef}\n          id={dropdownId}\n          isOpen={\n            isDropdownOpen &&\n            data !== undefined &&\n            (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults)\n          }\n          anchorRef={mainFieldRef}\n          {...dropdownEventHandlers}>\n          <DropdownList\n            hasBottomGap={dropdownInlineUserAssistance === undefined}\n            isLoading={data === null}>\n            {dropdownListContent}\n          </DropdownList>\n          {dropdownInlineUserAssistance}\n        </Dropdown>\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useEffect, useMemo, useRef } from 'preact/hooks';\nimport { DataState, ItemActionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, KEYS, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { SelectSingle } from './SelectSingle';\n\ntype PickedPropsFromSelectSingle = Pick<\n  ComponentProps<typeof SelectSingle>,\n  'isDisabled' | 'isReadonly' | 'onFilter'\n>;\ntype UseSelectSingleProps<K, D> = PickedPropsFromSelectSingle & {\n  data?: DataState<K, D> | null;\n  inputRef: MutableRef<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<K>) => void;\n  valueItem?: Item<K, D>;\n};\n\n/**\n * Hook that manages SelectSingle state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectSingle, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected value is committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param valueItem Specifies the key, data, and optional metadata for the selected value.\n *\n * @returns Properties to apply to internal components that SelectSingle renders, and component\n * state.\n */\nexport function useSelectSingle<K, D>({\n  data,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit: propOnCommit,\n  onFilter,\n  valueItem\n}: UseSelectSingleProps<K, D>) {\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    stopFiltering,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  // refs used by some of the effects below to determine whether the effect needs to run,\n  // for when the list of dependencies is longer than what we want the trigger to actually be\n  const prevDataRef = useRef(data);\n  const prevDropdownOpenRef = useRef(isDropdownOpen);\n  const prevSearchText = useRef(searchText);\n\n  const onCommit = useCallback(\n    (value?: K) => {\n      propOnCommit?.({\n        value: value,\n        previousValue: valueItem !== undefined ? valueItem.key : undefined\n      });\n    },\n    [propOnCommit, valueItem]\n  );\n\n  const clearValue = useCallback(() => {\n    setDropdownOpen(false);\n\n    setSelectedKeys(new Set<K>());\n\n    // call the onCommit callback so that the consuming code can update the valueItem\n    onCommit(undefined);\n  }, [onCommit]);\n\n  const clearValueIfNeeded = useCallback(() => {\n    if (isUserFiltering && userInput === '' && valueItem !== undefined) {\n      clearValue();\n      return true;\n    }\n    return false;\n  }, [clearValue, isUserFiltering, userInput, valueItem]);\n\n  // when the field loses focus, check to see if we need to clear the value\n  useEffect(() => {\n    if (!isFocused) {\n      clearValueIfNeeded();\n    }\n    // only run when focus changes, at which point the current value of clearValueIfNeeded will\n    // be used\n  }, [isFocused]);\n\n  const focusInput = useCallback(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, []);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // if there is a currentRow in the dropdown, select it and commit it\n              if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n                setSelectedKeys(new Set<K>([currentRow.rowKey]));\n                onCommit(currentRow.rowKey);\n              }\n\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              focusInput();\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [currentRow, focusInput, isDropdownOpen, onCommit]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueClearedTab = clearValueIfNeeded();\n          if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {\n            // if there is a currentRow in the dropdown (meaning a highlighted item that would\n            // have keyboard focus if the dropdown list had physical focus, which may be different\n            // from the currently selected item), select it and commit it;\n            // otherwise commit the currently selected value again so that a valueAction event\n            // will be fired\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n\n          // Remove the dropdown immediately, without waiting for a rerender based on changing\n          // state, so that the open dropdown cannot get focus when the browser handles the\n          // Tab key.\n          removeDropdown();\n\n          setDropdownOpen(false);\n          break;\n\n        case KEYS.ENTER:\n          // check whether we need to clear the value;\n          // if not, check whether we need to select the current item\n          const isValueCleared = clearValueIfNeeded();\n          if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {\n            setDropdownOpen(false);\n\n            // after selecting a value, the user is no longer actively filtering, so update related\n            // state accordingly so that the newly selected value appears in the field\n            stopFiltering();\n\n            // if there is a currentRow in the dropdown, select it and commit it;\n            // otherwise commit the currently selected value again\n            if (currentRow !== undefined && currentRow.rowKey !== undefined) {\n              setSelectedKeys(new Set<K>([currentRow.rowKey]));\n              onCommit(currentRow.rowKey);\n            } else {\n              onCommit(valueItem?.key ?? undefined);\n            }\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [clearValueIfNeeded, currentRow, data, isDropdownOpen, onCommit, valueItem]\n  );\n\n  // when the valueItem changes, save the new selectedKeys\n  useEffect(() => {\n    setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));\n  }, [valueItem]);\n\n  const onItemAction = useCallback(\n    (detail: ItemActionDetail<K, D>) => {\n      focusInput();\n      setDropdownOpen(false);\n\n      // after selecting a value, the user is no longer actively filtering, so update related\n      // state accordingly so that the newly selected value appears in the field\n      stopFiltering();\n\n      const newKey = detail.context.metadata.key;\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for a new valueItem to be set\n      setSelectedKeys(new Set([newKey]));\n      // call the onCommit callback so that the consuming code can update the valueItem\n      onCommit(newKey);\n    },\n    [focusInput, onCommit]\n  );\n\n  useEffect(() => {\n    // only run this effect when data changes because we need to wait for the new set of\n    // filtered data to be set before highlighting the first result\n    if (data === prevDataRef.current) {\n      return;\n    }\n\n    // when filtering, set the first result of the filtered data set to be the current item\n    // (check the data offset so we don't try to highlight again if the user scrolls through\n    // the list and more data is fetched)\n    if (\n      isDropdownOpen &&\n      isUserFiltering &&\n      data != null &&\n      data.offset === 0 &&\n      data.data.length > 0\n    ) {\n      // if there are results and search text, highlight the first row, otherwise clear\n      // an existing highlight\n      setCurrentRow({\n        rowKey:\n          searchText !== undefined && searchText?.length > 0 ? data.data[0].metadata.key : undefined\n      });\n    }\n  }, [data, isDropdownOpen, isUserFiltering, searchText]);\n\n  useEffect(() => {\n    // only run this effect when the state of the dropdown changes\n    if (isDropdownOpen === prevDropdownOpenRef.current) {\n      return;\n    }\n\n    // clear the current item when the dropdown opens if there is no filter text\n    if (\n      isDropdownOpen &&\n      (!isUserFiltering || searchText === undefined || searchText.length === 0)\n    ) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen, isUserFiltering, searchText]);\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  // update refs used in some of the above effects in a useEffect on every render so that they\n  // update after the above effects run\n  useEffect(() => {\n    prevDataRef.current = data;\n    prevDropdownOpenRef.current = isDropdownOpen;\n    prevSearchText.current = searchText;\n  });\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onItemAction,\n      selectedKeys\n    },\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    inputEventHandlers,\n    inputRef,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    searchText,\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValue<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItem?: Item<K, D>\n): string {\n  // create the text displayed in the field from the selected value\n  const displayValue = useMemo(() => {\n    return valueItem === undefined ? '' : renderItemText(valueItem, itemText) ?? '';\n  }, [valueItem, itemText]);\n\n  return displayValue;\n}\n"],"names":["SelectSingle","forwardRef","ariaDescribedBy","assistiveText","data","helpSourceLink","helpSourceText","isDisabled","propIsDisabled","isLoading","propIsLoading","isReadonly","propIsReadonly","isRequired","isRequiredShown","itemText","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","messages","onCommit","onFilter","onLoadRange","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","valueItem","variant","virtualKeyboard","ref","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","origIsFocused","readonlyElementRef","useFocusableTextField","collectionProps","dropdownArrowEventHandlers","dropdownEventHandlers","dropdownRef","inputEventHandlers","isDropdownAbove","isDropdownOpen","isUserFiltering","mainFieldRef","mouseProps","searchText","userInput","inputRef","propIsFocused","propOnCommit","currentRow","handleDropdownArrowClick","handleDropdownAutoDismiss","baseHandleDropdownAutoDismiss","handleDropdownPosition","handleInput","handleMainFieldKeyDown","baseHandleMainFieldKeyDown","handleMainFieldKeyUp","onCurrentKeyChange","onMouseDown","selectedKeys","setCurrentRow","setDropdownOpen","setSelectedKeys","stopFiltering","useSelectCommon","prevDataRef","useRef","prevDropdownOpenRef","prevSearchText","useCallback","value","previousValue","undefined","key","clearValue","Set","clearValueIfNeeded","useEffect","focusInput","current","focus","removeDropdown","parentElement","removeChild","myHandleDropdownAutoDismiss","event","type","code","KEYS","TAB","rowKey","myHandleMainFieldKeyDown","isControlOrFunctionKey","length","ENTER","onItemAction","detail","newKey","context","metadata","offset","useMemo","mergeProps","onAutoDismiss","onPosition","onInput","onKeyDown","onKeyUp","currentKey","onClick","useSelectSingle","useLoadingIndicatorTimer","baseId","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","styleVariant","hasValue","dropdownId","displayValue","renderItemText","useDisplayValue","labelComp","_jsx","jsx","Label","fieldLabelProps","ariaLabel","inlineUserAssistance","InlineUserAssistance","fieldLabel","compactUserAssistance","CompactUserAssistance","anchorRef","translations","useTranslationBundle","FormFieldContext","Provider","children","ReadonlyTextField","role","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","id","as","elementRef","hasEmptyLabel","hasInsideLabel","isDataFetched","isBeforeDataFetch","liveRegionText","totalSize","select_noMatchesFound","select_oneMatchFound","sizePrecision","select_sizeMatchesFound","TOTAL_SIZE","select_sizeOrMoreMatchesFound","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","autoComplete","spellcheck","isMobile","LiveRegion","dropdownArrow","DropdownArrow","size","dropdownInlineUserAssistance","DropdownUserAssistance","isEmptyResults","dropdownListContent","EmptyResults","DefaultList","currentItemVariant","selectionMode","TextField","endContent","Dropdown","isOpen","DropdownList","hasBottomGap"],"mappings":"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"}