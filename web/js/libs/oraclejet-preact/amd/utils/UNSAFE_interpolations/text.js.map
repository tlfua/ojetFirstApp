{"version":3,"file":"text.js","sources":["../../../../src/utils/UNSAFE_interpolations/text/text.ts","../../../../src/utils/UNSAFE_interpolations/text/textAlign.ts"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\n\n// FIXME: Revert after 15.0 release\n// import { style } from '@vanilla-extract/css';\n\nconst textAlignStyles = {\n  start: cssProps`${{\n    textAlign: 'start'\n  }}`,\n\n  end: cssProps`${{\n    textAlign: 'end'\n  }}`,\n\n  right: cssProps`${{\n    textAlign: 'right'\n  }}`\n};\n\nexport { textAlignStyles };\n","import { keys } from 'ramda';\nimport { textAlignStyles } from './text';\n\nconst textStyles = {\n  textAlign: textAlignStyles\n};\n\nconst textAligns = keys(textAlignStyles);\n\n// See https://stackoverflow.com/questions/55377365/what-does-keyof-typeof-mean-in-typescript\n// typeof operator gives you the type of an object\n// then keyof operator gives you the literal type union\n// derive the types of each property from the implementation\nexport type TextProps = {\n  textAlign?: keyof typeof textAlignStyles;\n};\n\nconst textInterpolations = {\n  textAlign: ({ textAlign }: Pick<TextProps, 'textAlign'>) =>\n    textAlign === undefined ? {} : { class: textAlignStyles[textAlign] }\n};\n\nexport { textAligns, textAlignStyles, textInterpolations, textStyles };\n"],"names":["textAlignStyles","textStyles","textAlign","textAligns","keys","textInterpolations","undefined","class"],"mappings":"kFAKA,MAAAA,EAAA,iDCFMC,EAAa,CACjBC,UAAWF,GAGPG,EAAaC,EAAIA,KAACJ,GAUlBK,EAAqB,CACzBH,UAAW,EAAGA,oBACEI,IAAdJ,EAA0B,CAAE,EAAG,CAAEK,MAAOP,EAAgBE"}