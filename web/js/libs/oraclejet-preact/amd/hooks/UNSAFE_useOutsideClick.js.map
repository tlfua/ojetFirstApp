{"version":3,"file":"UNSAFE_useOutsideClick.js","sources":["../../../src/hooks/UNSAFE_useOutsideClick/useOutsideClick.ts"],"sourcesContent":["/**\n * `useClickOutside` hook for capturing clicking outside of an element\n */\nimport { RefObject } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { coerceArray } from '../../utils/UNSAFE_arrayUtils';\n\ntype Props = {\n  /**\n   * If true outside click is disabled\n   */\n  isDisabled?: boolean;\n  /**\n   * Reference to element or array of elements relative to which outside click is performed\n   */\n  ref: RefObject<HTMLElement> | RefObject<HTMLElement>[];\n  /**\n   * Outside click callback\n   */\n  handler?: (event: MouseEvent) => void;\n};\n\nconst isPointOutside = (event: Event, ref: RefObject<HTMLElement>[]) => {\n  const target = event.target as HTMLElement;\n  if (target) {\n    const doc = getDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n  return ref.every((elRef) => !elRef.current?.contains(target));\n};\n\nconst getDocument = (node?: Node): Document => node?.ownerDocument ?? document;\n\nexport const useOutsideClick = ({ isDisabled: disabled = false, ref, handler }: Props) => {\n  // use ref to store mutable data and not cause a re-render\n  const stateRef = useRef({\n    isMouseDown: false\n  });\n\n  const state = stateRef.current;\n\n  useEffect(() => {\n    const refs = coerceArray(ref);\n    if (\n      !handler ||\n      disabled ||\n      (refs.length > 0 && refs.findIndex((elRef) => elRef.current === null) > -1)\n    )\n      return;\n    const onMouseDown = () => {\n      state.isMouseDown = true;\n    };\n\n    const onMouseUp = (event: MouseEvent) => {\n      if (state.isMouseDown && isPointOutside(event, refs)) {\n        state.isMouseDown = false;\n        handler?.(event);\n      }\n    };\n    const firstElRef = refs[0];\n    const doc = getDocument(firstElRef.current!);\n    if (doc) {\n      doc.addEventListener('mousedown', onMouseDown, true);\n      doc.addEventListener('mouseup', onMouseUp, true);\n\n      return () => {\n        doc.removeEventListener('mousedown', onMouseDown, true);\n        doc.removeEventListener('mouseup', onMouseUp, true);\n      };\n    }\n    return undefined;\n  }, [disabled, handler, ref, state]);\n};\n"],"names":["getDocument","node","ownerDocument","document","isDisabled","disabled","ref","handler","state","useRef","isMouseDown","current","useEffect","refs","coerceArray","length","findIndex","elRef","onMouseDown","onMouseUp","event","target","contains","every","isPointOutside","firstElRef","doc","addEventListener","removeEventListener"],"mappings":"6FAsBA,MASMA,EAAeC,GAA0BA,GAAMC,eAAiBC,2BAEvC,EAAGC,WAAYC,GAAW,EAAOC,MAAKC,cAEnE,MAIMC,EAJWC,EAAAA,OAAO,CACtBC,aAAa,IAGQC,QAEvBC,EAAAA,WAAU,KACR,MAAMC,EAAOC,cAAYR,GACzB,IACGC,GACDF,GACCQ,EAAKE,OAAS,GAAKF,EAAKG,WAAWC,GAA4B,OAAlBA,EAAMN,WAAqB,EAEzE,OACF,MAAMO,EAAc,KAClBV,EAAME,aAAc,CAAI,EAGpBS,EAAaC,IACbZ,EAAME,aAhCO,EAACU,EAAcd,KACpC,MAAMe,EAASD,EAAMC,OACrB,GAAIA,IACUrB,EAAYqB,GACfC,SAASD,GAAS,OAAO,EAEpC,OAAOf,EAAIiB,OAAON,IAAWA,EAAMN,SAASW,SAASD,IAAQ,EA0BhCG,CAAeJ,EAAOP,KAC7CL,EAAME,aAAc,EACpBH,IAAUa,GACX,EAEGK,EAAaZ,EAAK,GAClBa,EAAM1B,EAAYyB,EAAWd,SACnC,OAAIe,GACFA,EAAIC,iBAAiB,YAAaT,GAAa,GAC/CQ,EAAIC,iBAAiB,UAAWR,GAAW,GAEpC,KACLO,EAAIE,oBAAoB,YAAaV,GAAa,GAClDQ,EAAIE,oBAAoB,UAAWT,GAAW,EAAK,QANvD,CASgB,GACf,CAACd,EAAUE,EAASD,EAAKE,GAAO"}