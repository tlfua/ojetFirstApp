{"version":3,"file":"PRIVATE_useCurrentKey.js","sources":["../../../src/hooks/PRIVATE_useCurrentKey/useCurrentKey.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useCallback } from 'preact/hooks';\nimport { isKeyDefined } from '../../utils/UNSAFE_keys';\nimport { CurrentKeyDetail } from '../../UNSAFE_Collection';\nimport { useUser } from '../UNSAFE_useUser';\n\n/**\n * Hook for handling current key update due to user interaction including keyboard navigation.\n * This can be reuse by all Collection components.\n *\n * @param keyExtractor function to extract the key based on the provided element\n * @param allowShiftKey if set to false, then pressing arrow key while shift key is down will not change the current key\n * @param getVerticalPrevKey function to get the previous key in the vertical direction based on the current key\n * @param getVerticalNextKey function to get the next key in the vertical direction based on the current key\n * @param getHorizontalPrevKey function to get the previous key in the horizontal direction based on the current key\n * @param getHorizontalNextKey function to get the next key based on the current key\n * @param currentKey the current key\n * @param onCurrentChange function to invoke if the current key has changed\n * @param keyComparator an optional function to compare keys, otherwise === is used\n * @returns\n */\nexport function useCurrentKey<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  allowShiftKey: boolean,\n  getVerticalPrevKey?: () => K | null,\n  getVerticalNextKey?: () => K | null,\n  getHorizontalPrevKey?: () => K | null,\n  getHorizontalNextKey?: () => K | null,\n  currentKey?: K,\n  onChange?: (detail: CurrentKeyDetail<K>) => void,\n  keyComparator?: (key1: K, key2: K) => boolean\n) {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  const keyEquals = useCallback(\n    (key1: K, key2: K) => {\n      if (keyComparator) {\n        return keyComparator(key1, key2);\n      }\n      return key1 === key2;\n    },\n    [keyComparator]\n  );\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (onChange && isKeyDefined(currentKey)) {\n        const keyHandlers: Record<string, (() => K | null) | undefined> = {\n          ArrowUp: getVerticalPrevKey,\n          ArrowDown: getVerticalNextKey,\n          ArrowLeft: isRtl ? getHorizontalNextKey : getHorizontalPrevKey,\n          ArrowRight: isRtl ? getHorizontalPrevKey : getHorizontalNextKey\n        };\n\n        if (Object.keys(keyHandlers).includes(event.key) && (allowShiftKey || !event.shiftKey)) {\n          const newKey = keyHandlers[event.key]?.();\n          if (isKeyDefined(newKey) && !keyEquals(currentKey as K, newKey as K)) {\n            onChange({ value: newKey as K });\n          }\n          event.preventDefault();\n        }\n      }\n    },\n    [\n      currentKey,\n      onChange,\n      getVerticalPrevKey,\n      getVerticalNextKey,\n      getHorizontalPrevKey,\n      getHorizontalNextKey,\n      keyEquals\n    ]\n  );\n\n  const onClickCapture = useCallback(\n    (event: MouseEvent) => {\n      if (onChange && !event.shiftKey) {\n        const nextKey = keyExtractor(event.target as HTMLElement);\n        if (isKeyDefined(nextKey) && !keyEquals(currentKey as K, nextKey as K)) {\n          onChange({ value: nextKey as K });\n        }\n      }\n    },\n    [currentKey, keyExtractor, onChange, keyEquals]\n  );\n\n  const currentKeyProps = onChange == null ? {} : { onClickCapture, onKeyDown };\n  return { currentKeyProps };\n}\n"],"names":["keyExtractor","allowShiftKey","getVerticalPrevKey","getVerticalNextKey","getHorizontalPrevKey","getHorizontalNextKey","currentKey","onChange","keyComparator","direction","useUser","isRtl","keyEquals","useCallback","key1","key2","onKeyDown","event","isKeyDefined","keyHandlers","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Object","keys","includes","key","shiftKey","newKey","value","preventDefault","onClickCapture","nextKey","target","currentKeyProps"],"mappings":"4TA4BEA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,UAAEA,GAAcC,EAAAA,UAChBC,EAAsB,QAAdF,EAERG,EAAYC,EAAAA,aAChB,CAACC,EAASC,IACJP,EACKA,EAAcM,EAAMC,GAEtBD,IAASC,GAElB,CAACP,IAGGQ,EAAYH,eACfI,IACC,GAAIV,GAAYW,eAAaZ,GAAa,CACxC,MAAMa,EAA4D,CAChEC,QAASlB,EACTmB,UAAWlB,EACXmB,UAAWX,EAAQN,EAAuBD,EAC1CmB,WAAYZ,EAAQP,EAAuBC,GAG7C,GAAImB,OAAOC,KAAKN,GAAaO,SAAST,EAAMU,OAAS1B,IAAkBgB,EAAMW,UAAW,CACtF,MAAMC,EAASV,EAAYF,EAAMU,SAC7BT,EAAAA,aAAaW,KAAYjB,EAAUN,EAAiBuB,IACtDtB,EAAS,CAAEuB,MAAOD,IAEpBZ,EAAMc,gBACP,CACF,IAEH,CACEzB,EACAC,EACAL,EACAC,EACAC,EACAC,EACAO,IAIEoB,EAAiBnB,eACpBI,IACC,GAAIV,IAAaU,EAAMW,SAAU,CAC/B,MAAMK,EAAUjC,EAAaiB,EAAMiB,QAC/BhB,EAAAA,aAAae,KAAarB,EAAUN,EAAiB2B,IACvD1B,EAAS,CAAEuB,MAAOG,GAErB,IAEH,CAAC3B,EAAYN,EAAcO,EAAUK,IAIvC,MAAO,CAAEuB,gBAD2B,MAAZ5B,EAAmB,CAAE,EAAG,CAAEyB,iBAAgBhB,aAEpE"}