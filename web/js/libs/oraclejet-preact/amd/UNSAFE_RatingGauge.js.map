{"version":3,"file":"UNSAFE_RatingGauge.js","sources":["../../src/UNSAFE_RatingGauge/RatingUtils.ts","../../src/UNSAFE_RatingGauge/RatingStar.tsx","../../src/UNSAFE_RatingGauge/RatingGaugeItem.tsx","../../src/UNSAFE_RatingGauge/RatingGauge.tsx","../../src/UNSAFE_RatingGauge/useEvents.tsx","../../src/UNSAFE_RatingGauge/useTooltipOrDatatip.ts"],"sourcesContent":["import type { Ref } from 'preact/hooks';\n\nexport function getValue(\n  pageX: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<{ width: number; x: number }>,\n  isRtl: boolean\n): number {\n  const dimensions = dimensionsRef.current;\n  if (!dimensions || dimensions.width === 0) {\n    return -1;\n  }\n  const width = pageX - dimensions.x;\n  const val = (max * (isRtl ? dimensions.width - width : width)) / dimensions.width;\n  const numSteps = val / step;\n\n  return numSteps < 0.5 ? 0 : Math.min(max, Math.ceil(numSteps) * step);\n}\n\nexport function getDimensions(element: HTMLElement | null) {\n  if (!element) {\n    return {\n      width: 0,\n      x: 0\n    };\n  }\n\n  const rect = element.getBoundingClientRect();\n  return {\n    width: rect.width,\n    x: rect.x + window.scrollX\n  };\n}\n\n/**\n * Returns The color in rating gauge, if the color enum is supported. undefined otherwise.\n * @param color The color in rating gauge.\n * @returns The color in rating gauge, if the color enum is supported. undefined otherwise.\n */\nexport function getColorEnum(color: string | undefined) {\n  return color === 'neutral' ||\n    color === 'gold' ||\n    color === 'danger' ||\n    color === 'warning' ||\n    color === 'success'\n    ? color\n    : undefined;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { getColorEnum } from './RatingUtils';\nimport { ratingGaugeVars } from './themes/RatingGaugeContract.css';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { RatingGaugeVariantOptions, RatingGaugeStyles } from './themes/RatingGaugeStyles.css';\nimport { assignInlineVars } from '@vanilla-extract/dynamic';\nimport { DvtThresholdsColors } from '../utils/UNSAFE_dvtCommonUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\n\ntype Props = {\n  isSelected: boolean;\n  isDisabled?: boolean;\n  isReadOnly?: boolean;\n  color: 'neutral' | 'gold' | ColorProps['color'] | DvtThresholdsColors;\n};\n\nconst RatingStar = ({ isSelected, isDisabled, isReadOnly, color = 'neutral' }: Props) => {\n  const { forcedColors } = useUser();\n  const isHighContrast = forcedColors === 'active';\n  const needsHighContrastStyle = isHighContrast && isDisabled;\n  const enumColor = getColorEnum(color);\n  const customColors = assignInlineVars({\n    [ratingGaugeVars.colorSelected]: color,\n    [ratingGaugeVars.borderColorSelected]: color,\n    [ratingGaugeVars.colorSelectedReadonly]: color\n  });\n  const {\n    variantClasses,\n    styles: {\n      ratingStarBaseStyle,\n      innerRatingStarColor,\n      outerRatingStarColor,\n      outerDisabledHighContrastBaseStyle,\n      outerDisabledHighContrastSelectedStyle,\n      outerDisabledHighContrastUnselectedStyle\n    }\n  } = useComponentTheme<RatingGaugeVariantOptions, RatingGaugeStyles>(RatingGaugeRedwoodTheme, {\n    color: enumColor,\n    selectionState: isSelected ? 'isSelected' : 'isNotSelected',\n    disabledState: isDisabled ? 'isDisabled' : 'isNotDisabled',\n    readonlyState: isReadOnly ? 'isReadonly' : 'isNotReadonly',\n    highContrastState: isHighContrast ? 'isHighContrast' : 'isNotHighContrast'\n  });\n\n  return (\n    <svg\n      viewBox=\"0 0 36 36\"\n      height=\"100%\"\n      width=\"100%\"\n      style={!enumColor ? customColors : undefined}\n      class={classNames([ratingStarBaseStyle, enumColor ? variantClasses : ''])}>\n      <g>\n        <path\n          class={innerRatingStarColor}\n          d=\"m18 1 5.0061 11.9524 12.9939 1.0344-9.9 8.4215 3.0246 12.5917-11.1246-6.7476-11.12461 6.7476 3.02461-12.5917-9.9-8.4215 12.9939-1.0344z\"\n        />\n        <path\n          class={classNames([\n            outerRatingStarColor,\n            needsHighContrastStyle ? outerDisabledHighContrastBaseStyle : '',\n            needsHighContrastStyle\n              ? isSelected\n                ? outerDisabledHighContrastSelectedStyle\n                : outerDisabledHighContrastUnselectedStyle\n              : ''\n          ])}\n          d=\"m23.0061 12.9524-5.0061-11.9524-5.0061 11.9524-12.9939 1.0344 9.9 8.4215-3.02461 12.5917 11.12461-6.7476 11.1246 6.7476-3.0246-12.5917 9.9-8.4215zm10.5043 1.8394-8.5262 7.2528 2.6077 10.8562-9.5919-5.818-9.59192 5.818 2.60772-10.8562-8.52615-7.2528 11.19115-.891 4.3192-10.31227 4.3192 10.31227z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport { RatingStar };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Fragment } from 'preact';\nimport { RatingStar } from './RatingStar';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { RatingGaugeStyles } from './themes/RatingGaugeStyles.css';\nimport { DvtThresholdsColors } from '../utils/UNSAFE_dvtCommonUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\n\ntype Props = {\n  fillRatio: number;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  color: 'neutral' | 'gold' | ColorProps['color'] | DvtThresholdsColors;\n};\n\nconst RatingGaugeItem = ({ fillRatio, isDisabled, isReadonly, color }: Props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  if (fillRatio === 1 || fillRatio === 0) {\n    return (\n      <RatingStar\n        isSelected={fillRatio === 1}\n        isDisabled={isDisabled}\n        isReadOnly={isReadonly}\n        color={color}\n      />\n    );\n  }\n\n  const {\n    styles: { fractionalStarBaseStyle }\n  } = useComponentTheme<never, RatingGaugeStyles>(RatingGaugeRedwoodTheme);\n\n  // if fillRatio is not 1 or zero, absolutely position selected star above the\n  // unselected star and clip both to form partially selected star.\n\n  return (\n    <Fragment>\n      <div\n        class={fractionalStarBaseStyle}\n        style={{\n          clipPath: `inset(0% ${isRtl ? (1 - fillRatio) * 100 : 0}% 0% ${\n            isRtl ? 0 : fillRatio * 100\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={false}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n      <div\n        class={fractionalStarBaseStyle}\n        style={{\n          clipPath: `inset(0% ${isRtl ? 0 : (1 - fillRatio) * 100}% 0% ${\n            isRtl ? (1 - fillRatio) * 100 : 0\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={true}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport { RatingGaugeItem };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { RatingGaugeItem } from './RatingGaugeItem';\nimport { useEvents } from './useEvents';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { getDimensions } from './RatingUtils';\nimport { useTooltipOrDatatip } from './useTooltipOrDatatip';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Threshold, CommitDetail, InputDetail } from '../utils/UNSAFE_meterTypes';\nimport {\n  getThresholdColorFromValue,\n  getMeterAriaProps,\n  validateRange\n} from '../utils/PRIVATE_meterUtils';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { RatingGaugeStyles, RatingGaugeVariantOptions } from './themes/RatingGaugeStyles.css';\nimport { RatingGaugeRedwoodTheme } from './themes/redwood/RatingGaugeTheme';\n\n/**\n * Props for the RatingGauge\n */\ntype Props = {\n  /**\n   * Defines whether the rating gauge should be read only. User interaction is prevented if set to true.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Defines whether the rating gauge is disabled or not. User interaction is prevented and the rating gauge is hidden from screen readers if set to true.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * The size of the individual rating gauge items. The default value of this property is theme driven.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * The color of the individual rating gauge items.\n   */\n  color?: 'neutral' | 'gold';\n\n  /**\n   * The value of the rating gauge.\n   */\n  value?: number;\n\n  /**\n   * Specifies the increment by which values can be changed.\n   */\n  step?: number;\n\n  /**\n   * Integer value specifying the maximum value of the rating gauge, which determines the number of items that are displayed\n   */\n  max?: number;\n\n  /**\n   * The callback called in response to hover or focus interactions with the rating gauge items.\n   */\n  onInput?: (detail: InputDetail) => void;\n\n  /**\n   * The callback called when value of rating gauge changes on blur or Enter or click.\n   */\n  onCommit?: (detail: CommitDetail) => void;\n\n  /**\n   * The rating gauge tooltip. Tooltip is only used for read only rating gauges. If aria-label is not specified, tooltip will be used as the aria-label.\n   */\n  tooltip?: string;\n\n  /**\n   * The rating gauge datatip string. Datatip is used for interactive rating gauges.\n   */\n  datatip?: string;\n\n  /**\n   * A label to be used for accessibility purposes. Default label will be used if not provided. This will be used for the aria-label of the DOM element.\n   */\n  'aria-label'?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that label the rating gauge. This will be used for the aria-labelledby of the DOM element.\n   */\n  'aria-labelledby'?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that describe the rating gauge. This will be used for the aria-describedby of the DOM element.\n   */\n  'aria-describedby'?: string;\n\n  /**\n   * An array of Threshold objects.\n   * Applications are required to include information about thresholds for screen readers to make their component accessible by using aria-describedby, aria-labelledby or aria-label.\n   */\n  thresholds?: Threshold[];\n};\n\n/**\n * A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.\n */\nexport function RatingGauge({\n  max = 5,\n  value = 0,\n  size,\n  color = 'neutral',\n  step = 1,\n  isReadonly,\n  isDisabled,\n  ...props\n}: Props) {\n  validateRange(0, max, value, step);\n  const rootRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n\n  const isInteractive = !isReadonly && !isDisabled;\n\n  // Since the dimension are compute lazily after render, store width and x in ref\n  // This is used to identify hovered and clicked star.\n  // width of the rating gauge depends on size and max so passing them as dependencies for useEffect\n  useEffect(() => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  }, [size, max]);\n\n  const eventProps = useEvents(\n    max,\n    step,\n    value,\n    rootRef,\n    dimensionsRef,\n    isInteractive,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { tooltipContent, tooltipProps } = useTooltipOrDatatip({\n    max,\n    value,\n    isReadonly,\n    isDisabled,\n    tooltip: props.tooltip,\n    datatip: props.datatip,\n    thresholds: props.thresholds,\n    width: dimensionsRef.current.width,\n    ariaDescribedBy: props['aria-describedby']\n  });\n\n  const ariaProps = getMeterAriaProps(\n    value,\n    0,\n    max,\n    props['aria-label'],\n    props['aria-labelledby'],\n    props.thresholds,\n    isDisabled,\n    isReadonly,\n    props.tooltip\n  );\n\n  const mergedEventProps = mergeProps(eventProps, tooltipProps);\n\n  const itemColor = getThresholdColorFromValue(value, color, props.thresholds);\n\n  const { isTabbable } = useTabbableMode();\n  const {\n    classes,\n    styles: { baseStyle, interactiveStyle, itemStyle, sizeStyle }\n  } = useComponentTheme<RatingGaugeVariantOptions, RatingGaugeStyles>(RatingGaugeRedwoodTheme, {\n    size\n  });\n\n  return (\n    <Fragment>\n      <div\n        {...ariaProps}\n        ref={rootRef}\n        class={classNames([classes, baseStyle, isInteractive ? interactiveStyle : undefined])}\n        tabIndex={isTabbable && !isDisabled ? 0 : -1}\n        {...mergedEventProps}>\n        {[...Array(max)].map((_, index: number) => {\n          const fillRatio = Math.min(Math.max(0, value - index), 1);\n          return (\n            <div className={classNames([sizeStyle, itemStyle])}>\n              <RatingGaugeItem\n                fillRatio={fillRatio}\n                isDisabled={isDisabled}\n                isReadonly={isReadonly}\n                color={itemColor}\n              />\n            </div>\n          );\n        })}\n      </div>\n      {tooltipContent}\n    </Fragment>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport type { Ref, MutableRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { getValue, getDimensions } from './RatingUtils';\nimport { CommitDetail, InputDetail } from '../utils/UNSAFE_meterTypes/meterTypes';\nimport { useKeyboardEvents } from '../hooks/PRIVATE_useDvtMeterEvents';\n\nexport const useEvents = (\n  max: number,\n  step: number,\n  value: number,\n  rootRef: Ref<HTMLElement>,\n  dimensionsRef: MutableRef<{ width: number; x: number }>,\n  isInteractive: boolean,\n  onCommit?: (detail: CommitDetail) => void,\n  onInput?: (detail: InputDetail) => void\n) => {\n  const currentInputRef = useRef<number>();\n  const { direction } = useUser();\n\n  if (!isInteractive) {\n    return {};\n  }\n\n  const isRtl = direction === 'rtl';\n\n  const handleInput = (inputValue: number | undefined) => {\n    onInput?.({ value: inputValue } as InputDetail);\n    currentInputRef.current = inputValue;\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1) {\n      onCommit?.({ value: val } as CommitDetail);\n    }\n  };\n\n  // When the document or rating gauge parent scrolls, we need to update the dimensionRef.current.x.\n  // Instead of updating it for every scroll event, recalculate the dims the first time mouse enters\n  // so we get fresh dimension value.\n  const pointerEnterHandler = () => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1 && val != currentInputRef.current) {\n      handleInput(val);\n    }\n  };\n\n  const blurHandler = () => {\n    onCommit?.({ value: value } as CommitDetail);\n  };\n\n  const pointerLeaveHandler = () => {\n    handleInput(undefined);\n  };\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    0,\n    max,\n    step,\n    currentInputRef,\n    onCommit,\n    onInput\n  );\n\n  return {\n    onPointerUp: pointerUpHandler,\n    onBlur: blurHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyboardEventsProps.onKeyUp,\n    onKeyDown: keyboardEventsProps.onKeyDown,\n    onPointerLeave: pointerLeaveHandler,\n    onPointerEnter: pointerEnterHandler\n  };\n};\n","import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { findThreshold } from '../utils/PRIVATE_meterUtils';\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  max: number;\n  value: number;\n  isReadonly?: boolean;\n  isDisabled?: boolean;\n  tooltip?: string;\n  datatip?: string;\n  thresholds?: Threshold[];\n  ariaDescribedBy?: string;\n  width: number;\n};\n\nexport function useTooltipOrDatatip({\n  max,\n  value,\n  isReadonly,\n  isDisabled,\n  tooltip,\n  datatip,\n  thresholds,\n  ariaDescribedBy,\n  width\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipProps: Record<string, any>;\n} {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const tooltipVariant = isReadonly && !isDisabled ? 'tooltip' : 'datatip';\n  let disabled =\n    isDisabled ||\n    !((tooltipVariant === 'tooltip' && tooltip) || (tooltipVariant === 'datatip' && datatip));\n  const datatipIndex = Math.max(1, Math.ceil(value));\n  const offset =\n    tooltipVariant === 'tooltip' ? 0 : ((datatipIndex - Math.ceil(max / 2)) * width) / max;\n  let text = tooltipVariant === 'tooltip' ? tooltip : datatip;\n  if (!text && thresholds && !isDisabled) {\n    text = findThreshold(value, thresholds)?.accessibleLabel;\n    disabled = false;\n  }\n\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text,\n    isOpen,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    },\n    position: 'bottom',\n    offset: {\n      mainAxis: 8, // redwood tooltip design spec\n      crossAxis: offset\n    },\n    isDisabled: disabled,\n    onToggle: ({ value }) => setIsOpen(value),\n    variant: tooltipVariant\n  });\n\n  tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]\n    .filter(Boolean)\n    .join(' ');\n\n  return {\n    tooltipContent,\n    tooltipProps\n  };\n}\n"],"names":["getValue","pageX","max","step","dimensionsRef","isRtl","dimensions","current","width","x","numSteps","Math","min","ceil","getDimensions","element","rect","getBoundingClientRect","window","scrollX","RatingStar","isSelected","isDisabled","isReadOnly","color","forcedColors","useUser","isHighContrast","needsHighContrastStyle","enumColor","undefined","getColorEnum","customColors","assignInlineVars","ratingGaugeVars","colorSelected","borderColorSelected","colorSelectedReadonly","variantClasses","styles","ratingStarBaseStyle","innerRatingStarColor","outerRatingStarColor","outerDisabledHighContrastBaseStyle","outerDisabledHighContrastSelectedStyle","outerDisabledHighContrastUnselectedStyle","useComponentTheme","RatingGaugeRedwoodTheme","selectionState","disabledState","readonlyState","highContrastState","_jsx","viewBox","height","style","class","classNames","children","_jsxs","jsx","d","RatingGaugeItem","fillRatio","isReadonly","direction","fractionalStarBaseStyle","jsxs","Fragment","clipPath","value","size","props","validateRange","rootRef","useRef","isInteractive","useEffect","eventProps","onCommit","onInput","currentInputRef","handleInput","inputValue","keyboardEventsProps","useKeyboardEvents","onPointerUp","event","val","onBlur","onPointerMove","onKeyUp","onKeyDown","onPointerLeave","onPointerEnter","useEvents","tooltipContent","tooltipProps","tooltip","datatip","thresholds","ariaDescribedBy","isOpen","setIsOpen","useState","tooltipVariant","disabled","datatipIndex","offset","text","findThreshold","accessibleLabel","useTooltipControlled","anchor","y","position","mainAxis","crossAxis","onToggle","variant","filter","Boolean","join","useTooltipOrDatatip","ariaProps","getMeterAriaProps","mergedEventProps","mergeProps","itemColor","getThresholdColorFromValue","isTabbable","useTabbableMode","classes","baseStyle","interactiveStyle","itemStyle","sizeStyle","ref","tabIndex","Array","map","_","index","className"],"mappings":"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"}