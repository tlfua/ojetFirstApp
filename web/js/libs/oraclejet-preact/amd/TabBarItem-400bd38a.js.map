{"version":3,"file":"TabBarItem-400bd38a.js","sources":["../../src/UNSAFE_TabBar/TabBarContext.ts","../../src/UNSAFE_TabBar/TabBar.tsx","../../src/UNSAFE_TabBar/TabBarItem.tsx","../../src/UNSAFE_TabBar/useTabBarContext.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { TabBarProps } from './TabBar';\nimport { MutableRefObject } from 'preact/compat';\n\ntype TabBarContextProps<K extends string | number> = Pick<\n  TabBarProps<K>,\n  'layout' | 'selection' | 'onSelectionChange'\n> & {\n  currentKey?: K;\n  showFocusRing: boolean;\n  isActiveElement: () => boolean;\n  isFirstItemRendered?: MutableRefObject<boolean>;\n};\n/**\n * Context used to pass TabBar information without having to pass it to TabBar children props.\n * We want to communicate information down to any interested TabBar item children.\n */\n\nconst TabBarContext = createContext<TabBarContextProps<string | number>>(null!);\n\nexport { TabBarContext };\n","import { ComponentChildren } from 'preact';\nimport { useState, useRef, useCallback, useEffect } from 'preact/hooks';\nimport { keyExtractor, getPrevNextKey } from '../utils/PRIVATE_collectionUtils';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useCollectionFocusRing } from '../hooks/PRIVATE_useCollectionFocusRing';\nimport { useCurrentKey } from '../hooks/PRIVATE_useCurrentKey';\nimport { Flex } from '../UNSAFE_Flex';\nimport { TabBarContext } from './TabBarContext';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { styles } from './themes/TabBarStyles.css';\n\n/**\n * type for payload of current key change event handler\n */\nexport type CurrentKeyDetail<K> = {\n  value: K;\n};\n\n/**\n * type for payload of selection change event handler\n */\ntype SelectionDetail<K> = {\n  value: K;\n};\n\nexport type TabBarProps<K extends string | number> = {\n  /**\n   * A set of TabBarItem(s) that TabBar will hold\n   */\n  children: ComponentChildren;\n  /**\n   * Whether to stretch the tab bar items to occupy available space or to condense items\n   */\n  layout?: 'stretch' | 'condense';\n  /**\n   * Key of the selected item.\n   */\n  selection?: K;\n  /**\n   * Callback function to handle when selection has changed\n   */\n  onSelectionChange?: <K extends string | number>(detail: SelectionDetail<K>) => void;\n};\n\nexport function TabBar<K extends string | number>({\n  children,\n  layout = 'stretch',\n  selection,\n  onSelectionChange\n}: TabBarProps<K>) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const isFirstItemRendered = useRef<boolean>(false);\n  const [currentKey, setCurrentKey] = useState<K | undefined>(selection);\n  const [showFocusRing, focusRingProps] = useCollectionFocusRing(\n    (elem: Element | null) => {\n      return !!rootRef.current?.contains(elem);\n    },\n    ['ArrowRight', 'ArrowLeft']\n  );\n\n  const ITEM_SELECTOR = '.' + 'oj-c-tabbar-item';\n\n  const { currentKeyProps } = useCurrentKey(\n    (element) => keyExtractor(element, ITEM_SELECTOR),\n    false,\n    undefined,\n    undefined,\n    getPrevNextKey(rootRef.current, currentKey, true, ITEM_SELECTOR),\n    getPrevNextKey(rootRef.current, currentKey, false, ITEM_SELECTOR),\n    currentKey,\n    (detail: CurrentKeyDetail<K | undefined>) => setCurrentKey(detail.value)\n  );\n\n  //If selection is undefined the currentKey would be undefined in that case keyboard\n  //navigation using useCurrentKey is not possible as it expects a valid currentKey\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (currentKey === undefined) {\n        if (event.key === 'ArrowRight' || (!isRtl && event.key === 'ArrowLeft')) {\n          const targetKey = (event.target as HTMLDivElement).getAttribute('data-oj-key');\n          if (targetKey) {\n            const nextKey = getPrevNextKey(rootRef.current, targetKey, false, ITEM_SELECTOR)();\n            if (nextKey !== null) {\n              setCurrentKey(nextKey as K);\n            }\n          }\n        }\n      }\n    },\n    [currentKey]\n  );\n\n  const onKeyDownProps = { onKeyDown };\n\n  useEffect(() => {\n    isFirstItemRendered.current = false;\n  });\n\n  const isActiveElement = useCallback(() => {\n    return !!rootRef?.current?.contains(document.activeElement);\n  }, []);\n\n  const tabBarClass = classNames([styles.tabBarBase]);\n  return (\n    <TabBarContext.Provider\n      value={{\n        selection,\n        onSelectionChange,\n        currentKey,\n        showFocusRing,\n        layout,\n        isActiveElement,\n        isFirstItemRendered\n      }}>\n      <div\n        class={tabBarClass}\n        role={'tablist'}\n        ref={rootRef}\n        tabIndex={children ? -1 : 0}\n        aria-multiselectable={false}\n        {...mergeProps(onKeyDownProps, currentKeyProps, focusRingProps)}>\n        <Flex direction=\"row\" gap=\"8x\">\n          {children}\n        </Flex>\n      </div>\n    </TabBarContext.Provider>\n  );\n}\n","import { ComponentChildren } from 'preact';\nimport { useRef, useLayoutEffect } from 'preact/hooks';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { Text } from '../UNSAFE_Text';\nimport { Flex } from '../UNSAFE_Flex';\nimport { useTabBarContext } from './useTabBarContext';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { flexitemInterpolations } from '../utils/UNSAFE_interpolations/flexitem';\nimport type { FlexitemProps } from '../utils/UNSAFE_interpolations/flexitem';\nimport { useComponentTheme } from '../hooks/UNSAFE_useComponentTheme';\nimport { TabBarItemVariantOptions } from './themes/TabBarItemStyles.css';\nimport { TabBarItemRedwoodTheme } from './themes/redwood/TabBarItemTheme';\n\nexport type TabBarItemProps<K extends string | number> = {\n  /**\n   * Key of the TabBarItem\n   */\n  itemKey: K;\n  /**\n   * Label of the TabBarItem\n   */\n  label?: string;\n  /**\n   * The content to be rendered before the tab label\n   */\n  startContent?: ComponentChildren;\n  /**\n   * The content to be rendered after the tab label\n   */\n  endContent?: ComponentChildren;\n};\n\nconst ITEM_STYLE_CLASS = 'oj-c-tabbar-item';\n\nexport function TabBarItem<K extends string | number>({\n  itemKey,\n  label,\n  startContent,\n  endContent\n}: TabBarItemProps<K>) {\n  const tabBarItemRef = useRef<HTMLDivElement | null>(null);\n  const {\n    onSelectionChange,\n    selection,\n    currentKey,\n    showFocusRing,\n    layout,\n    isActiveElement,\n    isFirstItemRendered\n  } = useTabBarContext();\n\n  const isCurrent = currentKey === itemKey;\n  let tabIndex = isCurrent ? 0 : -1;\n  //If currentKey is undefined, in order to tab to a TabBarItem, the first TabBarItem should set its tabindex to 0\n  if (currentKey === undefined && isFirstItemRendered && !isFirstItemRendered.current) {\n    tabIndex = 0;\n    isFirstItemRendered.current = true;\n  }\n\n  //Selection\n  const handlePress = () => {\n    onSelectionChange?.({ value: itemKey as K });\n  };\n\n  const { pressProps } = usePress(handlePress);\n\n  const isSelected = selection === itemKey;\n\n  useLayoutEffect(() => {\n    if (isActiveElement?.() && isCurrent) {\n      tabBarItemRef?.current?.focus();\n    }\n  }, [isCurrent, isActiveElement]);\n\n  const {\n    classes,\n    styles: { tabBarItemStartContent, tabBarItemEndContent }\n  } = useComponentTheme<TabBarItemVariantOptions>(TabBarItemRedwoodTheme, {\n    selection: isSelected ? 'isSelected' : 'notSelected',\n    current: isCurrent ? 'isCurrent' : 'notCurrent',\n    focusRing: showFocusRing ? 'showFocusRing' : 'noFocusRing'\n  });\n\n  const tabBarItem = classNames([classes, ITEM_STYLE_CLASS]);\n\n  const tabBarItemStartContentClasses = classNames([tabBarItemStartContent]);\n  const tabBarItemEndContentClasses = classNames([tabBarItemEndContent]);\n\n  //instead of specifying flex: '1 0 auto' in cssProps var\n  const styleInterpolations = mergeInterpolations<FlexitemProps>([\n    ...Object.values(flexitemInterpolations)\n  ]);\n  const flexDimensions = styleInterpolations({\n    flex: layout === 'stretch' ? '1 0 auto' : '0 0 auto'\n  });\n\n  return (\n    <div\n      data-oj-key={itemKey}\n      class={tabBarItem}\n      role=\"tab\"\n      ref={tabBarItemRef}\n      {...pressProps}\n      aria-selected={isSelected}\n      tabIndex={tabIndex}\n      style={flexDimensions}>\n      <Flex\n        height=\"11x\"\n        minWidth=\"14x\"\n        direction=\"row\"\n        gap=\"2x\"\n        align=\"center\"\n        justify=\"center\"\n        flex=\"1 1 auto\">\n        {startContent && <span class={tabBarItemStartContentClasses}>{startContent}</span>}\n        {label && (\n          <Text size=\"md\" weight=\"semiBold\">\n            {label}\n          </Text>\n        )}\n        {endContent && <span class={tabBarItemEndContentClasses}>{endContent}</span>}\n      </Flex>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useContext } from 'preact/hooks';\nimport { TabBarContext } from './TabBarContext';\n\n/**\n * Utility hook for consuming the TabBarContext\n *\n * @returns The value of TabBarContext provider\n */\nfunction useTabBarContext() {\n  return useContext(TabBarContext);\n}\n\nexport { useTabBarContext };\n"],"names":["TabBarContext","createContext","children","layout","selection","onSelectionChange","rootRef","useRef","isFirstItemRendered","currentKey","setCurrentKey","useState","showFocusRing","focusRingProps","useCollectionFocusRing","elem","current","contains","ITEM_SELECTOR","currentKeyProps","useCurrentKey","element","keyExtractor","undefined","getPrevNextKey","detail","value","direction","useUser","isRtl","onKeyDownProps","onKeyDown","useCallback","event","key","targetKey","target","getAttribute","nextKey","useEffect","isActiveElement","document","activeElement","tabBarClass","classNames","styles","tabBarBase","_jsx","Provider","class","role","ref","tabIndex","mergeProps","Flex","gap","itemKey","label","startContent","endContent","tabBarItemRef","useContext","isCurrent","pressProps","usePress","isSelected","useLayoutEffect","focus","classes","tabBarItemStartContent","tabBarItemEndContent","useComponentTheme","TabBarItemRedwoodTheme","focusRing","tabBarItem","tabBarItemStartContentClasses","tabBarItemEndContentClasses","flexDimensions","mergeInterpolations","Object","values","flexitemInterpolations","styleInterpolations","flex","style","_jsxs","height","minWidth","align","justify","jsx","Text","size","weight"],"mappings":"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"}