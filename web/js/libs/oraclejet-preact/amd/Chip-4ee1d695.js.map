{"version":3,"file":"Chip-4ee1d695.js","sources":["../../src/UNSAFE_Chip/Chip.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { useActionable } from '../hooks/UNSAFE_useActionable';\nimport { useCallback } from 'preact/hooks';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { multiVariantStyles } from './themes/ChipStyles.css';\nimport { useInteractionStyle } from '../hooks/UNSAFE_useInteractionStyle';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\n\ntype SelectedChangeDetail = { previousValue?: boolean; value?: boolean };\n\ntype Props = {\n  /**\n   * Specifies if the chip component is selected.\n   */\n  isSelected?: boolean;\n  /**\n   * Disables the component.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies some screen reader text.\n   */\n  'aria-label'?: string;\n  children: string;\n  /**\n   * Triggered when a chip is clickable, whether by keyboard, mouse, or touch events.\n   */\n  onToggle?: (detail: SelectedChangeDetail) => void;\n  //\n};\n\nexport function Chip({\n  isSelected,\n  isDisabled,\n  'aria-label': accessibleLabel,\n  children,\n  onToggle\n}: Props) {\n  const handleAction = useCallback(() => {\n    onToggle?.({ previousValue: isSelected, value: !isSelected });\n  }, [isSelected, onToggle]);\n  const { actionableProps } = useActionable(handleAction);\n  const { interactionProps, applyActiveStyle, applyHoverStyle, applyPseudoHoverStyle } =\n    useInteractionStyle();\n\n  const mergedProps = mergeProps(actionableProps, interactionProps);\n\n  const classes = multiVariantStyles({\n    disabled: isDisabled ? 'isDisabled' : 'notDisabled',\n    hover: applyHoverStyle && !isDisabled && !isSelected ? 'isHover' : 'notHover',\n    pseudoHover:\n      applyPseudoHoverStyle && !isDisabled && !isSelected ? 'isPseudoHover' : 'notPseudoHover',\n    active: isSelected || applyActiveStyle ? 'isActive' : 'notActive'\n  });\n\n  const { isTabbable } = useTabbableMode();\n\n  return isDisabled ? (\n    <div class={classes}>{children}</div>\n  ) : (\n    <div\n      {...mergedProps}\n      class={classes}\n      tabIndex={isTabbable ? 0 : -1}\n      aria-label={accessibleLabel}\n      role=\"switch\"\n      aria-checked={isSelected ? 'true' : 'false'}>\n      {children}\n    </div>\n  );\n}\n"],"names":["isSelected","isDisabled","accessibleLabel","children","onToggle","handleAction","useCallback","previousValue","value","actionableProps","useActionable","interactionProps","applyActiveStyle","applyHoverStyle","applyPseudoHoverStyle","useInteractionStyle","mergedProps","mergeProps","classes","multiVariantStyles","disabled","hover","pseudoHover","active","isTabbable","useTabbableMode","_jsx","class","jsx","tabIndex","role"],"mappings":"6QAqCgB,UAAKA,WACnBA,EAAUC,WACVA,EACA,aAAcC,EAAeC,SAC7BA,EAAQC,SACRA,IAEA,MAAMC,EAAeC,EAAAA,aAAY,KAC/BF,IAAW,CAAEG,cAAeP,EAAYQ,OAAQR,GAAa,GAC5D,CAACA,EAAYI,KACVK,gBAAEA,GAAoBC,EAAaA,cAACL,IACpCM,iBAAEA,EAAgBC,iBAAEA,EAAgBC,gBAAEA,EAAeC,sBAAEA,GAC3DC,EAAAA,sBAEIC,EAAcC,EAAAA,WAAWR,EAAiBE,GAE1CO,EAAUC,EAAAA,mBAAmB,CACjCC,SAAUnB,EAAa,aAAe,cACtCoB,OAAOR,GAAoBZ,GAAeD,EAAyB,WAAZ,UACvDsB,aACER,GAA0Bb,GAAeD,EAA+B,iBAAlB,gBACxDuB,OAAQvB,GAAcY,EAAmB,WAAa,eAGlDY,WAAEA,GAAeC,EAAAA,kBAEvB,OAAOxB,EACLyB,EAAAA,IAAK,MAAA,CAAAC,MAAOT,EAAUf,SAAAA,IAEtBuB,EAAAE,IAAA,MAAA,IACMZ,EACJW,MAAOT,EACPW,SAAUL,EAAa,GAAK,EAAC,aACjBtB,EACZ4B,KAAK,SAAQ,eACC9B,EAAa,OAAS,QACnCG,SAAAA,GAGP"}