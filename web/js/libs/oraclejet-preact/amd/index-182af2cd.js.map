{"version":3,"file":"index-182af2cd.js","sources":["../../src/UNSAFE_Environment/EnvironmentContext.tsx","../../src/UNSAFE_Layer/LayerContext.ts","../../src/UNSAFE_Layer/LayerHost.tsx","../../src/UNSAFE_Layer/LayerManager.tsx","../../src/UNSAFE_Environment/EnvironmentProvider.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { ThemeModifiers, Theme } from '../UNSAFE_Theme';\nimport { Redwood } from '../Common';\n\n/**\n * Defines user specific environment\n */\ntype User = {\n  locale: string;\n  direction: 'rtl' | 'ltr';\n  forcedColors: 'none' | 'active';\n};\n\n/**\n * Defines translation bundle type.\n */\nexport type TranslationBundle = Record<string, (...args: any[]) => string>;\n\n/**\n * Defines a type for translation property which is an object where\n * - key - string - bundle id\n * - value - object - strings to functions of the type (options?: object)=>string\n *\n * Translation bundle example:\n * const bundle = {\n *  @oracle/oracle-preact-bundle: {\n *      welcome: () => 'bienvenido',\n *      success: () => 'Ã©xito'\n *  }\n * }\n */\ntype Translations = { [bundleId: string]: TranslationBundle };\n\n/**\n * Environment specified at the root level\n */\nexport type RootEnvironment = Partial<ThemeModifiers> & {\n  /**\n   * user - supports user preferences\n   */\n  user?: Partial<User>;\n  /**\n   * theme - supports theme settings\n   */\n  theme?: Theme;\n  /**\n   * translations - supports translation bundles\n   */\n  translations?: Translations;\n};\n\n/**\n * Environment specified at the component level\n */\nexport type Environment = Partial<ThemeModifiers> & {\n  translations?: Translations;\n};\n\nexport type CompleteEnvironmentType = ThemeModifiers & {\n  user: User;\n  theme: Theme;\n  translations?: Translations;\n};\n\n/**\n * Default environment created for the application\n */\nexport const DefaultEnvironment: CompleteEnvironmentType = {\n  user: {\n    locale: document.documentElement.getAttribute('lang') || 'en',\n    direction:\n      document.documentElement.getAttribute('dir')?.toLowerCase() === 'rtl' ? 'rtl' : 'ltr',\n    forcedColors: window.matchMedia?.('(forced-colors: active)')?.matches ? 'active' : 'none'\n  },\n  theme: Redwood,\n  colorScheme: 'light',\n  scale: 'lg',\n  currentBgColor: undefined\n};\n\nexport const EnvironmentContext = createContext<CompleteEnvironmentType>(DefaultEnvironment);\n","import { createContext } from 'preact';\n\nexport type LayerContextProps = {\n  getHost?: () => Element;\n};\n\nexport const LayerContext = createContext<LayerContextProps>({});\n","/**\n * The LayerHost is a div which is created in place\n * where you want to \"house\" a portaled content\n */\nimport { forwardRef } from 'preact/compat';\n\nconst LayerHost = forwardRef<HTMLDivElement>((_props, ref) => {\n  return <div id=\"__oj_layerhost_container\" ref={ref} />;\n});\n\nLayerHost.displayName = 'Forwarded<LayerHost>';\n\nexport default LayerHost;\n","/**\n * The LayerManager wraps your application and creates two adjacent divs for\n * rendering your application and housing Layers.\n */\nimport { ComponentChildren } from 'preact';\nimport { useCallback, useState } from 'preact/compat';\nimport { LayerContext, LayerContextProps } from './LayerContext';\nimport LayerHost from './LayerHost';\n\ntype LayerManagerProps = {\n  children?: ComponentChildren;\n};\n\nexport function LayerManager({ children }: LayerManagerProps) {\n  const [defaultHost, setDefaultHost] = useState<Element>();\n  //const context = useContext(LayerContext);\n  const defaultHostRef = useCallback((el: Element | null) => {\n    // ref callbacks fire after the component has been unnmounted so we do not\n    // want to set state in this use-case\n    if (el !== null) {\n      setDefaultHost(el);\n    }\n  }, []);\n\n  return (\n    <LayerContext.Consumer>\n      {(value: LayerContextProps) => {\n        const defaultHostContext = defaultHost ? { getHost: () => defaultHost } : {};\n        const layerContext = value.getHost ? value : defaultHostContext;\n        return (\n          <LayerContext.Provider value={layerContext}>\n            {children}\n            {!value.getHost && <LayerHost ref={defaultHostRef} />}\n          </LayerContext.Provider>\n        );\n      }}\n    </LayerContext.Consumer>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { useContext, useMemo } from 'preact/hooks';\nimport {\n  EnvironmentContext,\n  Environment,\n  RootEnvironment,\n  DefaultEnvironment,\n  CompleteEnvironmentType\n} from './EnvironmentContext';\nimport { LayerManager } from '../UNSAFE_Layer/LayerManager';\n\n// EnvironmentProvider properties\nexport declare type ProviderProperties<Env extends RootEnvironment | Environment> = {\n  environment?: Env;\n  children?: ComponentChildren;\n};\n\n// Custom merge function\nfunction mergeEnvironment(\n  env1: CompleteEnvironmentType,\n  env2: Partial<RootEnvironment> | undefined\n) {\n  const userValue = Object.assign({}, env1.user, env2?.user);\n  const themeValue = Object.assign({}, env1.theme, env2?.theme);\n\n  // Merge translation values - one level merge\n  const targetTranslations = Object.assign({}, env1.translations);\n  const sourceTranslations = env2?.translations || {};\n  Object.keys(sourceTranslations).forEach((key) => {\n    let newVal = sourceTranslations[key];\n    if (targetTranslations[key]) {\n      // merge is needed\n      newVal = Object.assign({}, targetTranslations[key], newVal);\n    }\n    targetTranslations[key] = newVal;\n  });\n\n  return {\n    user: userValue,\n    theme: themeValue,\n    translations: targetTranslations,\n    colorScheme: env2?.colorScheme ?? env1.colorScheme,\n    scale: env2?.scale ?? env1.scale,\n    currentBgColor: env2?.currentBgColor ?? env1.currentBgColor\n  };\n}\n\n/**\n * The RootEnvironmentProvider component bootstraps essential services and\n * must be placed at the root of any application using components from '@oracle/oraclejet-preact'.\n * Minimally, the application must load the appropriate translation bundle for the user's locale\n * and set it on the RootEnvironmentProvider.\n */\nexport function RootEnvironmentProvider({\n  children,\n  environment\n}: ProviderProperties<RootEnvironment>) {\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(DefaultEnvironment, environment),\n    [environment]\n  );\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>\n      <LayerManager>{children}</LayerManager>\n    </EnvironmentContext.Provider>\n  );\n}\n\n/**\n * The EnvironmentProvider is a component that should be used by the application when there is a need to overwrite\n * environment values for a subtree.\n * The component receives an Environment object that will be merged into the values provided by the nearest ancestor Provider.\n * The new environment will be passed to the component's children.\n * Note that some environment values cannot be overwritten. See the description of the Environment type for the list of values\n * that can be replaced.\n */\nexport function EnvironmentProvider({ children, environment }: ProviderProperties<Environment>) {\n  const consumerEnv = useContext(EnvironmentContext);\n  const mergedEnvironment = useMemo(\n    () => mergeEnvironment(consumerEnv, environment),\n    [consumerEnv, environment]\n  );\n\n  return (\n    <EnvironmentContext.Provider value={mergedEnvironment}>{children}</EnvironmentContext.Provider>\n  );\n}\n"],"names":["DefaultEnvironment","user","locale","document","documentElement","getAttribute","direction","toLowerCase","forcedColors","window","matchMedia","matches","theme","Redwood","colorScheme","scale","currentBgColor","undefined","EnvironmentContext","createContext","LayerContext","LayerHost","forwardRef","_props","ref","_jsx","id","LayerManager","children","defaultHost","setDefaultHost","useState","defaultHostRef","useCallback","el","Consumer","value","defaultHostContext","getHost","layerContext","_jsxs","Provider","jsx","mergeEnvironment","env1","env2","userValue","Object","assign","themeValue","targetTranslations","translations","sourceTranslations","keys","forEach","key","newVal","displayName","environment","consumerEnv","useContext","mergedEnvironment","useMemo"],"mappings":"iKA2Ea,MAAAA,EAA8C,CACzDC,KAAM,CACJC,OAAQC,SAASC,gBAAgBC,aAAa,SAAW,KACzDC,UACkE,QAAhEH,SAASC,gBAAgBC,aAAa,QAAQE,cAA0B,MAAQ,MAClFC,aAAcC,OAAOC,aAAa,4BAA4BC,QAAU,SAAW,QAErFC,MAAOC,EAAOA,QACdC,YAAa,QACbC,MAAO,KACPC,oBAAgBC,GAGLC,EAAqBC,EAAaA,cAA0BnB,GClF5DoB,EAAeD,EAAaA,cAAoB,CAAE,GCAzDE,EAAYC,EAAUA,YAAiB,CAACC,EAAQC,IAC7CC,EAAAA,IAAA,MAAA,CAAKC,GAAG,2BAA2BF,IAAKA,MCMjC,SAAAG,GAAaC,SAAEA,IAC7B,MAAOC,EAAaC,GAAkBC,EAAQA,WAExCC,EAAiBC,eAAaC,IAGvB,OAAPA,GACFJ,EAAeI,EAChB,GACA,IAEH,OACET,EAAAA,IAACL,EAAae,SACX,CAAAP,SAACQ,IACA,MAAMC,EAAqBR,EAAc,CAAES,QAAS,IAAMT,GAAgB,GACpEU,EAAeH,EAAME,QAAUF,EAAQC,EAC7C,OACEG,EAAAA,KAACpB,EAAaqB,SAAS,CAAAL,MAAOG,EAC3BX,SAAA,CAAAA,GACCQ,EAAME,SAAWb,EAAAiB,IAACrB,EAAS,CAACG,IAAKQ,MAErC,GAIV,CCZA,SAASW,EACPC,EACAC,GAEA,MAAMC,EAAYC,OAAOC,OAAO,CAAA,EAAIJ,EAAK3C,KAAM4C,GAAM5C,MAC/CgD,EAAaF,OAAOC,OAAO,CAAA,EAAIJ,EAAKhC,MAAOiC,GAAMjC,OAGjDsC,EAAqBH,OAAOC,OAAO,CAAA,EAAIJ,EAAKO,cAC5CC,EAAqBP,GAAMM,cAAgB,GAUjD,OATAJ,OAAOM,KAAKD,GAAoBE,SAASC,IACvC,IAAIC,EAASJ,EAAmBG,GAC5BL,EAAmBK,KAErBC,EAAST,OAAOC,OAAO,CAAA,EAAIE,EAAmBK,GAAMC,IAEtDN,EAAmBK,GAAOC,CAAM,IAG3B,CACLvD,KAAM6C,EACNlC,MAAOqC,EACPE,aAAcD,EACdpC,YAAa+B,GAAM/B,aAAe8B,EAAK9B,YACvCC,MAAO8B,GAAM9B,OAAS6B,EAAK7B,MAC3BC,eAAgB6B,GAAM7B,gBAAkB4B,EAAK5B,eAEjD,CF3CAK,EAAUoC,YAAc,qGE0EY7B,SAAEA,EAAQ8B,YAAEA,IAC9C,MAAMC,EAAcC,aAAW1C,GACzB2C,EAAoBC,WACxB,IAAMnB,EAAiBgB,EAAaD,IACpC,CAACC,EAAaD,IAGhB,OACEjC,EAAAiB,IAACxB,EAAmBuB,SAAQ,CAACL,MAAOyB,EAAiBjC,SAAGA,GAE5D,wEAjCwCA,SACtCA,EAAQ8B,YACRA,IAEA,MAAMG,EAAoBC,EAAOA,SAC/B,IAAMnB,EAAiB3C,EAAoB0D,IAC3C,CAACA,IAEH,OACEjC,EAACiB,IAAAxB,EAAmBuB,UAASL,MAAOyB,EAAiBjC,SACnDH,MAACE,EAAY,CAAAC,SAAEA,KAGrB"}